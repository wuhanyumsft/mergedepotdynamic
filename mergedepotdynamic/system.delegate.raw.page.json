{"content":"    \r\n    <h1 id=\"System_Delegate\">\r\n      <span class=\"lang-csharp\">Delegate</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Delegate</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Delegate class is the base class for delegate types. However, only the system and compilers can derive explicitly from the Delegate class or from the <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a> class. It is also not permissible to derive a new type from a delegate type. The Delegate class is not considered a delegate type; it is a class used to derive delegate types.  </p>\n<p> Most languages implement a <code>delegate</code> keyword, and compilers for those languages are able to derive from the <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a> class; therefore, users should use the <code>delegate</code> keyword provided by the language.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The common language runtime provides an <code>Invoke</code> method for each delegate type, with the same signature as the delegate. You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically. The <code>Invoke</code> method is useful in <a href=\"../Topic/Reflection%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">reflection</a> when you want to find the signature of the delegate type.  </p>\n</div>\n<p> The common language runtime provides each delegate type with <code>BeginInvoke</code> and <code>EndInvoke</code> methods, to enable asynchronous invocation of the delegate. For more information about these methods, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<p> The declaration of a delegate type establishes a contract that specifies the signature of one or more methods. A delegate is an instance of a delegate type that has references to:  </p>\n<ul>\n<li><p>An instance method of a type and a target object assignable to that type.  </p>\n</li>\n<li><p>An instance method of a type, with the hidden <code>this</code> parameter exposed in the formal parameter list. The delegate is said to be an open instance delegate.  </p>\n</li>\n<li><p>A static method.  </p>\n</li>\n<li><p>A static method and a target object assignable to the first parameter of the method. The delegate is said to be closed over its first argument.  </p>\n<p>For more information on delegate binding, see the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,MethodInfo,Boolean)</a> method overload.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type. Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.  </p>\n</div>\n<p> When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method&#39;s entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method. When a delegate represents an open instance method, it stores a reference to the method&#39;s entry point. The delegate signature must include the hidden <code>this</code> parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.  </p>\n<p> When a delegate represents a static method, the delegate stores a reference to the method&#39;s entry point. When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method&#39;s entry point and a reference to a target object assignable to the type of the method&#39;s first argument. When the delegate is invoked, the first argument of the static method receives the target object.  </p>\n<p> The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate. An invocation list can contain duplicate methods. During an invocation, methods are invoked in the order in which they appear in the invocation list. A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list. Delegates are immutable; once created, the invocation list of a delegate does not change.  </p>\n<p> Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.  </p>\n<p> Combining operations, such as <a class=\"xref\" href=\"system.delegate#System_Delegate_Combine_\" data-linktype=\"relative-path\">Combine</a> and <a class=\"xref\" href=\"system.delegate#System_Delegate_Remove_\" data-linktype=\"relative-path\">Remove</a>, do not alter existing delegates. Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or <code>null</code>. A combining operation returns <code>null</code> when the result of the operation is a delegate that does not reference at least one method. A combining operation returns an unchanged delegate when the requested operation has no effect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Managed languages use the <a class=\"xref\" href=\"system.delegate#System_Delegate_Combine_\" data-linktype=\"relative-path\">Combine</a> and <a class=\"xref\" href=\"system.delegate#System_Delegate_Remove_\" data-linktype=\"relative-path\">Remove</a> methods to implement delegate operations. Examples include the <code>AddHandler</code> and <code>RemoveHandler</code> statements in Visual Basic and the += and -= operators on delegate types in C#.  </p>\n</div>\n<p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, generic delegate types can have variant type parameters. Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type. This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in <a href=\"../Topic/Covariance%20and%20Contravariance%20in%20Generics.md\" data-linktype=\"relative-path\">Covariance and Contravariance</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named <code>Derived</code> is derived from a class named <code>Base</code>. A delegate of type <code>Action&lt;Base&gt;</code> (<code>Action(Of Base)</code> in Visual Basic) can be assigned to a variable of type <code>Action&lt;Derived&gt;</code>, but the two delegates cannot be combined because the types do not match exactly.  </p>\n</div>\n<p> If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked. Catching the exception in the caller does not alter this behavior.  </p>\n<p> When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list. When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter&#39;s value.  </p>\n<p> The closest equivalent of a delegate in C or C++ is a function pointer. A delegate can represent a static method or an instance method. When the delegate represents an instance method, the delegate stores not only a reference to the method&#39;s entry point, but also a reference to the class instance. Unlike function pointers, delegates are object oriented and type safe.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate__ctor_System_Object_System_String_\" data-linktype=\"self-bookmark\">Delegate(Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a delegate that invokes the specified instance method on the specified class instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate__ctor_System_Type_System_String_\" data-linktype=\"self-bookmark\">Delegate(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a delegate that invokes the specified static method from the specified class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Method\" data-linktype=\"self-bookmark\">Method</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method represented by the delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Target\" data-linktype=\"self-bookmark\">Target</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the class instance on which the current delegate invokes the instance method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Combine_System_Delegate___\" data-linktype=\"self-bookmark\">Combine(Delegate[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the invocation lists of an array of delegates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Combine_System_Delegate_System_Delegate_\" data-linktype=\"self-bookmark\">Combine(Delegate,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the invocation lists of two delegates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CombineImpl_System_Delegate_\" data-linktype=\"self-bookmark\">CombineImpl(Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type to represent the specified static method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,MethodInfo,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object,MethodInfo,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Type,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object,String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Type,String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_DynamicInvoke_System_Object___\" data-linktype=\"self-bookmark\">DynamicInvoke(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Dynamically invokes (late-bound) the method represented by the current delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_DynamicInvokeImpl_System_Object___\" data-linktype=\"self-bookmark\">DynamicInvokeImpl(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Dynamically invokes (late-bound) the method represented by the current delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for the delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_GetInvocationList\" data-linktype=\"self-bookmark\">GetInvocationList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the invocation list of the delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_GetMethodImpl\" data-linktype=\"self-bookmark\">GetMethodImpl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the static method represented by the current delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_Remove_System_Delegate_System_Delegate_\" data-linktype=\"self-bookmark\">Remove(Delegate,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_RemoveAll_System_Delegate_System_Delegate_\" data-linktype=\"self-bookmark\">RemoveAll(Delegate,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_RemoveImpl_System_Delegate_\" data-linktype=\"self-bookmark\">RemoveImpl(Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_op_Equality_System_Delegate_System_Delegate_\" data-linktype=\"self-bookmark\">op_Equality(Delegate,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified delegates are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Delegate_op_Inequality_System_Delegate_System_Delegate_\" data-linktype=\"self-bookmark\">op_Inequality(Delegate,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified delegates are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate__ctor_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Delegate__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delegate(Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a delegate that invokes the specified instance method on the specified class instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Delegate (object target, string method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class instance on which the delegate invokes <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the instance method that the delegate represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>There was an error binding to the target method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor cannot be used in application code. To create a delegate by specifying the name of an instance method, use an overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specifies a method name and a target object. For example, the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,String)</a> method overload creates a delegate for an instance method with a specified name.  </p>\n<p> This constructor creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate__ctor_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Delegate__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delegate(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a delegate that invokes the specified static method from the specified class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Delegate (Type target, string method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the class that defines <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the static method that the delegate represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> represents an open generic type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor cannot be used in application code. To create a delegate by specifying the name of a static method, use an overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specifies a method name but does not specify a target object. For example, the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_\" data-linktype=\"relative-path\">CreateDelegate(Type,Type,String)</a> method overload creates a static delegate for a method with a specified name.  </p>\n<p> This constructor creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Method\">\r\n    \r\n            <a id=\"System_Delegate_Method_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Method</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method represented by the delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo Method { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the method represented by the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Target\">\r\n    \r\n            <a id=\"System_Delegate_Target_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Target</div>        \r\n          </div>\r\n    \r\n            <p>Gets the class instance on which the current delegate invokes the instance method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Target { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <code>null</code> if the delegate represents a static method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<p> If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Clone\">\r\n    \r\n            <a id=\"System_Delegate_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The clone has the same <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, target, method, and invocation list as the original delegate.  </p>\n<p> A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Combine_System_Delegate___\">\r\n    \r\n            <a id=\"System_Delegate_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(Delegate[])</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the invocation lists of an array of delegates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate Combine (Delegate[] delegates);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegates</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of delegates to combine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <code>delegates</code> array. Returns <code>null</code> if <code>delegates</code> is <code>null</code>, if <code>delegates</code> contains zero elements, or if every entry in <code>delegates</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Not all the non-null entries in <code>delegates</code> are instances of the same delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>delegates</code> array contains entries that are <code>null</code>, those entries are ignored.  </p>\n<p> The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named <code>Derived</code> is derived from a class named <code>Base</code>. A delegate of type <code>Action&lt;Base&gt;</code> (<code>Action(Of Base)</code> in Visual Basic) can be assigned to a variable of type <code>Action&lt;Derived&gt;</code>, as explained in <a href=\"../Topic/Covariance%20and%20Contravariance%20in%20Generics.md\" data-linktype=\"relative-path\">Covariance and Contravariance</a>, but the two delegates cannot be combined because the types do not match exactly.  </p>\n</div>\n<p> <a class=\"xref\" href=\"system.delegate#System_Delegate_Combine_\" data-linktype=\"relative-path\">Combine</a> is useful for creating event handlers that call multiple methods each time an event occurs.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Combine_System_Delegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(Delegate,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the invocation lists of two delegates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate Combine (Delegate a, Delegate b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate whose invocation list comes first.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate whose invocation list comes last.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new delegate with an invocation list that concatenates the invocation lists of <code>a</code> and <code>b</code> in that order. Returns <code>a</code> if <code>b</code> is <code>null</code>, returns <code>b</code> if <code>a</code> is a null reference, and returns a null reference if both <code>a</code> and <code>b</code> are null references.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Both <code>a</code> and <code>b</code> are not <code>null</code>, and <code>a</code> and <code>b</code> are not instances of the same delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named <code>Derived</code> is derived from a class named <code>Base</code>. A delegate of type <code>Action&lt;Base&gt;</code> (<code>Action(Of Base)</code> in Visual Basic) can be assigned to a variable of type <code>Action&lt;Derived&gt;</code>, as explained in <a href=\"../Topic/Covariance%20and%20Contravariance%20in%20Generics.md\" data-linktype=\"relative-path\">Covariance and Contravariance</a>, but the two delegates cannot be combined because the types do not match exactly.  </p>\n</div>\n<p> Combine is useful for creating event handlers that call multiple methods each time an event occurs.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CombineImpl_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_CombineImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CombineImpl(Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual Delegate CombineImpl (Delegate d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <code>d</code>, or the current multicast (combinable) delegate if <code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.multicastnotsupportedexception\" data-linktype=\"relative-path\">MulticastNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Always thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method applies only if the current delegate is multicast (combinable).  </p>\n<p> The current implementation simply throws a <a class=\"xref\" href=\"system.multicastnotsupportedexception\" data-linktype=\"relative-path\">MulticastNotSupportedException</a>.  </p>\n<p> The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type to represent the specified static method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type to represent the specified static method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a static method, and the .NET Framework version is 1.0 or 1.1.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>RuntimeMethodInfo</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only. In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods. For a detailed explanation, see the more general <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,MethodInfo)</a> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  </p>\n</div>\n<p> This method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo,Boolean)</a> method overload and specifying <code>true</code> for <code>throwOnBindFailure</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.  </p>\n</div>\n<h2 id=\"compatible-parameter-types-and-return-type\">Compatible Parameter Types and Return Type</h2>\n<p> In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly. This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.  </p>\n<p> A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  </p>\n<p> Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  </p>\n<p> For example, a delegate with a parameter of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> and a return type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> can represent a method with a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and a return value of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This section contains two code examples. The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.  </p>\n<p> The second code example demonstrates compatible parameter types and return types.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example demonstrates the two ways a delegate can be created using this overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The example declares a class <code>C</code> with a static method <code>M2</code> and an instance method <code>M1</code>, and two delegate types: <code>D1</code> takes an instance of <code>C</code> and a string, and <code>D2</code> takes a string.  </p>\n<p> A second class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>A delegate of type <code>D1</code>, representing an open instance method, is created for the instance method <code>M1</code>. An instance must be passed when the delegate is invoked.  </p>\n</li>\n<li><p>A delegate of type <code>D2</code>, representing an open static method, is created for the static method <code>M2</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare three delegate types for demonstrating the combinations\n// of static versus instance methods and open versus closed\n// delegates.\n//\npublic delegate void D1(C c, string s);\npublic delegate void D2(string s);\npublic delegate void D3();\n\n// A sample class with an instance method and a static method.\n//\npublic class C\n{\n    private int id;\n    public C(int id) { this.id = id; }\n\n    public void M1(string s) \n    { \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;,\n            this.id, s);\n    }\n  \n    public static void M2(string s)\n    { \n        Console.WriteLine(&quot;Static method M2 on C:  s = {0}&quot;, s); \n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n\n        // Get a MethodInfo for each method.\n        //\n        MethodInfo mi1 = typeof(C).GetMethod(&quot;M1&quot;, \n            BindingFlags.Public | BindingFlags.Instance);\n        MethodInfo mi2 = typeof(C).GetMethod(&quot;M2&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n\n        D1 d1;\n        D2 d2;\n        D3 d3;\n\n\n        Console.WriteLine(&quot;<br>An instance method closed over C.&quot;);\n        // In this case, the delegate and the\n        // method must have the same list of argument types; use\n        // delegate type D2 with instance method M1.\n        //\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D2), c1, mi1, false);\n\n        // Because false was specified for throwOnBindFailure \n        // in the call to CreateDelegate, the variable &#39;test&#39;\n        // contains null if the method fails to bind (for \n        // example, if mi1 happened to represent a method of  \n        // some class other than C).\n        //\n        if (test != null)\n        {\n            d2 = (D2) test;\n\n            // The same instance of C is used every time the \n            // delegate is invoked.\n            d2(&quot;Hello, World!&quot;);\n            d2(&quot;Hi, Mom!&quot;);\n        }\n\n\n        Console.WriteLine(&quot;<br>An open instance method.&quot;);\n        // In this case, the delegate has one more \n        // argument than the instance method; this argument comes\n        // at the beginning, and represents the hidden instance\n        // argument of the instance method. Use delegate type D1\n        // with instance method M1.\n        //\n        d1 = (D1) Delegate.CreateDelegate(typeof(D1), null, mi1);\n\n        // An instance of C must be passed in each time the \n        // delegate is invoked.\n        //\n        d1(c1, &quot;Hello, World!&quot;);\n        d1(new C(5280), &quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>An open static method.&quot;);\n        // In this case, the delegate and the method must \n        // have the same list of argument types; use delegate type\n        // D2 with static method M2.\n        //\n        d2 = (D2) Delegate.CreateDelegate(typeof(D2), null, mi2);\n\n        // No instances of C are involved, because this is a static\n        // method. \n        //\n        d2(&quot;Hello, World!&quot;);\n        d2(&quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>A static method closed over the first argument (String).&quot;);\n        // The delegate must omit the first argument of the method.\n        // A string is passed as the firstArgument parameter, and \n        // the delegate is bound to this string. Use delegate type \n        // D3 with static method M2. \n        //\n        d3 = (D3) Delegate.CreateDelegate(typeof(D3), \n            &quot;Hello, World!&quot;, mi2);\n\n        // Each time the delegate is invoked, the same string is\n        // used.\n        d3();\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method closed over C.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 42, s = Hi, Mom!\n\nAn open instance method.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 5280, s = Hi, Mom!\n\nAn open static method.\nStatic method M2 on C:  s = Hello, World!\nStatic method M2 on C:  s = Hi, Mom!\n\nA static method closed over the first argument (String).\nStatic method M2 on C:  s = Hello, World!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare three delegate types for demonstrating the combinations\n&#39; of Shared versus instance methods and open versus closed\n&#39; delegates.\n&#39;\nPublic Delegate Sub D1(ByVal c As C, ByVal s As String) \nPublic Delegate Sub D2(ByVal s As String) \nPublic Delegate Sub D3() \n\n&#39; A sample class with an instance method and a Shared method.\n&#39;\nPublic Class C\n    Private id As Integer\n    Public Sub New(ByVal id As Integer) \n        Me.id = id\n    End Sub &#39;New\n\n    Public Sub M1(ByVal s As String) \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;, _\n            Me.id, s)\n    End Sub\n    \n    Public Shared Sub M2(ByVal s As String) \n        Console.WriteLine(&quot;Shared method M2 on C:  s = {0}&quot;, s)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        \n        &#39; Get a MethodInfo for each method.\n        &#39;\n        Dim mi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim mi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        \n        Dim d1 As D1\n        Dim d2 As D2\n        Dim d3 As D3\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method closed over C.&quot;)\n        &#39; In this case, the delegate and the\n        &#39; method must have the same list of argument types; use\n        &#39; delegate type D2 with instance method M1.\n        &#39;\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D2), c1, mi1, False)\n\n        &#39; Because False was specified for throwOnBindFailure \n        &#39; in the call to CreateDelegate, the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if mi1 happened to represent a method of \n        &#39; some class other than C).\n        &#39;\n        If test IsNot Nothing Then\n            d2 = CType(test, D2)\n\n            &#39; The same instance of C is used every time the\n            &#39; delegate is invoked.\n            d2(&quot;Hello, World!&quot;)\n            d2(&quot;Hi, Mom!&quot;)\n        End If\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open instance method.&quot;)\n        &#39; In this case, the delegate has one more \n        &#39; argument than the instance method; this argument comes\n        &#39; at the beginning, and represents the hidden instance\n        &#39; argument of the instance method. Use delegate type D1\n        &#39; with instance method M1.\n        &#39;\n        d1 = CType([Delegate].CreateDelegate(GetType(D1), Nothing, mi1), D1)\n        \n        &#39; An instance of C must be passed in each time the \n        &#39; delegate is invoked.\n        &#39;\n        d1(c1, &quot;Hello, World!&quot;)\n        d1(New C(5280), &quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open Shared method.&quot;)\n        &#39; In this case, the delegate and the method must \n        &#39; have the same list of argument types; use delegate type\n        &#39; D2 with Shared method M2.\n        &#39;\n        d2 = CType([Delegate].CreateDelegate(GetType(D2), Nothing, mi2), D2)\n        \n        &#39; No instances of C are involved, because this is a Shared\n        &#39; method. \n        &#39;\n        d2(&quot;Hello, World!&quot;)\n        d2(&quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method closed over the first argument (String).&quot;)\n        &#39; The delegate must omit the first argument of the method.\n        &#39; A string is passed as the firstArgument parameter, and \n        &#39; the delegate is bound to this string. Use delegate type \n        &#39; D3 with Shared method M2. \n        &#39;\n        d3 = CType([Delegate].CreateDelegate(GetType(D3), &quot;Hello, World!&quot;, mi2), D3)\n        \n        &#39; Each time the delegate is invoked, the same string is\n        &#39; used.\n        d3()\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method closed over C.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 42, s = Hi, Mom!\n&#39;\n&#39;An open instance method.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 5280, s = Hi, Mom!\n&#39;\n&#39;An open Shared method.\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39;Shared method M2 on C:  s = Hi, Mom!\n&#39;\n&#39;A Shared method closed over the first argument (String).\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39; \n</code></pre><p><strong>Example 2</strong>  </p>\n<p>The following code example demonstrates compatibility of parameter types and return types.  </p>\n<p>The code example defines a base class named <code>Base</code> and a class named <code>Derived</code> that derives from <code>Base</code>. The derived class has a <code>static</code> (<code>Shared</code> in Visual Basic) method named <code>MyMethod</code> with one parameter of type <code>Base</code> and a return type of <code>Derived</code>. The code example also defines a delegate named <code>Example</code> that has one parameter of type <code>Derived</code> and a return type of <code>Base</code>.  </p>\n<p>The code example demonstrates that the delegate named <code>Example</code> can be used to represent the method <code>MyMethod</code>. The method can be bound to the delegate because:  </p>\n</li>\n<li><p>The parameter type of the delegate (<code>Derived</code>) is more restrictive than the parameter type of <code>MyMethod</code> (<code>Base</code>), so that it is always safe to pass the argument of the delegate to <code>MyMethod</code>.  </p>\n</li>\n<li><p>The return type of <code>MyMethod</code> (<code>Derived</code>) is more restrictive than the parameter type of the delegate (<code>Base</code>), so that it is always safe to cast the return type of the method to the return type of the delegate.  </p>\n<p>The code example produces no output.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using System;\nusing System.Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic class Base {}\n\npublic class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\n    public static Derived MyMethod(Base arg)\n    {\n        Base dummy = arg;\n        return new Derived();\n    }\n}\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base Example(Derived arg);\n\nclass Test\n{\n    public static void Main()\n    {\n        // The binding flags needed to retrieve MyMethod.\n        BindingFlags flags = BindingFlags.Public | BindingFlags.Static;\n\n        // Get a MethodInfo that represents MyMethod.\n        MethodInfo minfo = typeof(Derived).GetMethod(&quot;MyMethod&quot;, flags);\n\n        // Demonstrate contravariance of parameter types and covariance\n        // of return types by using the delegate Example to represent\n        // MyMethod. The delegate binds to the method because the\n        // parameter of the delegate is more restrictive than the \n        // parameter of the method (that is, the delegate accepts an\n        // instance of Derived, which can always be safely passed to\n        // a parameter of type Base), and the return type of MyMethod\n        // is more restrictive than the return type of Example (that\n        // is, the method returns an instance of Derived, which can\n        // always be safely cast to type Base). \n        //\n        Example ex = \n            (Example) Delegate.CreateDelegate(typeof(Example), minfo);\n\n        // Execute MyMethod using the delegate Example.\n        //        \n        Base b = ex(new Derived());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic ref class Base {};\n\npublic ref class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\npublic:\n    static Derived^ MyMethod(Base^ arg)\n    {\n        Base^ dummy = arg;\n        return gcnew Derived();\n    }\n};\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base^ Example(Derived^ arg);\n\nvoid main()\n{\n    // The binding flags needed to retrieve MyMethod.\n    BindingFlags flags = BindingFlags::Public | BindingFlags::Static;\n\n    // Get a MethodInfo that represents MyMethod.\n    MethodInfo^ minfo = Derived::typeid-&gt;GetMethod(&quot;MyMethod&quot;, flags);\n\n    // Demonstrate contravariance of parameter types and covariance\n    // of return types by using the delegate Example to represent\n    // MyMethod. The delegate binds to the method because the\n    // parameter of the delegate is more restrictive than the \n    // parameter of the method (that is, the delegate accepts an\n    // instance of Derived, which can always be safely passed to\n    // a parameter of type Base), and the return type of MyMethod\n    // is more restrictive than the return type of Example (that\n    // is, the method returns an instance of Derived, which can\n    // always be safely cast to type Base). \n    //\n    Example^ ex = \n        (Example^) Delegate::CreateDelegate(Example::typeid, minfo);\n\n    // Execute MyMethod using the delegate Example.\n    //        \n    Base^ b = ex(gcnew Derived());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">Imports System\nImports System.Reflection\n\n&#39; Define two classes to use in the demonstration, a base class and \n&#39; a class that derives from it.\n&#39;\nPublic Class Base\nEnd Class\n\nPublic Class Derived\n    Inherits Base\n\n    &#39; Define a Shared method to use in the demonstration. The method \n    &#39; takes an instance of Base and returns an instance of Derived.  \n    &#39; For the purposes of the demonstration, it is not necessary for \n    &#39; the method to do anything useful. \n    &#39;\n    Public Shared Function MyMethod(ByVal arg As Base) As Derived\n        Dim dummy As Base = arg\n        Return New Derived()\n    End Function\n\nEnd Class\n\n&#39; Define a delegate that takes an instance of Derived and returns an\n&#39; instance of Base.\n&#39;\nPublic Delegate Function Example(ByVal arg As Derived) As Base\n\nModule Test\n\n    Sub Main()\n\n        &#39; The binding flags needed to retrieve MyMethod.\n        Dim flags As BindingFlags = _\n            BindingFlags.Public Or BindingFlags.Static\n\n        &#39; Get a MethodInfo that represents MyMethod.\n        Dim minfo As MethodInfo = _\n            GetType(Derived).GetMethod(&quot;MyMethod&quot;, flags)\n\n        &#39; Demonstrate contravariance of parameter types and covariance\n        &#39; of return types by using the delegate Example to represent\n        &#39; MyMethod. The delegate binds to the method because the\n        &#39; parameter of the delegate is more restrictive than the \n        &#39; parameter of the method (that is, the delegate accepts an\n        &#39; instance of Derived, which can always be safely passed to\n        &#39; a parameter of type Base), and the return type of MyMethod\n        &#39; is more restrictive than the return type of Example (that\n        &#39; is, the method returns an instance of Derived, which can\n        &#39; always be safely cast to type Base). \n        &#39;\n        Dim ex As Example = CType( _\n            [Delegate].CreateDelegate(GetType(Example), minfo), _\n            Example _\n        )\n\n        &#39; Execute MyMethod using the delegate Example.\n        &#39;        \n        Dim b As Base = ex(New Derived())\n    End Sub\nEnd Module\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstArgument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the delegate is bound, or <code>null</code> to treat <code>method</code> as <code>static</code> (<code>Shared</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the static or instance method the delegate is to represent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified static or instance method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>RuntimeMethodInfo</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,MethodInfo,Boolean)</a> method overload and specifying <code>true</code> for <code>throwOnBindFailure</code>. These two overloads provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you do not supply a first argument, use the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo)</a> method overload for better performance.  </p>\n</div>\n<p> The delegate type and the method must have compatible return types. That is, the return type of <code>method</code> must be assignable to the return type of <code>type</code>.  </p>\n<p> If <code>firstArgument</code> is supplied, it is passed to <code>method</code> every time the delegate is invoked; <code>firstArgument</code> is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If <code>method</code> is <code>static</code> (<code>Shared</code> in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if <code>method</code> is an instance method, then <code>firstArgument</code> is passed to the hidden instance parameter (represented by <code>this</code> in C#, or by <code>Me</code> in Visual Basic).  </p>\n<p> If <code>firstArgument</code> is supplied, the first parameter of <code>method</code> must be a reference type, and <code>firstArgument</code> must be compatible with that type.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If <code>method</code> is <code>static</code> (<code>Shared</code> in Visual Basic) and its first parameter is of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> or <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>, then <code>firstArgument</code> can be a value type. In this case <code>firstArgument</code> is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  </p>\n</div>\n<p> If <code>firstArgument</code> is a null reference and <code>method</code> is an instance method, the result depends on the signatures of the delegate type <code>type</code> and of <code>method</code>:  </p>\n<ul>\n<li><p>If the signature of <code>type</code> explicitly includes the hidden first parameter of <code>method</code>, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of <code>method</code>.  </p>\n</li>\n<li><p>If the signatures of <code>method</code> and <code>type</code> match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  </p>\n<p>If <code>firstArgument</code> is a null reference and <code>method</code> is static, the result depends on the signatures of the delegate type <code>type</code> and of <code>method</code>:  </p>\n</li>\n<li><p>If the signature of <code>method</code> and <code>type</code> match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo)</a> method overload.  </p>\n</li>\n<li><p>If the signature of <code>type</code> begins with the second parameter of <code>method</code> and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of <code>method</code>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.  </p>\n</div>\n<h2 id=\"compatible-parameter-types-and-return-type\">Compatible Parameter Types and Return Type</h2>\n<p> The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and 1.1, the types must match exactly.  </p>\n</div>\n<p> A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  </p>\n<p> Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  </p>\n<p> For example, a delegate with a parameter of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> and a return type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> can represent a method with a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and a return value of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<h2 id=\"determining-the-methods-a-delegate-can-represent\">Determining the Methods a Delegate Can Represent</h2>\n<p> Another useful way to think of the flexibility provided by this overload of <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type <code>D</code> with one argument of type <code>C</code>. The following describes the methods <code>D</code> can represent, ignoring the return type since it must match in all cases:  </p>\n<ul>\n<li><p><code>D</code> can represent any instance method that has exactly one argument of type <code>C</code>, regardless of what type the instance method belongs to. When <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is called, <code>firstArgument</code> is an instance of the type <code>method</code> belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, <code>D</code> can also be closed over a null reference if <code>firstArgument</code> is a null reference.)  </p>\n</li>\n<li><p><code>D</code> can represent an instance method of <code>C</code> that has no arguments. When <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is called, <code>firstArgument</code> is a null reference. The resulting delegate represents an open instance method, and an instance of <code>C</code> must be supplied each time it is invoked.  </p>\n</li>\n<li><p><code>D</code> can represent a static method that takes one argument of type <code>C</code>, and that method can belong to any type. When <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is called, <code>firstArgument</code> is a null reference. The resulting delegate represents an open static method, and an instance of <code>C</code> must be supplied each time it is invoked.  </p>\n</li>\n<li><p><code>D</code> can represent a static method that belongs to type <code>F</code> and has two arguments, of type <code>F</code> and type <code>C</code>. When <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is called, <code>firstArgument</code> is an instance of <code>F</code>. The resulting delegate represents a static method that is closed over that instance of <code>F</code>. Note that in the case where <code>F</code> and <code>C</code> are the same type, the static method has two arguments of that type. (In this case, <code>D</code> is closed over a null reference if <code>firstArgument</code> is a null reference.)</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This section contains three code examples. The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.  </p>\n<p> The second code example demonstrates compatible parameter types and return types.  </p>\n<p> The third code example defines a single delegate type, and shows all the methods that delegate type can represent.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example demonstrates the four ways a delegate can be created using this overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify <code>firstArgument</code> and a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The example declares a class <code>C</code> with a static method <code>M2</code> and an instance method <code>M1</code>, and three delegate types: <code>D1</code> takes an instance of <code>C</code> and a string, <code>D2</code> takes a string, and <code>D3</code> has no arguments.  </p>\n<p> A second class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>A delegate of type <code>D2</code>, closed over an instance of <code>C</code>, is created for the instance method <code>M1</code>. It is invoked with different strings, to show that the bound instance of <code>C</code> is always used.  </p>\n</li>\n<li><p>A delegate of type <code>D1</code>, representing an open instance method, is created for the instance method <code>M1</code>. An instance must be passed when the delegate is invoked.  </p>\n</li>\n<li><p>A delegate of type <code>D2</code>, representing an open static method, is created for the static method <code>M2</code>.  </p>\n</li>\n<li><p>Finally, a delegate of type <code>D3</code>, closed over a string, is created for the static method <code>M2</code>. The method is invoked to show that it uses the bound string.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare three delegate types for demonstrating the combinations\n// of static versus instance methods and open versus closed\n// delegates.\n//\npublic delegate void D1(C c, string s);\npublic delegate void D2(string s);\npublic delegate void D3();\n\n// A sample class with an instance method and a static method.\n//\npublic class C\n{\n    private int id;\n    public C(int id) { this.id = id; }\n\n    public void M1(string s) \n    { \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;,\n            this.id, s);\n    }\n  \n    public static void M2(string s)\n    { \n        Console.WriteLine(&quot;Static method M2 on C:  s = {0}&quot;, s); \n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n\n        // Get a MethodInfo for each method.\n        //\n        MethodInfo mi1 = typeof(C).GetMethod(&quot;M1&quot;, \n            BindingFlags.Public | BindingFlags.Instance);\n        MethodInfo mi2 = typeof(C).GetMethod(&quot;M2&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n\n        D1 d1;\n        D2 d2;\n        D3 d3;\n\n\n        Console.WriteLine(&quot;<br>An instance method closed over C.&quot;);\n        // In this case, the delegate and the\n        // method must have the same list of argument types; use\n        // delegate type D2 with instance method M1.\n        //\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D2), c1, mi1, false);\n\n        // Because false was specified for throwOnBindFailure \n        // in the call to CreateDelegate, the variable &#39;test&#39;\n        // contains null if the method fails to bind (for \n        // example, if mi1 happened to represent a method of  \n        // some class other than C).\n        //\n        if (test != null)\n        {\n            d2 = (D2) test;\n\n            // The same instance of C is used every time the \n            // delegate is invoked.\n            d2(&quot;Hello, World!&quot;);\n            d2(&quot;Hi, Mom!&quot;);\n        }\n\n\n        Console.WriteLine(&quot;<br>An open instance method.&quot;);\n        // In this case, the delegate has one more \n        // argument than the instance method; this argument comes\n        // at the beginning, and represents the hidden instance\n        // argument of the instance method. Use delegate type D1\n        // with instance method M1.\n        //\n        d1 = (D1) Delegate.CreateDelegate(typeof(D1), null, mi1);\n\n        // An instance of C must be passed in each time the \n        // delegate is invoked.\n        //\n        d1(c1, &quot;Hello, World!&quot;);\n        d1(new C(5280), &quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>An open static method.&quot;);\n        // In this case, the delegate and the method must \n        // have the same list of argument types; use delegate type\n        // D2 with static method M2.\n        //\n        d2 = (D2) Delegate.CreateDelegate(typeof(D2), null, mi2);\n\n        // No instances of C are involved, because this is a static\n        // method. \n        //\n        d2(&quot;Hello, World!&quot;);\n        d2(&quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>A static method closed over the first argument (String).&quot;);\n        // The delegate must omit the first argument of the method.\n        // A string is passed as the firstArgument parameter, and \n        // the delegate is bound to this string. Use delegate type \n        // D3 with static method M2. \n        //\n        d3 = (D3) Delegate.CreateDelegate(typeof(D3), \n            &quot;Hello, World!&quot;, mi2);\n\n        // Each time the delegate is invoked, the same string is\n        // used.\n        d3();\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method closed over C.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 42, s = Hi, Mom!\n\nAn open instance method.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 5280, s = Hi, Mom!\n\nAn open static method.\nStatic method M2 on C:  s = Hello, World!\nStatic method M2 on C:  s = Hi, Mom!\n\nA static method closed over the first argument (String).\nStatic method M2 on C:  s = Hello, World!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare three delegate types for demonstrating the combinations\n&#39; of Shared versus instance methods and open versus closed\n&#39; delegates.\n&#39;\nPublic Delegate Sub D1(ByVal c As C, ByVal s As String) \nPublic Delegate Sub D2(ByVal s As String) \nPublic Delegate Sub D3() \n\n&#39; A sample class with an instance method and a Shared method.\n&#39;\nPublic Class C\n    Private id As Integer\n    Public Sub New(ByVal id As Integer) \n        Me.id = id\n    End Sub &#39;New\n\n    Public Sub M1(ByVal s As String) \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;, _\n            Me.id, s)\n    End Sub\n    \n    Public Shared Sub M2(ByVal s As String) \n        Console.WriteLine(&quot;Shared method M2 on C:  s = {0}&quot;, s)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        \n        &#39; Get a MethodInfo for each method.\n        &#39;\n        Dim mi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim mi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        \n        Dim d1 As D1\n        Dim d2 As D2\n        Dim d3 As D3\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method closed over C.&quot;)\n        &#39; In this case, the delegate and the\n        &#39; method must have the same list of argument types; use\n        &#39; delegate type D2 with instance method M1.\n        &#39;\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D2), c1, mi1, False)\n\n        &#39; Because False was specified for throwOnBindFailure \n        &#39; in the call to CreateDelegate, the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if mi1 happened to represent a method of \n        &#39; some class other than C).\n        &#39;\n        If test IsNot Nothing Then\n            d2 = CType(test, D2)\n\n            &#39; The same instance of C is used every time the\n            &#39; delegate is invoked.\n            d2(&quot;Hello, World!&quot;)\n            d2(&quot;Hi, Mom!&quot;)\n        End If\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open instance method.&quot;)\n        &#39; In this case, the delegate has one more \n        &#39; argument than the instance method; this argument comes\n        &#39; at the beginning, and represents the hidden instance\n        &#39; argument of the instance method. Use delegate type D1\n        &#39; with instance method M1.\n        &#39;\n        d1 = CType([Delegate].CreateDelegate(GetType(D1), Nothing, mi1), D1)\n        \n        &#39; An instance of C must be passed in each time the \n        &#39; delegate is invoked.\n        &#39;\n        d1(c1, &quot;Hello, World!&quot;)\n        d1(New C(5280), &quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open Shared method.&quot;)\n        &#39; In this case, the delegate and the method must \n        &#39; have the same list of argument types; use delegate type\n        &#39; D2 with Shared method M2.\n        &#39;\n        d2 = CType([Delegate].CreateDelegate(GetType(D2), Nothing, mi2), D2)\n        \n        &#39; No instances of C are involved, because this is a Shared\n        &#39; method. \n        &#39;\n        d2(&quot;Hello, World!&quot;)\n        d2(&quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method closed over the first argument (String).&quot;)\n        &#39; The delegate must omit the first argument of the method.\n        &#39; A string is passed as the firstArgument parameter, and \n        &#39; the delegate is bound to this string. Use delegate type \n        &#39; D3 with Shared method M2. \n        &#39;\n        d3 = CType([Delegate].CreateDelegate(GetType(D3), &quot;Hello, World!&quot;, mi2), D3)\n        \n        &#39; Each time the delegate is invoked, the same string is\n        &#39; used.\n        d3()\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method closed over C.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 42, s = Hi, Mom!\n&#39;\n&#39;An open instance method.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 5280, s = Hi, Mom!\n&#39;\n&#39;An open Shared method.\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39;Shared method M2 on C:  s = Hi, Mom!\n&#39;\n&#39;A Shared method closed over the first argument (String).\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39; \n</code></pre><p><strong>Example 2</strong>  </p>\n<p>The following code example demonstrates compatibility of parameter types and return types.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This code example uses the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo)</a> method overload. The use of other overloads that take <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> is similar.  </p>\n</div>\n<p> The code example defines a base class named <code>Base</code> and a class named <code>Derived</code> that derives from <code>Base</code>. The derived class has a <code>static</code> (<code>Shared</code> in Visual Basic) method named <code>MyMethod</code> with one parameter of type <code>Base</code> and a return type of <code>Derived</code>. The code example also defines a delegate named <code>Example</code> that has one parameter of type <code>Derived</code> and a return type of <code>Base</code>.  </p>\n<p> The code example demonstrates that the delegate named <code>Example</code> can be used to represent the method <code>MyMethod</code>. The method can be bound to the delegate because:  </p>\n<ul>\n<li><p>The parameter type of the delegate (<code>Derived</code>) is more restrictive than the parameter type of <code>MyMethod</code> (<code>Base</code>), so that it is always safe to pass the argument of the delegate to <code>MyMethod</code>.  </p>\n</li>\n<li><p>The return type of <code>MyMethod</code> (<code>Derived</code>) is more restrictive than the parameter type of the delegate (<code>Base</code>), so that it is always safe to cast the return type of the method to the return type of the delegate.  </p>\n<p>The code example produces no output.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using System;\nusing System.Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic class Base {}\n\npublic class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\n    public static Derived MyMethod(Base arg)\n    {\n        Base dummy = arg;\n        return new Derived();\n    }\n}\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base Example(Derived arg);\n\nclass Test\n{\n    public static void Main()\n    {\n        // The binding flags needed to retrieve MyMethod.\n        BindingFlags flags = BindingFlags.Public | BindingFlags.Static;\n\n        // Get a MethodInfo that represents MyMethod.\n        MethodInfo minfo = typeof(Derived).GetMethod(&quot;MyMethod&quot;, flags);\n\n        // Demonstrate contravariance of parameter types and covariance\n        // of return types by using the delegate Example to represent\n        // MyMethod. The delegate binds to the method because the\n        // parameter of the delegate is more restrictive than the \n        // parameter of the method (that is, the delegate accepts an\n        // instance of Derived, which can always be safely passed to\n        // a parameter of type Base), and the return type of MyMethod\n        // is more restrictive than the return type of Example (that\n        // is, the method returns an instance of Derived, which can\n        // always be safely cast to type Base). \n        //\n        Example ex = \n            (Example) Delegate.CreateDelegate(typeof(Example), minfo);\n\n        // Execute MyMethod using the delegate Example.\n        //        \n        Base b = ex(new Derived());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic ref class Base {};\n\npublic ref class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\npublic:\n    static Derived^ MyMethod(Base^ arg)\n    {\n        Base^ dummy = arg;\n        return gcnew Derived();\n    }\n};\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base^ Example(Derived^ arg);\n\nvoid main()\n{\n    // The binding flags needed to retrieve MyMethod.\n    BindingFlags flags = BindingFlags::Public | BindingFlags::Static;\n\n    // Get a MethodInfo that represents MyMethod.\n    MethodInfo^ minfo = Derived::typeid-&gt;GetMethod(&quot;MyMethod&quot;, flags);\n\n    // Demonstrate contravariance of parameter types and covariance\n    // of return types by using the delegate Example to represent\n    // MyMethod. The delegate binds to the method because the\n    // parameter of the delegate is more restrictive than the \n    // parameter of the method (that is, the delegate accepts an\n    // instance of Derived, which can always be safely passed to\n    // a parameter of type Base), and the return type of MyMethod\n    // is more restrictive than the return type of Example (that\n    // is, the method returns an instance of Derived, which can\n    // always be safely cast to type Base). \n    //\n    Example^ ex = \n        (Example^) Delegate::CreateDelegate(Example::typeid, minfo);\n\n    // Execute MyMethod using the delegate Example.\n    //        \n    Base^ b = ex(gcnew Derived());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">Imports System\nImports System.Reflection\n\n&#39; Define two classes to use in the demonstration, a base class and \n&#39; a class that derives from it.\n&#39;\nPublic Class Base\nEnd Class\n\nPublic Class Derived\n    Inherits Base\n\n    &#39; Define a Shared method to use in the demonstration. The method \n    &#39; takes an instance of Base and returns an instance of Derived.  \n    &#39; For the purposes of the demonstration, it is not necessary for \n    &#39; the method to do anything useful. \n    &#39;\n    Public Shared Function MyMethod(ByVal arg As Base) As Derived\n        Dim dummy As Base = arg\n        Return New Derived()\n    End Function\n\nEnd Class\n\n&#39; Define a delegate that takes an instance of Derived and returns an\n&#39; instance of Base.\n&#39;\nPublic Delegate Function Example(ByVal arg As Derived) As Base\n\nModule Test\n\n    Sub Main()\n\n        &#39; The binding flags needed to retrieve MyMethod.\n        Dim flags As BindingFlags = _\n            BindingFlags.Public Or BindingFlags.Static\n\n        &#39; Get a MethodInfo that represents MyMethod.\n        Dim minfo As MethodInfo = _\n            GetType(Derived).GetMethod(&quot;MyMethod&quot;, flags)\n\n        &#39; Demonstrate contravariance of parameter types and covariance\n        &#39; of return types by using the delegate Example to represent\n        &#39; MyMethod. The delegate binds to the method because the\n        &#39; parameter of the delegate is more restrictive than the \n        &#39; parameter of the method (that is, the delegate accepts an\n        &#39; instance of Derived, which can always be safely passed to\n        &#39; a parameter of type Base), and the return type of MyMethod\n        &#39; is more restrictive than the return type of Example (that\n        &#39; is, the method returns an instance of Derived, which can\n        &#39; always be safely cast to type Base). \n        &#39;\n        Dim ex As Example = CType( _\n            [Delegate].CreateDelegate(GetType(Example), minfo), _\n            Example _\n        )\n\n        &#39; Execute MyMethod using the delegate Example.\n        &#39;        \n        Dim b As Base = ex(New Derived())\n    End Sub\nEnd Module\n</code></pre><p><strong>Example 3</strong>  </p>\n<p>The following code example shows all the methods a single delegate type can represent, using the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method to create the delegates.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify <code>firstArgument</code> and a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The code example defines two classes, <code>C</code> and <code>F</code>, and a delegate type <code>D</code> with one argument of type <code>C</code>. The classes have matching static and instance methods <code>M1</code>, <code>M3</code>, and <code>M4</code>, and class <code>C</code> also has an instance method <code>M2</code> that has no arguments.  </p>\n<p> A third class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>Delegates are created for instance method <code>M1</code> of type <code>C</code> and type <code>F</code>; each is closed over an instance of the respective type. Method <code>M1</code> of type <code>C</code> displays the <code>ID</code> properties of the bound instance and of the argument.  </p>\n</li>\n<li><p>A delegate is created for method <code>M2</code> of type <code>C</code>. This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method. The method has no other arguments. It is called as if it were a static method.  </p>\n</li>\n<li><p>Delegates are created for static method <code>M3</code> of type <code>C</code> and type <code>F</code>; these are open static delegates.  </p>\n</li>\n<li><p>Finally, delegates are created for static method <code>M4</code> of type <code>C</code> and type <code>F</code>; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments. Method <code>M4</code> of type <code>C</code> displays the <code>ID</code> properties of the bound instance and of the argument.  </p>\n<pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM_2#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare a delegate type. The object of this code example\n&#39; is to show all the methods this delegate can bind to.\n&#39;\nPublic Delegate Sub D(ByVal c As C) \n\n&#39; Declare two sample classes, C and F. Class C has an ID\n&#39; property so instances can be identified.\n&#39;\nPublic Class C\n\n    Private _id As Integer\n\n    Public ReadOnly Property ID() As Integer \n        Get\n            Return _id\n        End Get\n    End Property\n\n    Public Sub New(ByVal newId As Integer) \n        Me._id = newId\n    End Sub\n    \n    Public Sub M1(ByVal c As C) \n        Console.WriteLine(&quot;Instance method M1(c As C) on C:  this.id = {0}, c.ID = {1}&quot;, _\n            Me.id, c.ID)\n    End Sub\n    \n    Public Sub M2() \n        Console.WriteLine(&quot;Instance method M2() on C:  this.id = {0}&quot;, Me.id)\n    End Sub\n    \n    Public Shared Sub M3(ByVal c As C) \n        Console.WriteLine(&quot;Shared method M3(c As C) on C:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M4(ByVal c1 As C, ByVal c2 As C) \n        Console.WriteLine(&quot;Shared method M4(c1 As C, c2 As C) on C:  c1.ID = {0}, c2.ID = {1}&quot;, _\n            c1.ID, c2.ID)\n    End Sub\nEnd Class\n\n\nPublic Class F\n    \n    Public Sub M1(ByVal c As C) \n        Console.WriteLine(&quot;Instance method M1(c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M3(ByVal c As C) \n        Console.WriteLine(&quot;Shared method M3(c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M4(ByVal f As F, ByVal c As C) \n        Console.WriteLine(&quot;Shared method M4(f As F, c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        Dim c2 As New C(1491)\n        Dim f1 As New F()\n        \n        Dim d As D\n        \n        &#39; Instance method with one argument of type C.\n        Dim cmi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;)\n        &#39; Instance method with no arguments.\n        Dim cmi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;)\n        &#39; Shared method with one argument of type C.\n        Dim cmi3 As MethodInfo = GetType(C).GetMethod(&quot;M3&quot;)\n        &#39; Shared method with two arguments of type C.\n        Dim cmi4 As MethodInfo = GetType(C).GetMethod(&quot;M4&quot;)\n        \n        &#39; Instance method with one argument of type C.\n        Dim fmi1 As MethodInfo = GetType(F).GetMethod(&quot;M1&quot;)\n        &#39; Shared method with one argument of type C.\n        Dim fmi3 As MethodInfo = GetType(F).GetMethod(&quot;M3&quot;)\n        &#39; Shared method with an argument of type F and an \n        &#39; argument of type C.\n        Dim fmi4 As MethodInfo = GetType(F).GetMethod(&quot;M4&quot;)\n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method on any type, with an argument of type C.&quot;)\n        &#39; D can represent any instance method that exactly matches its\n        &#39; signature. Methods on C and F are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), c1, cmi1), D)\n        d(c2)\n        d = CType([Delegate].CreateDelegate(GetType(D), f1, fmi1), D)\n        d(c2)\n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method on C with no arguments.&quot;)\n        &#39; D can represent an instance method on C that has no arguments;\n        &#39; in this case, the argument of D represents the hidden first\n        &#39; argument of any instance method. The delegate acts like a \n        &#39; Shared method, and an instance of C must be passed each time\n        &#39; it is invoked.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, cmi2), D)\n        d(c1)\n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method on any type, with an argument of type C.&quot;)\n        &#39; D can represent any Shared method with the same signature.\n        &#39; Methods on F and C are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, cmi3), D)\n        d(c1)\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, fmi3), D)\n        d(c1)\n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method on any type, with an argument of&quot;)\n        Console.WriteLine(&quot;    that type and an argument of type C.&quot;)\n        &#39; D can represent any Shared method with one argument of the\n        &#39; type the method belongs and a second argument of type C.\n        &#39; In this case, the method is closed over the instance of\n        &#39; supplied for the its first argument, and acts like an instance\n        &#39; method. Methods on F and C are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), c1, cmi4), D)\n        d(c2)\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D), f1, fmi4, false)\n\n        &#39; This final example specifies False for throwOnBindFailure \n        &#39; in the call to CreateDelegate, so the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if fmi4 happened to represent a method of  \n        &#39; some class other than F).\n        &#39;\n        If test IsNot Nothing Then\n            d = CType(test, D)\n            d(c2)\n        End If\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method on any type, with an argument of type C.\n&#39;Instance method M1(c As C) on C:  this.id = 42, c.ID = 1491\n&#39;Instance method M1(c As C) on F:  c.ID = 1491\n&#39;\n&#39;An instance method on C with no arguments.\n&#39;Instance method M2() on C:  this.id = 42\n&#39;\n&#39;A Shared method on any type, with an argument of type C.\n&#39;Shared method M3(c As C) on C:  c.ID = 42\n&#39;Shared method M3(c As C) on F:  c.ID = 42\n&#39;\n&#39;A Shared method on any type, with an argument of\n&#39;    that type and an argument of type C.\n&#39;Shared method M4(c1 As C, c2 As C) on C:  c1.ID = 42, c2.ID = 1491\n&#39;Shared method M4(f As F, c As C) on F:  c.ID = 1491\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM_2#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare a delegate type. The object of this code example\n// is to show all the methods this delegate can bind to.\n//\npublic delegate void D(C c);\n\n// Declare two sample classes, C and F. Class C has an ID\n// property so instances can be identified.\n//\npublic class C\n{\n    private int id;\n    public int ID { get { return id; }}\n    public C(int id) { this.id = id; }\n\n    public void M1(C c) \n    { \n        Console.WriteLine(&quot;Instance method M1(C c) on C:  this.id = {0}, c.ID = {1}&quot;,\n            this.id, c.ID);\n    }\n  \n    public void M2() \n    { \n        Console.WriteLine(&quot;Instance method M2() on C:  this.id = {0}&quot;,\n            this.id);\n    }\n  \n    public static void M3(C c)\n    { \n        Console.WriteLine(&quot;Static method M3(C c) on C:  c.ID = {0}&quot;, c.ID); \n    }\n\n    public static void M4(C c1, C c2) \n    { \n        Console.WriteLine(&quot;Static method M4(C c1, C c2) on C:  c1.ID = {0}, c2.ID = {1}&quot;,\n            c1.ID, c2.ID);\n    }\n}\n\npublic class F\n{\n    public void M1(C c) \n    { \n        Console.WriteLine(&quot;Instance method M1(C c) on F:  c.ID = {0}&quot;,\n            c.ID);\n    }\n  \n    public static void M3(C c)\n    { \n        Console.WriteLine(&quot;Static method M3(C c) on F:  c.ID = {0}&quot;, c.ID); \n    }\n\n    public static void M4(F f, C c) \n    { \n        Console.WriteLine(&quot;Static method M4(F f, C c) on F:  c.ID = {0}&quot;,\n            c.ID);\n    }\n}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n        C c2 = new C(1491);\n        F f1 = new F();\n\n        D d;\n\n        // Instance method with one argument of type C.\n        MethodInfo cmi1 = typeof(C).GetMethod(&quot;M1&quot;); \n        // Instance method with no arguments.\n        MethodInfo cmi2 = typeof(C).GetMethod(&quot;M2&quot;); \n        // Static method with one argument of type C.\n        MethodInfo cmi3 = typeof(C).GetMethod(&quot;M3&quot;); \n        // Static method with two arguments of type C.\n        MethodInfo cmi4 = typeof(C).GetMethod(&quot;M4&quot;); \n\n        // Instance method with one argument of type C.\n        MethodInfo fmi1 = typeof(F).GetMethod(&quot;M1&quot;);\n        // Static method with one argument of type C.\n        MethodInfo fmi3 = typeof(F).GetMethod(&quot;M3&quot;); \n        // Static method with an argument of type F and an argument \n        // of type C.\n        MethodInfo fmi4 = typeof(F).GetMethod(&quot;M4&quot;); \n\n        Console.WriteLine(&quot;<br>An instance method on any type, with an argument of type C.&quot;);\n        // D can represent any instance method that exactly matches its\n        // signature. Methods on C and F are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi1);\n        d(c2);\n        d = (D) Delegate.CreateDelegate(typeof(D), f1, fmi1);\n        d(c2);\n\n        Console.WriteLine(&quot;<br>An instance method on C with no arguments.&quot;);\n        // D can represent an instance method on C that has no arguments;\n        // in this case, the argument of D represents the hidden first\n        // argument of any instance method. The delegate acts like a \n        // static method, and an instance of C must be passed each time\n        // it is invoked.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi2);\n        d(c1);\n\n        Console.WriteLine(&quot;<br>A static method on any type, with an argument of type C.&quot;);\n        // D can represent any static method with the same signature.\n        // Methods on F and C are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi3);\n        d(c1);\n        d = (D) Delegate.CreateDelegate(typeof(D), null, fmi3);\n        d(c1);\n\n        Console.WriteLine(&quot;<br>A static method on any type, with an argument of&quot;);\n        Console.WriteLine(&quot;    that type and an argument of type C.&quot;);\n        // D can represent any static method with one argument of the\n        // type the method belongs and a second argument of type C.\n        // In this case, the method is closed over the instance of\n        // supplied for the its first argument, and acts like an instance\n        // method. Methods on F and C are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi4);\n        d(c2);\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D), f1, fmi4, false);\n\n        // This final example specifies false for throwOnBindFailure \n        // in the call to CreateDelegate, so the variable &#39;test&#39;\n        // contains Nothing if the method fails to bind (for \n        // example, if fmi4 happened to represent a method of  \n        // some class other than F).\n        //\n        if (test != null)\n        {\n            d = (D) test;\n            d(c2);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method on any type, with an argument of type C.\nInstance method M1(C c) on C:  this.id = 42, c.ID = 1491\nInstance method M1(C c) on F:  c.ID = 1491\n\nAn instance method on C with no arguments.\nInstance method M2() on C:  this.id = 42\n\nA static method on any type, with an argument of type C.\nStatic method M3(C c) on C:  c.ID = 42\nStatic method M3(C c) on F:  c.ID = 42\n\nA static method on any type, with an argument of\n    that type and an argument of type C.\nStatic method M4(C c1, C c2) on C:  c1.ID = 42, c2.ID = 1491\nStatic method M4(F f, C c) on F:  c.ID = 1491\n*/\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, object target, string method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class instance on which <code>method</code> is invoked.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the instance method that the delegate is to represent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not an instance method.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<p> This method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,String,Boolean,Boolean)</a> method overload, specifying <code>false</code> for <code>ignoreCase</code> and <code>true</code> for <code>throwOnBindFailure</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,MethodInfo,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the static or instance method the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnBindFailure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if <code>method</code> cannot be bound; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type to represent the specified static method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>RuntimeMethodInfo</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload can create open static method delegates and open instance method delegates â€” that is, delegates that expose the hidden first argument of instance methods. For a detailed explanation, see the more general <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,MethodInfo,Boolean)</a> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.  </p>\n</div>\n<h2 id=\"compatible-parameter-types-and-return-type\">Compatible Parameter Types and Return Type</h2>\n<p> The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and 1.1, the types must match exactly.  </p>\n</div>\n<p> A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  </p>\n<p> Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  </p>\n<p> For example, a delegate with a parameter of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> and a return type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> can represent a method with a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and a return value of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This section contains two code examples. The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.  </p>\n<p> The second code example demonstrates compatible parameter types and return types.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example demonstrates the two ways a delegate can be created using this overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The example declares a class <code>C</code> with a static method <code>M2</code> and an instance method <code>M1</code>, and two delegate types: <code>D1</code> takes an instance of <code>C</code> and a string, and <code>D2</code> takes a string.  </p>\n<p> A second class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>A delegate of type <code>D1</code>, representing an open instance method, is created for the instance method <code>M1</code>. An instance must be passed when the delegate is invoked.  </p>\n</li>\n<li><p>A delegate of type <code>D2</code>, representing an open static method, is created for the static method <code>M2</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare three delegate types for demonstrating the combinations\n// of static versus instance methods and open versus closed\n// delegates.\n//\npublic delegate void D1(C c, string s);\npublic delegate void D2(string s);\npublic delegate void D3();\n\n// A sample class with an instance method and a static method.\n//\npublic class C\n{\n    private int id;\n    public C(int id) { this.id = id; }\n\n    public void M1(string s) \n    { \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;,\n            this.id, s);\n    }\n  \n    public static void M2(string s)\n    { \n        Console.WriteLine(&quot;Static method M2 on C:  s = {0}&quot;, s); \n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n\n        // Get a MethodInfo for each method.\n        //\n        MethodInfo mi1 = typeof(C).GetMethod(&quot;M1&quot;, \n            BindingFlags.Public | BindingFlags.Instance);\n        MethodInfo mi2 = typeof(C).GetMethod(&quot;M2&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n\n        D1 d1;\n        D2 d2;\n        D3 d3;\n\n\n        Console.WriteLine(&quot;<br>An instance method closed over C.&quot;);\n        // In this case, the delegate and the\n        // method must have the same list of argument types; use\n        // delegate type D2 with instance method M1.\n        //\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D2), c1, mi1, false);\n\n        // Because false was specified for throwOnBindFailure \n        // in the call to CreateDelegate, the variable &#39;test&#39;\n        // contains null if the method fails to bind (for \n        // example, if mi1 happened to represent a method of  \n        // some class other than C).\n        //\n        if (test != null)\n        {\n            d2 = (D2) test;\n\n            // The same instance of C is used every time the \n            // delegate is invoked.\n            d2(&quot;Hello, World!&quot;);\n            d2(&quot;Hi, Mom!&quot;);\n        }\n\n\n        Console.WriteLine(&quot;<br>An open instance method.&quot;);\n        // In this case, the delegate has one more \n        // argument than the instance method; this argument comes\n        // at the beginning, and represents the hidden instance\n        // argument of the instance method. Use delegate type D1\n        // with instance method M1.\n        //\n        d1 = (D1) Delegate.CreateDelegate(typeof(D1), null, mi1);\n\n        // An instance of C must be passed in each time the \n        // delegate is invoked.\n        //\n        d1(c1, &quot;Hello, World!&quot;);\n        d1(new C(5280), &quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>An open static method.&quot;);\n        // In this case, the delegate and the method must \n        // have the same list of argument types; use delegate type\n        // D2 with static method M2.\n        //\n        d2 = (D2) Delegate.CreateDelegate(typeof(D2), null, mi2);\n\n        // No instances of C are involved, because this is a static\n        // method. \n        //\n        d2(&quot;Hello, World!&quot;);\n        d2(&quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>A static method closed over the first argument (String).&quot;);\n        // The delegate must omit the first argument of the method.\n        // A string is passed as the firstArgument parameter, and \n        // the delegate is bound to this string. Use delegate type \n        // D3 with static method M2. \n        //\n        d3 = (D3) Delegate.CreateDelegate(typeof(D3), \n            &quot;Hello, World!&quot;, mi2);\n\n        // Each time the delegate is invoked, the same string is\n        // used.\n        d3();\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method closed over C.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 42, s = Hi, Mom!\n\nAn open instance method.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 5280, s = Hi, Mom!\n\nAn open static method.\nStatic method M2 on C:  s = Hello, World!\nStatic method M2 on C:  s = Hi, Mom!\n\nA static method closed over the first argument (String).\nStatic method M2 on C:  s = Hello, World!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare three delegate types for demonstrating the combinations\n&#39; of Shared versus instance methods and open versus closed\n&#39; delegates.\n&#39;\nPublic Delegate Sub D1(ByVal c As C, ByVal s As String) \nPublic Delegate Sub D2(ByVal s As String) \nPublic Delegate Sub D3() \n\n&#39; A sample class with an instance method and a Shared method.\n&#39;\nPublic Class C\n    Private id As Integer\n    Public Sub New(ByVal id As Integer) \n        Me.id = id\n    End Sub &#39;New\n\n    Public Sub M1(ByVal s As String) \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;, _\n            Me.id, s)\n    End Sub\n    \n    Public Shared Sub M2(ByVal s As String) \n        Console.WriteLine(&quot;Shared method M2 on C:  s = {0}&quot;, s)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        \n        &#39; Get a MethodInfo for each method.\n        &#39;\n        Dim mi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim mi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        \n        Dim d1 As D1\n        Dim d2 As D2\n        Dim d3 As D3\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method closed over C.&quot;)\n        &#39; In this case, the delegate and the\n        &#39; method must have the same list of argument types; use\n        &#39; delegate type D2 with instance method M1.\n        &#39;\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D2), c1, mi1, False)\n\n        &#39; Because False was specified for throwOnBindFailure \n        &#39; in the call to CreateDelegate, the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if mi1 happened to represent a method of \n        &#39; some class other than C).\n        &#39;\n        If test IsNot Nothing Then\n            d2 = CType(test, D2)\n\n            &#39; The same instance of C is used every time the\n            &#39; delegate is invoked.\n            d2(&quot;Hello, World!&quot;)\n            d2(&quot;Hi, Mom!&quot;)\n        End If\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open instance method.&quot;)\n        &#39; In this case, the delegate has one more \n        &#39; argument than the instance method; this argument comes\n        &#39; at the beginning, and represents the hidden instance\n        &#39; argument of the instance method. Use delegate type D1\n        &#39; with instance method M1.\n        &#39;\n        d1 = CType([Delegate].CreateDelegate(GetType(D1), Nothing, mi1), D1)\n        \n        &#39; An instance of C must be passed in each time the \n        &#39; delegate is invoked.\n        &#39;\n        d1(c1, &quot;Hello, World!&quot;)\n        d1(New C(5280), &quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open Shared method.&quot;)\n        &#39; In this case, the delegate and the method must \n        &#39; have the same list of argument types; use delegate type\n        &#39; D2 with Shared method M2.\n        &#39;\n        d2 = CType([Delegate].CreateDelegate(GetType(D2), Nothing, mi2), D2)\n        \n        &#39; No instances of C are involved, because this is a Shared\n        &#39; method. \n        &#39;\n        d2(&quot;Hello, World!&quot;)\n        d2(&quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method closed over the first argument (String).&quot;)\n        &#39; The delegate must omit the first argument of the method.\n        &#39; A string is passed as the firstArgument parameter, and \n        &#39; the delegate is bound to this string. Use delegate type \n        &#39; D3 with Shared method M2. \n        &#39;\n        d3 = CType([Delegate].CreateDelegate(GetType(D3), &quot;Hello, World!&quot;, mi2), D3)\n        \n        &#39; Each time the delegate is invoked, the same string is\n        &#39; used.\n        d3()\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method closed over C.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 42, s = Hi, Mom!\n&#39;\n&#39;An open instance method.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 5280, s = Hi, Mom!\n&#39;\n&#39;An open Shared method.\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39;Shared method M2 on C:  s = Hi, Mom!\n&#39;\n&#39;A Shared method closed over the first argument (String).\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39; \n</code></pre><p><strong>Example 2</strong>  </p>\n<p>The following code example demonstrates compatibility of parameter types and return types.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This code example uses the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo)</a> method overload. The use of other overloads that take <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> is similar.  </p>\n</div>\n<p> The code example defines a base class named <code>Base</code> and a class named <code>Derived</code> that derives from <code>Base</code>. The derived class has a <code>static</code> (<code>Shared</code> in Visual Basic) method named <code>MyMethod</code> with one parameter of type <code>Base</code> and a return type of <code>Derived</code>. The code example also defines a delegate named <code>Example</code> that has one parameter of type <code>Derived</code> and a return type of <code>Base</code>.  </p>\n<p> The code example demonstrates that the delegate named <code>Example</code> can be used to represent the method <code>MyMethod</code>. The method can be bound to the delegate because:  </p>\n<ul>\n<li><p>The parameter type of the delegate (<code>Derived</code>) is more restrictive than the parameter type of <code>MyMethod</code> (<code>Base</code>), so that it is always safe to pass the argument of the delegate to <code>MyMethod</code>.  </p>\n</li>\n<li><p>The return type of <code>MyMethod</code> (<code>Derived</code>) is more restrictive than the parameter type of the delegate (<code>Base</code>), so that it is always safe to cast the return type of the method to the return type of the delegate.  </p>\n<p>The code example produces no output.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using System;\nusing System.Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic class Base {}\n\npublic class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\n    public static Derived MyMethod(Base arg)\n    {\n        Base dummy = arg;\n        return new Derived();\n    }\n}\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base Example(Derived arg);\n\nclass Test\n{\n    public static void Main()\n    {\n        // The binding flags needed to retrieve MyMethod.\n        BindingFlags flags = BindingFlags.Public | BindingFlags.Static;\n\n        // Get a MethodInfo that represents MyMethod.\n        MethodInfo minfo = typeof(Derived).GetMethod(&quot;MyMethod&quot;, flags);\n\n        // Demonstrate contravariance of parameter types and covariance\n        // of return types by using the delegate Example to represent\n        // MyMethod. The delegate binds to the method because the\n        // parameter of the delegate is more restrictive than the \n        // parameter of the method (that is, the delegate accepts an\n        // instance of Derived, which can always be safely passed to\n        // a parameter of type Base), and the return type of MyMethod\n        // is more restrictive than the return type of Example (that\n        // is, the method returns an instance of Derived, which can\n        // always be safely cast to type Base). \n        //\n        Example ex = \n            (Example) Delegate.CreateDelegate(typeof(Example), minfo);\n\n        // Execute MyMethod using the delegate Example.\n        //        \n        Base b = ex(new Derived());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic ref class Base {};\n\npublic ref class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\npublic:\n    static Derived^ MyMethod(Base^ arg)\n    {\n        Base^ dummy = arg;\n        return gcnew Derived();\n    }\n};\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base^ Example(Derived^ arg);\n\nvoid main()\n{\n    // The binding flags needed to retrieve MyMethod.\n    BindingFlags flags = BindingFlags::Public | BindingFlags::Static;\n\n    // Get a MethodInfo that represents MyMethod.\n    MethodInfo^ minfo = Derived::typeid-&gt;GetMethod(&quot;MyMethod&quot;, flags);\n\n    // Demonstrate contravariance of parameter types and covariance\n    // of return types by using the delegate Example to represent\n    // MyMethod. The delegate binds to the method because the\n    // parameter of the delegate is more restrictive than the \n    // parameter of the method (that is, the delegate accepts an\n    // instance of Derived, which can always be safely passed to\n    // a parameter of type Base), and the return type of MyMethod\n    // is more restrictive than the return type of Example (that\n    // is, the method returns an instance of Derived, which can\n    // always be safely cast to type Base). \n    //\n    Example^ ex = \n        (Example^) Delegate::CreateDelegate(Example::typeid, minfo);\n\n    // Execute MyMethod using the delegate Example.\n    //        \n    Base^ b = ex(gcnew Derived());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">Imports System\nImports System.Reflection\n\n&#39; Define two classes to use in the demonstration, a base class and \n&#39; a class that derives from it.\n&#39;\nPublic Class Base\nEnd Class\n\nPublic Class Derived\n    Inherits Base\n\n    &#39; Define a Shared method to use in the demonstration. The method \n    &#39; takes an instance of Base and returns an instance of Derived.  \n    &#39; For the purposes of the demonstration, it is not necessary for \n    &#39; the method to do anything useful. \n    &#39;\n    Public Shared Function MyMethod(ByVal arg As Base) As Derived\n        Dim dummy As Base = arg\n        Return New Derived()\n    End Function\n\nEnd Class\n\n&#39; Define a delegate that takes an instance of Derived and returns an\n&#39; instance of Base.\n&#39;\nPublic Delegate Function Example(ByVal arg As Derived) As Base\n\nModule Test\n\n    Sub Main()\n\n        &#39; The binding flags needed to retrieve MyMethod.\n        Dim flags As BindingFlags = _\n            BindingFlags.Public Or BindingFlags.Static\n\n        &#39; Get a MethodInfo that represents MyMethod.\n        Dim minfo As MethodInfo = _\n            GetType(Derived).GetMethod(&quot;MyMethod&quot;, flags)\n\n        &#39; Demonstrate contravariance of parameter types and covariance\n        &#39; of return types by using the delegate Example to represent\n        &#39; MyMethod. The delegate binds to the method because the\n        &#39; parameter of the delegate is more restrictive than the \n        &#39; parameter of the method (that is, the delegate accepts an\n        &#39; instance of Derived, which can always be safely passed to\n        &#39; a parameter of type Base), and the return type of MyMethod\n        &#39; is more restrictive than the return type of Example (that\n        &#39; is, the method returns an instance of Derived, which can\n        &#39; always be safely cast to type Base). \n        &#39;\n        Dim ex As Example = CType( _\n            [Delegate].CreateDelegate(GetType(Example), minfo), _\n            Example _\n        )\n\n        &#39; Execute MyMethod using the delegate Example.\n        &#39;        \n        Dim b As Base = ex(New Derived())\n    End Sub\nEnd Module\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, Type target, string method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the class that implements <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the static method that the delegate is to represent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified static method of the specified class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is not a <code>RuntimeType</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is an open generic type. That is, its <span class=\"xref\">stem.Type.ContainsGenericParameters*</span> property is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>static</code> method (<code>Shared</code> method in Visual Basic).  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<p> This method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Type,String,Boolean,Boolean)</a> method overload, specifying <code>false</code> for <code>ignoreCase</code> and <code>true</code> for <code>throwOnBindFailure</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object,MethodInfo,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the type of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstArgument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the static or instance method the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnBindFailure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if <code>method</code> cannot be bound; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified static or instance method, or <code>null</code> if <code>throwOnBindFailure</code> is <code>false</code> and the delegate cannot be bound to <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>RuntimeMethodInfo</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload and the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,MethodInfo)</a> method overload, which always throws on failure to bind, provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, with or without a first argument.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you do not supply a first argument, use the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo,Boolean)</a> method overload for better performance.  </p>\n</div>\n<p> The delegate type and the method must have compatible return types. That is, the return type of <code>method</code> must be assignable to the return type of <code>type</code>.  </p>\n<p> If <code>firstArgument</code> is supplied, it is passed to <code>method</code> every time the delegate is invoked; <code>firstArgument</code> is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If <code>method</code> is <code>static</code> (<code>Shared</code> in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if <code>method</code> is an instance method, then <code>firstArgument</code> is passed to the hidden instance parameter (represented by <code>this</code> in C#, or by <code>Me</code> in Visual Basic).  </p>\n<p> If <code>firstArgument</code> is supplied, the first parameter of <code>method</code> must be a reference type, and <code>firstArgument</code> must be compatible with that type.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If <code>method</code> is <code>static</code> (<code>Shared</code> in Visual Basic) and its first parameter is of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> or <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>, then <code>firstArgument</code> can be a value type. In this case <code>firstArgument</code> is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  </p>\n</div>\n<p> If <code>firstArgument</code> is a null reference and <code>method</code> is an instance method, the result depends on the signatures of the delegate type <code>type</code> and of <code>method</code>:  </p>\n<ul>\n<li><p>If the signature of <code>type</code> explicitly includes the hidden first parameter of <code>method</code>, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of <code>method</code>.  </p>\n</li>\n<li><p>If the signatures of <code>method</code> and <code>type</code> match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  </p>\n<p>If <code>firstArgument</code> is a null reference and <code>method</code> is static, the result depends on the signatures of the delegate type <code>type</code> and of <code>method</code>:  </p>\n</li>\n<li><p>If the signature of <code>method</code> and <code>type</code> match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo,Boolean)</a> method overload.  </p>\n</li>\n<li><p>If the signature of <code>type</code> begins with the second parameter of <code>method</code> and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of <code>method</code>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.  </p>\n</div>\n<h2 id=\"compatible-parameter-types-and-return-type\">Compatible Parameter Types and Return Type</h2>\n<p> The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and 1.1 the types must match exactly.  </p>\n</div>\n<p> A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  </p>\n<p> Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  </p>\n<p> For example, a delegate with a parameter of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> and a return type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> can represent a method with a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and a return value of type <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<h2 id=\"determining-the-methods-a-delegate-can-represent\">Determining the Methods a Delegate Can Represent</h2>\n<p> Another useful way to think of the flexibility provided by this overload of <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type <code>D</code> with one argument of type <code>C</code>. The following describes the methods <code>D</code> can represent, ignoring the return type since it must match in all cases:  </p>\n<ul>\n<li><p><code>D</code> can represent any instance method that has exactly one argument of type <code>C</code>, regardless of what type the instance method belongs to. When CreateDelegate is called, <code>firstArgument</code> is an instance of the type <code>method</code> belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, <code>D</code> can also be closed over a null reference if <code>firstArgument</code> is <code>null</code>.)  </p>\n</li>\n<li><p><code>D</code> can represent an instance method of <code>C</code> that has no arguments. When CreateDelegate is called, <code>firstArgument</code> is a null reference. The resulting delegate represents an open instance method, and an instance of <code>C</code> must be supplied each time it is invoked.  </p>\n</li>\n<li><p><code>D</code> can represent a static method that takes one argument of type <code>C</code>, and that method can belong to any type. When CreateDelegate is called, <code>firstArgument</code> is a null reference. The resulting delegate represents an open static method, and an instance of <code>C</code> must be supplied each time it is invoked.  </p>\n</li>\n<li><p><code>D</code> can represent a static method that belongs to type <code>F</code> and has two arguments, of type <code>F</code> and type <code>C</code>. When CreateDelegate is called, <code>firstArgument</code> is an instance of <code>F</code>. The resulting delegate represents a static method that is closed over that instance of <code>F</code>. Note that in the case where <code>F</code> and <code>C</code> are the same type, the static method has two arguments of that type. (In this case, <code>D</code> is closed over a null reference if <code>firstArgument</code> is <code>null</code>.)</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This section contains three code examples. The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.  </p>\n<p> The second code example demonstrates compatible parameter types and return types.  </p>\n<p> The third code example defines a single delegate type, and shows all the methods that delegate type can represent.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example demonstrates the four ways a delegate can be created using this overload of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify <code>firstArgument</code> and a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The example declares a class <code>C</code> with a static method <code>M2</code> and an instance method <code>M1</code>, and three delegate types: <code>D1</code> takes an instance of <code>C</code> and a string, <code>D2</code> takes a string, and <code>D3</code> has no arguments.  </p>\n<p> A second class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>A delegate of type <code>D2</code>, closed over an instance of <code>C</code>, is created for the instance method <code>M1</code>. It is invoked with different strings, to show that the bound instance of <code>C</code> is always used.  </p>\n</li>\n<li><p>A delegate of type <code>D1</code>, representing an open instance method, is created for the instance method <code>M1</code>. An instance must be passed when the delegate is invoked.  </p>\n</li>\n<li><p>A delegate of type <code>D2</code>, representing an open static method, is created for the static method <code>M2</code>.  </p>\n</li>\n<li><p>Finally, a delegate of type <code>D3</code>, closed over a string, is created for the static method <code>M2</code>. The method is invoked to show that it uses the bound string.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare three delegate types for demonstrating the combinations\n// of static versus instance methods and open versus closed\n// delegates.\n//\npublic delegate void D1(C c, string s);\npublic delegate void D2(string s);\npublic delegate void D3();\n\n// A sample class with an instance method and a static method.\n//\npublic class C\n{\n    private int id;\n    public C(int id) { this.id = id; }\n\n    public void M1(string s) \n    { \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;,\n            this.id, s);\n    }\n  \n    public static void M2(string s)\n    { \n        Console.WriteLine(&quot;Static method M2 on C:  s = {0}&quot;, s); \n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n\n        // Get a MethodInfo for each method.\n        //\n        MethodInfo mi1 = typeof(C).GetMethod(&quot;M1&quot;, \n            BindingFlags.Public | BindingFlags.Instance);\n        MethodInfo mi2 = typeof(C).GetMethod(&quot;M2&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n\n        D1 d1;\n        D2 d2;\n        D3 d3;\n\n\n        Console.WriteLine(&quot;<br>An instance method closed over C.&quot;);\n        // In this case, the delegate and the\n        // method must have the same list of argument types; use\n        // delegate type D2 with instance method M1.\n        //\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D2), c1, mi1, false);\n\n        // Because false was specified for throwOnBindFailure \n        // in the call to CreateDelegate, the variable &#39;test&#39;\n        // contains null if the method fails to bind (for \n        // example, if mi1 happened to represent a method of  \n        // some class other than C).\n        //\n        if (test != null)\n        {\n            d2 = (D2) test;\n\n            // The same instance of C is used every time the \n            // delegate is invoked.\n            d2(&quot;Hello, World!&quot;);\n            d2(&quot;Hi, Mom!&quot;);\n        }\n\n\n        Console.WriteLine(&quot;<br>An open instance method.&quot;);\n        // In this case, the delegate has one more \n        // argument than the instance method; this argument comes\n        // at the beginning, and represents the hidden instance\n        // argument of the instance method. Use delegate type D1\n        // with instance method M1.\n        //\n        d1 = (D1) Delegate.CreateDelegate(typeof(D1), null, mi1);\n\n        // An instance of C must be passed in each time the \n        // delegate is invoked.\n        //\n        d1(c1, &quot;Hello, World!&quot;);\n        d1(new C(5280), &quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>An open static method.&quot;);\n        // In this case, the delegate and the method must \n        // have the same list of argument types; use delegate type\n        // D2 with static method M2.\n        //\n        d2 = (D2) Delegate.CreateDelegate(typeof(D2), null, mi2);\n\n        // No instances of C are involved, because this is a static\n        // method. \n        //\n        d2(&quot;Hello, World!&quot;);\n        d2(&quot;Hi, Mom!&quot;);\n\n\n        Console.WriteLine(&quot;<br>A static method closed over the first argument (String).&quot;);\n        // The delegate must omit the first argument of the method.\n        // A string is passed as the firstArgument parameter, and \n        // the delegate is bound to this string. Use delegate type \n        // D3 with static method M2. \n        //\n        d3 = (D3) Delegate.CreateDelegate(typeof(D3), \n            &quot;Hello, World!&quot;, mi2);\n\n        // Each time the delegate is invoked, the same string is\n        // used.\n        d3();\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method closed over C.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 42, s = Hi, Mom!\n\nAn open instance method.\nInstance method M1 on C:  id = 42, s = Hello, World!\nInstance method M1 on C:  id = 5280, s = Hi, Mom!\n\nAn open static method.\nStatic method M2 on C:  s = Hello, World!\nStatic method M2 on C:  s = Hi, Mom!\n\nA static method closed over the first argument (String).\nStatic method M2 on C:  s = Hello, World!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare three delegate types for demonstrating the combinations\n&#39; of Shared versus instance methods and open versus closed\n&#39; delegates.\n&#39;\nPublic Delegate Sub D1(ByVal c As C, ByVal s As String) \nPublic Delegate Sub D2(ByVal s As String) \nPublic Delegate Sub D3() \n\n&#39; A sample class with an instance method and a Shared method.\n&#39;\nPublic Class C\n    Private id As Integer\n    Public Sub New(ByVal id As Integer) \n        Me.id = id\n    End Sub &#39;New\n\n    Public Sub M1(ByVal s As String) \n        Console.WriteLine(&quot;Instance method M1 on C:  id = {0}, s = {1}&quot;, _\n            Me.id, s)\n    End Sub\n    \n    Public Shared Sub M2(ByVal s As String) \n        Console.WriteLine(&quot;Shared method M2 on C:  s = {0}&quot;, s)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        \n        &#39; Get a MethodInfo for each method.\n        &#39;\n        Dim mi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim mi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        \n        Dim d1 As D1\n        Dim d2 As D2\n        Dim d3 As D3\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method closed over C.&quot;)\n        &#39; In this case, the delegate and the\n        &#39; method must have the same list of argument types; use\n        &#39; delegate type D2 with instance method M1.\n        &#39;\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D2), c1, mi1, False)\n\n        &#39; Because False was specified for throwOnBindFailure \n        &#39; in the call to CreateDelegate, the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if mi1 happened to represent a method of \n        &#39; some class other than C).\n        &#39;\n        If test IsNot Nothing Then\n            d2 = CType(test, D2)\n\n            &#39; The same instance of C is used every time the\n            &#39; delegate is invoked.\n            d2(&quot;Hello, World!&quot;)\n            d2(&quot;Hi, Mom!&quot;)\n        End If\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open instance method.&quot;)\n        &#39; In this case, the delegate has one more \n        &#39; argument than the instance method; this argument comes\n        &#39; at the beginning, and represents the hidden instance\n        &#39; argument of the instance method. Use delegate type D1\n        &#39; with instance method M1.\n        &#39;\n        d1 = CType([Delegate].CreateDelegate(GetType(D1), Nothing, mi1), D1)\n        \n        &#39; An instance of C must be passed in each time the \n        &#39; delegate is invoked.\n        &#39;\n        d1(c1, &quot;Hello, World!&quot;)\n        d1(New C(5280), &quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;An open Shared method.&quot;)\n        &#39; In this case, the delegate and the method must \n        &#39; have the same list of argument types; use delegate type\n        &#39; D2 with Shared method M2.\n        &#39;\n        d2 = CType([Delegate].CreateDelegate(GetType(D2), Nothing, mi2), D2)\n        \n        &#39; No instances of C are involved, because this is a Shared\n        &#39; method. \n        &#39;\n        d2(&quot;Hello, World!&quot;)\n        d2(&quot;Hi, Mom!&quot;)\n        \n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method closed over the first argument (String).&quot;)\n        &#39; The delegate must omit the first argument of the method.\n        &#39; A string is passed as the firstArgument parameter, and \n        &#39; the delegate is bound to this string. Use delegate type \n        &#39; D3 with Shared method M2. \n        &#39;\n        d3 = CType([Delegate].CreateDelegate(GetType(D3), &quot;Hello, World!&quot;, mi2), D3)\n        \n        &#39; Each time the delegate is invoked, the same string is\n        &#39; used.\n        d3()\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method closed over C.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 42, s = Hi, Mom!\n&#39;\n&#39;An open instance method.\n&#39;Instance method M1 on C:  id = 42, s = Hello, World!\n&#39;Instance method M1 on C:  id = 5280, s = Hi, Mom!\n&#39;\n&#39;An open Shared method.\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39;Shared method M2 on C:  s = Hi, Mom!\n&#39;\n&#39;A Shared method closed over the first argument (String).\n&#39;Shared method M2 on C:  s = Hello, World!\n&#39; \n</code></pre><p><strong>Example 2</strong>  </p>\n<p>The following code example demonstrates compatibility of parameter types and return types.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This code example uses the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">CreateDelegate(Type,MethodInfo)</a> method overload. The use of other overloads that take <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> is similar.  </p>\n</div>\n<p> The code example defines a base class named <code>Base</code> and a class named <code>Derived</code> that derives from <code>Base</code>. The derived class has a <code>static</code> (<code>Shared</code> in Visual Basic) method named <code>MyMethod</code> with one parameter of type <code>Base</code> and a return type of <code>Derived</code>. The code example also defines a delegate named <code>Example</code> that has one parameter of type <code>Derived</code> and a return type of <code>Base</code>.  </p>\n<p> The code example demonstrates that the delegate named <code>Example</code> can be used to represent the method <code>MyMethod</code>. The method can be bound to the delegate because:  </p>\n<ul>\n<li><p>The parameter type of the delegate (<code>Derived</code>) is more restrictive than the parameter type of <code>MyMethod</code> (<code>Base</code>), so that it is always safe to pass the argument of the delegate to <code>MyMethod</code>.  </p>\n</li>\n<li><p>The return type of <code>MyMethod</code> (<code>Derived</code>) is more restrictive than the parameter type of the delegate (<code>Base</code>), so that it is always safe to cast the return type of the method to the return type of the delegate.  </p>\n<p>The code example produces no output.  </p>\n<pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using System;\nusing System.Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic class Base {}\n\npublic class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\n    public static Derived MyMethod(Base arg)\n    {\n        Base dummy = arg;\n        return new Derived();\n    }\n}\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base Example(Derived arg);\n\nclass Test\n{\n    public static void Main()\n    {\n        // The binding flags needed to retrieve MyMethod.\n        BindingFlags flags = BindingFlags.Public | BindingFlags.Static;\n\n        // Get a MethodInfo that represents MyMethod.\n        MethodInfo minfo = typeof(Derived).GetMethod(&quot;MyMethod&quot;, flags);\n\n        // Demonstrate contravariance of parameter types and covariance\n        // of return types by using the delegate Example to represent\n        // MyMethod. The delegate binds to the method because the\n        // parameter of the delegate is more restrictive than the \n        // parameter of the method (that is, the delegate accepts an\n        // instance of Derived, which can always be safely passed to\n        // a parameter of type Base), and the return type of MyMethod\n        // is more restrictive than the return type of Example (that\n        // is, the method returns an instance of Derived, which can\n        // always be safely cast to type Base). \n        //\n        Example ex = \n            (Example) Delegate.CreateDelegate(typeof(Example), minfo);\n\n        // Execute MyMethod using the delegate Example.\n        //        \n        Base b = ex(new Derived());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define two classes to use in the demonstration, a base class and \n// a class that derives from it.\n//\npublic ref class Base {};\n\npublic ref class Derived : Base\n{\n    // Define a static method to use in the demonstration. The method \n    // takes an instance of Base and returns an instance of Derived.  \n    // For the purposes of the demonstration, it is not necessary for \n    // the method to do anything useful. \n    //\npublic:\n    static Derived^ MyMethod(Base^ arg)\n    {\n        Base^ dummy = arg;\n        return gcnew Derived();\n    }\n};\n\n// Define a delegate that takes an instance of Derived and returns an\n// instance of Base.\n//\npublic delegate Base^ Example(Derived^ arg);\n\nvoid main()\n{\n    // The binding flags needed to retrieve MyMethod.\n    BindingFlags flags = BindingFlags::Public | BindingFlags::Static;\n\n    // Get a MethodInfo that represents MyMethod.\n    MethodInfo^ minfo = Derived::typeid-&gt;GetMethod(&quot;MyMethod&quot;, flags);\n\n    // Demonstrate contravariance of parameter types and covariance\n    // of return types by using the delegate Example to represent\n    // MyMethod. The delegate binds to the method because the\n    // parameter of the delegate is more restrictive than the \n    // parameter of the method (that is, the delegate accepts an\n    // instance of Derived, which can always be safely passed to\n    // a parameter of type Base), and the return type of MyMethod\n    // is more restrictive than the return type of Example (that\n    // is, the method returns an instance of Derived, which can\n    // always be safely cast to type Base). \n    //\n    Example^ ex = \n        (Example^) Delegate::CreateDelegate(Example::typeid, minfo);\n\n    // Execute MyMethod using the delegate Example.\n    //        \n    Base^ b = ex(gcnew Derived());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegate_RelaxedFit#1\">Imports System\nImports System.Reflection\n\n&#39; Define two classes to use in the demonstration, a base class and \n&#39; a class that derives from it.\n&#39;\nPublic Class Base\nEnd Class\n\nPublic Class Derived\n    Inherits Base\n\n    &#39; Define a Shared method to use in the demonstration. The method \n    &#39; takes an instance of Base and returns an instance of Derived.  \n    &#39; For the purposes of the demonstration, it is not necessary for \n    &#39; the method to do anything useful. \n    &#39;\n    Public Shared Function MyMethod(ByVal arg As Base) As Derived\n        Dim dummy As Base = arg\n        Return New Derived()\n    End Function\n\nEnd Class\n\n&#39; Define a delegate that takes an instance of Derived and returns an\n&#39; instance of Base.\n&#39;\nPublic Delegate Function Example(ByVal arg As Derived) As Base\n\nModule Test\n\n    Sub Main()\n\n        &#39; The binding flags needed to retrieve MyMethod.\n        Dim flags As BindingFlags = _\n            BindingFlags.Public Or BindingFlags.Static\n\n        &#39; Get a MethodInfo that represents MyMethod.\n        Dim minfo As MethodInfo = _\n            GetType(Derived).GetMethod(&quot;MyMethod&quot;, flags)\n\n        &#39; Demonstrate contravariance of parameter types and covariance\n        &#39; of return types by using the delegate Example to represent\n        &#39; MyMethod. The delegate binds to the method because the\n        &#39; parameter of the delegate is more restrictive than the \n        &#39; parameter of the method (that is, the delegate accepts an\n        &#39; instance of Derived, which can always be safely passed to\n        &#39; a parameter of type Base), and the return type of MyMethod\n        &#39; is more restrictive than the return type of Example (that\n        &#39; is, the method returns an instance of Derived, which can\n        &#39; always be safely cast to type Base). \n        &#39;\n        Dim ex As Example = CType( _\n            [Delegate].CreateDelegate(GetType(Example), minfo), _\n            Example _\n        )\n\n        &#39; Execute MyMethod using the delegate Example.\n        &#39;        \n        Dim b As Base = ex(New Derived())\n    End Sub\nEnd Module\n</code></pre><p><strong>Example 3</strong>  </p>\n<p>The following code example shows all the methods a single delegate type can represent.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method that specify <code>firstArgument</code> and a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  </p>\n</div>\n<p> The code example defines two classes, <code>C</code> and <code>F</code>, and a delegate type <code>D</code> with one argument of type <code>C</code>. The classes have matching static and instance methods <code>M1</code>, <code>M3</code>, and <code>M4</code>, and class <code>C</code> also has an instance method <code>M2</code> that has no arguments.  </p>\n<p> A third class named <code>Example</code> contains the code that creates the delegates.  </p>\n<ul>\n<li><p>Delegates are created for instance method <code>M1</code> of type <code>C</code> and type <code>F</code>; each is closed over an instance of the respective type. Method <code>M1</code> of type <code>C</code> displays the <code>ID</code> properties of the bound instance and of the argument.  </p>\n</li>\n<li><p>A delegate is created for method <code>M2</code> of type <code>C</code>. This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method. The method has no other arguments.  </p>\n</li>\n<li><p>Delegates are created for static method <code>M3</code> of type <code>C</code> and type <code>F</code>; these are open static delegates.  </p>\n</li>\n<li><p>Finally, delegates are created for static method <code>M4</code> of type <code>C</code> and type <code>F</code>; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments. Method <code>M4</code> of type <code>C</code> displays the <code>ID</code> properties of the bound instance and of the argument.  </p>\n<pre><code class=\"lang-vb\" name=\"Delegate.CreateDelegateTOM_2#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\n\n&#39; Declare a delegate type. The object of this code example\n&#39; is to show all the methods this delegate can bind to.\n&#39;\nPublic Delegate Sub D(ByVal c As C) \n\n&#39; Declare two sample classes, C and F. Class C has an ID\n&#39; property so instances can be identified.\n&#39;\nPublic Class C\n\n    Private _id As Integer\n\n    Public ReadOnly Property ID() As Integer \n        Get\n            Return _id\n        End Get\n    End Property\n\n    Public Sub New(ByVal newId As Integer) \n        Me._id = newId\n    End Sub\n    \n    Public Sub M1(ByVal c As C) \n        Console.WriteLine(&quot;Instance method M1(c As C) on C:  this.id = {0}, c.ID = {1}&quot;, _\n            Me.id, c.ID)\n    End Sub\n    \n    Public Sub M2() \n        Console.WriteLine(&quot;Instance method M2() on C:  this.id = {0}&quot;, Me.id)\n    End Sub\n    \n    Public Shared Sub M3(ByVal c As C) \n        Console.WriteLine(&quot;Shared method M3(c As C) on C:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M4(ByVal c1 As C, ByVal c2 As C) \n        Console.WriteLine(&quot;Shared method M4(c1 As C, c2 As C) on C:  c1.ID = {0}, c2.ID = {1}&quot;, _\n            c1.ID, c2.ID)\n    End Sub\nEnd Class\n\n\nPublic Class F\n    \n    Public Sub M1(ByVal c As C) \n        Console.WriteLine(&quot;Instance method M1(c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M3(ByVal c As C) \n        Console.WriteLine(&quot;Shared method M3(c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\n    \n    Public Shared Sub M4(ByVal f As F, ByVal c As C) \n        Console.WriteLine(&quot;Shared method M4(f As F, c As C) on F:  c.ID = {0}&quot;, c.ID)\n    End Sub\nEnd Class\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Dim c1 As New C(42)\n        Dim c2 As New C(1491)\n        Dim f1 As New F()\n        \n        Dim d As D\n        \n        &#39; Instance method with one argument of type C.\n        Dim cmi1 As MethodInfo = GetType(C).GetMethod(&quot;M1&quot;)\n        &#39; Instance method with no arguments.\n        Dim cmi2 As MethodInfo = GetType(C).GetMethod(&quot;M2&quot;)\n        &#39; Shared method with one argument of type C.\n        Dim cmi3 As MethodInfo = GetType(C).GetMethod(&quot;M3&quot;)\n        &#39; Shared method with two arguments of type C.\n        Dim cmi4 As MethodInfo = GetType(C).GetMethod(&quot;M4&quot;)\n        \n        &#39; Instance method with one argument of type C.\n        Dim fmi1 As MethodInfo = GetType(F).GetMethod(&quot;M1&quot;)\n        &#39; Shared method with one argument of type C.\n        Dim fmi3 As MethodInfo = GetType(F).GetMethod(&quot;M3&quot;)\n        &#39; Shared method with an argument of type F and an \n        &#39; argument of type C.\n        Dim fmi4 As MethodInfo = GetType(F).GetMethod(&quot;M4&quot;)\n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method on any type, with an argument of type C.&quot;)\n        &#39; D can represent any instance method that exactly matches its\n        &#39; signature. Methods on C and F are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), c1, cmi1), D)\n        d(c2)\n        d = CType([Delegate].CreateDelegate(GetType(D), f1, fmi1), D)\n        d(c2)\n        \n        Console.WriteLine(vbLf &amp; &quot;An instance method on C with no arguments.&quot;)\n        &#39; D can represent an instance method on C that has no arguments;\n        &#39; in this case, the argument of D represents the hidden first\n        &#39; argument of any instance method. The delegate acts like a \n        &#39; Shared method, and an instance of C must be passed each time\n        &#39; it is invoked.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, cmi2), D)\n        d(c1)\n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method on any type, with an argument of type C.&quot;)\n        &#39; D can represent any Shared method with the same signature.\n        &#39; Methods on F and C are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, cmi3), D)\n        d(c1)\n        d = CType([Delegate].CreateDelegate(GetType(D), Nothing, fmi3), D)\n        d(c1)\n        \n        Console.WriteLine(vbLf &amp; &quot;A Shared method on any type, with an argument of&quot;)\n        Console.WriteLine(&quot;    that type and an argument of type C.&quot;)\n        &#39; D can represent any Shared method with one argument of the\n        &#39; type the method belongs and a second argument of type C.\n        &#39; In this case, the method is closed over the instance of\n        &#39; supplied for the its first argument, and acts like an instance\n        &#39; method. Methods on F and C are shown here.\n        &#39;\n        d = CType([Delegate].CreateDelegate(GetType(D), c1, cmi4), D)\n        d(c2)\n        Dim test As [Delegate] = _\n            [Delegate].CreateDelegate(GetType(D), f1, fmi4, false)\n\n        &#39; This final example specifies False for throwOnBindFailure \n        &#39; in the call to CreateDelegate, so the variable &#39;test&#39;\n        &#39; contains Nothing if the method fails to bind (for \n        &#39; example, if fmi4 happened to represent a method of  \n        &#39; some class other than F).\n        &#39;\n        If test IsNot Nothing Then\n            d = CType(test, D)\n            d(c2)\n        End If\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An instance method on any type, with an argument of type C.\n&#39;Instance method M1(c As C) on C:  this.id = 42, c.ID = 1491\n&#39;Instance method M1(c As C) on F:  c.ID = 1491\n&#39;\n&#39;An instance method on C with no arguments.\n&#39;Instance method M2() on C:  this.id = 42\n&#39;\n&#39;A Shared method on any type, with an argument of type C.\n&#39;Shared method M3(c As C) on C:  c.ID = 42\n&#39;Shared method M3(c As C) on F:  c.ID = 42\n&#39;\n&#39;A Shared method on any type, with an argument of\n&#39;    that type and an argument of type C.\n&#39;Shared method M4(c1 As C, c2 As C) on C:  c1.ID = 42, c2.ID = 1491\n&#39;Shared method M4(f As F, c As C) on F:  c.ID = 1491\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Delegate.CreateDelegateTOM_2#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\n\n// Declare a delegate type. The object of this code example\n// is to show all the methods this delegate can bind to.\n//\npublic delegate void D(C c);\n\n// Declare two sample classes, C and F. Class C has an ID\n// property so instances can be identified.\n//\npublic class C\n{\n    private int id;\n    public int ID { get { return id; }}\n    public C(int id) { this.id = id; }\n\n    public void M1(C c) \n    { \n        Console.WriteLine(&quot;Instance method M1(C c) on C:  this.id = {0}, c.ID = {1}&quot;,\n            this.id, c.ID);\n    }\n  \n    public void M2() \n    { \n        Console.WriteLine(&quot;Instance method M2() on C:  this.id = {0}&quot;,\n            this.id);\n    }\n  \n    public static void M3(C c)\n    { \n        Console.WriteLine(&quot;Static method M3(C c) on C:  c.ID = {0}&quot;, c.ID); \n    }\n\n    public static void M4(C c1, C c2) \n    { \n        Console.WriteLine(&quot;Static method M4(C c1, C c2) on C:  c1.ID = {0}, c2.ID = {1}&quot;,\n            c1.ID, c2.ID);\n    }\n}\n\npublic class F\n{\n    public void M1(C c) \n    { \n        Console.WriteLine(&quot;Instance method M1(C c) on F:  c.ID = {0}&quot;,\n            c.ID);\n    }\n  \n    public static void M3(C c)\n    { \n        Console.WriteLine(&quot;Static method M3(C c) on F:  c.ID = {0}&quot;, c.ID); \n    }\n\n    public static void M4(F f, C c) \n    { \n        Console.WriteLine(&quot;Static method M4(F f, C c) on F:  c.ID = {0}&quot;,\n            c.ID);\n    }\n}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        C c1 = new C(42);\n        C c2 = new C(1491);\n        F f1 = new F();\n\n        D d;\n\n        // Instance method with one argument of type C.\n        MethodInfo cmi1 = typeof(C).GetMethod(&quot;M1&quot;); \n        // Instance method with no arguments.\n        MethodInfo cmi2 = typeof(C).GetMethod(&quot;M2&quot;); \n        // Static method with one argument of type C.\n        MethodInfo cmi3 = typeof(C).GetMethod(&quot;M3&quot;); \n        // Static method with two arguments of type C.\n        MethodInfo cmi4 = typeof(C).GetMethod(&quot;M4&quot;); \n\n        // Instance method with one argument of type C.\n        MethodInfo fmi1 = typeof(F).GetMethod(&quot;M1&quot;);\n        // Static method with one argument of type C.\n        MethodInfo fmi3 = typeof(F).GetMethod(&quot;M3&quot;); \n        // Static method with an argument of type F and an argument \n        // of type C.\n        MethodInfo fmi4 = typeof(F).GetMethod(&quot;M4&quot;); \n\n        Console.WriteLine(&quot;<br>An instance method on any type, with an argument of type C.&quot;);\n        // D can represent any instance method that exactly matches its\n        // signature. Methods on C and F are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi1);\n        d(c2);\n        d = (D) Delegate.CreateDelegate(typeof(D), f1, fmi1);\n        d(c2);\n\n        Console.WriteLine(&quot;<br>An instance method on C with no arguments.&quot;);\n        // D can represent an instance method on C that has no arguments;\n        // in this case, the argument of D represents the hidden first\n        // argument of any instance method. The delegate acts like a \n        // static method, and an instance of C must be passed each time\n        // it is invoked.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi2);\n        d(c1);\n\n        Console.WriteLine(&quot;<br>A static method on any type, with an argument of type C.&quot;);\n        // D can represent any static method with the same signature.\n        // Methods on F and C are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), null, cmi3);\n        d(c1);\n        d = (D) Delegate.CreateDelegate(typeof(D), null, fmi3);\n        d(c1);\n\n        Console.WriteLine(&quot;<br>A static method on any type, with an argument of&quot;);\n        Console.WriteLine(&quot;    that type and an argument of type C.&quot;);\n        // D can represent any static method with one argument of the\n        // type the method belongs and a second argument of type C.\n        // In this case, the method is closed over the instance of\n        // supplied for the its first argument, and acts like an instance\n        // method. Methods on F and C are shown here.\n        //\n        d = (D) Delegate.CreateDelegate(typeof(D), c1, cmi4);\n        d(c2);\n        Delegate test = \n            Delegate.CreateDelegate(typeof(D), f1, fmi4, false);\n\n        // This final example specifies false for throwOnBindFailure \n        // in the call to CreateDelegate, so the variable &#39;test&#39;\n        // contains Nothing if the method fails to bind (for \n        // example, if fmi4 happened to represent a method of  \n        // some class other than F).\n        //\n        if (test != null)\n        {\n            d = (D) test;\n            d(c2);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAn instance method on any type, with an argument of type C.\nInstance method M1(C c) on C:  this.id = 42, c.ID = 1491\nInstance method M1(C c) on F:  c.ID = 1491\n\nAn instance method on C with no arguments.\nInstance method M2() on C:  this.id = 42\n\nA static method on any type, with an argument of type C.\nStatic method M3(C c) on C:  c.ID = 42\nStatic method M3(C c) on F:  c.ID = 42\n\nA static method on any type, with an argument of\n    that type and an argument of type C.\nStatic method M4(C c1, C c2) on C:  c1.ID = 42, c2.ID = 1491\nStatic method M4(F f, C c) on F:  c.ID = 1491\n*/\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class instance on which <code>method</code> is invoked.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the instance method that the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean indicating whether to ignore the case when comparing the name of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not an instance method.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<p> This method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object,String,Boolean,Boolean)</a> method overload, specifying <code>true</code> for <code>throwOnBindFailure</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Type,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the class that implements <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the static method that the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean indicating whether to ignore the case when comparing the name of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified static method of the specified class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is not a <code>RuntimeType</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is an open generic type. That is, its <span class=\"xref\">stem.Type.ContainsGenericParameters*</span> property is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>static</code> method (<code>Shared</code> method in Visual Basic).  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<p> This method overload is equivalent to calling the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">CreateDelegate(Type,Type,String,Boolean,Boolean)</a> method overload, specifying <code>true</code> for <code>throwOnBindFailure</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Object_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object,String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class instance on which <code>method</code> is invoked.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the instance method that the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean indicating whether to ignore the case when comparing the name of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnBindFailure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if <code>method</code> cannot be bound; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not an instance method.  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_CreateDelegate_System_Type_System_Type_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Delegate_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Type,String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the class that implements <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the static method that the delegate is to represent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean indicating whether to ignore the case when comparing the name of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnBindFailure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if <code>method</code> cannot be bound; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type that represents the specified static method of the specified class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not inherit <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a>.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not a <code>RuntimeType</code>. See <a href=\"http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858\" data-linktype=\"external\">Runtime Types in Reflection</a>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is not a <code>RuntimeType</code>.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is an open generic type. That is, its <span class=\"xref\">stem.Type.ContainsGenericParameters*</span> property is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is not a <code>static</code> method (<code>Shared</code> method in Visual Basic).  </p>\n<p> -or-  </p>\n<p> <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The <code>Invoke</code> method of <code>type</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the permissions necessary to access <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this method can be used to access non-public methods if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public methods is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_DynamicInvoke_System_Object___\">\r\n    \r\n            <a id=\"System_Delegate_DynamicInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicInvoke(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Dynamically invokes (late-bound) the method represented by the current delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object DynamicInvoke (object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects that are the arguments to pass to the method represented by the current delegate.  </p>\n<p> -or-  </p>\n<p> <code>null</code>, if the method represented by the current delegate does not require arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object returned by the method represented by the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).  </p>\n<p> -or-  </p>\n<p> The number, order, or type of parameters listed in <code>args</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method represented by the delegate is invoked on an object or a class that does not support it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The method represented by the delegate is an instance method and the target object is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One of the encapsulated methods throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls the <a class=\"xref\" href=\"system.delegate#System_Delegate_DynamicInvokeImpl_\" data-linktype=\"relative-path\">DynamicInvokeImpl</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_DynamicInvokeImpl_System_Object___\">\r\n    \r\n            <a id=\"System_Delegate_DynamicInvokeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicInvokeImpl(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Dynamically invokes (late-bound) the method represented by the current delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual object DynamicInvokeImpl (object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects that are the arguments to pass to the method represented by the current delegate.  </p>\n<p> -or-  </p>\n<p> <code>null</code>, if the method represented by the current delegate does not require arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object returned by the method represented by the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).  </p>\n<p> -or-  </p>\n<p> The number, order, or type of parameters listed in <code>args</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method represented by the delegate is invoked on an object or a class that does not support it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The method represented by the delegate is an instance method and the target object is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One of the encapsulated methods throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.delegate#System_Delegate_DynamicInvoke_\" data-linktype=\"relative-path\">DynamicInvoke</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Delegate_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> and the current delegate have the same targets, methods, and invocation list; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the two delegates are not of the same type, they are not considered equal.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  </p>\n</div>\n<p> The methods and targets are compared for equality as follows:  </p>\n<ul>\n<li><p>If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  </p>\n<p>Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_GetHashCode\">\r\n    \r\n            <a id=\"System_Delegate_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for the delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value of this method must not be persisted for two reasons. First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless. Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_GetInvocationList\">\r\n    \r\n            <a id=\"System_Delegate_GetInvocationList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInvocationList()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the invocation list of the delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Delegate[] GetInvocationList ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a>[]</div>\r\n                  </div>\r\n                  <p>An array of delegates representing the invocation list of the current delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each delegate in the array represents exactly one method.  </p>\n<p> The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example assigns three methods to a delegate. It then calls the  GetInvocationList method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring &quot;File&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Delegate.GetInvocationList#1\">using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Windows.Forms;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Action&lt;String&gt; outputMessage = null;\n      outputMessage += Console.WriteLine;\n      outputMessage += OutputToFile;\n      outputMessage += ShowMessageBox;\n\n//       Dim output1 As Action(Of String) = AddressOf Console.WriteLine\n//       Dim output2 As Action(Of String) = AddressOf OutputToFile \n//       Dim output3 As Action(Of String) = AddressOf MessageBox.Show\n//       \n//       outputMessage = [Delegate].Combine( { output1, output2, output3 } )\n      Console.WriteLine(&quot;Invocation list has {0} methods.&quot;, \n                        outputMessage.GetInvocationList().Length);\n\n      // Invoke delegates normally.\n      outputMessage(&quot;Hello there!&quot;);\n      Console.WriteLine(&quot;Press &lt;Enter&gt; to continue...&quot;);\n      Console.ReadLine();\n      \n      // Invoke each delegate in the invocation list in reverse order.\n      for (int ctr = outputMessage.GetInvocationList().Length - 1; ctr &gt;= 0; ctr--) {\n         var outputMsg = outputMessage.GetInvocationList()[ctr];\n         outputMsg.DynamicInvoke(&quot;Greetings and salutations!&quot;);\n      }\n      Console.WriteLine(&quot;Press &lt;Enter&gt; to continue...&quot;);\n      Console.ReadLine();\n\n      // Invoke each delegate that doesn&#39;t write to a file.\n      for (int ctr = 0; ctr &lt; outputMessage.GetInvocationList().Length; ctr++) {  \n         var outputMsg = outputMessage.GetInvocationList()[ctr];\n         if (! outputMsg.GetMethodInfo().Name.Contains(&quot;File&quot;))\n            outputMsg.DynamicInvoke( new String[] { &quot;Hi!&quot; } );\n         \n      }\n   }\n\n   private static void OutputToFile(String s)\n   {\n      var sw = new StreamWriter(@&quot;.\\output.txt&quot;);\n      sw.WriteLine(s);\n      sw.Close();\n   }\n\n   private static void ShowMessageBox(String s)\n   {\n      MessageBox.Show(s);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Delegate.GetInvocationList#1\">Imports System.IO\nImports System.Reflection\nImports System.Windows.Forms\n\nModule Example\n   Public outputMessage As Action(Of String)\n   \n   Public Sub Main()\n      Dim output1 As Action(Of String) = AddressOf Console.WriteLine\n      Dim output2 As Action(Of String) = AddressOf OutputToFile \n      Dim output3 As Action(Of String) = AddressOf MessageBox.Show\n      \n      outputMessage = [Delegate].Combine( { output1, output2, output3 } )\n      Console.WriteLine(&quot;Invocation list has {0} methods.&quot;, \n                        outputMessage.GetInvocationList().Count)\n\n      &#39; Invoke delegates normally.\n      outputMessage(&quot;Hello there!&quot;)\n      Console.WriteLine(&quot;Press &lt;Enter&gt; to continue...&quot;)\n      Console.ReadLine()\n      \n      &#39; Invoke each delegate in the invocation list in reverse order.\n      For ctr As Integer = outputMessage.GetInvocationList().Count - 1 To 0 Step -1\n          Dim outputMsg = outputMessage.GetInvocationList(ctr)\n          outputMsg.DynamicInvoke(&quot;Greetings and salutations!&quot;)\n      Next\n      Console.WriteLine(&quot;Press &lt;Enter&gt; to continue...&quot;)\n      Console.ReadLine()\n      \n      &#39; Invoke each delegate that doesn&#39;t write to a file.\n      For ctr As Integer = 0 To outputMessage.GetInvocationList().Count - 1 \n         Dim outputMsg = outputMessage.GetInvocationList(ctr)\n         If Not outputMsg.GetMethodInfo().Name.Contains(&quot;File&quot;) Then\n            outputMsg.DynamicInvoke( { &quot;Hi!&quot; } )\n         End If\n      Next\n   End Sub\n   \n   Private Sub OutputToFile(s As String)\n      Dim sw As New StreamWriter(&quot;.\\output.txt&quot;)\n      sw.WriteLine(s)\n      sw.Close()\n   End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_GetMethodImpl\">\r\n    \r\n            <a id=\"System_Delegate_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the static method represented by the current delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Reflection.MethodInfo GetMethodImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> describing the static method represented by the current delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method applies only if the current delegate represents a static method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Delegate_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_Remove_System_Delegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Delegate,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate Remove (Delegate source, Delegate value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate from which to remove the invocation list of <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing the last occurrence of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is <code>null</code> or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code> or if <code>source</code> is a null reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The delegate types do not match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the invocation list of <code>value</code> matches a contiguous set of elements in the invocation list of <code>source</code>, then the invocation list of <code>value</code> is said to occur within the invocation list of <code>source</code>. If the invocation list of <code>value</code> occurs more than once in the invocation list of <code>source</code>, the last occurrence is removed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_RemoveAll_System_Delegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_RemoveAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAll(Delegate,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate RemoveAll (Delegate source, Delegate value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate from which to remove the invocation list of <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing all occurrences of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is <code>null</code> or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code>, if <code>source</code> contains only a series of invocation lists that are equal to the invocation list of <code>value</code>, or if <code>source</code> is a null reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The delegate types do not match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the invocation list of <code>value</code> matches a contiguous set of elements in the invocation list of <code>source</code>, then the invocation list of <code>value</code> is said to occur within the invocation list of <code>source</code>. If the invocation list of <code>value</code> occurs more than once in the invocation list of <code>source</code>, all occurrences are removed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_RemoveImpl_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_RemoveImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveImpl(Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the invocation list of a delegate from the invocation list of another delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual Delegate RemoveImpl (Delegate d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the current delegate&#39;s invocation list. Returns the current delegate if <code>value</code> is <code>null</code> or if the invocation list of <code>value</code> is not found within the current delegate&#39;s invocation list. Returns <code>null</code> if the invocation list of <code>value</code> is equal to the current delegate&#39;s invocation list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the invocation list of <code>value</code> matches a contiguous set of elements in the current delegate&#39;s invocation list, then the invocation list of <code>value</code> is said to occur within the current delegate&#39;s invocation list. If the invocation list of <code>value</code> occurs more than once in the current delegate&#39;s invocation list, the last occurrence is removed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_op_Equality_System_Delegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Delegate,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified delegates are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (Delegate d1, Delegate d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first delegate to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second delegate to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is equal to <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.  </p>\n<p> If the two delegates are not of the same type, they are not considered equal.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  </p>\n</div>\n<p> The methods and targets are compared for equality as follows:  </p>\n<ul>\n<li><p>If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  </p>\n<p>Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Delegate_op_Inequality_System_Delegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Delegate_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Delegate,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified delegates are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (Delegate d1, Delegate d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first delegate to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second delegate to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is not equal to <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.  </p>\n<p> If the two delegates are not of the same type, they are not considered equal.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  </p>\n</div>\n<p> The methods and targets are compared for equality as follows:  </p>\n<ul>\n<li><p>If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  </p>\n</li>\n<li><p>Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  </p>\n<p>Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Delegate.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Delegate.yml\">\r\n<meta name=\"APIName\" content=\"System.Delegate\">\r\n<meta name=\"APIName\" content=\"System.Delegate..ctor\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Clone\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Combine\">\r\n<meta name=\"APIName\" content=\"System.Delegate.CombineImpl\">\r\n<meta name=\"APIName\" content=\"System.Delegate.CreateDelegate\">\r\n<meta name=\"APIName\" content=\"System.Delegate.DynamicInvoke\">\r\n<meta name=\"APIName\" content=\"System.Delegate.DynamicInvokeImpl\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Equals\">\r\n<meta name=\"APIName\" content=\"System.Delegate.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Delegate.GetInvocationList\">\r\n<meta name=\"APIName\" content=\"System.Delegate.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Delegate.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Method\">\r\n<meta name=\"APIName\" content=\"System.Delegate.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Delegate.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Delegate.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Delegate.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Remove\">\r\n<meta name=\"APIName\" content=\"System.Delegate.RemoveAll\">\r\n<meta name=\"APIName\" content=\"System.Delegate.RemoveImpl\">\r\n<meta name=\"APIName\" content=\"System.Delegate.Target\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8c38eb3b-0d69-f831-eaa2-032da9dd3840\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Delegate.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Delegate\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Delegate.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Delegate.yml","open_to_public_contributors":true,"api_name":["System.Delegate","System.Delegate..ctor","System.Delegate.Clone","System.Delegate.Combine","System.Delegate.CombineImpl","System.Delegate.CreateDelegate","System.Delegate.DynamicInvoke","System.Delegate.DynamicInvokeImpl","System.Delegate.Equals","System.Delegate.GetHashCode","System.Delegate.GetInvocationList","System.Delegate.GetMethodImpl","System.Delegate.GetObjectData","System.Delegate.Method","System.Delegate.op_Equality","System.Delegate.op_op_Equality","System.Delegate.op_Inequality","System.Delegate.op_op_Inequality","System.Delegate.Remove","System.Delegate.RemoveAll","System.Delegate.RemoveImpl","System.Delegate.Target"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Delegate","System::Delegate","System.Delegate.#ctor","System::Delegate::#ctor","System.Delegate.Clone","System::Delegate::Clone","System.Delegate.Combine","System::Delegate::Combine","System.Delegate.CombineImpl","System::Delegate::CombineImpl","System.Delegate.CreateDelegate","System::Delegate::CreateDelegate","System.Delegate.DynamicInvoke","System::Delegate::DynamicInvoke","System.Delegate.DynamicInvokeImpl","System::Delegate::DynamicInvokeImpl","System.Delegate.Equals","System::Delegate::Equals","System.Delegate.GetHashCode","System::Delegate::GetHashCode","System.Delegate.GetInvocationList","System::Delegate::GetInvocationList","System.Delegate.GetMethodImpl","System::Delegate::GetMethodImpl","System.Delegate.GetObjectData","System::Delegate::GetObjectData","System.Delegate.Method","System::Delegate::Method","System.Delegate.op_Equality","System::Delegate::op_Equality","System.Delegate.op_Inequality","System::Delegate::op_Inequality","System.Delegate.Remove","System::Delegate::Remove","System.Delegate.RemoveAll","System::Delegate::RemoveAll","System.Delegate.RemoveImpl","System::Delegate::RemoveImpl","System.Delegate.Target","System::Delegate::Target"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8c38eb3b-0d69-f831-eaa2-032da9dd3840","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Delegate.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Delegate.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Delegate class | Microsoft Docs","_op_ogTitle":"Delegate class","description":"Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Delegate","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.delegate","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.delegate","fileRelativePath":"System.Delegate.html"},"themesRelativePathToOutputRoot":"_themes/"}