{"content":"    \r\n    <h1 id=\"System_Diagnostics_EntryWrittenEventArgs\">\r\n      <span class=\"lang-csharp\">EntryWrittenEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_EntryWritten\" data-linktype=\"relative-path\">EntryWritten</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class EntryWrittenEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EntryWrittenEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EntryWrittenEventArgs__ctor\" data-linktype=\"self-bookmark\">EntryWrittenEventArgs()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EntryWrittenEventArgs__ctor_System_Diagnostics_EventLogEntry_\" data-linktype=\"self-bookmark\">EntryWrittenEventArgs(EventLogEntry)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> class with the specified event log entry.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EntryWrittenEventArgs_Entry\" data-linktype=\"self-bookmark\">Entry</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the event log entry that was written to the log.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EntryWrittenEventArgs__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_EntryWrittenEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryWrittenEventArgs()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EntryWrittenEventArgs ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the EntryWrittenEventArgs constructor. It creates a custom <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a> object and writes an entry into it. Then it creates an <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> object using the first entry in the custom <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a>. This object is used to notify a message.  </p>\n<pre><code class=\"lang-vb\" name=\"EntryWrittenEventArgs_ctor1#1\">Imports System\nImports System.Diagnostics\n\nClass MySample\n   Public Shared Sub Main()\n      Try\n         Dim myNewLog As New EventLog()\n         myNewLog.Log = &quot;MyNewLog&quot;\n         myNewLog.Source = &quot;MySource&quot;\n         &#39; Create the source if it does not exist already.\n         If Not EventLog.SourceExists(&quot;MySource&quot;) Then\n            EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyNewLog&quot;)\n            Console.WriteLine(&quot;CreatingEventSource&quot;)\n         End If\n         &#39; Write an entry to the EventLog.\n         myNewLog.WriteEntry(&quot;The Latest entry in the Event Log&quot;)\n         Dim myEntryEventArgs As EntryWrittenEventArgs = _\n                                    New EntryWrittenEventArgs()\n         MyOnEntry(myNewLog, myEntryEventArgs)\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception Raised&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   Protected Shared Sub MyOnEntry(ByVal source As Object, _\n                                  ByVal e As EntryWrittenEventArgs)\n      If e.Entry Is Nothing Then\n          Console.WriteLine(&quot;A new entry is written in MyNewLog.&quot;)\n      End If\n   End Sub &#39;MyOnEntry\nEnd Class &#39;MySample\n</code></pre><pre><code class=\"lang-cs\" name=\"EntryWrittenEventArgs_ctor1#1\">using System;\nusing System.Diagnostics;\n\nclass MySample\n{\n    public static void Main()\n    {\n        try\n        {\n            EventLog myNewLog = new EventLog();\n            myNewLog.Log = &quot;MyNewLog&quot;;\n            myNewLog.Source = &quot;MySource&quot;;\n            // Create the source if it does not exist already.\n            if (!EventLog.SourceExists(&quot;MySource&quot;))\n            {\n                // An event log source should not be created and immediately used.\n                // There is a latency time to enable the source, it should be created\n                // prior to executing the application that uses the source.\n                // Execute this sample a second time to use the new source.\n                EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyNewLog&quot;);\n                Console.WriteLine(&quot;CreatingEventSource&quot;);\n                Console.WriteLine(&quot;Exiting, execute the application a second time to use the source.&quot;);\n                // The source is created.  Exit the application to allow it to be registered.\n                return;\n            }\n            // Write an entry to the EventLog.\n            myNewLog.WriteEntry(&quot;The Latest entry in the Event Log&quot;);\n            int myEntries = myNewLog.Entries.Count;\n            EventLogEntry entry = myNewLog.Entries[myEntries - 1];\n            EntryWrittenEventArgs myEntryEventArgs =\n                                 new EntryWrittenEventArgs();\n            MyOnEntry(myNewLog, myEntryEventArgs);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Exception Raised&quot; + e.Message);\n        }\n    }\n    protected static void MyOnEntry(Object source, EntryWrittenEventArgs e)\n    {\n        if (e.Entry == null)\n            Console.WriteLine(&quot;A new entry is written in MyNewLog.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EntryWrittenEventArgs_ctor1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\n\nvoid MyOnEntry( Object^ source, EntryWrittenEventArgs^ e )\n{\n   if ( !e-&gt;Entry )\n      Console::WriteLine( &quot;A new entry is written in MyNewLog.&quot; );\n}\n\nint main()\n{\n   try\n   {\n      EventLog^ myNewLog = gcnew EventLog;\n      myNewLog-&gt;Log = &quot;MyNewLog&quot;;\n      myNewLog-&gt;Source = &quot;MySource&quot;;\n      \n      // Create the source if it does not exist already.\n      if (  !EventLog::SourceExists( &quot;MySource&quot; ) )\n      {\n         EventLog::CreateEventSource( &quot;MySource&quot;, &quot;MyNewLog&quot; );\n         Console::WriteLine( &quot;CreatingEventSource&quot; );\n      }\n      \n      // Write an entry to the EventLog.\n      myNewLog-&gt;WriteEntry( &quot;The Latest entry in the Event Log&quot; );\n      int myEntries = myNewLog-&gt;Entries-&gt;Count;\n      EventLogEntry^ entry = myNewLog-&gt;Entries[ myEntries - 1 ];\n      EntryWrittenEventArgs^ myEntryEventArgs = gcnew EntryWrittenEventArgs;\n      MyOnEntry( myNewLog, myEntryEventArgs );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Raised{0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EntryWrittenEventArgs__ctor_System_Diagnostics_EventLogEntry_\">\r\n    \r\n            <a id=\"System_Diagnostics_EntryWrittenEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryWrittenEventArgs(EventLogEntry)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> class with the specified event log entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EntryWrittenEventArgs (System.Diagnostics.EventLogEntry entry);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>entry</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> that represents the entry that was written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs#System_Diagnostics_EntryWrittenEventArgs__ctor_\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> constructor. It creates a custom <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a> object and writes an entry into it. Then it creates an <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> object using the first entry in the custom <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a>. This object is used to notify a message.  </p>\n<pre><code class=\"lang-cs\" name=\"EntryWrittenEventArgs_ctor2#1\">using System;\nusing System.Diagnostics;\n\nclass MySample\n{\n    public static void Main()\n    {\n        try\n        {\n            EventLog myNewLog = new EventLog();\n            myNewLog.Log = &quot;MyNewLog&quot;;\n            myNewLog.Source = &quot;MySource&quot;;\n            // Create the source if it does not exist already.\n            if (!EventLog.SourceExists(&quot;MySource&quot;))\n            {\n                // An event log source should not be created and immediately used.\n                // There is a latency time to enable the source, it should be created\n                // prior to executing the application that uses the source.\n                // Execute this sample a second time to use the new source.\n                EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyNewLog&quot;);\n                Console.WriteLine(&quot;CreatingEventSource&quot;);\n                Console.WriteLine(&quot;Exiting, execute the application a second time to use the source.&quot;);\n                // The source is created.  Exit the application to allow it to be registered.\n                return;\n            }\n            // Write an entry to the EventLog.\n            myNewLog.WriteEntry(&quot;The Latest entry in the Event Log&quot;);\n            int myEntries = myNewLog.Entries.Count;\n            EventLogEntry entry = myNewLog.Entries[myEntries - 1];\n            EntryWrittenEventArgs myEntryEventArgs =\n                                 new EntryWrittenEventArgs(entry);\n            MyOnEntry(myNewLog, myEntryEventArgs);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Exception Raised&quot; + e.Message);\n        }\n    }\n    protected static void MyOnEntry(Object source, EntryWrittenEventArgs e)\n    {\n        EventLogEntry myEventLogEntry = e.Entry;\n        if (myEventLogEntry != null)\n        {\n            Console.WriteLine(&quot;Current message entry is: &#39;&quot;\n                              + myEventLogEntry.Message + &quot;&#39;&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;The current entry is null&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EntryWrittenEventArgs_ctor2#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\n\nvoid MyOnEntry( Object^ source, EntryWrittenEventArgs^ e )\n{\n   EventLogEntry^ myEventLogEntry = e-&gt;Entry;\n   if ( myEventLogEntry )\n   {\n      Console::WriteLine( &quot;Current message entry is: &#39;{0}&#39;&quot;, myEventLogEntry-&gt;Message );\n   }\n   else\n   {\n      Console::WriteLine( &quot;The current entry is null&quot; );\n   }\n}\n\nint main()\n{\n   try\n   {\n      EventLog^ myNewLog = gcnew EventLog;\n      myNewLog-&gt;Log = &quot;MyNewLog&quot;;\n      myNewLog-&gt;Source = &quot;MySource&quot;;\n      \n      // Create the source if it does not exist already.\n      if (  !EventLog::SourceExists( &quot;MySource&quot; ) )\n      {\n         EventLog::CreateEventSource( &quot;MySource&quot;, &quot;MyNewLog&quot; );\n         Console::WriteLine( &quot;CreatingEventSource&quot; );\n      }\n      \n      // Write an entry to the EventLog.\n      myNewLog-&gt;WriteEntry( &quot;The Latest entry in the Event Log&quot; );\n      int myEntries = myNewLog-&gt;Entries-&gt;Count;\n      EventLogEntry^ entry = myNewLog-&gt;Entries[ myEntries - 1 ];\n      EntryWrittenEventArgs^ myEntryEventArgs = gcnew EntryWrittenEventArgs( entry );\n      MyOnEntry( myNewLog, myEntryEventArgs );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Raised {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EntryWrittenEventArgs_ctor2#1\">Imports System\nImports System.Diagnostics\n\nClass MySample\n   Public Shared Sub Main()\n      Try\n         Dim myNewLog As New EventLog()\n         &#39; Create the source if it does not exist already.\n         If Not EventLog.SourceExists(&quot;MySource&quot;) Then\n            EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyNewLog&quot;)\n            Console.WriteLine(&quot;CreatingEventSource&quot;)\n         End If\n         myNewLog.Log = &quot;MyNewLog&quot;\n         myNewLog.Source = &quot;MySource&quot;\n         &#39; Write an entry to the EventLog.\n         myNewLog.WriteEntry(&quot;The Latest entry in the Event Log&quot;)\n\n         Dim myEntries As Integer = myNewLog.Entries.Count\n         Dim entry As EventLogEntry = myNewLog.Entries(myEntries - 1)\n         Dim myEntryEventArgs As New EntryWrittenEventArgs(entry)\n         MyOnEntry(myNewLog, myEntryEventArgs)\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception Raised&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n\n   Protected Shared Sub MyOnEntry(source As Object, e As EntryWrittenEventArgs)\n      Dim myEventLogEntry As EventLogEntry = e.Entry\n      If Not (myEventLogEntry Is Nothing) Then\n         Console.WriteLine(&quot;Current message entry is: &#39;&quot; + _\n                                             myEventLogEntry.Message + &quot;&#39;&quot;)\n      Else\n         Console.WriteLine(&quot;The current entry is null&quot;)\n      End If\n   End Sub &#39;MyOnEntry\nEnd Class &#39;MySample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EntryWrittenEventArgs_Entry\">\r\n    \r\n            <a id=\"System_Diagnostics_EntryWrittenEventArgs_Entry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Entry</div>        \r\n          </div>\r\n    \r\n            <p>Gets the event log entry that was written to the log.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.EventLogEntry Entry { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> that represents the entry that was written to the event log.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example assumes that you have already implemented the sample in <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs#System_Diagnostics_EntryWrittenEventArgs__ctor_System_Diagnostics_EventLogEntry_\" data-linktype=\"relative-path\">EntryWrittenEventArgs(EventLogEntry)</a>.  </p>\n<p> It creates a custom <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a> object and writes an entry into it. Then it creates an <a class=\"xref\" href=\"system.diagnostics.entrywritteneventargs\" data-linktype=\"relative-path\">EntryWrittenEventArgs</a> object using the first entry in the custom EventLog. This object is used to notify a message.  </p>\n<pre><code class=\"lang-cs\" name=\"EntryWrittenEventArgs_ctor2#2\">    protected static void MyOnEntry(Object source, EntryWrittenEventArgs e)\n    {\n        EventLogEntry myEventLogEntry = e.Entry;\n        if (myEventLogEntry != null)\n        {\n            Console.WriteLine(&quot;Current message entry is: &#39;&quot;\n                              + myEventLogEntry.Message + &quot;&#39;&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;The current entry is null&quot;);\n        }\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"EntryWrittenEventArgs_ctor2#2\">void MyOnEntry( Object^ source, EntryWrittenEventArgs^ e )\n{\n   EventLogEntry^ myEventLogEntry = e-&gt;Entry;\n   if ( myEventLogEntry )\n   {\n      Console::WriteLine( &quot;Current message entry is: &#39;{0}&#39;&quot;, myEventLogEntry-&gt;Message );\n   }\n   else\n   {\n      Console::WriteLine( &quot;The current entry is null&quot; );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EntryWrittenEventArgs_ctor2#2\">   Protected Shared Sub MyOnEntry(source As Object, e As EntryWrittenEventArgs)\n      Dim myEventLogEntry As EventLogEntry = e.Entry\n      If Not (myEventLogEntry Is Nothing) Then\n         Console.WriteLine(&quot;Current message entry is: &#39;&quot; + _\n                                             myEventLogEntry.Message + &quot;&#39;&quot;)\n      Else\n         Console.WriteLine(&quot;The current entry is null&quot;)\n      End If\n   End Sub &#39;MyOnEntry\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EntryWrittenEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EntryWrittenEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EntryWrittenEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EntryWrittenEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EntryWrittenEventArgs.Entry\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b1539e9d-1a29-ff8b-7dc6-72dd88e2c00e\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\EntryWrittenEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.EntryWrittenEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EntryWrittenEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EntryWrittenEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.EntryWrittenEventArgs","System.Diagnostics.EntryWrittenEventArgs..ctor","System.Diagnostics.EntryWrittenEventArgs.Entry"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.EntryWrittenEventArgs","System::Diagnostics::EntryWrittenEventArgs","System.Diagnostics.EntryWrittenEventArgs.#ctor","System::Diagnostics::EntryWrittenEventArgs::#ctor","System.Diagnostics.EntryWrittenEventArgs.Entry","System::Diagnostics::EntryWrittenEventArgs::Entry"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b1539e9d-1a29-ff8b-7dc6-72dd88e2c00e","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\EntryWrittenEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/EntryWrittenEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EntryWrittenEventArgs class | Microsoft Docs","_op_ogTitle":"EntryWrittenEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.EntryWrittenEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.entrywritteneventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.entrywritteneventargs","fileRelativePath":"System.Diagnostics.EntryWrittenEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}