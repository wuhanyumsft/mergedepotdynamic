{"content":"    \r\n    <h1 id=\"System_IO_Pipes_AnonymousPipeClientStream\">\r\n      <span class=\"lang-csharp\">AnonymousPipeClientStream</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class AnonymousPipeClientStream : System.IO.Pipes.PipeStream</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream\" data-linktype=\"relative-path\">System.IO.Pipes.PipeStream</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AnonymousPipeClientStream</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CanRead\" data-linktype=\"relative-path\">CanRead</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CanSeek\" data-linktype=\"relative-path\">CanSeek</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CanWrite\" data-linktype=\"relative-path\">CanWrite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CheckPipePropertyOperations\" data-linktype=\"relative-path\">CheckPipePropertyOperations()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CheckReadOperations\" data-linktype=\"relative-path\">CheckReadOperations()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_CheckWriteOperations\" data-linktype=\"relative-path\">CheckWriteOperations()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_EndRead_System_IAsyncResult_\" data-linktype=\"relative-path\">EndRead(IAsyncResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_EndWrite_System_IAsyncResult_\" data-linktype=\"relative-path\">EndWrite(IAsyncResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Flush\" data-linktype=\"relative-path\">Flush()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_GetAccessControl\" data-linktype=\"relative-path\">GetAccessControl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_InBufferSize\" data-linktype=\"relative-path\">InBufferSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_InitializeHandle_Microsoft_Win32_SafeHandles_SafePipeHandle_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">InitializeHandle(SafePipeHandle,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_IsAsync\" data-linktype=\"relative-path\">IsAsync</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_IsConnected\" data-linktype=\"relative-path\">IsConnected</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_IsHandleExposed\" data-linktype=\"relative-path\">IsHandleExposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_IsMessageComplete\" data-linktype=\"relative-path\">IsMessageComplete</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Length\" data-linktype=\"relative-path\">Length</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_OutBufferSize\" data-linktype=\"relative-path\">OutBufferSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Position\" data-linktype=\"relative-path\">Position</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Read_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">Read(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_ReadByte\" data-linktype=\"relative-path\">ReadByte()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_SafePipeHandle\" data-linktype=\"relative-path\">SafePipeHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Seek_System_Int64_System_IO_SeekOrigin_\" data-linktype=\"relative-path\">Seek(Int64,SeekOrigin)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_SetAccessControl_System_IO_Pipes_PipeSecurity_\" data-linktype=\"relative-path\">SetAccessControl(PipeSecurity)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_SetLength_System_Int64_\" data-linktype=\"relative-path\">SetLength(Int64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_WaitForPipeDrain\" data-linktype=\"relative-path\">WaitForPipeDrain()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_Write_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">Write(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.pipes.pipestream#System_IO_Pipes_PipeStream_WriteByte_System_Byte_\" data-linktype=\"relative-path\">WriteByte(Byte)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanTimeout\" data-linktype=\"relative-path\">CanTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close\" data-linktype=\"relative-path\">Close()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_\" data-linktype=\"relative-path\">CopyTo(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyTo(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"relative-path\">CopyToAsync(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CreateWaitHandle\" data-linktype=\"relative-path\">CreateWaitHandle()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync\" data-linktype=\"relative-path\">FlushAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">FlushAsync(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Null\" data-linktype=\"relative-path\">Null</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ObjectInvariant\" data-linktype=\"relative-path\">ObjectInvariant()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadTimeout\" data-linktype=\"relative-path\">ReadTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Synchronized_System_IO_Stream_\" data-linktype=\"relative-path\">Synchronized(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteTimeout\" data-linktype=\"relative-path\">WriteTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeClientStream class enables a child process to connect to and exchange information with a parent process.  </p>\n<p> Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> value of <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> is not supported because anonymous pipes are defined to be one-way.  </p>\n<p> Anonymous pipes do not support <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> read modes.  </p>\n<p> The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeserverstream#System_IO_Pipes_AnonymousPipeServerStream_GetClientHandleAsString_\" data-linktype=\"relative-path\">GetClientHandleAsString</a> method. The string is then passed as a parameter when creating the client process. From the client process, it is passed to the AnonymousPipeClientStream constructor as the <code>pipeHandleAsString</code> parameter.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/winxppro-md.md&quot; -->Windows XP Professional<!--END INCLUDE --> and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win2kserver-md.md&quot; -->Windows 2000 Server<!--END INCLUDE -->, a maximum of 10 pipes can simultaneously connect over the network.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream__ctor_System_String_\" data-linktype=\"self-bookmark\">AnonymousPipeClientStream(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class with the specified string representation of the pipe handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream__ctor_System_IO_Pipes_PipeDirection_Microsoft_Win32_SafeHandles_SafePipeHandle_\" data-linktype=\"self-bookmark\">AnonymousPipeClientStream(PipeDirection,SafePipeHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class from the specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream__ctor_System_IO_Pipes_PipeDirection_System_String_\" data-linktype=\"self-bookmark\">AnonymousPipeClientStream(PipeDirection,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class with the specified pipe direction and a string representation of the pipe handle.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream_ReadMode\" data-linktype=\"self-bookmark\">ReadMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the reading mode for the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream_TransmissionMode\" data-linktype=\"self-bookmark\">TransmissionMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the pipe transmission mode supported by the current pipe.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Pipes_AnonymousPipeClientStream_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases unmanaged resources and performs other cleanup operations before the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> instance is reclaimed by garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_System_String_\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AnonymousPipeClientStream(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class with the specified string representation of the pipe handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AnonymousPipeClientStream (string pipeHandleAsString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pipeHandleAsString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that represents the pipe handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>pipeHandleAsString</code> is not a valid pipe handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For constructors without a <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> parameter, the default direction is <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object is created in a child process.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01\">Imports System\nImports System.IO\nImports System.IO.Pipes\n\nClass PipeClient\n\n    Shared Sub Main(ByVal args As String())\n        If (args.Length &gt; 0) Then\n\n            Using pipeClient As New AnonymousPipeClientStream(args(0))\n\n                Console.WriteLine(&quot;Current TransmissionMode: {0}.&quot;, _\n                   pipeClient.TransmissionMode)\n\n                &#39; Anonymous Pipes do not support Message mode.\n                Try\n                    Console.WriteLine(&quot;Setting ReadMode to &#39;Message&#39;.&quot;)\n                    pipeClient.ReadMode = PipeTransmissionMode.Message\n                Catch e As NotSupportedException\n                    Console.WriteLine(&quot;EXCEPTION: {0}&quot;, e.Message)\n                End Try\n\n                Using sr As New StreamReader(pipeClient)\n\n                    &#39; Display the read text to the console\n                    Dim temp As String\n                    temp = sr.ReadLine()\n                    While Not temp = Nothing\n                        Console.WriteLine(temp)\n                        temp = sr.ReadLine()\n                    End While\n                End Using\n            End Using\n        End If\n        Console.Write(&quot;Press Enter to continue...&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01\">using System;\nusing System.IO;\nusing System.IO.Pipes;\n\nclass PipeClient\n{\n    static void Main(string[] args)\n    {\n        if (args.Length &gt; 0)\n        {\n            using (PipeStream pipeClient =\n                new AnonymousPipeClientStream(args[0]))\n            {\n\n                Console.WriteLine(&quot;Current TransmissionMode: {0}.&quot;,\n                   pipeClient.TransmissionMode);\n\n                // Anonymous Pipes do not support Message mode.\n                try\n                {\n                    Console.WriteLine(&quot;Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                    pipeClient.ReadMode = PipeTransmissionMode.Message;\n                }\n                catch (NotSupportedException e)\n                {\n                    Console.WriteLine(&quot;EXCEPTION: {0}&quot;, e.Message);\n                }\n\n                using (StreamReader sr = new StreamReader(pipeClient))\n                {\n                    // Display the read text to the console\n                    string temp;\n                    while ((temp = sr.ReadLine()) != null)\n                    {\n                        Console.WriteLine(temp);\n                    }\n                }\n            }\n        }\n        Console.Write(&quot;Press Enter to continue...&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_System_IO_Pipes_PipeDirection_Microsoft_Win32_SafeHandles_SafePipeHandle_\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AnonymousPipeClientStream(PipeDirection,SafePipeHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class from the specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>direction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that determines the direction of the pipe.  </p>\n<p> Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>safePipeHandle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safepipehandle\" data-linktype=\"relative-path\">SafePipeHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A safe handle for the pipe that this <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object will encapsulate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>safePipeHandle </code>is not a valid handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>safePipeHandle</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>direction</code> is set to <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error, such as a disk error, has occurred.  </p>\n<p> -or-  </p>\n<p> The stream has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> value of <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> is not supported because anonymous pipes are defined to be one-way.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object is created in a child process with a <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> value of <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01\">Imports System\nImports System.IO\nImports System.IO.Pipes\n\nClass PipeClient\n\n    Shared Sub Main(ByVal args As String())\n        If (args.Length &gt; 0) Then\n\n            Using pipeClient As New AnonymousPipeClientStream(args(0))\n\n                Console.WriteLine(&quot;Current TransmissionMode: {0}.&quot;, _\n                   pipeClient.TransmissionMode)\n\n                &#39; Anonymous Pipes do not support Message mode.\n                Try\n                    Console.WriteLine(&quot;Setting ReadMode to &#39;Message&#39;.&quot;)\n                    pipeClient.ReadMode = PipeTransmissionMode.Message\n                Catch e As NotSupportedException\n                    Console.WriteLine(&quot;EXCEPTION: {0}&quot;, e.Message)\n                End Try\n\n                Using sr As New StreamReader(pipeClient)\n\n                    &#39; Display the read text to the console\n                    Dim temp As String\n                    temp = sr.ReadLine()\n                    While Not temp = Nothing\n                        Console.WriteLine(temp)\n                        temp = sr.ReadLine()\n                    End While\n                End Using\n            End Using\n        End If\n        Console.Write(&quot;Press Enter to continue...&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01\">using System;\nusing System.IO;\nusing System.IO.Pipes;\n\nclass PipeClient\n{\n    static void Main(string[] args)\n    {\n        if (args.Length &gt; 0)\n        {\n            using (PipeStream pipeClient =\n                new AnonymousPipeClientStream(args[0]))\n            {\n\n                Console.WriteLine(&quot;Current TransmissionMode: {0}.&quot;,\n                   pipeClient.TransmissionMode);\n\n                // Anonymous Pipes do not support Message mode.\n                try\n                {\n                    Console.WriteLine(&quot;Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                    pipeClient.ReadMode = PipeTransmissionMode.Message;\n                }\n                catch (NotSupportedException e)\n                {\n                    Console.WriteLine(&quot;EXCEPTION: {0}&quot;, e.Message);\n                }\n\n                using (StreamReader sr = new StreamReader(pipeClient))\n                {\n                    // Display the read text to the console\n                    string temp;\n                    while ((temp = sr.ReadLine()) != null)\n                    {\n                        Console.WriteLine(temp);\n                    }\n                }\n            }\n        }\n        Console.Write(&quot;Press Enter to continue...&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_System_IO_Pipes_PipeDirection_System_String_\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AnonymousPipeClientStream(PipeDirection,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> class with the specified pipe direction and a string representation of the pipe handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, string pipeHandleAsString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>direction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that determines the direction of the pipe.  </p>\n<p> Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pipeHandleAsString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that represents the pipe handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>pipeHandleAsString</code> is an invalid handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>pipeHandleAsString</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>direction</code> is set to <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> value of <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> is not supported because anonymous pipes are defined to be one-way.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object is created in a child process with a <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a> value of <a class=\"xref\" href=\"system.io.pipes.pipedirection\" data-linktype=\"relative-path\">PipeDirection</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">using System;\nusing System.IO;\nusing System.IO.Pipes;\n\nclass PipeClient\n{\n    static void Main(string[] args)\n    {\n        if (args.Length &gt; 0)\n        {\n            using (PipeStream pipeClient =\n                new AnonymousPipeClientStream(PipeDirection.In, args[0]))\n            {\n                // Show that anonymous Pipes do not support Message mode.\n                try\n                {\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                    pipeClient.ReadMode = PipeTransmissionMode.Message;\n                }\n                catch (NotSupportedException e)\n                {\n                    Console.WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e.Message);\n                }\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                   pipeClient.TransmissionMode);\n\n                using (StreamReader sr = new StreamReader(pipeClient))\n                {\n                    // Display the read text to the console\n                    string temp;\n\n                    // Wait for &#39;sync message&#39; from the server.\n                    do\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                        temp = sr.ReadLine();\n                    }\n                    while (!temp.StartsWith(&quot;SYNC&quot;));\n\n                    // Read the server data and echo to the console.\n                    while ((temp = sr.ReadLine()) != null)\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n                    }\n                }\n            }\n        }\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">#using &lt;System.Core.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::IO::Pipes;\n\nref class PipeClient\n{\npublic:\n    static void Main(array&lt;String^&gt;^ args)\n    {\n        if (args-&gt;Length &gt; 1)\n        {\n            PipeStream^ pipeClient = gcnew AnonymousPipeClientStream(PipeDirection::In, args[1]);\n            // Show that anonymous Pipes do not support Message mode.\n            try\n            {\n                Console::WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                pipeClient-&gt;ReadMode = PipeTransmissionMode::Message;\n            }\n            catch (NotSupportedException^ e)\n            {\n                Console::WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e-&gt;Message);\n            }\n\n            Console::WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                pipeClient-&gt;TransmissionMode);\n\n            StreamReader^ sr = gcnew StreamReader(pipeClient);\n\n            // Display the read text to the console\n            String^ temp;\n\n            // Wait for &#39;sync message&#39; from the server.\n            do\n            {\n                Console::WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                temp = sr-&gt;ReadLine();\n            }\n            while (!temp-&gt;StartsWith(&quot;SYNC&quot;));\n\n            // Read the server data and echo to the console.\n            while ((temp = sr-&gt;ReadLine()) != nullptr)\n            {\n                Console::WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n            }\n            sr-&gt;Close();\n            pipeClient-&gt;Close();\n        }\n        Console::Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console::ReadLine();\n    }\n};\n\nint main()\n{\n    array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n    PipeClient::Main(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">Imports System\nImports System.IO\nImports System.IO.Pipes\n\nClass PipeClient\n    Shared Sub Main(args() as String)\n        If args.Length &gt; 0 Then\n            Using pipeClient As New AnonymousPipeClientStream(PipeDirection.In, args(0))\n                &#39; Show that anonymous Pipes do not support Message mode.\n                Try\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to &quot;&quot;Message&quot;&quot;.&quot;)\n                    pipeClient.ReadMode = PipeTransmissionMode.Message\n                Catch e As NotSupportedException\n                    Console.WriteLine(&quot;[CLIENT] Execption:&quot; + vbNewLine + &quot;    {0}&quot;, e.Message)\n                End Try\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;, _\n                   pipeClient.TransmissionMode)\n\n                Using sr As New StreamReader(pipeClient)\n                    &#39; Display the read text to the console\n                    Dim temp As String\n\n                    &#39; Wait for &#39;sync message&#39; from the server.\n                    Do\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;)\n                        temp = sr.ReadLine()\n                    Loop While temp.StartsWith(&quot;SYNC&quot;) = False\n\n                    &#39; Read the server data and echo to the console.\n                    temp = sr.ReadLine()\n                    While Not temp = Nothing\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp)\n                        temp = sr.ReadLine()\n                    End While\n                End Using\n            End Using\n        End If\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream_ReadMode\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream_ReadMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadMode</div>        \r\n          </div>\r\n    \r\n            <p>Sets the reading mode for the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Pipes.PipeTransmissionMode ReadMode { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> for the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The transmission mode is not valid. For anonymous pipes, only <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> is supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The transmission mode is <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The connection is broken or another I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The pipe is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Anonymous pipes do not support <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> read mode.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object is created in a child process. The <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> is caught when the ReadMode property is set to <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">using System;\nusing System.IO;\nusing System.IO.Pipes;\n\nclass PipeClient\n{\n    static void Main(string[] args)\n    {\n        if (args.Length &gt; 0)\n        {\n            using (PipeStream pipeClient =\n                new AnonymousPipeClientStream(PipeDirection.In, args[0]))\n            {\n                // Show that anonymous Pipes do not support Message mode.\n                try\n                {\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                    pipeClient.ReadMode = PipeTransmissionMode.Message;\n                }\n                catch (NotSupportedException e)\n                {\n                    Console.WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e.Message);\n                }\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                   pipeClient.TransmissionMode);\n\n                using (StreamReader sr = new StreamReader(pipeClient))\n                {\n                    // Display the read text to the console\n                    string temp;\n\n                    // Wait for &#39;sync message&#39; from the server.\n                    do\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                        temp = sr.ReadLine();\n                    }\n                    while (!temp.StartsWith(&quot;SYNC&quot;));\n\n                    // Read the server data and echo to the console.\n                    while ((temp = sr.ReadLine()) != null)\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n                    }\n                }\n            }\n        }\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">#using &lt;System.Core.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::IO::Pipes;\n\nref class PipeClient\n{\npublic:\n    static void Main(array&lt;String^&gt;^ args)\n    {\n        if (args-&gt;Length &gt; 1)\n        {\n            PipeStream^ pipeClient = gcnew AnonymousPipeClientStream(PipeDirection::In, args[1]);\n            // Show that anonymous Pipes do not support Message mode.\n            try\n            {\n                Console::WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                pipeClient-&gt;ReadMode = PipeTransmissionMode::Message;\n            }\n            catch (NotSupportedException^ e)\n            {\n                Console::WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e-&gt;Message);\n            }\n\n            Console::WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                pipeClient-&gt;TransmissionMode);\n\n            StreamReader^ sr = gcnew StreamReader(pipeClient);\n\n            // Display the read text to the console\n            String^ temp;\n\n            // Wait for &#39;sync message&#39; from the server.\n            do\n            {\n                Console::WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                temp = sr-&gt;ReadLine();\n            }\n            while (!temp-&gt;StartsWith(&quot;SYNC&quot;));\n\n            // Read the server data and echo to the console.\n            while ((temp = sr-&gt;ReadLine()) != nullptr)\n            {\n                Console::WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n            }\n            sr-&gt;Close();\n            pipeClient-&gt;Close();\n        }\n        Console::Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console::ReadLine();\n    }\n};\n\nint main()\n{\n    array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n    PipeClient::Main(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">Imports System\nImports System.IO\nImports System.IO.Pipes\n\nClass PipeClient\n    Shared Sub Main(args() as String)\n        If args.Length &gt; 0 Then\n            Using pipeClient As New AnonymousPipeClientStream(PipeDirection.In, args(0))\n                &#39; Show that anonymous Pipes do not support Message mode.\n                Try\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to &quot;&quot;Message&quot;&quot;.&quot;)\n                    pipeClient.ReadMode = PipeTransmissionMode.Message\n                Catch e As NotSupportedException\n                    Console.WriteLine(&quot;[CLIENT] Execption:&quot; + vbNewLine + &quot;    {0}&quot;, e.Message)\n                End Try\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;, _\n                   pipeClient.TransmissionMode)\n\n                Using sr As New StreamReader(pipeClient)\n                    &#39; Display the read text to the console\n                    Dim temp As String\n\n                    &#39; Wait for &#39;sync message&#39; from the server.\n                    Do\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;)\n                        temp = sr.ReadLine()\n                    Loop While temp.StartsWith(&quot;SYNC&quot;) = False\n\n                    &#39; Read the server data and echo to the console.\n                    temp = sr.ReadLine()\n                    While Not temp = Nothing\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp)\n                        temp = sr.ReadLine()\n                    End While\n                End Using\n            End Using\n        End If\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream_TransmissionMode\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream_TransmissionMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransmissionMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the pipe transmission mode supported by the current pipe.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> supported by the current pipe.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Anonymous pipes do not support <a class=\"xref\" href=\"system.io.pipes.pipetransmissionmode\" data-linktype=\"relative-path\">PipeTransmissionMode</a> read mode.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> object is created in a child process and the TransmissionMode is displayed to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">using System;\nusing System.IO;\nusing System.IO.Pipes;\n\nclass PipeClient\n{\n    static void Main(string[] args)\n    {\n        if (args.Length &gt; 0)\n        {\n            using (PipeStream pipeClient =\n                new AnonymousPipeClientStream(PipeDirection.In, args[0]))\n            {\n                // Show that anonymous Pipes do not support Message mode.\n                try\n                {\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                    pipeClient.ReadMode = PipeTransmissionMode.Message;\n                }\n                catch (NotSupportedException e)\n                {\n                    Console.WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e.Message);\n                }\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                   pipeClient.TransmissionMode);\n\n                using (StreamReader sr = new StreamReader(pipeClient))\n                {\n                    // Display the read text to the console\n                    string temp;\n\n                    // Wait for &#39;sync message&#39; from the server.\n                    do\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                        temp = sr.ReadLine();\n                    }\n                    while (!temp.StartsWith(&quot;SYNC&quot;));\n\n                    // Read the server data and echo to the console.\n                    while ((temp = sr.ReadLine()) != null)\n                    {\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n                    }\n                }\n            }\n        }\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">#using &lt;System.Core.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::IO::Pipes;\n\nref class PipeClient\n{\npublic:\n    static void Main(array&lt;String^&gt;^ args)\n    {\n        if (args-&gt;Length &gt; 1)\n        {\n            PipeStream^ pipeClient = gcnew AnonymousPipeClientStream(PipeDirection::In, args[1]);\n            // Show that anonymous Pipes do not support Message mode.\n            try\n            {\n                Console::WriteLine(&quot;[CLIENT] Setting ReadMode to \\&quot;Message\\&quot;.&quot;);\n                pipeClient-&gt;ReadMode = PipeTransmissionMode::Message;\n            }\n            catch (NotSupportedException^ e)\n            {\n                Console::WriteLine(&quot;[CLIENT] Execption:<br>    {0}&quot;, e-&gt;Message);\n            }\n\n            Console::WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;,\n                pipeClient-&gt;TransmissionMode);\n\n            StreamReader^ sr = gcnew StreamReader(pipeClient);\n\n            // Display the read text to the console\n            String^ temp;\n\n            // Wait for &#39;sync message&#39; from the server.\n            do\n            {\n                Console::WriteLine(&quot;[CLIENT] Wait for sync...&quot;);\n                temp = sr-&gt;ReadLine();\n            }\n            while (!temp-&gt;StartsWith(&quot;SYNC&quot;));\n\n            // Read the server data and echo to the console.\n            while ((temp = sr-&gt;ReadLine()) != nullptr)\n            {\n                Console::WriteLine(&quot;[CLIENT] Echo: &quot; + temp);\n            }\n            sr-&gt;Close();\n            pipeClient-&gt;Close();\n        }\n        Console::Write(&quot;[CLIENT] Press Enter to continue...&quot;);\n        Console::ReadLine();\n    }\n};\n\nint main()\n{\n    array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n    PipeClient::Main(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Pipes.AnonymousPipeClientStream_Sample#01\">Imports System\nImports System.IO\nImports System.IO.Pipes\n\nClass PipeClient\n    Shared Sub Main(args() as String)\n        If args.Length &gt; 0 Then\n            Using pipeClient As New AnonymousPipeClientStream(PipeDirection.In, args(0))\n                &#39; Show that anonymous Pipes do not support Message mode.\n                Try\n                    Console.WriteLine(&quot;[CLIENT] Setting ReadMode to &quot;&quot;Message&quot;&quot;.&quot;)\n                    pipeClient.ReadMode = PipeTransmissionMode.Message\n                Catch e As NotSupportedException\n                    Console.WriteLine(&quot;[CLIENT] Execption:&quot; + vbNewLine + &quot;    {0}&quot;, e.Message)\n                End Try\n\n                Console.WriteLine(&quot;[CLIENT] Current TransmissionMode: {0}.&quot;, _\n                   pipeClient.TransmissionMode)\n\n                Using sr As New StreamReader(pipeClient)\n                    &#39; Display the read text to the console\n                    Dim temp As String\n\n                    &#39; Wait for &#39;sync message&#39; from the server.\n                    Do\n                        Console.WriteLine(&quot;[CLIENT] Wait for sync...&quot;)\n                        temp = sr.ReadLine()\n                    Loop While temp.StartsWith(&quot;SYNC&quot;) = False\n\n                    &#39; Read the server data and echo to the console.\n                    temp = sr.ReadLine()\n                    While Not temp = Nothing\n                        Console.WriteLine(&quot;[CLIENT] Echo: &quot; + temp)\n                        temp = sr.ReadLine()\n                    End While\n                End Using\n            End Using\n        End If\n        Console.Write(&quot;[CLIENT] Press Enter to continue...&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Pipes_AnonymousPipeClientStream_Finalize\">\r\n    \r\n            <a id=\"System_IO_Pipes_AnonymousPipeClientStream_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Releases unmanaged resources and performs other cleanup operations before the <a class=\"xref\" href=\"system.io.pipes.anonymouspipeclientstream\" data-linktype=\"relative-path\">AnonymousPipeClientStream</a> instance is reclaimed by garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~AnonymousPipeClientStream ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.IO.Pipes.AnonymousPipeClientStream.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Pipes.AnonymousPipeClientStream.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Pipes.AnonymousPipeClientStream\">\r\n<meta name=\"APIName\" content=\"System.IO.Pipes.AnonymousPipeClientStream..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.Pipes.AnonymousPipeClientStream.Finalize\">\r\n<meta name=\"APIName\" content=\"System.IO.Pipes.AnonymousPipeClientStream.ReadMode\">\r\n<meta name=\"APIName\" content=\"System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-02-28 06:06 AM\">\r\n<meta name=\"document_id\" content=\"8f212f7a-7d49-724b-2d99-dae6e7b2f3ad\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.IO.Pipes\\AnonymousPipeClientStream.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO.Pipes/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Pipes.AnonymousPipeClientStream\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.IO.Pipes.AnonymousPipeClientStream.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Pipes.AnonymousPipeClientStream.yml","open_to_public_contributors":true,"api_name":["System.IO.Pipes.AnonymousPipeClientStream","System.IO.Pipes.AnonymousPipeClientStream..ctor","System.IO.Pipes.AnonymousPipeClientStream.Finalize","System.IO.Pipes.AnonymousPipeClientStream.ReadMode","System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Pipes.AnonymousPipeClientStream","System::IO::Pipes::AnonymousPipeClientStream","System.IO.Pipes.AnonymousPipeClientStream.#ctor","System::IO::Pipes::AnonymousPipeClientStream::#ctor","System.IO.Pipes.AnonymousPipeClientStream.Finalize","System::IO::Pipes::AnonymousPipeClientStream::Finalize","System.IO.Pipes.AnonymousPipeClientStream.ReadMode","System::IO::Pipes::AnonymousPipeClientStream::ReadMode","System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode","System::IO::Pipes::AnonymousPipeClientStream::TransmissionMode"],"dev_langs":["csharp"],"updated_at":"2017-02-28 06:06 AM","document_id":"8f212f7a-7d49-724b-2d99-dae6e7b2f3ad","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.IO.Pipes\\AnonymousPipeClientStream.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO.Pipes/AnonymousPipeClientStream.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AnonymousPipeClientStream class | Microsoft Docs","_op_ogTitle":"AnonymousPipeClientStream class","description":"Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.\n","toc_asset_id":"_splitted/System.IO.Pipes/toc.json","toc_rel":"_splitted/System.IO.Pipes/toc.json","source_url":"","ms.assetid":"System.IO.Pipes.AnonymousPipeClientStream","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.pipes.anonymouspipeclientstream","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.pipes.anonymouspipeclientstream","fileRelativePath":"System.IO.Pipes.AnonymousPipeClientStream.html"},"themesRelativePathToOutputRoot":"_themes/"}