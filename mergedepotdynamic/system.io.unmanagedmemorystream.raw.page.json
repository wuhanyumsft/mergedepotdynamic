{"content":"    \r\n    <h1 id=\"System_IO_UnmanagedMemoryStream\">\r\n      <span class=\"lang-csharp\">UnmanagedMemoryStream</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to unmanaged blocks of memory from managed code.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class UnmanagedMemoryStream : System.IO.Stream</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">System.IO.Stream</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UnmanagedMemoryStream</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanTimeout\" data-linktype=\"relative-path\">CanTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close\" data-linktype=\"relative-path\">Close()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_\" data-linktype=\"relative-path\">CopyTo(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyTo(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"relative-path\">CopyToAsync(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CreateWaitHandle\" data-linktype=\"relative-path\">CreateWaitHandle()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndRead_System_IAsyncResult_\" data-linktype=\"relative-path\">EndRead(IAsyncResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndWrite_System_IAsyncResult_\" data-linktype=\"relative-path\">EndWrite(IAsyncResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync\" data-linktype=\"relative-path\">FlushAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Null\" data-linktype=\"relative-path\">Null</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ObjectInvariant\" data-linktype=\"relative-path\">ObjectInvariant()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadTimeout\" data-linktype=\"relative-path\">ReadTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Synchronized_System_IO_Stream_\" data-linktype=\"relative-path\">Synchronized(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteTimeout\" data-linktype=\"relative-path\">WriteTimeout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream__ctor\" data-linktype=\"self-bookmark\">UnmanagedMemoryStream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream__ctor_System_Byte__System_Int64_\" data-linktype=\"self-bookmark\">UnmanagedMemoryStream(Byte*,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class using the specified location and memory length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream__ctor_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">UnmanagedMemoryStream(SafeBuffer,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset and length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream__ctor_System_Byte__System_Int64_System_Int64_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class using the specified location, memory length, total amount of memory, and file access values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream__ctor_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset, length, and file access.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_CanRead\" data-linktype=\"self-bookmark\">CanRead</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a stream supports reading.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_CanSeek\" data-linktype=\"self-bookmark\">CanSeek</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a stream supports seeking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_CanWrite\" data-linktype=\"self-bookmark\">CanWrite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a stream supports writing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the data in a stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Position\" data-linktype=\"self-bookmark\">Position</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the current position in a stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_PositionPointer\" data-linktype=\"self-bookmark\">PositionPointer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a byte pointer to a stream based on the current position in the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides the <span class=\"xref\">stem.IO.Stream.Flush*</span> method so that no action is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_FlushAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">FlushAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides the <span class=\"xref\">stem.IO.Stream.FlushAsync*</span> method so that the operation is cancelled if specified, but no other action is performed.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Initialize_System_Byte__System_Int64_System_Int64_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">Initialize(Byte*,Int64,Int64,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class by using a pointer to an unmanaged memory location.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Initialize_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">Initialize(SafeBuffer,Int64,Int64,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset, length, and file access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Read_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Read(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of bytes into the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the specified number of bytes into the specified array.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_ReadByte\" data-linktype=\"self-bookmark\">ReadByte()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Seek_System_Int64_System_IO_SeekOrigin_\" data-linktype=\"self-bookmark\">Seek(Int64,SeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the current position of the current stream to the given value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_SetLength_System_Int64_\" data-linktype=\"self-bookmark\">SetLength(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the length of a stream to a specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_Write_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a block of bytes to the current stream using data from a buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_UnmanagedMemoryStream_WriteByte_System_Byte_\" data-linktype=\"self-bookmark\">WriteByte(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a byte to the current position in the file stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream__ctor\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnmanagedMemoryStream()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected UnmanagedMemoryStream ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream__ctor_System_Byte__System_Int64_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnmanagedMemoryStream(Byte*,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class using the specified location and memory length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UnmanagedMemoryStream (byte* pointer, long length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged memory location.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the memory to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>pointer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>length</code> value is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>length</code> is large enough to cause an overflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class, and by default sets the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to <code>false</code> and the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to <code>true</code>. The <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Length_\" data-linktype=\"relative-path\">Length</a> property is set to the value of the <code>length</code> parameter and cannot be changed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream__ctor_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnmanagedMemoryStream(SafeBuffer,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset and length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safebuffer\" data-linktype=\"relative-path\">SafeBuffer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to contain the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte position in the buffer at which to start the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the unmanaged memory stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream__ctor_System_Byte__System_Int64_System_Int64_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class using the specified location, memory length, total amount of memory, and file access values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UnmanagedMemoryStream (byte* pointer, long length, long capacity, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged memory location.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the memory to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total amount of memory assigned to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>pointer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>length</code> value is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>capacity</code> value is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>length</code> value is greater than the <code>capacity</code> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>length</code> parameter defines the current amount of memory in use. If reading or appending data to the stream, the <code>length</code> value should be equal to the amount of valid data in the stream to be read from or preserved. If writing to the stream, this value should be zero.  </p>\n<p> The <code>capacity</code> parameter indicates the amount of total memory available. This value can describe a region that is longer than the length specified, or indicate a region that can be appended to. Any attempt to write beyond this value will fail.  </p>\n<p> The <code>access</code> parameter sets the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanRead_\" data-linktype=\"relative-path\">CanRead</a>, and <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> properties. Note that specifying <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> does not guarantee that the stream will be writable. The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class.  A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream#1\">\n// Note: you must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Runtime.InteropServices;\n\nunsafe class TestWriter\n{\n    \n    static void Main()\n\t{\n\t\t\n            // Create some data to read and write.\n            byte[] message = UnicodeEncoding.Unicode.GetBytes(&quot;Here is some data.&quot;);\n\n\t    // Allocate a block of unmanaged memory and return an IntPtr object.\t\n            IntPtr memIntPtr = Marshal.AllocHGlobal(message.Length);\n\n            // Get a byte pointer from the IntPtr object.\n            byte* memBytePtr = (byte*) memIntPtr.ToPointer();\n\n            // Create an UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream writeStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Write);\n\n            // Write the data.\n            writeStream.Write(message, 0, message.Length);\n\n            // Close the stream.\n            writeStream.Close();\n\n            // Create another UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream readStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Read);\n\n\t    // Create a byte array to hold data from unmanaged memory.\n            byte[] outMessage = new byte[message.Length];\n\n            // Read from unmanaged memory to the byte array.\n            readStream.Read(outMessage, 0, message.Length);\n\n            // Close the stream.\n            readStream.Close();\n\n            // Display the data to the console.\n            Console.WriteLine(UnicodeEncoding.Unicode.GetString(outMessage));\n\n            // Free the block of unmanaged memory.\n            Marshal.FreeHGlobal(memIntPtr);\n\n            Console.ReadLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream__ctor_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset, length, and file access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safebuffer\" data-linktype=\"relative-path\">SafeBuffer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to contain the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte position in the buffer at which to start the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode of file access to the unmanaged memory stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_CanRead\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a stream supports reading.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanRead { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> if the object was created by a constructor with an <code>access</code> parameter that did not include reading the stream and if the stream is closed; otherwise, <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates whether the current stream object supports reading.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. In this example, an <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> object is passed to a method which checks the CanRead property before attempting to display the contents to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_CanSeek\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_CanSeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanSeek</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a stream supports seeking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanSeek { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> if the stream is closed; otherwise, <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates whether the current stream object supports seeking.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_CanWrite\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_CanWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanWrite</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a stream supports writing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanWrite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> if the object was created by a constructor with an <code>access</code> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates whether the current stream object supports writing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. In this example, an <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> object is passed to a method which checks the CanWrite property before attempting to write the data to the stream.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Capacity\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long Capacity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The size or capacity of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the <code>capacity</code> value provided to the constructor. If no <code>capacity</code> value was specified when the stream was initialized, this property returns the stream length.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Length\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the data in a stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The length of the data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If unchanged since the stream was initialized, this property returns the length value provided to the constructor. If changes to the stream have occurred, this property reflects any changes to the length of the data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Position\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Position_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Position</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the current position in a stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Position { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The current position in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The position is set to a value that is less than zero, or the position is larger than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or results in overflow when added to the current pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a stream is initialized, this property is set to zero.  </p>\n<p> Although you can set the position of the stream beyond the stream&#39;s capacity, you will not be able to access that area using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Read_\" data-linktype=\"relative-path\">Read</a> and <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Write_\" data-linktype=\"relative-path\">Write</a> methods. <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Read_\" data-linktype=\"relative-path\">Read</a> will return 0 and <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Write_\" data-linktype=\"relative-path\">Write</a> will throw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. This support is primarily for design and code compatibility with basic stream operations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_PositionPointer\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_PositionPointer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PositionPointer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a byte pointer to a stream based on the current position in the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte* PositionPointer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </div>\r\n                  <p>A byte pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current position is larger than the capacity of the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The position is being set is not a valid position in the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The pointer is being set to a lower value than the starting position of the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream was initialized for use with a <a class=\"xref\" href=\"system.runtime.interopservices.safebuffer\" data-linktype=\"relative-path\">SafeBuffer</a>. The PositionPointer property is valid only for streams that are initialized with a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To return a pointer to the entire stream, set the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Position_\" data-linktype=\"relative-path\">Position</a> property to zero, and then call this property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_\" data-linktype=\"relative-path\">Dispose</a> invokes the protected Dispose method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes Dispose with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> references. This method invokes the <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Flush\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Overrides the <span class=\"xref\">stem.IO.Stream.Flush*</span> method so that no action is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs no action for this class but is included as part of the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> base class. Since any data is written to RAM, this method is redundant.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_FlushAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_FlushAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FlushAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides the <span class=\"xref\">stem.IO.Stream.FlushAsync*</span> method so that the operation is cancelled if specified, but no other action is performed.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous flush operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation isnâ€™t cancelled, the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> calls the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_Flush_\" data-linktype=\"relative-path\">Flush</a> method, which means that no action performed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Initialize_System_Byte__System_Int64_System_Int64_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Initialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialize(Byte*,Int64,Int64,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class by using a pointer to an unmanaged memory location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void Initialize (byte* pointer, long length, long capacity, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged memory location.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the memory to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total amount of memory assigned to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>pointer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>length</code> value is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>capacity</code> value is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>length</code> value is large enough to cause an overflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream__ctor_\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> constructor. It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor. Such methods should use the default constructor, <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream__ctor\" data-linktype=\"relative-path\">UnmanagedMemoryStream()</a>, initialize the pointer, and then invoke the Initialize method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Initialize_System_Runtime_InteropServices_SafeBuffer_System_Int64_System_Int64_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Initialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialize(SafeBuffer,Int64,Int64,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class in a safe buffer with a specified offset, length, and file access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safebuffer\" data-linktype=\"relative-path\">SafeBuffer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to contain the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte position in the buffer at which to start the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the unmanaged memory stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode of file access to the unmanaged memory stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Read_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of bytes into the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Read (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The underlying memory does not support reading.  </p>\n<p> - or -  </p>\n<p> The <span class=\"xref\">stem.IO.UnmanagedMemoryStream.CanRead*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> parameter is set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>offset</code> parameter is less than zero.  </p>\n<p> - or -  </p>\n<p> The <code>count</code> parameter is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of the buffer array minus the <code>offset</code> parameter is less than the <code>count</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>offset</code> parameter gives the offset of the byte in the <code>array</code> parameter (the buffer index) at which to begin reading, and the <code>count</code> parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  </p>\n<p> The Read method returns zero only after reaching the end of the stream. Otherwise, Read always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to Read, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class.  A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream#1\">\n// Note: you must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Runtime.InteropServices;\n\nunsafe class TestWriter\n{\n    \n    static void Main()\n\t{\n\t\t\n            // Create some data to read and write.\n            byte[] message = UnicodeEncoding.Unicode.GetBytes(&quot;Here is some data.&quot;);\n\n\t    // Allocate a block of unmanaged memory and return an IntPtr object.\t\n            IntPtr memIntPtr = Marshal.AllocHGlobal(message.Length);\n\n            // Get a byte pointer from the IntPtr object.\n            byte* memBytePtr = (byte*) memIntPtr.ToPointer();\n\n            // Create an UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream writeStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Write);\n\n            // Write the data.\n            writeStream.Write(message, 0, message.Length);\n\n            // Close the stream.\n            writeStream.Close();\n\n            // Create another UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream readStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Read);\n\n\t    // Create a byte array to hold data from unmanaged memory.\n            byte[] outMessage = new byte[message.Length];\n\n            // Read from unmanaged memory to the byte array.\n            readStream.Read(outMessage, 0, message.Length);\n\n            // Close the stream.\n            readStream.Close();\n\n            // Display the data to the console.\n            Console.WriteLine(UnicodeEncoding.Unicode.GetString(outMessage));\n\n            // Free the block of unmanaged memory.\n            Marshal.FreeHGlobal(memIntPtr);\n\n            Console.ReadLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_ReadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the specified number of bytes into the specified array.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write the data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte offset in <code>buffer</code> at which to begin writing data from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an exception occurs during the read operation, it will be set as the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception_\" data-linktype=\"relative-path\">Exception</a> of the property of the returned task.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_ReadByte\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadByte ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The unsigned byte cast to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object, or -1 if at the end of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The underlying memory does not support reading.  </p>\n<p> - or -  </p>\n<p> The current position is at the end of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to return integer values from the stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. In this example, an <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> object is passed to a method which checks the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property before attempting to read and display the contents to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Seek_System_Int64_System_IO_SeekOrigin_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(Int64,SeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the current position of the current stream to the given value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Seek (long offset, System.IO.SeekOrigin loc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point relative to <code>origin</code> to begin seeking from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the beginning, the end, or the current position as a reference point for <code>origin</code>, using a value of type <a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The new position in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to seek before the beginning of the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>offset</code> value is larger than the maximum size of the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>loc</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about seeking, see <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream_Seek_\" data-linktype=\"relative-path\">Seek</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_SetLength_System_Int64_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_SetLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLength(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the length of a stream to a specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void SetLength (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The underlying memory does not support writing.  </p>\n<p> - or -  </p>\n<p> An attempt is made to write to the stream and the <span class=\"xref\">stem.IO.UnmanagedMemoryStream.CanWrite*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>value</code> exceeds the capacity of the stream.  </p>\n<p> - or -  </p>\n<p> The specified <code>value</code> is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the given value is less than the current length of the stream, the stream is truncated. If the given value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.  </p>\n<p> A stream must support both writing and seeking for SetLength to work.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_Write_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a block of bytes to the current stream using data from a buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array from which to copy bytes to the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset in the buffer at which to begin copying bytes to the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write to the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The underlying memory does not support writing.  </p>\n<p> - or -  </p>\n<p> An attempt is made to write to the stream and the <span class=\"xref\">stem.IO.UnmanagedMemoryStream.CanWrite*</span> property is <code>false</code>.  </p>\n<p> - or -  </p>\n<p> The <code>count</code> value is greater than the capacity of the stream.  </p>\n<p> - or -  </p>\n<p> The position is at the end of the stream capacity.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>One of the specified parameters is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>offset</code> parameter minus the length of the <code>buffer</code> parameter is less than the <code>count</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Writing occurs at the current position in the stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class.  A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream#1\">\n// Note: you must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Runtime.InteropServices;\n\nunsafe class TestWriter\n{\n    \n    static void Main()\n\t{\n\t\t\n            // Create some data to read and write.\n            byte[] message = UnicodeEncoding.Unicode.GetBytes(&quot;Here is some data.&quot;);\n\n\t    // Allocate a block of unmanaged memory and return an IntPtr object.\t\n            IntPtr memIntPtr = Marshal.AllocHGlobal(message.Length);\n\n            // Get a byte pointer from the IntPtr object.\n            byte* memBytePtr = (byte*) memIntPtr.ToPointer();\n\n            // Create an UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream writeStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Write);\n\n            // Write the data.\n            writeStream.Write(message, 0, message.Length);\n\n            // Close the stream.\n            writeStream.Close();\n\n            // Create another UnmanagedMemoryStream object using a pointer to unmanaged memory.\n            UnmanagedMemoryStream readStream = new UnmanagedMemoryStream(memBytePtr, message.Length, message.Length, FileAccess.Read);\n\n\t    // Create a byte array to hold data from unmanaged memory.\n            byte[] outMessage = new byte[message.Length];\n\n            // Read from unmanaged memory to the byte array.\n            readStream.Read(outMessage, 0, message.Length);\n\n            // Close the stream.\n            readStream.Close();\n\n            // Display the data to the console.\n            Console.WriteLine(UnicodeEncoding.Unicode.GetString(outMessage));\n\n            // Free the block of unmanaged memory.\n            Marshal.FreeHGlobal(memIntPtr);\n\n            Console.ReadLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an exception occurs during the write operation, it will be set as the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception_\" data-linktype=\"relative-path\">Exception</a> of the property of the returned task.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_UnmanagedMemoryStream_WriteByte_System_Byte_\">\r\n    \r\n            <a id=\"System_IO_UnmanagedMemoryStream_WriteByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteByte(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a byte to the current position in the file stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteByte (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte value written to the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The underlying memory does not support writing.  </p>\n<p> - or -  </p>\n<p> An attempt is made to write to the stream and the <span class=\"xref\">stem.IO.UnmanagedMemoryStream.CanWrite*</span> property is <code>false</code>.  </p>\n<p> - or -  </p>\n<p> The current position is at the end of the capacity of the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The supplied <code>value</code> causes the stream exceed its maximum capacity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to read from and write to unmanaged memory using the <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> class. A block of unmanaged memory is allocated and de-allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. In this example, an <a class=\"xref\" href=\"system.io.unmanagedmemorystream\" data-linktype=\"relative-path\">UnmanagedMemoryStream</a> object is passed to a method which checks the <a class=\"xref\" href=\"system.io.unmanagedmemorystream#System_IO_UnmanagedMemoryStream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property before attempting to write the data to the stream.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UnmanagedMemoryStream_Example#00\">// Note: You must compile this sample using the unsafe flag.\n// From the command line, type the following: csc sample.cs /unsafe\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nunsafe class Program\n{\n    static void Main()\n    {\n        // Create some data to write.\n        byte[] text = UnicodeEncoding.Unicode.GetBytes(&quot;Data to write.&quot;);\n\n        // Allocate a block of unmanaged memory.\n        IntPtr memIntPtr = Marshal.AllocHGlobal(text.Length);\n\n        // Get a byte pointer from the unmanaged memory block.\n        byte* memBytePtr = (byte*)memIntPtr.ToPointer();\n\n        UnmanagedMemoryStream writeStream =\n            new UnmanagedMemoryStream(\n            memBytePtr, text.Length, text.Length, FileAccess.Write);\n\n        // Write the data.\n        WriteToStream(writeStream, text);\n\n        // Close the stream.\n        writeStream.Close();\n\n        // Create another UnmanagedMemoryStream for reading.\n        UnmanagedMemoryStream readStream =\n            new UnmanagedMemoryStream(memBytePtr, text.Length);\n\n        // Display the contents of the stream to the console.\n        PrintStream(readStream);\n\n        // Close the reading stream.\n        readStream.Close();\n\n        // Free up the unmanaged memory.\n        Marshal.FreeHGlobal(memIntPtr);\n\n    }\n\n    public static void WriteToStream(UnmanagedMemoryStream writeStream, byte[] text)\n    {\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (writeStream.CanWrite)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; writeStream.Length; i++)\n            {\n                writeStream.WriteByte(text[i]);\n            }\n        }\n    }\n\n    public static void PrintStream(UnmanagedMemoryStream readStream)\n    {\n        byte[] text = new byte[readStream.Length];\n        // Verify that the stream is writable:\n        // By default, UnmanagedMemoryStream objects do not have write access,\n        // write access must be set explicitly.\n        if (readStream.CanRead)\n        {\n            // Write the data, byte by byte\n            for (int i = 0; i &lt; readStream.Length; i++)\n            {\n                text[i] = (byte)readStream.ReadByte();\n            }\n        }\n\n        Console.WriteLine(UnicodeEncoding.Unicode.GetString(text));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.UnmanagedMemoryStream.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.UnmanagedMemoryStream.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.CanRead\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.CanSeek\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.CanWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Capacity\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Flush\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.FlushAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Initialize\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Length\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Position\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.PositionPointer\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Read\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.ReadAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.ReadByte\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Seek\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.SetLength\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.Write\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.WriteAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.UnmanagedMemoryStream.WriteByte\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"260a41b8-02fe-6b6d-9215-e2d272aeeead\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.IO\\UnmanagedMemoryStream.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to unmanaged blocks of memory from managed code.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.UnmanagedMemoryStream\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.UnmanagedMemoryStream.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.UnmanagedMemoryStream.yml","open_to_public_contributors":true,"api_name":["System.IO.UnmanagedMemoryStream","System.IO.UnmanagedMemoryStream..ctor","System.IO.UnmanagedMemoryStream.CanRead","System.IO.UnmanagedMemoryStream.CanSeek","System.IO.UnmanagedMemoryStream.CanWrite","System.IO.UnmanagedMemoryStream.Capacity","System.IO.UnmanagedMemoryStream.Dispose","System.IO.UnmanagedMemoryStream.Flush","System.IO.UnmanagedMemoryStream.FlushAsync","System.IO.UnmanagedMemoryStream.Initialize","System.IO.UnmanagedMemoryStream.Length","System.IO.UnmanagedMemoryStream.Position","System.IO.UnmanagedMemoryStream.PositionPointer","System.IO.UnmanagedMemoryStream.Read","System.IO.UnmanagedMemoryStream.ReadAsync","System.IO.UnmanagedMemoryStream.ReadByte","System.IO.UnmanagedMemoryStream.Seek","System.IO.UnmanagedMemoryStream.SetLength","System.IO.UnmanagedMemoryStream.Write","System.IO.UnmanagedMemoryStream.WriteAsync","System.IO.UnmanagedMemoryStream.WriteByte"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.UnmanagedMemoryStream","System::IO::UnmanagedMemoryStream","System.IO.UnmanagedMemoryStream.#ctor","System::IO::UnmanagedMemoryStream::#ctor","System.IO.UnmanagedMemoryStream.CanRead","System::IO::UnmanagedMemoryStream::CanRead","System.IO.UnmanagedMemoryStream.CanSeek","System::IO::UnmanagedMemoryStream::CanSeek","System.IO.UnmanagedMemoryStream.CanWrite","System::IO::UnmanagedMemoryStream::CanWrite","System.IO.UnmanagedMemoryStream.Capacity","System::IO::UnmanagedMemoryStream::Capacity","System.IO.UnmanagedMemoryStream.Dispose","System::IO::UnmanagedMemoryStream::Dispose","System.IO.UnmanagedMemoryStream.Flush","System::IO::UnmanagedMemoryStream::Flush","System.IO.UnmanagedMemoryStream.FlushAsync","System::IO::UnmanagedMemoryStream::FlushAsync","System.IO.UnmanagedMemoryStream.Initialize","System::IO::UnmanagedMemoryStream::Initialize","System.IO.UnmanagedMemoryStream.Length","System::IO::UnmanagedMemoryStream::Length","System.IO.UnmanagedMemoryStream.Position","System::IO::UnmanagedMemoryStream::Position","System.IO.UnmanagedMemoryStream.PositionPointer","System::IO::UnmanagedMemoryStream::PositionPointer","System.IO.UnmanagedMemoryStream.Read","System::IO::UnmanagedMemoryStream::Read","System.IO.UnmanagedMemoryStream.ReadAsync","System::IO::UnmanagedMemoryStream::ReadAsync","System.IO.UnmanagedMemoryStream.ReadByte","System::IO::UnmanagedMemoryStream::ReadByte","System.IO.UnmanagedMemoryStream.Seek","System::IO::UnmanagedMemoryStream::Seek","System.IO.UnmanagedMemoryStream.SetLength","System::IO::UnmanagedMemoryStream::SetLength","System.IO.UnmanagedMemoryStream.Write","System::IO::UnmanagedMemoryStream::Write","System.IO.UnmanagedMemoryStream.WriteAsync","System::IO::UnmanagedMemoryStream::WriteAsync","System.IO.UnmanagedMemoryStream.WriteByte","System::IO::UnmanagedMemoryStream::WriteByte"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"260a41b8-02fe-6b6d-9215-e2d272aeeead","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.IO\\UnmanagedMemoryStream.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/UnmanagedMemoryStream.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UnmanagedMemoryStream class | Microsoft Docs","_op_ogTitle":"UnmanagedMemoryStream class","description":"Provides access to unmanaged blocks of memory from managed code.\n","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.UnmanagedMemoryStream","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.unmanagedmemorystream","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.unmanagedmemorystream","fileRelativePath":"System.IO.UnmanagedMemoryStream.html"},"themesRelativePathToOutputRoot":"_themes/"}