{"content":"    \r\n    <h1 id=\"System_Xml_XmlTextReader\">\r\n      <span class=\"lang-csharp\">XmlTextReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a reader that provides fast, non-cached, forward-only access to XML data.  </p>\n<p> Starting with the .NET Framework 2.0, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class instead.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]\npublic class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlTextReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_\" data-linktype=\"relative-path\">Create(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_\" data-linktype=\"relative-path\">Create(TextReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_Xml_XmlReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(XmlReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetValueAsync\" data-linktype=\"relative-path\">GetValueAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_HasAttributes\" data-linktype=\"relative-path\">HasAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsName_System_String_\" data-linktype=\"relative-path\">IsName(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsNameToken_System_String_\" data-linktype=\"relative-path\">IsNameToken(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement\" data-linktype=\"relative-path\">IsStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_\" data-linktype=\"relative-path\">IsStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_System_String_\" data-linktype=\"relative-path\">IsStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_Int32_\" data-linktype=\"relative-path\">Item(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_\" data-linktype=\"relative-path\">Item(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_System_String_\" data-linktype=\"relative-path\">Item(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContent\" data-linktype=\"relative-path\">MoveToContent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContentAsync\" data-linktype=\"relative-path\">MoveToContentAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAsync\" data-linktype=\"relative-path\">ReadAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBoolean\" data-linktype=\"relative-path\">ReadContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTime\" data-linktype=\"relative-path\">ReadContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTimeOffset\" data-linktype=\"relative-path\">ReadContentAsDateTimeOffset()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDecimal\" data-linktype=\"relative-path\">ReadContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDouble\" data-linktype=\"relative-path\">ReadContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsFloat\" data-linktype=\"relative-path\">ReadContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsInt\" data-linktype=\"relative-path\">ReadContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsLong\" data-linktype=\"relative-path\">ReadContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject\" data-linktype=\"relative-path\">ReadContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObjectAsync\" data-linktype=\"relative-path\">ReadContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsString\" data-linktype=\"relative-path\">ReadContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsStringAsync\" data-linktype=\"relative-path\">ReadContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean\" data-linktype=\"relative-path\">ReadElementContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsBoolean(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime\" data-linktype=\"relative-path\">ReadElementContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDateTime(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal\" data-linktype=\"relative-path\">ReadElementContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDecimal(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble\" data-linktype=\"relative-path\">ReadElementContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDouble(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat\" data-linktype=\"relative-path\">ReadElementContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsFloat(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt\" data-linktype=\"relative-path\">ReadElementContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsInt(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong\" data-linktype=\"relative-path\">ReadElementContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsLong(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject\" data-linktype=\"relative-path\">ReadElementContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsObject(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObjectAsync\" data-linktype=\"relative-path\">ReadElementContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsStringAsync\" data-linktype=\"relative-path\">ReadElementContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString\" data-linktype=\"relative-path\">ReadElementString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_\" data-linktype=\"relative-path\">ReadElementString(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadEndElement\" data-linktype=\"relative-path\">ReadEndElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml\" data-linktype=\"relative-path\">ReadInnerXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXmlAsync\" data-linktype=\"relative-path\">ReadInnerXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml\" data-linktype=\"relative-path\">ReadOuterXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXmlAsync\" data-linktype=\"relative-path\">ReadOuterXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement\" data-linktype=\"relative-path\">ReadStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadSubtree\" data-linktype=\"relative-path\">ReadSubtree()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunk(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunkAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunkAsync(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SchemaInfo\" data-linktype=\"relative-path\">SchemaInfo</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Settings\" data-linktype=\"relative-path\">Settings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SkipAsync\" data-linktype=\"relative-path\">SkipAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ValueType\" data-linktype=\"relative-path\">ValueType</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> XmlTextReader provides forward-only, read-only access to a stream of XML data. The current node refers to the node on which the reader is positioned. The reader is advanced using any of the read methods and properties reflect the value of the current node.  </p>\n<p> This class implements <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations. <code>XmlTextReader</code> provides the following functionality:  </p>\n<ul>\n<li><p>Enforces the rules of well-formed XML.  </p>\n</li>\n<li><p><code>XmlTextReader</code> does not provide data validation.  </p>\n</li>\n<li><p>Checks that <code>DocumentType</code> nodes are well-formed. <code>XmlTextReader</code> checks the DTD for well-formedness, but does not validate using the DTD.  </p>\n</li>\n<li><p>For nodes where <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_NodeType_\" data-linktype=\"relative-path\">NodeType</a> is <code>XmlNodeType.EntityReference</code>, a single empty <code>EntityReference</code> node is returned (that is, the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Value_\" data-linktype=\"relative-path\">Value</a> property is <code>String.Empty</code>).  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The actual declarations of entities in the DTD are called <code>Entity</code> nodes. When you refer to these nodes in your data, they are called <code>EntityReference</code> nodes.  </p>\n</div>\n<ul>\n<li><p>Does not expand default attributes.  </p>\n<p>Because the <code>XmlTextReader</code> does not perform the extra checks required for data validation, it provides a fast well-formedness parser.  </p>\n<p>To perform data validation, use a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p>To read XML data from an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, use <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a>.  </p>\n<p><code>XmlTextReader</code> throws an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> on XML parse errors. After an exception is thrown the state of the reader is not predictable. For example, the reported node type may be different than the actual node type of the current node. Use the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> property to check whether a reader is in error state.  </p>\n</li>\n</ul>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The following are things to consider when using the XmlTextReader class.  </p>\n<ul>\n<li><p>Exceptions thrown the XmlTextReader can disclose path information that you do not want bubbled up to the application. Your applications must catch exceptions and process them appropriately.  </p>\n</li>\n<li><p>DTD processing is enabled by default. Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources. Set the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_DtdProcessing_\" data-linktype=\"relative-path\">DtdProcessing</a> property to <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> to disable DTD processing.  </p>\n<p> If you have DTD processing enabled, you can use the <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> to restrict the resources that the XmlTextReader can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application.  </p>\n</li>\n<li><p>XML data can include references to external resources such as a DTD file. By default external resources are resolved using an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> object with no user credentials. You can secure this further by doing one of the following:  </p>\n<ul>\n<li><p>Restrict the resources that the XmlTextReader can access by setting the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n<li><p>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process. To limit the size of the input that is sent to the XmlTextReader, create a custom IStream implementation and supply it the XmlTextReader.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_\" data-linktype=\"relative-path\">ReadValueChunk</a> method can be used to handle large streams of data. This method reads a small number of characters at a time instead of allocating a single string for the whole value.  </p>\n</li>\n<li><p>By default general entities are not expanded. General entities are expanded when you call the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ResolveEntity_\" data-linktype=\"relative-path\">ResolveEntity</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor\" data-linktype=\"self-bookmark\">XmlTextReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlTextReader</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">XmlTextReader(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_IO_TextReader_\" data-linktype=\"self-bookmark\">XmlTextReader(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_\" data-linktype=\"self-bookmark\">XmlTextReader(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_IO_Stream_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(Stream,XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_IO_TextReader_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(TextReader,XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_IO_Stream_\" data-linktype=\"self-bookmark\">XmlTextReader(String,Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL and stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_IO_TextReader_\" data-linktype=\"self-bookmark\">XmlTextReader(String,TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL and <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(String,XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified file and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_IO_Stream_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">XmlTextReader(Stream,XmlNodeType,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, and <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_IO_Stream_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(String,Stream,XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL, stream and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_IO_TextReader_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlTextReader(String,TextReader,XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL, <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader__ctor_System_String_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">XmlTextReader(String,XmlNodeType,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified string, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, and <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_AttributeCount\" data-linktype=\"self-bookmark\">AttributeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_BaseURI\" data-linktype=\"self-bookmark\">BaseURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base URI of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_CanReadBinaryContent\" data-linktype=\"self-bookmark\">CanReadBinaryContent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implements the binary content read methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_CanReadValueChunk\" data-linktype=\"self-bookmark\">CanReadValueChunk</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_CanResolveEntity\" data-linktype=\"self-bookmark\">CanResolveEntity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Depth\" data-linktype=\"self-bookmark\">Depth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_DtdProcessing\" data-linktype=\"self-bookmark\">DtdProcessing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Encoding\" data-linktype=\"self-bookmark\">Encoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the encoding of the document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_EntityHandling\" data-linktype=\"self-bookmark\">EntityHandling</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies how the reader handles entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_EOF\" data-linktype=\"self-bookmark\">EOF</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_HasValue\" data-linktype=\"self-bookmark\">HasValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlTextReader.Value*</span> other than <code>String.Empty</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_IsDefault\" data-linktype=\"self-bookmark\">IsDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_IsEmptyElement\" data-linktype=\"self-bookmark\">IsEmptyElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_LineNumber\" data-linktype=\"self-bookmark\">LineNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current line number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_LinePosition\" data-linktype=\"self-bookmark\">LinePosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current line position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the qualified name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Namespaces\" data-linktype=\"self-bookmark\">Namespaces</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_NamespaceURI\" data-linktype=\"self-bookmark\">NamespaceURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_NameTable\" data-linktype=\"self-bookmark\">NameTable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Normalization\" data-linktype=\"self-bookmark\">Normalization</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to normalize white space and attribute values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ProhibitDtd\" data-linktype=\"self-bookmark\">ProhibitDtd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use <span class=\"xref\">stem.Xml.XmlTextReader.DtdProcessing*</span> instead.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_QuoteChar\" data-linktype=\"self-bookmark\">QuoteChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadState\" data-linktype=\"self-bookmark\">ReadState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state of the reader.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the text value of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_WhitespaceHandling\" data-linktype=\"self-bookmark\">WhitespaceHandling</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies how white space is handled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_XmlLang\" data-linktype=\"self-bookmark\">XmlLang</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_XmlResolver\" data-linktype=\"self-bookmark\">XmlResolver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> used for resolving DTD references.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_XmlSpace\" data-linktype=\"self-bookmark\">XmlSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to <code>Closed</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_GetAttribute_System_Int32_\" data-linktype=\"self-bookmark\">GetAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_GetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\" data-linktype=\"self-bookmark\">GetNamespacesInScope(XmlNamespaceScope)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains all namespaces currently in-scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_GetRemainder\" data-linktype=\"self-bookmark\">GetRemainder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the remainder of the buffered XML.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_HasLineInfo\" data-linktype=\"self-bookmark\">HasLineInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the class can return line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToAttribute_System_Int32_\" data-linktype=\"self-bookmark\">MoveToAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToAttribute_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToElement\" data-linktype=\"self-bookmark\">MoveToElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToFirstAttribute\" data-linktype=\"self-bookmark\">MoveToFirstAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the first attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_MoveToNextAttribute\" data-linktype=\"self-bookmark\">MoveToNextAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the next attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next node from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadAttributeValue\" data-linktype=\"self-bookmark\">ReadAttributeValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes Base64 and returns the decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes <code>BinHex</code> and returns the decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadChars_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadChars(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the <code>Base64</code> decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ReadString\" data-linktype=\"self-bookmark\">ReadString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the contents of an element or a text node as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ResetState\" data-linktype=\"self-bookmark\">ResetState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the state of the reader to ReadState.Initial.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_ResolveEntity\" data-linktype=\"self-bookmark\">ResolveEntity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_Skip\" data-linktype=\"self-bookmark\">Skip()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Skips the children of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupPrefix(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlTextReader</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected XmlTextReader ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (System.IO.Stream input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> decodes the stream using <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (System.IO.TextReader input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> containing the XML data to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> It is assumed that the <code>TextReader</code> is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an XML string into the <code>XmlTextReader</code> object using the <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlTextReader.cctor1#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ xmlData = &quot;&lt;book&gt;\\r<br>       &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;\\r<br>       &lt;price&gt;5.95&lt;/price&gt;\\r<br>      &lt;/book&gt;&quot;;\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( gcnew StringReader( xmlData ) );\n   reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   \n   // Display each element node.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.cctor1#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    string xmlData = \n    @&quot;&lt;book&gt;\n       &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;\n       &lt;price&gt;5.95&lt;/price&gt;\n      &lt;/book&gt;&quot;;\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(new StringReader(xmlData));\n    reader.WhitespaceHandling = WhitespaceHandling.None;\n\n    // Display each element node.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n      }       \n    }           \n\n    // Close the reader.\n    reader.Close();       \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.cctor1#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    Dim xmlData as string \n    xmlData = &quot;&lt;book&gt;&quot; &amp; _\n              &quot;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;&quot; &amp; _\n              &quot;  &lt;price&gt;5.95&lt;/price&gt;&quot; &amp; _\n              &quot;&lt;/book&gt;&quot;\n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(new StringReader(xmlData))\n    reader.WhitespaceHandling = WhitespaceHandling.None\n\n    &#39; Display each element node.\n    while reader.Read()\n       select case reader.NodeType\n         case XmlNodeType.Element\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text\n           Console.Write(reader.Value)\n         case XmlNodeType.EndElement\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select       \n    end while           \n\n    &#39; Close the reader.\n    reader.Close()       \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL for the file containing the XML data. The <span class=\"xref\">stem.Xml.XmlTextReader.BaseURI*</span> is set to this value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>Part of the filename or directory cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is an empty string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p>The remote filename cannot be resolved.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is not a valid URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> If the file is located on a resource that requires access credentials, use the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify the necessary credentials.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In version 1.1 of the .NET Framework, partially trusted code cannot set the <code>XmlResolver</code> property. The workaround is to create an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with the necessary credentials, pass the URI to the <a class=\"xref\" href=\"system.xml.xmlurlresolver#System_Xml_XmlUrlResolver_GetEntity_\" data-linktype=\"relative-path\">GetEntity</a> method, and then construct the <code>XmlTextReader</code> using the resulting <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object. The workaround is described in the following C# code.  </p>\n</div>\n<pre><code>// Create a resolver with the necessary credentials.  \nXmlUrlResolver resolver = new XmlUrlResolver();  \nNetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  \nresolver.Credentials = nc;   \n// Get a Stream object containing the XML file.  \nUri myUri = new Uri (&quot;http://myServer/data/books.xml&quot;);  \nStream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  \n// Construct a reader using the Stream object.  \nXmlTextReader reader = new XmlTextReader(s);  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Load the reader with the data file and ignore all white space nodes.         \n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.Name Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\n&#39;Reads an XML document\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the data file and ignore all white space nodes.         \n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.DocumentType\n                        Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.EntityReference\n                        Console.Write(reader.Name)\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n     XmlTextReader reader = null;\n\n     try {\n       \n        // Load the reader with the data file and ignore all white space nodes.         \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Parse the file and display each of the nodes.\n        while (reader.Read()) {\n           switch (reader.NodeType) {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected XmlTextReader (System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_IO_Stream_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(Stream,XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> or <code>nt</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> decodes the stream using <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a>.  </p>\n<p> If you specify a name table, this constructor uses the names defined already in that table.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_IO_TextReader_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(TextReader,XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> containing the XML data to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The <code>nt</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> It is assumed that the <code>TextReader</code> is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL and stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url, System.IO.Stream input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL to use for resolving external resources. The <span class=\"xref\">stem.Xml.XmlTextReader.BaseURI*</span> is set to this value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL and <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url, System.IO.TextReader input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL to use for resolving external resources. The <span class=\"xref\">stem.Xml.XmlTextReader.BaseURI*</span> is set to this value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> containing the XML data to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> It is assumed that the <code>TextReader</code> is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified file and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url, System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL for the file containing the XML data to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The <code>nt</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>Part of the filename or directory cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is an empty string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p>The remote filename cannot be resolved.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is not a valid URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_IO_Stream_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(Stream,XmlNodeType,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified stream, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, and <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlFragment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML fragment to parse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fragType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> of the XML fragment. This also determines what the fragment can contain. (See table below.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> in which the <code>xmlFragment</code> is to be parsed. This includes the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, the current <code>xml:lang</code>, and the <code>xml:space</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p><code>fragType</code> is not an Element, Attribute, or Document <code>XmlNodeType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>xmlFragment</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.  </p>\n<p> The following table lists valid values for <code>fragType</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Fragment May Contain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Element</code></td>\n<td>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).<br><br> An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> object.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>The value of an attribute (the part inside the quotes).</td>\n</tr>\n<tr>\n<td><code>Document</code></td>\n<td>The contents of an entire XML document. This enforces document level rules.</td>\n</tr>\n</tbody>\n</table>\n<p> The reader uses the following to determine the encoding of the stream.  </p>\n<ol>\n<li><p>Checks the <a class=\"xref\" href=\"system.xml.xmlparsercontext#System_Xml_XmlParserContext_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property to determine the encoding.  </p>\n</li>\n<li><p>If the <code>Encoding</code> property is <code>null</code>, the reader checks for a byte-order mark at the beginning of the stream.  </p>\n</li>\n<li><p>If the <code>Encoding</code> property is <code>null</code>, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_IO_Stream_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,Stream,XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL, stream and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL to use for resolving external resources. The <span class=\"xref\">stem.Xml.XmlTextReader.BaseURI*</span> is set to this value. If <code>url</code> is <code>null</code>, <code>BaseURI</code> is set to <code>String.Empty</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> or <code>nt</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_IO_TextReader_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,TextReader,XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified URL, <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL to use for resolving external resources. The <span class=\"xref\">stem.Xml.XmlTextReader.BaseURI*</span> is set to this value. If <code>url</code> is <code>null</code>, <code>BaseURI</code> is set to <code>String.Empty</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> containing the XML data to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>nt</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> It is assumed that the <code>TextReader</code> is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader__ctor_System_String_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextReader(String,XmlNodeType,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class with the specified string, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, and <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlFragment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the XML fragment to parse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fragType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> of the XML fragment. This also determines what the fragment string can contain. (See table below.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> in which the <code>xmlFragment</code> is to be parsed. This includes the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, the current <code>xml:lang</code>, and the <code>xml:space</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p><code>fragType</code> is not an <code>Element</code>, <code>Attribute</code>, or <code>Document``XmlNodeType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>xmlFragment</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents. This constructor can handle strings returned from <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a>.  </p>\n<p> The following table lists valid values for <code>fragType</code> and how the reader parses each of the different node types.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Fragment May Contain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Element</td>\n<td>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).<br><br> An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> object.</td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>The value of an attribute (the part inside the quotes).</td>\n</tr>\n<tr>\n<td>Document</td>\n<td>The contents of an entire XML document. This enforces document level rules.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses an XML fragment. It uses the <code>XmlParserContext</code> and its <a class=\"xref\" href=\"system.xml.xmlnamespacemanager\" data-linktype=\"relative-path\">XmlNamespaceManager</a> to handle namespace resolution.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlTextReader.Cctor#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n\n    //Create the XML fragment to be parsed.\n    string xmlFrag =&quot;&lt;book&gt; &quot; +\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                    &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                    &quot;&lt;/book&gt;&quot;; \n\n    //Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n    nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;);\n\n    //Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    //Create the reader. \n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n  \n    //Parse the XML.  If they exist, display the prefix and  \n    //namespace URI of each element.\n    while (reader.Read()){\n      if (reader.IsStartElement()){\n        if (reader.Prefix==String.Empty)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n        else{\n            Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n            Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n        }\n      }\n    }\n  \n    //Close the reader.\n    reader.Close();     \n  \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.Cctor#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the XML fragment to be parsed.\n    Dim xmlFrag as string =&quot;&lt;book&gt; &quot; &amp; _\n                           &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                           &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                           &quot;&lt;/book&gt;&quot; \n\n    &#39;Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n    nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;)\n\n    &#39;Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39;Create the reader. \n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n  \n    &#39;Parse the XML.  If they exist, display the prefix and  \n    &#39;namespace URI of each element.\n    while (reader.Read())\n      if (reader.IsStartElement())\n        if (reader.Prefix=String.Empty)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n        else\n            Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n            Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI)\n        end if \n      end if\n    end while\n  \n    &#39;Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.Cctor#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt; &lt;title&gt;Pride And Prejudice&lt;/title&gt; &lt;bk:genre&gt;novel&lt;/bk:genre&gt; &lt;/book&gt;&quot;;\n   \n   // Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   nsmgr-&gt;AddNamespace( &quot;bk&quot;, &quot;urn:sample&quot; );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader. \n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   \n   // Parse the XML.  If they exist, display the prefix and  \n   // namespace URI of each element.\n   while ( reader-&gt;Read() )\n   {\n      if ( reader-&gt;IsStartElement() )\n      {\n         if ( reader-&gt;Prefix == String::Empty )\n                  Console::WriteLine( &quot;&lt; {0}&gt;&quot;, reader-&gt;LocalName );\n         else\n         {\n            Console::Write( &quot;&lt; {0}: {1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n            Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n         }\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_AttributeCount\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_AttributeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttributeCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int AttributeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of attributes on the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property is relevant to <code>Element</code>, <code>DocumentType</code> and <code>XmlDeclaration</code> nodes only. (Other node types do not have attributes.)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public void DisplayAttributes(XmlReader reader)\n{\n  if (reader.HasAttributes)\n  {\n    Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n    for (int i = 0; i &lt; reader.AttributeCount; i++)\n    {\n      reader.MoveToAttribute(i);\n      Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n    }\n    reader.MoveToElement(); //Moves the reader back to the element node.\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public:\n   void DisplayAttributes( XmlReader^ reader )\n   {\n      if ( reader-&gt;HasAttributes )\n      {\n         Console::WriteLine( &quot;Attributes of &lt;{0}&gt;&quot;, reader-&gt;Name );\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::Write( &quot; {0}={1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement(); //Moves the reader back to the element node.\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">    Public Sub DisplayAttributes(reader As XmlReader)\n        If reader.HasAttributes Then\n            Console.WriteLine(&quot;Attributes of &lt;&quot; &amp; reader.Name &amp; &quot;&gt;&quot;)\n            Dim i As Integer\n            For i = 0 To reader.AttributeCount - 1\n                reader.MoveToAttribute(i)\n                Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n            Next i\n            reader.MoveToElement() &#39;Moves the reader back to the element node.\n        End If\n    End Sub &#39;DisplayAttributes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_BaseURI\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_BaseURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base URI of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string BaseURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The base URI of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <code>String.Empty</code> is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the base URI for each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.BaseURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;http://localhost/baseuri.xml&quot; );\n      \n      //Parse the file and display the base URI for each node.\n      while ( reader-&gt;Read() )\n      {\n         Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;BaseURI );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.BaseURI Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim reader As XmlTextReader = Nothing\n      \n      Try\n         &#39;Load the reader with the XML file.\n         reader = New XmlTextReader(&quot;http://localhost/baseuri.xml&quot;)\n         \n         &#39;Parse the file and display the base URI for each node.\n         While reader.Read()\n            Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI)\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.BaseURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {           \n        //Load the reader with the XML file.\n        reader = new XmlTextReader(&quot;http://localhost/baseuri.xml&quot;);\n\n        //Parse the file and display the base URI for each node.\n        while (reader.Read())\n        {\n            Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI);\n         }           \n     }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The example uses the file, <code>baseuri.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.BaseURI Example#2\">\n&lt;!-- XML fragment --&gt;\n&lt;book genre=&quot;novel&quot;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_CanReadBinaryContent\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_CanReadBinaryContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadBinaryContent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implements the binary content read methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanReadBinaryContent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the binary content read methods are implemented; otherwise <code>false</code>. The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class always returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The binary content read methods include the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a>, <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a>, <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a>, and <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_CanReadValueChunk\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_CanReadValueChunk_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadValueChunk</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanReadValueChunk { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method; otherwise <code>false</code>. The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> if the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_\" data-linktype=\"relative-path\">ReadValueChunk</a> method is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_CanResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_CanResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanResolveEntity</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanResolveEntity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader can parse and resolve entities; otherwise, <code>false</code>. The <code>XmlTextReader</code> class always returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This is a change in the .NET Framework 2.0 release. In previous versions, the <code>XmlTextReader</code> class could not resolve entities and <code>CanResolveEntity</code> always returned <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Depth\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Depth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Depth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Depth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The depth of the current node in the XML document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each node including its depth, line number, and line position.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlTextReader.LineNum#1\">Imports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39; Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;book&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;misc&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;style&gt;paperback&lt;/style&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;pages&gt;240&lt;/pages&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;/misc&gt;&quot; + Chr(10) &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n    &#39; Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n\n    &#39; Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n    &#39; Parse the XML and display each node.\n    while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select       \n    end while           \n\n    &#39; Close the reader.\n    reader.Close()      \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.LineNum#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt;<br>&quot;\n   &quot;&lt;misc&gt;<br>&quot;\n   &quot;&lt;style&gt;paperback&lt;/style&gt;<br>&quot;\n   &quot;&lt;pages&gt;240&lt;/pages&gt;<br>&quot;\n   &quot;&lt;/misc&gt;<br>&quot;\n   &quot;&lt;/book&gt;<br>&quot;;\n   \n   // Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   \n   // Parse the XML and display each node.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt; {0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot; {0}&quot;, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt;/ {0}&gt;&quot;, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.LineNum#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    // Create the XML fragment to be parsed.\n    string xmlFrag  = \n    @&quot;&lt;book&gt; \n         &lt;misc&gt;\n           &lt;style&gt;paperback&lt;/style&gt; \n           &lt;pages&gt;240&lt;/pages&gt;\n         &lt;/misc&gt; \n        &lt;/book&gt;&quot;;\n\n    // Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n    // Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n    // Parse the XML and display each node.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n       }       \n    }           \n\n    // Close the reader.\n    reader.Close();      \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_DtdProcessing\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_DtdProcessing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DtdProcessing</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.DtdProcessing DtdProcessing { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> enumeration contains the <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a>, <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a>, and <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> enumerators. <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">DtdProcessing</a> is the default behavior. The DtdProcessing property replaces the <code>ProhibitDTD</code> property and adds the ability to ignore the DOCTYPE element.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If the DtdProcessing property is set to <a class=\"xref\" href=\"system.xml.dtdprocessing\" data-linktype=\"relative-path\">System.Xml.DtdProcessing</a>, the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> will not report the DTDs. This means that the DTD/DOCTYPE will be lost on output.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Encoding\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Encoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the encoding of the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding Encoding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Because <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> uses the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a> class, <code>XmlTextReader</code> also supports all encodings supported by that class. The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the <code>&lt;?xml</code> sequence to different byte values than UTF-8.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_EntityHandling\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_EntityHandling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntityHandling</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies how the reader handles entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.EntityHandling EntityHandling { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.entityhandling\" data-linktype=\"relative-path\">EntityHandling</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.entityhandling\" data-linktype=\"relative-path\">EntityHandling</a> values. If no <code>EntityHandling</code> is specified, it defaults to <code>EntityHandling.ExpandCharEntities</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property can be changed on the fly and takes effect after the next <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> call.  </p>\n<p> When <code>EntityHandling</code> is set to <code>ExpandCharEntities</code>, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.  </p>\n<p> To illustrate the difference between the entity handling modes consider the following XML:  </p>\n<pre><code>&lt;!DOCTYPE doc [&lt;!ENTITY num &quot;123&quot;&gt;]&gt;  \n    &lt;doc&gt; &amp;#65; &amp;num; &lt;/doc&gt;  \n</code></pre><p> When <code>EntityHandling</code> is set to <code>ExpandEntities</code> the &quot;doc&quot; element node contains one text node with the expanded entity text:  </p>\n<table>\n<thead>\n<tr>\n<th>Depth</th>\n<th>Node type</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>Text</code></td>\n<td></td>\n<td>A 123</td>\n</tr>\n</tbody>\n</table>\n<p> When <code>EntityHandling</code> is set to <code>ExpandCharEntites</code>, and <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_WhitespaceHandling_\" data-linktype=\"relative-path\">WhitespaceHandling</a> is set to <code>Significant</code> or <code>All</code>, the &quot;doc&quot; element expands the character entity and returns the general entity as a node:  </p>\n<table>\n<thead>\n<tr>\n<th>Depth</th>\n<th>Node type</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>Text</code></td>\n<td></td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>EntityReference</code></td>\n<td>num</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>SignificantWhitespace</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_EOF\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_EOF_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EOF</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool EOF { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned at the end of the stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_HasValue\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_HasValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlTextReader.Value*</span> other than <code>String.Empty</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool HasValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the node on which the reader is currently positioned can have a <code>Value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The following table lists node types that have a value to return.  </p>\n<table>\n<thead>\n<tr>\n<th>Node type</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Attribute</code></td>\n<td>The value of the attribute.</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>The content of the CDATA section.</td>\n</tr>\n<tr>\n<td><code>Comment</code></td>\n<td>The content of the comment.</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>The internal subset.</td>\n</tr>\n<tr>\n<td><code>ProcessingInstruction</code></td>\n<td>The entire content, excluding the target.</td>\n</tr>\n<tr>\n<td><code>SignificantWhitespace</code></td>\n<td>The white space between markup in a mixed content model.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>The content of the text node.</td>\n</tr>\n<tr>\n<td><code>Whitespace</code></td>\n<td>The white space between markup.</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>The content of the declaration.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value for every node that can have a value.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.HasValue Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {           \n        //Load the reader with the XML file.\n        reader = new XmlTextReader(&quot;book1.xml&quot;);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        //Parse the file and display each node.\n        while (reader.Read())\n        {\n           if (reader.HasValue)\n             Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value);\n           else\n             Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name);\n         }           \n     }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.HasValue Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;book1.xml&quot; );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Parse the file and display each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;HasValue )\n                  Console::WriteLine( &quot;({0})  {1}={2}&quot;, reader-&gt;NodeType, reader-&gt;Name, reader-&gt;Value );\n         else\n                  Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.HasValue Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39;Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;book1.xml&quot;)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39;Parse the file and display each node.\n            While reader.Read()\n                If reader.HasValue Then\n                    Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value)\n                Else\n                    Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name)\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>book1.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.HasValue Example#2\">\n&lt;?xml version=&#39;1.0&#39; ?&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_IsDefault\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_IsDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefault { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property always returns <code>false</code>. (<a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> does not expand default attributes.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property applies only to attribute nodes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_IsEmptyElement\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_IsEmptyElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmptyElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsEmptyElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an element (<span class=\"xref\">stem.Xml.XmlTextReader.NodeType*</span> equals <code>XmlNodeType.Element</code>) that ends with <code>/&gt;</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property enables you to determine the difference between the following:  </p>\n<p> <code>&lt;item num=&quot;123&quot;/&gt;</code> (<code>IsEmptyElement</code> is <code>true</code>).  </p>\n<p> <code>&lt;item num=&quot;123&quot;&gt;</code> (<code>IsEmptyElement</code> is <code>false</code>, although element content is empty).  </p>\n<p> A corresponding <code>EndElement</code> node is not generated for empty elements.  </p>\n<p> <code>IsEmptyElement</code> simply reports whether or not the element in the source document had an end element tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {\n       //Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;elems.xml&quot;);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                 Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;elems.xml&quot; );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39;Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;elems.xml&quot;)\n            \n            &#39;Parse the XML and display the text content of each of the elements.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.IsEmptyElement Then\n                        Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n                    Else\n                        Console.Write(&quot;&lt;{0}&gt;&quot; + &quot; &quot;, reader.Name)\n                        reader.Read() &#39;Read the start tag.\n                        If (reader.IsStartElement())  &#39;Handle nested elements.\n                          Console.WriteLine()\n                          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                        End If\n                        Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n                    End If\n                End If\n            End While\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlReader.IsStartElement Example#2\">\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_LineNumber\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_LineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineNumber</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current line number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LineNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current line number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is <code>1</code>.  </p>\n<p> Combined with <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_LinePosition_\" data-linktype=\"relative-path\">LinePosition</a>, a value of <code>1,1</code> indicates the start of the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each node including its depth, line number, and line position.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlTextReader.LineNum#1\">Imports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39; Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;book&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;misc&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;style&gt;paperback&lt;/style&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;pages&gt;240&lt;/pages&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;/misc&gt;&quot; + Chr(10) &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n    &#39; Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n\n    &#39; Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n    &#39; Parse the XML and display each node.\n    while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select       \n    end while           \n\n    &#39; Close the reader.\n    reader.Close()      \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.LineNum#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt;<br>&quot;\n   &quot;&lt;misc&gt;<br>&quot;\n   &quot;&lt;style&gt;paperback&lt;/style&gt;<br>&quot;\n   &quot;&lt;pages&gt;240&lt;/pages&gt;<br>&quot;\n   &quot;&lt;/misc&gt;<br>&quot;\n   &quot;&lt;/book&gt;<br>&quot;;\n   \n   // Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   \n   // Parse the XML and display each node.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt; {0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot; {0}&quot;, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt;/ {0}&gt;&quot;, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.LineNum#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    // Create the XML fragment to be parsed.\n    string xmlFrag  = \n    @&quot;&lt;book&gt; \n         &lt;misc&gt;\n           &lt;style&gt;paperback&lt;/style&gt; \n           &lt;pages&gt;240&lt;/pages&gt;\n         &lt;/misc&gt; \n        &lt;/book&gt;&quot;;\n\n    // Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n    // Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n    // Parse the XML and display each node.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n       }       \n    }           \n\n    // Close the reader.\n    reader.Close();      \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_LinePosition\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_LinePosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LinePosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current line position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LinePosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current line position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property is most commonly used for error reporting, but can be called at any time. The property&#39;s starting value is <code>1</code>.  </p>\n<p> The position indicated is the first character of text in the markup.  </p>\n<pre><code>&lt;root&gt;  \nabc&lt;tag/&gt;  \n&lt;/root&gt;  \n</code></pre><p> On the first line of the preceding XML text, a <code>LinePosition</code> of <code>2</code> corresponds to the character <code>r</code>; on the second line, a <code>LinePosition</code> of <code>5</code> corresponds to the character <code>t</code>; and on the third line, a <code>LinePosition</code> of <code>3</code> corresponds to the character <code>r</code>.  </p>\n<p> Combined with <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_LineNumber_\" data-linktype=\"relative-path\">LineNumber</a>, a value of <code>1,1</code> indicates the start of the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each node including its depth, line number, and line position.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlTextReader.LineNum#1\">Imports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39; Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;book&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;misc&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;style&gt;paperback&lt;/style&gt;&quot;  + Chr(10) &amp; _\n                                    &quot;    &lt;pages&gt;240&lt;/pages&gt;&quot; + Chr(10) &amp; _\n                                    &quot;  &lt;/misc&gt;&quot; + Chr(10) &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n    &#39; Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n\n    &#39; Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n    &#39; Parse the XML and display each node.\n    while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition)\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select       \n    end while           \n\n    &#39; Close the reader.\n    reader.Close()      \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.LineNum#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt;<br>&quot;\n   &quot;&lt;misc&gt;<br>&quot;\n   &quot;&lt;style&gt;paperback&lt;/style&gt;<br>&quot;\n   &quot;&lt;pages&gt;240&lt;/pages&gt;<br>&quot;\n   &quot;&lt;/misc&gt;<br>&quot;\n   &quot;&lt;/book&gt;<br>&quot;;\n   \n   // Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   \n   // Parse the XML and display each node.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt; {0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot; {0}&quot;, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, reader-&gt;LineNumber, reader-&gt;LinePosition );\n            Console::WriteLine( &quot;&lt;/ {0}&gt;&quot;, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.LineNum#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    // Create the XML fragment to be parsed.\n    string xmlFrag  = \n    @&quot;&lt;book&gt; \n         &lt;misc&gt;\n           &lt;style&gt;paperback&lt;/style&gt; \n           &lt;pages&gt;240&lt;/pages&gt;\n         &lt;/misc&gt; \n        &lt;/book&gt;&quot;;\n\n    // Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n    // Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n    // Parse the XML and display each node.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, reader.LineNumber, reader.LinePosition);\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n       }       \n    }           \n\n    // Close the reader.\n    reader.Close();      \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current node with the prefix removed. For example, <code>LocalName</code> is <code>book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> For node types that do not have a name (like <code>Text</code>, <code>Comment</code>, and so on), this property returns <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n  \n    XmlTextReader reader = null;\n\n    try {\n\n       // Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;book2.xml&quot;);\n  \n       // Parse the file.  If they exist, display the prefix and \n       // namespace URI of each node.\n       while (reader.Read()) {\n         if (reader.IsStartElement()) {\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else {\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }       \n\n     } \n     finally {\n        if (reader != null)\n          reader.Close();\n      }\n  }  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      // Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;book2.xml&quot; );\n      \n      // Parse the file.  If they exist, display the prefix and \n      // namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;book2.xml&quot;)\n            \n            &#39; Parse the file.  If they exist, display the prefix and \n            &#39; namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>book2.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.LocalName Example#2\">\n&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the qualified name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The qualified name of the current node. For example, <code>Name</code> is <code>bk:book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> The name returned is dependent on the <span class=\"xref\">stem.Xml.XmlTextReader.NodeType*</span> of the node. The following node types return the listed values. All other node types return an empty string.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Name<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The name of the attribute.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The document type name.<br>\n </td></tr><tr><td><code>Element</code></td><td> The tag name.<br>\n </td></tr><tr><td><code>EntityReference</code></td><td> The name of the entity referenced.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The target of the processing instruction.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The literal string <code>xml</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Load the reader with the data file and ignore all white space nodes.         \n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.Name Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\n&#39;Reads an XML document\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the data file and ignore all white space nodes.         \n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.DocumentType\n                        Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.EntityReference\n                        Console.Write(reader.Name)\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n     XmlTextReader reader = null;\n\n     try {\n       \n        // Load the reader with the data file and ignore all white space nodes.         \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Parse the file and display each of the nodes.\n        while (reader.Read()) {\n           switch (reader.NodeType) {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The sample uses the file <code>items.xml</code>.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Namespaces\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Namespaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespaces</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Namespaces { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to do namespace support; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Setting this property after a read operation has occurred (<span class=\"xref\">stem.Xml.XmlTextReader.ReadState*</span> is not <code>ReadState.Initial</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.  </p>\n<p> The <code>Namespaces</code> property cannot be set after a read operation has occurred.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_NamespaceURI\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_NamespaceURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string NamespaceURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI of the current node; otherwise an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property is relevant to <code>Element</code> and <code>Attribute</code> nodes only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n  \n    XmlTextReader reader = null;\n\n    try {\n\n       // Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;book2.xml&quot;);\n  \n       // Parse the file.  If they exist, display the prefix and \n       // namespace URI of each node.\n       while (reader.Read()) {\n         if (reader.IsStartElement()) {\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else {\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }       \n\n     } \n     finally {\n        if (reader != null)\n          reader.Close();\n      }\n  }  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      // Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;book2.xml&quot; );\n      \n      // Parse the file.  If they exist, display the prefix and \n      // namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;book2.xml&quot;)\n            \n            &#39; Parse the file.  If they exist, display the prefix and \n            &#39; namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>book2.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.LocalName Example#2\">\n&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_NameTable\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_NameTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameTable</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNameTable NameTable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlNameTable</code> enabling you to get the atomized version of a string within the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> All node and attribute names returned from <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> are atomized using the <code>NameTable</code>. When the same name is returned multiple times (for example, <code>Customer</code>), then the same <code>String</code> object is returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> values representing the type of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property never returns the following <code>XmlNodeType</code> types: <code>Document</code>, <code>DocumentFragment</code>, <code>Entity</code>, <code>EndEntity</code>, or <code>Notation</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Load the reader with the data file and ignore all white space nodes.         \n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.Name Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\n&#39;Reads an XML document\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the data file and ignore all white space nodes.         \n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.DocumentType\n                        Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.EntityReference\n                        Console.Write(reader.Name)\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n     XmlTextReader reader = null;\n\n     try {\n       \n        // Load the reader with the data file and ignore all white space nodes.         \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Parse the file and display each of the nodes.\n        while (reader.Read()) {\n           switch (reader.NodeType) {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The sample uses the file <code>items.xml</code>.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Normalization\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Normalization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Normalization</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to normalize white space and attribute values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Normalization { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to normalize; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Setting this property when the reader is closed (<span class=\"xref\">stem.Xml.XmlTextReader.ReadState*</span> is <code>ReadState.Closed</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property can be changed at any time and takes effect on the next read operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> is used to construct an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>, to normalize attribute values, <code>Normalization</code> must be set to <code>true</code>.  </p>\n</div>\n<p> If <code>Normalization</code> is set to <code>false</code>, this also disables character range checking for numeric entities. As a result, character entities, such as <code>&amp;#0;</code>, are allowed.  </p>\n<p> The following describes attribute value normalization:  </p>\n<ul>\n<li><p>For a character reference, append the referenced character to the attribute value.  </p>\n</li>\n<li><p>For an entity reference, recursively process the replacement text of the entity.  </p>\n</li>\n<li><p>For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value. (Only a single #x20 is appended for a &quot;#xD#xA&quot; sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)  </p>\n</li>\n<li><p>Process other characters by appending them to the normalized value.  </p>\n</li>\n<li><p>If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.  </p>\n<p>The <code>XmlTextReader</code> only performs attribute or CDATA normalization. It does not do DTD-specific normalization unless wrapped within an <code>XmlValidatingReader</code>.  </p>\n<p>Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows reader behavior with normalization turned on and then off.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlTextReader.Normalization#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;item attr1=&#39;  test A B C<br>&quot;\n   &quot;1 2 3&#39;/&gt;<br>&quot;\n   &quot;&lt;item attr2=&#39;&amp;#01;&#39;/&gt;<br>&quot;;\n   \n   // Create the XmlNamespaceManager.\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( gcnew NameTable );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::Preserve );\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   \n   // Show attribute value normalization.\n   reader-&gt;Read();\n   reader-&gt;Normalization = false;\n   Console::WriteLine( &quot;Attribute value: {0}&quot;, reader-&gt;GetAttribute( &quot;attr1&quot; ) );\n   reader-&gt;Normalization = true;\n   Console::WriteLine( &quot;Attribute value: {0}&quot;, reader-&gt;GetAttribute( &quot;attr1&quot; ) );\n   \n   // Set Normalization back to false.  This allows the reader to accept\n   // character entities in the &amp;#00; to &amp;#20; range.  If Normalization had\n   // been set to true, character entities in this range throw an exception.\n   reader-&gt;Normalization = false;\n   reader-&gt;Read();\n   reader-&gt;MoveToContent();\n   Console::WriteLine( &quot;Attribute value: {0}&quot;, reader-&gt;GetAttribute( &quot;attr2&quot; ) );\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.Normalization#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    // Create the XML fragment to be parsed.\n    string xmlFrag  = \n    @&quot;&lt;item attr1=&#39;  test A B C\n        1 2 3&#39;/&gt;\n      &lt;item attr2=&#39;&amp;#01;&#39;/&gt;&quot;;                         \n\n    // Create the XmlNamespaceManager.\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(new NameTable());\n\n    // Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.Preserve);\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n    // Show attribute value normalization.\n    reader.Read();\n    reader.Normalization = false;\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr1&quot;));\n    reader.Normalization = true;\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr1&quot;));\n\n    // Set Normalization back to false.  This allows the reader to accept\n    // character entities in the &amp;#00; to &amp;#20; range.  If Normalization had\n    // been set to true, character entities in this range throw an exception.\n    reader.Normalization = false;\n    reader.Read();\n    reader.MoveToContent();\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr2&quot;));\n  \n    // Close the reader.\n    reader.Close();     \n  \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.Normalization#1\">Imports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39; Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;item attr1=&#39;  test A B C &quot; + Chr(10) &amp; _\n                            &quot;   1 2 3&#39;/&gt;&quot; + Chr(10) &amp; _\n                            &quot;&lt;item attr2=&#39;&amp;#01;&#39;/&gt;&quot;\n                    \n\n    &#39; Create the XmlNamespaceManager.\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(new NameTable())\n\n    &#39; Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.Preserve)\n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n    &#39; Show attribute value normalization.\n    reader.Read()\n    reader.Normalization = false\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr1&quot;))\n    reader.Normalization = true\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr1&quot;))\n\n    &#39; Set Normalization back to false.  This allows the reader to accept\n    &#39; character entities in the &amp;#00; to &amp;#20; range.  If Normalization had\n    &#39; been set to true, character entities in this range throw an exception.\n    reader.Normalization = false\n    reader.Read()\n    reader.MoveToContent()\n    Console.WriteLine(&quot;Attribute value:{0}&quot;, reader.GetAttribute(&quot;attr2&quot;))\n  \n    &#39; Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Prefix\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Prefix { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace prefix associated with the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n  \n    XmlTextReader reader = null;\n\n    try {\n\n       // Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;book2.xml&quot;);\n  \n       // Parse the file.  If they exist, display the prefix and \n       // namespace URI of each node.\n       while (reader.Read()) {\n         if (reader.IsStartElement()) {\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else {\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }       \n\n     } \n     finally {\n        if (reader != null)\n          reader.Close();\n      }\n  }  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      // Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;book2.xml&quot; );\n      \n      // Parse the file.  If they exist, display the prefix and \n      // namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;book2.xml&quot;)\n            \n            &#39; Parse the file.  If they exist, display the prefix and \n            &#39; namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>book2.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.LocalName Example#2\">\n&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ProhibitDtd\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ProhibitDtd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProhibitDtd</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use <span class=\"xref\">stem.Xml.XmlTextReader.DtdProcessing*</span> instead.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ProhibitDtd { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to disallow DTD processing; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> DTD processing is enabled by default for backwards compatibility. However, unless your application requires DTD processing, you should disable this setting. Disabling DTD processing can be useful in preventing certain denial of service attacks. If set to <code>true</code>, the reader throws an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> when any DTD content is encountered.  </p>\n<p> If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks. Use the <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> to restrict the resources that the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_QuoteChar\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_QuoteChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QuoteChar</div>        \r\n          </div>\r\n    \r\n            <p>Gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override char QuoteChar { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The quotation mark character (&quot; or &#39;) used to enclose the value of an attribute node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property applies only to an attribute node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadState\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state of the reader.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.ReadState ReadState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Value\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the text value of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value returned depends on the <span class=\"xref\">stem.Xml.XmlTextReader.NodeType*</span> of the node. The following table lists node types that have a value to return. All other node types return <code>String.Empty</code>.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Value<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The value of the attribute.<br>\n </td></tr><tr><td><code>CDATA</code></td><td> The content of the CDATA section.<br>\n </td></tr><tr><td><code>Comment</code></td><td> The content of the comment.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The internal subset.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The entire content, excluding the target.<br>\n </td></tr><tr><td><code>SignificantWhitespace</code></td><td> The white space within an <code>xml:space</code>= &#39;preserve&#39; scope.<br>\n </td></tr><tr><td><code>Text</code></td><td> The content of the text node.<br>\n </td></tr><tr><td><code>Whitespace</code></td><td> The white space between markup.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The content of the declaration.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Load the reader with the data file and ignore all white space nodes.         \n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.Name Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\n&#39;Reads an XML document\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the data file and ignore all white space nodes.         \n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.DocumentType\n                        Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.EntityReference\n                        Console.Write(reader.Name)\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n     XmlTextReader reader = null;\n\n     try {\n       \n        // Load the reader with the data file and ignore all white space nodes.         \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Parse the file and display each of the nodes.\n        while (reader.Read()) {\n           switch (reader.NodeType) {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The sample uses the file <code>items.xml</code>.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_WhitespaceHandling\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_WhitespaceHandling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhitespaceHandling</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies how white space is handled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.whitespacehandling\" data-linktype=\"relative-path\">WhitespaceHandling</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.whitespacehandling\" data-linktype=\"relative-path\">WhitespaceHandling</a> values. The default is <code>WhitespaceHandling.All</code> (returns <code>Whitespace</code> and <code>SignificantWhitespace</code> nodes).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Invalid value specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Setting this property when the reader is closed (<span class=\"xref\">stem.Xml.XmlTextReader.ReadState*</span> is <code>ReadState.Closed</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property can be changed at any time and takes effect on the next read operation.  </p>\n<p> Because the <code>XmlTextReader</code> does not have DTD information available to it, <code>SignificantWhitepsace</code> nodes are only returned within an <code>xml:space=&#39;preserve&#39;</code> scope.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.WhitespaceHandling Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nvoid ReadXML( XmlParserContext^ context, String^ xmlFrag, WhitespaceHandling ws )\n{\n   \n   //Create the reader and specify the WhitespaceHandling setting.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   reader-&gt;WhitespaceHandling = ws;\n   \n   //Parse the XML and display each of the nodes.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::WriteLine( &quot;{0}: &lt;{1}&gt;&quot;, reader-&gt;NodeType, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::WriteLine( &quot;{0}: {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::WriteLine( &quot;{0}: &lt;/{1}&gt;&quot;, reader-&gt;NodeType, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Whitespace:\n            Console::WriteLine( &quot;{0}:&quot;, reader-&gt;NodeType );\n            break;\n\n         case XmlNodeType::SignificantWhitespace:\n            Console::WriteLine( &quot;{0}:&quot;, reader-&gt;NodeType );\n            break;\n      }\n   }\n\n   \n   //Close the reader.\n   reader-&gt;Close();\n}\n\nint main()\n{\n   \n   //Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt; &quot;\n   &quot;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;  &lt;genre&gt;novel&lt;/genre&gt;&quot;\n   &quot;&lt;/book&gt;&quot;;\n   \n   //Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   \n   //Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::Default );\n   Console::WriteLine( &quot;Read the XML and ignore all white space...&quot; );\n   ReadXML( context, xmlFrag, WhitespaceHandling::None );\n   Console::WriteLine( &quot;\\r<br>Read the XML including white space nodes...&quot; );\n   ReadXML( context, xmlFrag, WhitespaceHandling::All );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.WhitespaceHandling Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main(){\n\n    //Create the XML fragment to be parsed.\n    string xmlFrag =&quot;&lt;book&gt; &quot; +\n                    &quot;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                    &quot;  &lt;genre&gt;novel&lt;/genre&gt;&quot; +\n                    &quot;&lt;/book&gt;&quot;; \n\n    //Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n    //Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.Default);\n\n    Console.WriteLine(&quot;Read the XML and ignore all white space...&quot;);\n    ReadXML(context, xmlFrag, WhitespaceHandling.None);\n\n    Console.WriteLine(&quot;\\r<br>Read the XML including white space nodes...&quot;);\n    ReadXML(context, xmlFrag, WhitespaceHandling.All);\n\n  }\n  \n  public static void ReadXML(XmlParserContext context, string xmlFrag, WhitespaceHandling ws){\n\n    //Create the reader and specify the WhitespaceHandling setting.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n    reader.WhitespaceHandling = ws;\n\n      //Parse the XML and display each of the nodes.\n      while (reader.Read())\n      {\n         switch (reader.NodeType)\n         {\n           case XmlNodeType.Element:\n             Console.WriteLine(&quot;{0}: &lt;{1}&gt;&quot;, reader.NodeType, reader.Name);\n             break;\n           case XmlNodeType.Text:\n             Console.WriteLine(&quot;{0}: {1}&quot;, reader.NodeType, reader.Value);\n             break;\n           case XmlNodeType.EndElement:\n             Console.WriteLine(&quot;{0}: &lt;/{1}&gt;&quot;, reader.NodeType, reader.Name);\n             break;\n           case XmlNodeType.Whitespace:\n             Console.WriteLine(&quot;{0}:&quot;, reader.NodeType);\n             break;\n           case XmlNodeType.SignificantWhitespace:\n             Console.WriteLine(&quot;{0}:&quot;, reader.NodeType);\n             break;\n         }       \n      }           \n  \n    //Close the reader.\n    reader.Close();     \n  \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.WhitespaceHandling Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the XML fragment to be parsed.\n    Dim xmlFrag as string =&quot;&lt;book&gt; &quot; &amp; _\n                           &quot;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                           &quot;  &lt;genre&gt;novel&lt;/genre&gt;&quot; &amp; _\n                           &quot;&lt;/book&gt;&quot; \n\n    &#39;Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n\n    &#39;Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.Default)\n\n    Console.WriteLine(&quot;Read the XML and ignore all white space...&quot;)\n    ReadXML(context, xmlFrag, WhitespaceHandling.None)\n\n    Console.WriteLine()\n    Console.WriteLine(&quot;Read the XML including white space nodes...&quot;)\n    ReadXML(context, xmlFrag, WhitespaceHandling.All)\n  end sub\n  \n  public shared sub ReadXML(context as XmlParserContext, xmlFrag as string, ws as WhitespaceHandling)\n\n    &#39;Create the reader and specify the WhitespaceHandling setting.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n    reader.WhitespaceHandling = ws\n\n      &#39;Parse the XML and display each of the nodes.\n      while (reader.Read())\n         select case reader.NodeType\n           case XmlNodeType.Element:\n             Console.WriteLine(&quot;{0}: &lt;{1}&gt;&quot;, reader.NodeType, reader.Name)\n           case XmlNodeType.Text:\n             Console.WriteLine(&quot;{0}: {1}&quot;, reader.NodeType, reader.Value)\n           case XmlNodeType.EndElement:\n             Console.WriteLine(&quot;{0}: &lt;/{1}&gt;&quot;, reader.NodeType, reader.Name)\n           case XmlNodeType.Whitespace:\n             Console.WriteLine(&quot;{0}:&quot;, reader.NodeType)\n           case XmlNodeType.SignificantWhitespace:\n             Console.WriteLine(&quot;{0}:&quot;, reader.NodeType)\n         end select       \n      end while           \n  \n    &#39;Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_XmlLang\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_XmlLang_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLang</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string XmlLang { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current <code>xml:lang</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This property represents the <code>xml:lang</code> scope within which the current node resides. For example, here is an XML fragment with <code>xml:lang</code> set to US English in the root element:  </p>\n<p> &lt;root xml:lang=&quot;en-us&quot;&gt;  </p>\n<p> &lt;name&gt;Fred&lt;/name&gt;  </p>\n<p> &lt;/root&gt;  </p>\n<p> When the reader is positioned on the <code>name</code> element, you can use this property to find that it is in the scope of a US English <code>xml:lang</code> attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the <code>xml:lang</code> value for each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlTextReader.XmlLang#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book xml:lang=&#39;en-US&#39;&gt;   &lt;title xml:lang=&#39;en-GB&#39;&gt;Colour Analysis&lt;/title&gt;   &lt;title&gt;Color Analysis&lt;/title&gt; &lt;/book&gt;&quot;;\n   \n   // Create the XmlNamespaceManager.\n   NameTable^ nt = gcnew NameTable;\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n   reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   \n   // Parse the XML and display each of the nodes, including the xml:lang setting.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::WriteLine( &quot;{0}: &lt; {1}&gt;&quot;, reader-&gt;XmlLang, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::WriteLine( &quot;{0}: {1}&quot;, reader-&gt;XmlLang, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::WriteLine( &quot;{0}: &lt;/ {1}&gt;&quot;, reader-&gt;XmlLang, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.XmlLang#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    //Create the XML fragment to be parsed.\n    string xmlFrag  = &quot;&lt;book xml:lang=&#39;en-US&#39;&gt; &quot; +\n                           &quot;  &lt;title xml:lang=&#39;en-GB&#39;&gt;Colour Analysis&lt;/title&gt;&quot; +\n                           &quot;  &lt;title&gt;Color Analysis&lt;/title&gt;&quot; +\n                           &quot;&lt;/book&gt;&quot;; \n\n    //Create the XmlNamespaceManager.\n    NameTable nt = new NameTable();\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n    //Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    //Create the reader.\n    XmlTextReader reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n    reader.WhitespaceHandling = WhitespaceHandling.None;\n\n    //Parse the XML and display each of the nodes, including the xml:lang setting.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.WriteLine(&quot;{0}: &lt;{1}&gt;&quot;, reader.XmlLang, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.WriteLine(&quot;{0}: {1}&quot;, reader.XmlLang, reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.WriteLine(&quot;{0}: &lt;/{1}&gt;&quot;, reader.XmlLang, reader.Name);\n           break;\n       }       \n    }           \n  \n    //Close the reader.\n    reader.Close();     \n  \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.XmlLang#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;book xml:lang=&#39;en-US&#39;&gt; &quot; &amp; _\n                                    &quot;  &lt;title xml:lang=&#39;en-GB&#39;&gt;Colour Analysis&lt;/title&gt;&quot; &amp; _\n                                    &quot;  &lt;title&gt;Color Analysis&lt;/title&gt;&quot; &amp; _\n                                    &quot;&lt;/book&gt;&quot; \n\n    &#39;Create the XmlNamespaceManager.\n    Dim nt as NameTable = new NameTable()\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(nt)\n\n    &#39;Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39;Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n    reader.WhitespaceHandling = WhitespaceHandling.None\n\n    &#39;Parse the XML and display each of the nodes, including the xml:lang setting.\n    while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.WriteLine(&quot;{0}: &lt;{1}&gt;&quot;, reader.XmlLang, reader.Name)\n         case XmlNodeType.Text:\n           Console.WriteLine(&quot;{0}: {1}&quot;, reader.XmlLang, reader.Value)\n         case XmlNodeType.EndElement:\n           Console.WriteLine(&quot;{0}: &lt;/{1}&gt;&quot;, reader.XmlLang, reader.Name)\n       end select       \n    end while           \n  \n    &#39;Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_XmlResolver\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_XmlResolver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlResolver</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> used for resolving DTD references.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlResolver XmlResolver { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlResolver</code> to use. If set to <code>null</code>, external resources are not resolved.  </p>\n<p> In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an <code>XmlResolver</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The reader uses <code>XmlResolver</code> to resolve the location of the file loaded into the reader and also to resolve DTD references. For example, if your XML included the DOCTYPE declaration, <code>&lt;!DOCTYPE book SYSTEM book.dtd&gt;</code> the reader resolves this external file and ensures that the DTD is well-formed. The reader does not use the DTD for validation.  </p>\n<p> This property can be changed at any time and takes effect on the next read operation. If this property is set to <code>null</code>, any external DTD references encountered by the reader are not resolved.  </p>\n<p> In version 1.1 of the .NET Framework, if this property is not set, the trust level of the application determines the default behavior.  </p>\n<p> <code>Fully trusted code:</code> The reader uses a default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no user credentials. If authentication is required to access a network resource, use the <code>XmlResolver</code> property to specify an <code>XmlResolver</code> with the necessary credentials.  </p>\n<p> <code>Semi-trusted code:</code> The <code>XmlResolver</code> property is set to <code>null</code>. External resources are not resolved.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>XmlResolver</code> property to specify the credentials necessary to access the networked file.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlTextReader.XmlResolver#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Net;\n\npublic class Sample {\n\n  public static void Main() {\n\n    // Create the reader.\n    XmlTextReader reader = new XmlTextReader(&quot;http://myServer/data/books.xml&quot;);\n   \n    // Supply the credentials necessary to access the Web server.\n    XmlUrlResolver resolver = new XmlUrlResolver();\n    resolver.Credentials = CredentialCache.DefaultCredentials;\n    reader.XmlResolver = resolver;\n\n    // Parse the file.\n    while (reader.Read()) {\n       // Do any additional processing here.\n    }           \n  \n    // Close the reader.\n    reader.Close();     \n  \n  }\n} \n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.XmlResolver#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Net;\nint main()\n{\n   \n   // Create the reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( &quot;http://myServer/data/books.xml&quot; );\n   \n   // Supply the credentials necessary to access the Web server.\n   XmlUrlResolver^ resolver = gcnew XmlUrlResolver;\n   resolver-&gt;Credentials = CredentialCache::DefaultCredentials;\n   reader-&gt;XmlResolver = resolver;\n   \n   // Parse the file.\n   while ( reader-&gt;Read() )\n   {\n      \n      // Do any additional processing here.\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.XmlResolver#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Net\n\npublic class Sample \n\n  public shared sub Main() \n\n    &#39; Create the reader.\n    Dim reader as XmlTextReader = new XmlTextReader(&quot;http://myServer/data/books.xml&quot;)\n   \n    &#39; Supply the credentials necessary to access the Web server.\n    Dim resolver as XmlUrlResolver = new XmlUrlResolver()\n    resolver.Credentials = CredentialCache.DefaultCredentials\n    reader.XmlResolver = resolver\n\n    &#39; Parse the file.\n    while (reader.Read()) \n       &#39; Do any additional processing here.\n    end while           \n  \n    &#39; Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_XmlSpace\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_XmlSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSpace</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlSpace XmlSpace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> values. If no <code>xml:space</code> scope exists, this property defaults to <code>XmlSpace.None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a file and returns significant white space if an <code>xml:space=&#39;preserve&#39;</code> scope is found.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlTextReader.XmlSpace#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n     XmlTextReader reader = new XmlTextReader(&quot;authors.xml&quot;);\n     reader.WhitespaceHandling = WhitespaceHandling.None;\n\n     // Parse the file.  Return white space only if an\n     // xml:space=&#39;preserve&#39; attribute is found.\n     while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           if (reader.XmlSpace==XmlSpace.Preserve)\n             reader.WhitespaceHandling=WhitespaceHandling.Significant;\n           break;\n         case XmlNodeType.Text:\n           Console.Write(reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.SignificantWhitespace:\n           Console.Write(reader.Value);\n           break;         \n       }              \n     }\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.XmlSpace#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = gcnew XmlTextReader( &quot;authors.xml&quot; );\n   reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   \n   // Parse the file.  Return white space only if an\n   // xml:space=&#39;preserve&#39; attribute is found.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n            if ( reader-&gt;XmlSpace == XmlSpace::Preserve )\n                        reader-&gt;WhitespaceHandling = WhitespaceHandling::Significant;\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::SignificantWhitespace:\n            Console::Write( reader-&gt;Value );\n            break;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.XmlSpace#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n     Dim reader as XmlTextReader = new XmlTextReader(&quot;authors.xml&quot;)\n     reader.WhitespaceHandling = WhitespaceHandling.None\n\n     &#39; Parse the file.  Return white space only if an\n     &#39; xml:space=&#39;preserve&#39; attribute is found.\n     while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n           if (reader.XmlSpace=XmlSpace.Preserve)\n             reader.WhitespaceHandling=WhitespaceHandling.Significant\n           end if\n         case XmlNodeType.Text:\n           Console.Write(reader.Value)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.SignificantWhitespace:\n           Console.Write(reader.Value)        \n       end select              \n     end while\n  end sub\nend class\n</code></pre><p> The example uses the file, <code>authors.xml</code>, as input.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Close\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to <code>Closed</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method also releases any resources held while reading. If this reader was constructed using a stream, this method also calls <code>Close</code> on the underlying stream.  </p>\n<p> If <code>Close</code> has already been called, no action is performed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_GetAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlTextReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method does not move the reader.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method does not move the reader.  </p>\n<p> If the reader is positioned on a <code>DocumentType</code> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader.GetAttribute(&quot;PUBLIC&quot;)</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the ISBN attribute.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.GetAttribute1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;attrs.xml&quot; );\n      \n      //Read the ISBN attribute.\n      reader-&gt;MoveToContent();\n      String^ isbn = reader-&gt;GetAttribute( &quot;ISBN&quot; );\n      Console::WriteLine( &quot;The ISBN value: {0}&quot;, isbn );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.GetAttribute1 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {\n       //Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;attrs.xml&quot;);\n  \n       //Read the ISBN attribute.\n       reader.MoveToContent();\n       string isbn = reader.GetAttribute(&quot;ISBN&quot;);\n       Console.WriteLine(&quot;The ISBN value: &quot; + isbn);\n\n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.GetAttribute1 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39;Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;attrs.xml&quot;)\n            \n            &#39;Read the ISBN attribute.\n            reader.MoveToContent()\n            Dim isbn As String = reader.GetAttribute(&quot;ISBN&quot;)\n            Console.WriteLine(&quot;The ISBN value: &quot; &amp; isbn)\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>attrs.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.GetAttribute1 Example#2\">\n&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_GetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned. This method does not move the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The following XML contains an attribute in a specific namespace:  </p>\n<pre><code>&lt;test xmlns:dt=&quot;urn:datatypes&quot; dt:type=&quot;int&quot;/&gt;  \n</code></pre><p> You can lookup the <code>dt:type</code> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):  </p>\n<pre><code>String dt = reader.GetAttribute(&quot;dt:type&quot;);  \nString dt2 = reader.GetAttribute(&quot;type&quot;,&quot;urn:datatypes&quot;);  \n</code></pre><p> To lookup the <code>xmlns:dt</code> attribute, use one of the following arguments:  </p>\n<pre><code>String dt3 = reader.GetAttribute(&quot;xmlns:dt&quot;);  \nString dt4 = reader.GetAttribute(&quot;dt&quot;,http://www.w3.org/2000/xmlns/);  \n</code></pre><p> You can also get this information using the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_GetNamespacesInScope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNamespacesInScope(XmlNamespaceScope)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains all namespaces currently in-scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a> value that specifies the type of namespace nodes to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> The dictionary consists of a collection of namespace names keyed by prefix. It can be used to enumerate the in-scope namespaces. The dictionary is a disconnected copy of the namespace list of the reader. It remains unchanged as the reader position, current in-scope namespace list, changes.  </p>\n<p> The following table describes how the <a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a> enumeration value affects the whether or not the default and built-in namespaces are returned by GetNamespacesInScope.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNamespaceScope Value</th>\n<th>xmlns:xml</th>\n<th>xmlns:xmlns</th>\n<th>xmlns=&quot;&quot;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>All</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>ExcludeXml</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Local</code></td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_GetRemainder\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_GetRemainder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRemainder()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the remainder of the buffered XML.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.TextReader GetRemainder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> containing the remainder of the buffered XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Because <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> does a buffered <code>Read</code>, it must be able to return the remainder of the unused buffer so that no data is lost. This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.  </p>\n<p> After calling this method, <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_EOF_\" data-linktype=\"relative-path\">EOF</a> is set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the first part of an XML document and then uses <code>GetRemainder</code> to complete reading the document using a second reader.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.GetRemainder Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;tworeads.xml&quot;;\n   XmlTextReader^ reader = gcnew XmlTextReader( filename );\n   reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   \n   // Read the first part of the XML document\n   while ( reader-&gt;Read() )\n   {\n      \n      // Display the elements and stop reading on the book endelement tag\n      // then go to ReadPart2 to start another reader to read the rest of the file. \n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::WriteLine( &quot;Name: {0}&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::WriteLine( &quot;  Element Text: {0}&quot;, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            \n            // Stop reading when the reader gets to the end element of the book node.\n            if ( &quot;book&quot; == reader-&gt;LocalName )\n            {\n               Console::WriteLine( &quot;End reading first book...&quot; );\n               Console::WriteLine();\n               goto ReadPart2;\n            }\n            break;\n      }\n   }\n\n   \n   // Read the rest of the XML document\n   \nReadPart2:\n   Console::WriteLine( &quot;Begin reading second book...&quot; );\n   \n   // Create a new reader to read the rest of the document.\n   XmlTextReader^ reader2 = gcnew XmlTextReader( reader-&gt;GetRemainder() );\n   while ( reader2-&gt;Read() )\n   {\n      switch ( reader2-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::WriteLine( &quot;Name: {0}&quot;, reader2-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::WriteLine( &quot;  Element Text: {0}&quot;, reader2-&gt;Value );\n            break;\n\n         case XmlNodeType::EndElement:\n            \n            // Stop reading when the reader gets to the end element of the book node.\n            if ( &quot;book&quot; == reader2-&gt;LocalName )\n            {\n               Console::WriteLine( &quot;End reading second book...&quot; );\n               goto Done;\n            }\n            break;\n      }\n   }\n\n   \nDone:\n   Console::WriteLine( &quot;Done.&quot; );\n   reader-&gt;Close();\n   reader2-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.GetRemainder Example#1\">using System;\nusing System.Xml; \n\npublic class Sample {\n\n  private static string filename = &quot;tworeads.xml&quot;;\n   \n  public static void Main() {\n  \n    XmlTextReader reader = new XmlTextReader(filename);\n    reader.WhitespaceHandling=WhitespaceHandling.None;\n\n    // Read the first part of the XML document\n    while(reader.Read()) {\n      // Display the elements and stop reading on the book endelement tag\n      // then go to ReadPart2 to start another reader to read the rest of the file. \n      switch(reader.NodeType) {\n       case XmlNodeType.Element:\n        Console.WriteLine(&quot;Name: {0}&quot;, reader.Name);\n        break;\n       case XmlNodeType.Text:\n        Console.WriteLine(&quot;  Element Text: {0}&quot;, reader.Value);\n        break;\n       case XmlNodeType.EndElement:\n        // Stop reading when the reader gets to the end element of the book node.\n        if (&quot;book&quot;==reader.LocalName) {\n          Console.WriteLine(&quot;End reading first book...&quot;);\n          Console.WriteLine();      \n          goto ReadPart2;\n        }\n        break;\n      } \n    } \n\n    // Read the rest of the XML document\n    ReadPart2:\n    Console.WriteLine(&quot;Begin reading second book...&quot;);\n\n    // Create a new reader to read the rest of the document.\n    XmlTextReader reader2 = new XmlTextReader(reader.GetRemainder());\n\n    while(reader2.Read()) {\n      switch (reader2.NodeType) {\n        case XmlNodeType.Element:\n         Console.WriteLine(&quot;Name: {0}&quot;, reader2.Name);\n         break;\n        case XmlNodeType.Text:\n         Console.WriteLine(&quot;  Element Text: {0}&quot;, reader2.Value);\n         break;\n        case XmlNodeType.EndElement:\n         // Stop reading when the reader gets to the end element of the book node.\n         if (&quot;book&quot;==reader2.LocalName) {\n           Console.WriteLine(&quot;End reading second book...&quot;);\n           goto Done;\n         }\n         break;\n      }\n    }\n\n    Done:\n    Console.WriteLine(&quot;Done.&quot;);\n    reader.Close(); \n    reader2.Close();\n  }\n}//End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.GetRemainder Example#1\">Imports System\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;tworeads.xml&quot;\n    \n    Public Shared Sub Main()\n\n        Dim reader As New XmlTextReader(filename)\n        reader.WhitespaceHandling = WhitespaceHandling.None\n        \n        &#39; Read the first part of the XML document\n        While reader.Read()\n            &#39; Display the elements and stop reading on the book endelement tag\n            &#39; then go to ReadPart2 to start another reader to read the rest of the file. \n            Select Case reader.NodeType\n                Case XmlNodeType.Element\n                    Console.WriteLine(&quot;Name: {0}&quot;, reader.Name)\n                Case XmlNodeType.Text\n                    Console.WriteLine(&quot;  Element Text: {0}&quot;, reader.Value)\n                Case XmlNodeType.EndElement\n                    &#39; Stop reading when the reader gets to the end element of the book node.\n                    If &quot;book&quot; = reader.LocalName Then\n                        Console.WriteLine(&quot;End reading first book...&quot;)\n                        Console.WriteLine()\n                        GoTo ReadPart2\n                    End If\n            End Select\n        End While\n        \n        &#39; Read the rest of the XML document\n        ReadPart2: \n        Console.WriteLine(&quot;Begin reading second book...&quot;)\n        \n        &#39; Create a new reader to read the rest of the document.\n        Dim reader2 As New XmlTextReader(reader.GetRemainder())\n        \n        While reader2.Read()\n            Select Case reader2.NodeType\n                Case XmlNodeType.Element\n                    Console.WriteLine(&quot;Name: {0}&quot;, reader2.Name)\n                Case XmlNodeType.Text\n                    Console.WriteLine(&quot;  Element Text: {0}&quot;, reader2.Value)\n                Case XmlNodeType.EndElement\n                    &#39;Stop reading when the reader gets to the end element of the book node.\n                    If &quot;book&quot; = reader2.LocalName Then\n                        Console.WriteLine(&quot;End reading second book...&quot;)\n                        GoTo Done\n                    End If\n            End Select\n        End While\n        \n        Done: \n        Console.WriteLine(&quot;Done.&quot;)\n        reader.Close()\n        reader2.Close()\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><p> The example uses the input file <code>tworeads.xml</code>.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.GetRemainder Example#2\">&lt;?xml version=&quot;1.0&quot; ?&gt;\n&lt;bookstore&gt;\n &lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;author&gt;Jane Austen&lt;/author&gt;\n &lt;/book&gt;\n &lt;book&gt;\n  &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n  &lt;author&gt;Margaret Atwood&lt;/author&gt;\n &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_HasLineInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_HasLineInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasLineInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the class can return line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasLineInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the class can return line information; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI to which the prefix maps or <code>null</code> if no matching prefix is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextReader.Namespaces*</span> property is set to <code>true</code> and the <code>prefix</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> In the following XML, if the reader is positioned on the <code>href</code> attribute, the prefix <code>a</code> is resolved by calling <code>reader.LookupNamespace(&quot;a&quot;)</code>. The returned string is <code>urn:456</code>.  </p>\n<pre><code>&lt;root xmlns:a=&quot;urn:456&quot;&gt;  \n &lt;item&gt;  \n &lt;ref href=&quot;a:b&quot;/&gt;  \n &lt;/item&gt;  \n&lt;/root&gt;  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void MoveToAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public void DisplayAttributes(XmlReader reader)\n{\n  if (reader.HasAttributes)\n  {\n    Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n    for (int i = 0; i &lt; reader.AttributeCount; i++)\n    {\n      reader.MoveToAttribute(i);\n      Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n    }\n    reader.MoveToElement(); //Moves the reader back to the element node.\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public:\n   void DisplayAttributes( XmlReader^ reader )\n   {\n      if ( reader-&gt;HasAttributes )\n      {\n         Console::WriteLine( &quot;Attributes of &lt;{0}&gt;&quot;, reader-&gt;Name );\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::Write( &quot; {0}={1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement(); //Moves the reader back to the element node.\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">    Public Sub DisplayAttributes(reader As XmlReader)\n        If reader.HasAttributes Then\n            Console.WriteLine(&quot;Attributes of &lt;&quot; &amp; reader.Name &amp; &quot;&gt;&quot;)\n            Dim i As Integer\n            For i = 0 To reader.AttributeCount - 1\n                reader.MoveToAttribute(i)\n                Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n            Next i\n            reader.MoveToElement() &#39;Moves the reader back to the element node.\n        End If\n    End Sub &#39;DisplayAttributes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> After calling <code>MoveToAttribute</code>, the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflects the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> After calling <code>MoveToAttribute</code>, the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflects the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToElement\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToElement()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <code>false</code> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: <code>Element</code>, <code>DocumentType</code>, or <code>XmlDeclaration</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public void DisplayAttributes(XmlReader reader)\n{\n  if (reader.HasAttributes)\n  {\n    Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n    for (int i = 0; i &lt; reader.AttributeCount; i++)\n    {\n      reader.MoveToAttribute(i);\n      Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n    }\n    reader.MoveToElement(); //Moves the reader back to the element node.\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">public:\n   void DisplayAttributes( XmlReader^ reader )\n   {\n      if ( reader-&gt;HasAttributes )\n      {\n         Console::WriteLine( &quot;Attributes of &lt;{0}&gt;&quot;, reader-&gt;Name );\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::Write( &quot; {0}={1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement(); //Moves the reader back to the element node.\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.MoveToElement Example#1\">    Public Sub DisplayAttributes(reader As XmlReader)\n        If reader.HasAttributes Then\n            Console.WriteLine(&quot;Attributes of &lt;&quot; &amp; reader.Name &amp; &quot;&gt;&quot;)\n            Dim i As Integer\n            For i = 0 To reader.AttributeCount - 1\n                reader.MoveToAttribute(i)\n                Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n            Next i\n            reader.MoveToElement() &#39;Moves the reader back to the element node.\n        End If\n    End Sub &#39;DisplayAttributes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToFirstAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToFirstAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToFirstAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the first attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToFirstAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an attribute exists (the reader moves to the first attribute); otherwise, <code>false</code> (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the first attribute of the root node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.MoveToFirstAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {\n       //Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;attrs.xml&quot;);\n  \n       //Read the genre attribute.\n       reader.MoveToContent();\n       reader.MoveToFirstAttribute();\n       string genre=reader.Value;\n       Console.WriteLine(&quot;The genre value: &quot; + genre);\n\n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.MoveToFirstAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;attrs.xml&quot; );\n      \n      //Read the genre attribute.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToFirstAttribute();\n      String^ genre = reader-&gt;Value;\n      Console::WriteLine( &quot;The genre value: {0}&quot;, genre );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.MoveToFirstAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim reader As XmlTextReader = Nothing\n      \n      Try\n         &#39;Load the reader with the XML file.\n         reader = New XmlTextReader(&quot;attrs.xml&quot;)\n         \n         &#39;Read the genre attribute.\n         reader.MoveToContent()\n         reader.MoveToFirstAttribute()\n         Dim genre As String = reader.Value\n         Console.WriteLine(&quot;The genre value: &quot; &amp; genre)\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>attrs.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.MoveToFirstAttribute Example#2\">\n&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_MoveToNextAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_MoveToNextAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToNextAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the next attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToNextAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there is a next attribute; <code>false</code> if there are no more attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> If the current node is an element node, this method is equivalent to <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a>. If <code>MoveToNextAttribute</code> returns <code>true</code>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlReader.HasAttributes Example#1\">    public void DisplayAttributes(XmlReader reader)\n    {\n        if (reader.HasAttributes)\n        {\n            Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n            while (reader.MoveToNextAttribute())\n            {\n                Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlReader.HasAttributes Example#1\">    Public Sub DisplayAttributes(reader As XmlReader)\n        If reader.HasAttributes Then\n            Console.WriteLine(&quot;Attributes of &lt;&quot; &amp; reader.Name &amp; &quot;&gt;&quot;)\n            While reader.MoveToNextAttribute()\n                Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n            End While\n        End If\n    End Sub &#39;DisplayAttributes\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlReader.HasAttributes Example#1\">public:\n   void DisplayAttributes( XmlReader^ reader )\n   {\n      if ( reader-&gt;HasAttributes )\n      {\n         Console::WriteLine( &quot;Attributes of &lt;{0}&gt;&quot;, reader-&gt;Name );\n         while ( reader-&gt;MoveToNextAttribute() )\n         {\n            Console::WriteLine( &quot; {0}={1}&quot;, reader-&gt;Name, reader-&gt;Value );\n         }\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Read\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next node from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the next node was read successfully; <code>false</code> if there are no more nodes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while parsing the XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> When a reader is first created and initialized, there is no information available. You must call <code>Read</code> to read the first node.  </p>\n<p> This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method will fail. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Load the reader with the data file and ignore all white space nodes.         \n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.Name Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\n&#39;Reads an XML document\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Load the reader with the data file and ignore all white space nodes.         \n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.DocumentType\n                        Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.EntityReference\n                        Console.Write(reader.Name)\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n     XmlTextReader reader = null;\n\n     try {\n       \n        // Load the reader with the data file and ignore all white space nodes.         \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Parse the file and display each of the nodes.\n        while (reader.Read()) {\n           switch (reader.NodeType) {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The sample uses the file <code>items.xml</code>.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadAttributeValue\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAttributeValue()</div>        \r\n          </div>\r\n    \r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool ReadAttributeValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there are nodes to return.  </p>\n<p> <code>false</code> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  </p>\n<p> An empty attribute, such as, <code>misc=&quot;&quot;</code>, returns <code>true</code> with a single node with a value of <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Use this method after calling <code>MoveToAttribute</code> to read through the text or entity reference nodes that make up the attribute value. The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Depth_\" data-linktype=\"relative-path\">Depth</a> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an attribute with text and entity nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlTextReader.ReadAttributeValue#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   __try\n   {\n      \n      // Create the XML fragment to be parsed.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n      \n      // Create the XmlParserContext.\n      XmlParserContext^ context;\n      String^ subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n      context = gcnew XmlParserContext( nullptr,nullptr,&quot;book&quot;,nullptr,nullptr,subset,&quot;&quot;,&quot;&quot;,XmlSpace::None );\n      \n      // Create the reader.\n      reader = gcnew XmlTextReader( xmlFrag,XmlNodeType::Element,context );\n      \n      // Read the misc attribute. The attribute is parsed\n      // into multiple text and entity reference nodes.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToAttribute( &quot;misc&quot; );\n      while ( reader-&gt;ReadAttributeValue() )\n      {\n         if ( reader-&gt;NodeType == XmlNodeType::EntityReference )\n                  Console::WriteLine( &quot; {0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n         else\n                  Console::WriteLine( &quot; {0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      }\n   }\n   __finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.ReadAttributeValue#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim reader as XmlTextReader = nothing\n\n    try\n       &#39;Create the XML fragment to be parsed.\n       Dim xmlFrag as string =&quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;\n \n       &#39;Create the XmlParserContext.\n       Dim context as XmlParserContext \n       Dim subset as string = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;\n       context = new XmlParserContext(nothing, nothing, &quot;book&quot;, nothing, nothing, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None)\n        \n       &#39;Create the reader.\n       reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n  \n       &#39;Read the misc attribute. The attribute is parsed\n       &#39;into multiple text and entity reference nodes.\n       reader.MoveToContent()\n       reader.MoveToAttribute(&quot;misc&quot;)\n       while (reader.ReadAttributeValue())\n          if (reader.NodeType = XmlNodeType.EntityReference)\n            Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name)\n          else\n             Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value)\n          end if\n        end while\n\n     finally \n       if Not reader Is Nothing\n        reader.Close()\n      End if\n      end try\n  end sub\nend class \n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTextReader.ReadAttributeValue#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {\n       //Create the XML fragment to be parsed.\n       string xmlFrag =&quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n \n       //Create the XmlParserContext.\n       XmlParserContext context;\n       string subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n       context = new XmlParserContext(null, null, &quot;book&quot;, null, null, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None);\n        \n       //Create the reader.\n       reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n  \n       //Read the misc attribute. The attribute is parsed\n       //into multiple text and entity reference nodes.\n       reader.MoveToContent();\n       reader.MoveToAttribute(&quot;misc&quot;);\n       while (reader.ReadAttributeValue()){\n          if (reader.NodeType==XmlNodeType.EntityReference)\n            Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name);\n          else\n             Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value);\n        } \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes Base64 and returns the decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ReadBase64 (byte[] array, int offset, int len);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of characters that serves as the buffer to which the text contents are written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index into the array specifying where the method can begin to write to the buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>len</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write into the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The Base64 sequence is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> &lt; 0, or <code>len</code> &lt; 0, or <code>len</code> &gt; <code>array</code>.Length- <code>offset</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Like <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadChars_\" data-linktype=\"relative-path\">ReadChars</a>, this method can be called successively to read large streams of embedded text. It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. See RFC 1521. (You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a file containing Base64 and BinHex data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const string filename = &quot;binary.xml&quot;;\n\n  public static void Main() {\n\n     XmlTextReader reader = null;\n\n     try {\n     \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Read the file. Stop at the Base64 element.\n        while (reader.Read()) {\n           if (&quot;Base64&quot; == reader.Name) break;\n        }\n        \t\n        // Read the Base64 data. Write the decoded \n        // bytes to the console.\n        Console.WriteLine(&quot;Reading Base64... &quot;);\n        int base64len = 0;\n        byte[] base64 = new byte[1000];\n        do {\n           base64len = reader.ReadBase64(base64, 0, 50);            \n           for (int i=0; i &lt; base64len; i++) Console.Write(base64[i]);\n        } while (reader.Name == &quot;Base64&quot;);\n\t\n        // Read the BinHex data. Write the decoded \n        // bytes to the console.\n        Console.WriteLine(&quot;\\r<br>Reading BinHex...&quot;);\n        int binhexlen = 0;\n        byte[] binhex = new byte[1000];\n        do {\n           binhexlen = reader.ReadBinHex(binhex, 0, 50);            \n           for (int i=0; i &lt; binhexlen; i++) Console.Write(binhex[i]);\n        }  while (reader.Name == &quot;BinHex&quot;);\n            \n     }\n\n     finally {\n        Console.WriteLine();\n        Console.WriteLine(&quot;Processing of the file {0} complete.&quot;, filename);\n        if (reader != null)\n          reader.Close();\n     }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n   Private Const filename As String = &quot;binary.xml&quot;\n   \n   \n   Public Shared Sub Main()\n      Dim reader As XmlTextReader = Nothing\n      Dim i As Integer\n\n      Try\n         reader = New XmlTextReader(filename)\n         reader.WhitespaceHandling = WhitespaceHandling.None         \n\n         &#39; Read the file. Stop at the Base64 element.         \n         While reader.Read()\n            If &quot;Base64&quot; = reader.Name Then\n               Exit While\n            End If\n         End While \n\n         &#39; Read the Base64 data. Write the decoded \n         &#39; bytes to the console.\n         Console.WriteLine(&quot;Reading base64... &quot;)\n         Dim base64len As Integer = 0\n         Dim base64(1000) As Byte\n         Do\n            base64len = reader.ReadBase64(base64, 0, 50)\n            For i = 0 To base64len - 1\n               Console.Write(base64(i))\n            Next i\n         Loop While (reader.Name = &quot;Base64&quot;)\n\n         &#39; Read the BinHex data. Write the decoded \n         &#39; bytes to the console.\n         Console.WriteLine(ControlChars.CrLf &amp; &quot;Reading binhex....&quot;)\n         Dim binhexlen As Integer = 0\n         Dim binhex(1000) As Byte\n         binhexlen = reader.ReadBinHex(binhex, 0, 50)\n         Do\n            binhexlen = reader.ReadBinHex(binhex, 0, 50)\n            For i = 0 To binhexlen - 1\n               Console.Write(binhex(i))\n            Next i\n         Loop While (reader.Name = &quot;BinHex&quot;) \n      \n      Finally\n         Console.WriteLine()\n         Console.WriteLine(&quot;Processing of the file {0} complete.&quot;, filename)\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;binary.xml&quot;;\n   try\n   {\n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Read the file. Stop at the Base64 element.\n      while ( reader-&gt;Read() )\n      {\n         if ( &quot;Base64&quot; == reader-&gt;Name )\n                  break;\n      }\n      \n      // Read the Base64 data. Write the decoded \n      // bytes to the console.\n      Console::WriteLine( &quot;Reading Base64... &quot; );\n      int base64len = 0;\n      array&lt;Byte&gt;^base64 = gcnew array&lt;Byte&gt;(1000);\n      do\n      {\n         base64len = reader-&gt;ReadBase64( base64, 0, 50 );\n         for ( int i = 0; i &lt; base64len; i++ )\n            Console::Write( base64[ i ] );\n      }\n      while ( reader-&gt;Name-&gt;Equals( &quot;Base64&quot; ) );\n      \n      // Read the BinHex data. Write the decoded \n      // bytes to the console.\n      Console::WriteLine( &quot;\\r<br>Reading BinHex...&quot; );\n      int binhexlen = 0;\n      array&lt;Byte&gt;^binhex = gcnew array&lt;Byte&gt;(1000);\n      do\n      {\n         binhexlen = reader-&gt;ReadBinHex( binhex, 0, 50 );\n         for ( int i = 0; i &lt; binhexlen; i++ )\n            Console::Write( binhex[ i ] );\n      }\n      while ( reader-&gt;Name-&gt;Equals( &quot;BinHex&quot; ) );\n   }\n   finally\n   {\n      Console::WriteLine();\n      Console::WriteLine( &quot;Processing of the file {0} complete.&quot;, filename );\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><p> The sample uses the file <code>binary.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#2\">\n&lt;data&gt;\n&lt;!-- sample data for base64 and binhex --&gt;\n&lt;Base64&gt;AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS\n4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFi\nY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlp\neYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrL\nzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w\n==&lt;/Base64&gt;\n&lt;BinHex&gt;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E\n1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041\n42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364\n65666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F8081828384858687\n88898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AA\nABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCD\nCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0\nF1F2F3F4F5F6F7F8F9FAFBFCFDFEFF&lt;/BinHex&gt;\n&lt;/data&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes <code>BinHex</code> and returns the decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ReadBinHex (byte[] array, int offset, int len);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array that serves as the buffer to which the decoded binary bytes are written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index into the array specifying where the method can begin to write to the buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>len</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write into the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to your buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The <code>BinHex</code> sequence is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> &lt; 0, or <code>len</code> &lt; 0, or <code>len</code> &gt; <code>array</code>.Length- <code>offset</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> Like <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadChars_\" data-linktype=\"relative-path\">ReadChars</a>, this method can be called successively to read large streams of embedded text. It decodes <code>BinHex</code> content and returns the decoded binary bytes (for example, an inline <code>BinHex</code> encoded GIF image) into the buffer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a file containing <code>Base64</code> and <code>BinHex</code> data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  private const string filename = &quot;binary.xml&quot;;\n\n  public static void Main() {\n\n     XmlTextReader reader = null;\n\n     try {\n     \n        reader = new XmlTextReader(filename);\n        reader.WhitespaceHandling = WhitespaceHandling.None;\n\n        // Read the file. Stop at the Base64 element.\n        while (reader.Read()) {\n           if (&quot;Base64&quot; == reader.Name) break;\n        }\n        \t\n        // Read the Base64 data. Write the decoded \n        // bytes to the console.\n        Console.WriteLine(&quot;Reading Base64... &quot;);\n        int base64len = 0;\n        byte[] base64 = new byte[1000];\n        do {\n           base64len = reader.ReadBase64(base64, 0, 50);            \n           for (int i=0; i &lt; base64len; i++) Console.Write(base64[i]);\n        } while (reader.Name == &quot;Base64&quot;);\n\t\n        // Read the BinHex data. Write the decoded \n        // bytes to the console.\n        Console.WriteLine(&quot;\\r<br>Reading BinHex...&quot;);\n        int binhexlen = 0;\n        byte[] binhex = new byte[1000];\n        do {\n           binhexlen = reader.ReadBinHex(binhex, 0, 50);            \n           for (int i=0; i &lt; binhexlen; i++) Console.Write(binhex[i]);\n        }  while (reader.Name == &quot;BinHex&quot;);\n            \n     }\n\n     finally {\n        Console.WriteLine();\n        Console.WriteLine(&quot;Processing of the file {0} complete.&quot;, filename);\n        if (reader != null)\n          reader.Close();\n     }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n   Private Const filename As String = &quot;binary.xml&quot;\n   \n   \n   Public Shared Sub Main()\n      Dim reader As XmlTextReader = Nothing\n      Dim i As Integer\n\n      Try\n         reader = New XmlTextReader(filename)\n         reader.WhitespaceHandling = WhitespaceHandling.None         \n\n         &#39; Read the file. Stop at the Base64 element.         \n         While reader.Read()\n            If &quot;Base64&quot; = reader.Name Then\n               Exit While\n            End If\n         End While \n\n         &#39; Read the Base64 data. Write the decoded \n         &#39; bytes to the console.\n         Console.WriteLine(&quot;Reading base64... &quot;)\n         Dim base64len As Integer = 0\n         Dim base64(1000) As Byte\n         Do\n            base64len = reader.ReadBase64(base64, 0, 50)\n            For i = 0 To base64len - 1\n               Console.Write(base64(i))\n            Next i\n         Loop While (reader.Name = &quot;Base64&quot;)\n\n         &#39; Read the BinHex data. Write the decoded \n         &#39; bytes to the console.\n         Console.WriteLine(ControlChars.CrLf &amp; &quot;Reading binhex....&quot;)\n         Dim binhexlen As Integer = 0\n         Dim binhex(1000) As Byte\n         binhexlen = reader.ReadBinHex(binhex, 0, 50)\n         Do\n            binhexlen = reader.ReadBinHex(binhex, 0, 50)\n            For i = 0 To binhexlen - 1\n               Console.Write(binhex(i))\n            Next i\n         Loop While (reader.Name = &quot;BinHex&quot;) \n      \n      Finally\n         Console.WriteLine()\n         Console.WriteLine(&quot;Processing of the file {0} complete.&quot;, filename)\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;binary.xml&quot;;\n   try\n   {\n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Read the file. Stop at the Base64 element.\n      while ( reader-&gt;Read() )\n      {\n         if ( &quot;Base64&quot; == reader-&gt;Name )\n                  break;\n      }\n      \n      // Read the Base64 data. Write the decoded \n      // bytes to the console.\n      Console::WriteLine( &quot;Reading Base64... &quot; );\n      int base64len = 0;\n      array&lt;Byte&gt;^base64 = gcnew array&lt;Byte&gt;(1000);\n      do\n      {\n         base64len = reader-&gt;ReadBase64( base64, 0, 50 );\n         for ( int i = 0; i &lt; base64len; i++ )\n            Console::Write( base64[ i ] );\n      }\n      while ( reader-&gt;Name-&gt;Equals( &quot;Base64&quot; ) );\n      \n      // Read the BinHex data. Write the decoded \n      // bytes to the console.\n      Console::WriteLine( &quot;\\r<br>Reading BinHex...&quot; );\n      int binhexlen = 0;\n      array&lt;Byte&gt;^binhex = gcnew array&lt;Byte&gt;(1000);\n      do\n      {\n         binhexlen = reader-&gt;ReadBinHex( binhex, 0, 50 );\n         for ( int i = 0; i &lt; binhexlen; i++ )\n            Console::Write( binhex[ i ] );\n      }\n      while ( reader-&gt;Name-&gt;Equals( &quot;BinHex&quot; ) );\n   }\n   finally\n   {\n      Console::WriteLine();\n      Console::WriteLine( &quot;Processing of the file {0} complete.&quot;, filename );\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><p> The sample uses the file <code>binary.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.ReadBase64 Example#2\">\n&lt;data&gt;\n&lt;!-- sample data for base64 and binhex --&gt;\n&lt;Base64&gt;AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS\n4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFi\nY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlp\neYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrL\nzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w\n==&lt;/Base64&gt;\n&lt;BinHex&gt;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E\n1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041\n42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364\n65666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F8081828384858687\n88898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AA\nABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCD\nCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0\nF1F2F3F4F5F6F7F8F9FAFBFCFDFEFF&lt;/BinHex&gt;\n&lt;/data&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadChars_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadChars(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ReadChars (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of characters that serves as the buffer to which the text contents are written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position within <code>buffer</code> where the method can begin writing text contents.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write into <code>buffer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters read. This can be <code>0</code> if the reader is not positioned on an element or if there is no more text content to return in the current context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is greater than the space specified in the <code>buffer</code> (buffer size - <code>index</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code>\n    <code>&lt; 0</code> or <code>count</code><code>&lt; 0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This is the most efficient way to process very large streams of text embedded in an XML document. Rather than allocating large string objects, <code>ReadChars</code> returns text content a buffer at a time. This method is designed to work only on element nodes. Other node types cause <code>ReadChars</code> to return <code>0</code>.  </p>\n<p> In the following XML, if the reader is positioned on the start tag, <code>ReadChars</code> returns <code>test</code> and positions the reader after the end tag.  </p>\n<pre><code>&lt;Item&gt;test&lt;/Item&gt;  \n</code></pre><p> <code>ReadChars</code> has the following functionality:  </p>\n<ul>\n<li><p>This method is designed to work on element nodes only. Other node types cause <code>ReadChars</code> to return 0.  </p>\n</li>\n<li><p>This method returns the actual character content. There is no attempt to resolve entities, CDATA, or any other markup encountered. <code>ReadChars</code> returns everything between the start tag and the end tag, including markup.  </p>\n</li>\n<li><p><code>ReadChars</code> ignores XML markup that is not well-formed. For example, when reading the following XML string <code>&lt;A&gt;1&lt;A&gt;2&lt;/A&gt;</code>, <code>ReadChars</code> returns <code>1&lt;A&gt;2&lt;/A&gt;</code>. (It returns markup from the matching element pair and ignores others.)  </p>\n</li>\n<li><p>This method does not do any normalization.  </p>\n</li>\n<li><p>When <code>ReadChars</code> has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.  </p>\n</li>\n<li><p>Attribute read methods are not available while using <code>ReadChars</code>.  </p>\n<p>For example, using the following XML:  </p>\n</li>\n</ul>\n<pre><code>&lt;thing&gt;  \n some text  \n&lt;/thing&gt;  \n&lt;item&gt;  \n&lt;/item&gt;  \n</code></pre><p> The reader is positioned on the <code>&lt;item&gt;</code> element at the end of the while loop.  </p>\n<pre><code>if (XmlNodeType.Element == reader.NodeType &amp;&amp; &quot;thing&quot; == reader.Name)  \n{  \n while(0 != reader.ReadChars(buffer, 0, 1)  \n {  \n // Do something.  \n // Attribute values are not available at this point.  \n }  \n}  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads in XML using <code>ReadChars</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextReader.ReadChars Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\n\n// Reads an XML document using ReadChars\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      // Declare variables used by ReadChars\n      array&lt;Char&gt;^buffer;\n      int iCnt = 0;\n      int charbuffersize;\n      \n      // Load the reader with the data file.  Ignore white space.\n      reader = gcnew XmlTextReader( filename );\n      reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      // Set variables used by ReadChars.\n      charbuffersize = 10;\n      buffer = gcnew array&lt;Char&gt;(charbuffersize);\n      \n      // Parse the file.  Read the element content\n      // using the ReadChars method.\n      reader-&gt;MoveToContent();\n      while ( (iCnt = reader-&gt;ReadChars( buffer, 0, charbuffersize )) &gt; 0 )\n      {\n         \n         // Print out chars read and the buffer contents.\n         Console::WriteLine( &quot;  Chars read to buffer:{0}&quot;, iCnt );\n         Console::WriteLine( &quot;  Buffer: [{0}]&quot;, gcnew String( buffer,0,iCnt ) );\n         \n         // Clear the buffer.\n         Array::Clear( buffer, 0, charbuffersize );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextReader.ReadChars Example#1\">using System;\nusing System.Xml;\n\n// Reads an XML document using ReadChars\n\npublic class Sample {\n\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main() {\n  \n    XmlTextReader reader = null;\n\n    try {\n          \n      // Declare variables used by ReadChars\n      Char []buffer;\n      int iCnt = 0;\n      int charbuffersize;\n     \n      // Load the reader with the data file.  Ignore white space.\n      reader = new XmlTextReader(filename);\n      reader.WhitespaceHandling = WhitespaceHandling.None;\n\n      // Set variables used by ReadChars.\n      charbuffersize = 10;\n      buffer = new Char[charbuffersize];\n\n      // Parse the file.  Read the element content\n      // using the ReadChars method.\n      reader.MoveToContent();\n      while ( (iCnt = reader.ReadChars(buffer,0,charbuffersize)) &gt; 0 ) {\n        // Print out chars read and the buffer contents.\n        Console.WriteLine (&quot;  Chars read to buffer:&quot; + iCnt);\n        Console.WriteLine (&quot;  Buffer: [{0}]&quot;, new String(buffer,0,iCnt));\n        // Clear the buffer.\n        Array.Clear(buffer,0,charbuffersize);\n      }\n       \n    }\n    finally {\n      if (reader!=null)\n        reader.Close();\n    }\n  }\n\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextReader.ReadChars Example#1\">Imports System\nImports System.Xml\n\n&#39; Reads an XML document using ReadChars\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39; Declare variables used by ReadChars\n            Dim buffer() As Char\n            Dim iCnt As Integer = 0\n            Dim charbuffersize As Integer\n            \n            &#39; Load the reader with the data file.  Ignore white space.\n            reader = New XmlTextReader(filename)\n            reader.WhitespaceHandling = WhitespaceHandling.None\n            \n            &#39; Set variables used by ReadChars.\n            charbuffersize = 10\n            buffer = New Char(charbuffersize) {}\n            \n            &#39; Parse the file.  Read the element content  \n            &#39; using the ReadChars method.\n            reader.MoveToContent()\n            iCnt = reader.ReadChars(buffer,0,charbuffersize)\n            while (iCnt &gt; 0)\n              &#39; Print out chars read and the buffer contents.\n              Console.WriteLine(&quot;  Chars read to buffer:&quot; &amp; iCnt)\n              Console.WriteLine(&quot;  Buffer: [{0}]&quot;, New String(buffer, 0, iCnt))\n              &#39; Clear the buffer.\n              Array.Clear(buffer, 0, charbuffersize)\n              iCnt = reader.ReadChars(buffer,0,charbuffersize)\n           end while\n\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub \nEnd Class \n</code></pre><p> The example uses the <code>items.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlTextReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with an char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the <code>Base64</code> decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBase64 is not supported in the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method streams the content, decodes the <code>Base64</code> content, and returns the decoded binary bytes (for example, an inline <code>Base64</code>-encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBase64 returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBase64 is not supported on the following XML node types: <code>Element</code>, <code>XmlDeclaration</code>, <code>None</code>, <code>Document</code>, <code>DocumentType</code>, <code>Notation</code>, <code>Entity</code>, <code>DocumentFragment</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBinHex is not supported on the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method streams the content, decodes the <code>BinHex</code> content, and returns the decoded binary bytes (for example, an inline <code>BinHex</code> encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBinHex returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBinHex is not supported on the following XML node types: <code>Element</code>, <code>XmlDeclaration</code>, <code>None</code>, <code>Document</code>, <code>DocumentType</code>, <code>Notation</code>, <code>Entity</code>, <code>DocumentFragment</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadElementContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a> method except that it can only be called on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a> to see an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadElementContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method reads the element content, decodes it using <code>BinHex</code> encoding, and returns the decoded binary bytes (for example, an inline <code>BinHex</code> encoded GIF image) into the buffer.  </p>\n<p> This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a> method except that it can only be called on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> to see an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ReadString\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ReadString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the contents of an element or a text node as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ReadString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  </p>\n<p> <code>Note:</code> The text node can be either an element or an attribute text node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while parsing the XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An invalid operation was attempted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> If positioned on an element, <code>ReadString</code> concatenates all text, significant white space, white space, and <code>CData</code> section node types together and returns the concatenated data as the element content. It stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.  </p>\n<p> If positioned on a text node, <code>ReadString</code> performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, <code>ReadString</code> has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader reader = null;\n\n    try\n    {\n       //Load the reader with the XML file.\n       reader = new XmlTextReader(&quot;elems.xml&quot;);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                 Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ reader = nullptr;\n   try\n   {\n      \n      //Load the reader with the XML file.\n      reader = gcnew XmlTextReader( &quot;elems.xml&quot; );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlReader.IsStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n        \n        Try\n            &#39;Load the reader with the XML file.\n            reader = New XmlTextReader(&quot;elems.xml&quot;)\n            \n            &#39;Parse the XML and display the text content of each of the elements.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.IsEmptyElement Then\n                        Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n                    Else\n                        Console.Write(&quot;&lt;{0}&gt;&quot; + &quot; &quot;, reader.Name)\n                        reader.Read() &#39;Read the start tag.\n                        If (reader.IsStartElement())  &#39;Handle nested elements.\n                          Console.WriteLine()\n                          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                        End If\n                        Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n                    End If\n                End If\n            End While\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlReader.IsStartElement Example#2\">\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ResetState\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ResetState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetState()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the state of the reader to ReadState.Initial.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetState ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <code>ResetState</code> if the reader was constructed using an <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Documents in a single stream do not share the same encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> This method enables you to parse multiple XML documents in a single stream. When you reach the end of an XML document, you can call <code>ResetState</code> to reset the state of the reader in preparation for the next XML document.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The documents in the stream must share the same encoding. If this is not the case, when <code>ResetState</code> is called an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> is thrown. (This is a change in behavior from .NET Framework version 1.1 and earlier).  </p>\n</div>\n<p> The following properties are not affected by <code>ResetState</code>.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Normalization_\" data-linktype=\"relative-path\">Normalization</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Namespaces_\" data-linktype=\"relative-path\">Namespaces</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_WhitespaceHandling_\" data-linktype=\"relative-path\">WhitespaceHandling</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses two XML documents in a single stream.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlTextReader.ResetState#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main(){\n\n     Encoding enc = new UTF8Encoding();\n     byte[] utf8Buffer = enc.GetBytes(&quot;&lt;root&gt; 12345 &lt;/root&gt;&quot;); \n\n     enc = new UnicodeEncoding();\n     byte[] unicodeBuffer = enc.GetBytes(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&lt;unicode&gt; root &lt;/unicode&gt;&quot;);\n\n     MemoryStream memStrm = new MemoryStream();\n     memStrm.Write(unicodeBuffer, 0, unicodeBuffer.Length);\n     memStrm.Write(utf8Buffer, 0, utf8Buffer.Length);\n     memStrm.Position = 0;\n\n     XmlTextReader reader = new XmlTextReader(memStrm);\n\n     while(reader.Read()) {\n        Console.WriteLine(&quot;NodeType: {0}&quot;, reader.NodeType);\n        if (XmlNodeType.EndElement == reader.NodeType &amp;&amp; &quot;root&quot; == reader.Name) {\n          break;\n        }\n\n        if (XmlNodeType.EndElement == reader.NodeType) {\n          reader.ResetState();\n       }\n    } \n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextReader.ResetState#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n     Dim enc as Encoding = new UTF8Encoding()\n     Dim utf8Buffer as byte() = enc.GetBytes(&quot;&lt;root&gt; 12345 &lt;/root&gt;&quot;) \n\n     enc = new UnicodeEncoding()\n     Dim unicodeBuffer as byte() = enc.GetBytes(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&lt;unicode&gt; root &lt;/unicode&gt;&quot;)\n\n     Dim memSreaderm as MemoryStream = new MemoryStream()\n     memSreaderm.Write(unicodeBuffer, 0, unicodeBuffer.Length)\n     memSreaderm.Write(utf8Buffer, 0, utf8Buffer.Length)\n     memSreaderm.Position = 0\n\n     Dim reader as XmlTextReader = new XmlTextReader(memSreaderm)\n\n     while(reader.Read()) \n        Console.WriteLine(&quot;NodeType: {0}&quot;, reader.NodeType)\n        if (XmlNodeType.EndElement = reader.NodeType And &quot;root&quot; = reader.Name) \n         exit while\n        end if\n        \n        if (XmlNodeType.EndElement = reader.NodeType) \n          reader.ResetState()\n       end if\n    end while\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextReader.ResetState#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nint main()\n{\n   Encoding^ enc = gcnew UTF8Encoding;\n   array&lt;Byte&gt;^utf8Buffer = enc-&gt;GetBytes( &quot;&lt;root&gt; 12345 &lt;/root&gt;&quot; );\n   enc = gcnew UnicodeEncoding;\n   array&lt;Byte&gt;^unicodeBuffer = enc-&gt;GetBytes( &quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&lt;unicode&gt; root &lt;/unicode&gt;&quot; );\n   MemoryStream^ memStrm = gcnew MemoryStream;\n   memStrm-&gt;Write( unicodeBuffer, 0, unicodeBuffer-&gt;Length );\n   memStrm-&gt;Write( utf8Buffer, 0, utf8Buffer-&gt;Length );\n   memStrm-&gt;Position = 0;\n   XmlTextReader^ reader = gcnew XmlTextReader( memStrm );\n   while ( reader-&gt;Read() )\n   {\n      Console::WriteLine( &quot;NodeType: {0}&quot;, reader-&gt;NodeType );\n      if ( XmlNodeType::EndElement == reader-&gt;NodeType &amp;&amp; &quot;root&quot; == reader-&gt;Name )\n            break;\n      if ( XmlNodeType::EndElement == reader-&gt;NodeType )\n            reader-&gt;ResetState();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_ResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_ResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveEntity()</div>        \r\n          </div>\r\n    \r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void ResolveEntity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> If the reader is positioned on an <code>EntityReference</code> node (<code>XmlNodeType.EntityReference</code>), if <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an <code>EndEntity</code> node is returned to close the entity reference scope.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After calling this method, if the entity is part of an attribute value, you must call <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> to step into the entity.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_Skip\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_Skip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Skip()</div>        \r\n          </div>\r\n    \r\n            <p>Skips the children of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Skip ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to take advantage of new functionality.  </p>\n</div>\n<p> In the following XML input if the reader is positioned on the <code>&lt;a&gt;</code> node or any of its attributes, calling <code>Skip</code> positions the reader to the <code>&lt;b&gt;</code> node.  </p>\n<p> If the reader is positioned on a leaf node already (such as the <code>&lt;x&gt;</code> node or the text node <code>abc</code>), calling <code>Skip</code> is the same as calling <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Read_\" data-linktype=\"relative-path\">Read</a>.  </p>\n<pre><code>&lt;a name=&quot;bob&quot; age=&quot;123&quot;&gt;  \n  &lt;x/&gt;abc&lt;y/&gt;  \n&lt;/a&gt;  \n&lt;b&gt;  \n ...  \n&lt;/b&gt;  \n</code></pre><p> This method checks for well-formed XML.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a> value that specifies the type of namespace nodes to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> that contains the current in-scope namespaces.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix whose namespace URI you wish to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI that is mapped to the prefix; <code>null</code> if the prefix is not mapped to a namespace URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupPrefix(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupPrefix (string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI whose prefix you wish to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The prefix that is mapped to the namespace URI; <code>null</code> if the namespace URI is not mapped to a prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlTextReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlTextReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.AttributeCount\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.BaseURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.CanReadBinaryContent\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.CanReadValueChunk\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.CanResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Depth\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.DtdProcessing\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Encoding\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.EntityHandling\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.EOF\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.GetNamespacesInScope\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.GetRemainder\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.HasLineInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.HasValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.IsDefault\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.IsEmptyElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.LineNumber\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.LinePosition\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.MoveToAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.MoveToElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.MoveToFirstAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.MoveToNextAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Namespaces\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.NamespaceURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.NameTable\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Normalization\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ProhibitDtd\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.QuoteChar\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Read\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadChars\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadElementContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadElementContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ReadString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ResetState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.ResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Skip\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.IXmlNamespaceResolver.GetNamespacesInScope\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.IXmlNamespaceResolver.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.IXmlNamespaceResolver.LookupPrefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.Value\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.WhitespaceHandling\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.XmlLang\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.XmlResolver\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextReader.XmlSpace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bf1f919c-ba03-bd00-9e0b-959b19d90ba8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a reader that provides fast, non-cached, forward-only access to XML data.  \n Starting with the .NET Framework 2.0, we recommend that you use the  class instead.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlTextReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlTextReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlTextReader.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlTextReader","System.Xml.XmlTextReader..ctor","System.Xml.XmlTextReader.AttributeCount","System.Xml.XmlTextReader.BaseURI","System.Xml.XmlTextReader.CanReadBinaryContent","System.Xml.XmlTextReader.CanReadValueChunk","System.Xml.XmlTextReader.CanResolveEntity","System.Xml.XmlTextReader.Close","System.Xml.XmlTextReader.Depth","System.Xml.XmlTextReader.DtdProcessing","System.Xml.XmlTextReader.Encoding","System.Xml.XmlTextReader.EntityHandling","System.Xml.XmlTextReader.EOF","System.Xml.XmlTextReader.GetAttribute","System.Xml.XmlTextReader.GetNamespacesInScope","System.Xml.XmlTextReader.GetRemainder","System.Xml.XmlTextReader.HasLineInfo","System.Xml.XmlTextReader.HasValue","System.Xml.XmlTextReader.IsDefault","System.Xml.XmlTextReader.IsEmptyElement","System.Xml.XmlTextReader.LineNumber","System.Xml.XmlTextReader.LinePosition","System.Xml.XmlTextReader.LocalName","System.Xml.XmlTextReader.LookupNamespace","System.Xml.XmlTextReader.MoveToAttribute","System.Xml.XmlTextReader.MoveToElement","System.Xml.XmlTextReader.MoveToFirstAttribute","System.Xml.XmlTextReader.MoveToNextAttribute","System.Xml.XmlTextReader.Name","System.Xml.XmlTextReader.Namespaces","System.Xml.XmlTextReader.NamespaceURI","System.Xml.XmlTextReader.NameTable","System.Xml.XmlTextReader.NodeType","System.Xml.XmlTextReader.Normalization","System.Xml.XmlTextReader.Prefix","System.Xml.XmlTextReader.ProhibitDtd","System.Xml.XmlTextReader.QuoteChar","System.Xml.XmlTextReader.Read","System.Xml.XmlTextReader.ReadAttributeValue","System.Xml.XmlTextReader.ReadBase64","System.Xml.XmlTextReader.ReadBinHex","System.Xml.XmlTextReader.ReadChars","System.Xml.XmlTextReader.ReadContentAsBase64","System.Xml.XmlTextReader.ReadContentAsBinHex","System.Xml.XmlTextReader.ReadElementContentAsBase64","System.Xml.XmlTextReader.ReadElementContentAsBinHex","System.Xml.XmlTextReader.ReadState","System.Xml.XmlTextReader.ReadString","System.Xml.XmlTextReader.ResetState","System.Xml.XmlTextReader.ResolveEntity","System.Xml.XmlTextReader.Skip","System.Xml.XmlTextReader.IXmlNamespaceResolver.GetNamespacesInScope","System.Xml.XmlTextReader.IXmlNamespaceResolver.LookupNamespace","System.Xml.XmlTextReader.IXmlNamespaceResolver.LookupPrefix","System.Xml.XmlTextReader.Value","System.Xml.XmlTextReader.WhitespaceHandling","System.Xml.XmlTextReader.XmlLang","System.Xml.XmlTextReader.XmlResolver","System.Xml.XmlTextReader.XmlSpace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlTextReader","System::Xml::XmlTextReader","System.Xml.XmlTextReader.#ctor","System::Xml::XmlTextReader::#ctor","System.Xml.XmlTextReader.AttributeCount","System::Xml::XmlTextReader::AttributeCount","System.Xml.XmlTextReader.BaseURI","System::Xml::XmlTextReader::BaseURI","System.Xml.XmlTextReader.CanReadBinaryContent","System::Xml::XmlTextReader::CanReadBinaryContent","System.Xml.XmlTextReader.CanReadValueChunk","System::Xml::XmlTextReader::CanReadValueChunk","System.Xml.XmlTextReader.CanResolveEntity","System::Xml::XmlTextReader::CanResolveEntity","System.Xml.XmlTextReader.Close","System::Xml::XmlTextReader::Close","System.Xml.XmlTextReader.Depth","System::Xml::XmlTextReader::Depth","System.Xml.XmlTextReader.DtdProcessing","System::Xml::XmlTextReader::DtdProcessing","System.Xml.XmlTextReader.Encoding","System::Xml::XmlTextReader::Encoding","System.Xml.XmlTextReader.EntityHandling","System::Xml::XmlTextReader::EntityHandling","System.Xml.XmlTextReader.EOF","System::Xml::XmlTextReader::EOF","System.Xml.XmlTextReader.GetAttribute","System::Xml::XmlTextReader::GetAttribute","System.Xml.XmlTextReader.GetNamespacesInScope","System::Xml::XmlTextReader::GetNamespacesInScope","System.Xml.XmlTextReader.GetRemainder","System::Xml::XmlTextReader::GetRemainder","System.Xml.XmlTextReader.HasLineInfo","System::Xml::XmlTextReader::HasLineInfo","System.Xml.XmlTextReader.HasValue","System::Xml::XmlTextReader::HasValue","System.Xml.XmlTextReader.IsDefault","System::Xml::XmlTextReader::IsDefault","System.Xml.XmlTextReader.IsEmptyElement","System::Xml::XmlTextReader::IsEmptyElement","System.Xml.XmlTextReader.LineNumber","System::Xml::XmlTextReader::LineNumber","System.Xml.XmlTextReader.LinePosition","System::Xml::XmlTextReader::LinePosition","System.Xml.XmlTextReader.LocalName","System::Xml::XmlTextReader::LocalName","System.Xml.XmlTextReader.LookupNamespace","System::Xml::XmlTextReader::LookupNamespace","System.Xml.XmlTextReader.MoveToAttribute","System::Xml::XmlTextReader::MoveToAttribute","System.Xml.XmlTextReader.MoveToElement","System::Xml::XmlTextReader::MoveToElement","System.Xml.XmlTextReader.MoveToFirstAttribute","System::Xml::XmlTextReader::MoveToFirstAttribute","System.Xml.XmlTextReader.MoveToNextAttribute","System::Xml::XmlTextReader::MoveToNextAttribute","System.Xml.XmlTextReader.Name","System::Xml::XmlTextReader::Name","System.Xml.XmlTextReader.Namespaces","System::Xml::XmlTextReader::Namespaces","System.Xml.XmlTextReader.NamespaceURI","System::Xml::XmlTextReader::NamespaceURI","System.Xml.XmlTextReader.NameTable","System::Xml::XmlTextReader::NameTable","System.Xml.XmlTextReader.NodeType","System::Xml::XmlTextReader::NodeType","System.Xml.XmlTextReader.Normalization","System::Xml::XmlTextReader::Normalization","System.Xml.XmlTextReader.Prefix","System::Xml::XmlTextReader::Prefix","System.Xml.XmlTextReader.ProhibitDtd","System::Xml::XmlTextReader::ProhibitDtd","System.Xml.XmlTextReader.QuoteChar","System::Xml::XmlTextReader::QuoteChar","System.Xml.XmlTextReader.Read","System::Xml::XmlTextReader::Read","System.Xml.XmlTextReader.ReadAttributeValue","System::Xml::XmlTextReader::ReadAttributeValue","System.Xml.XmlTextReader.ReadBase64","System::Xml::XmlTextReader::ReadBase64","System.Xml.XmlTextReader.ReadBinHex","System::Xml::XmlTextReader::ReadBinHex","System.Xml.XmlTextReader.ReadChars","System::Xml::XmlTextReader::ReadChars","System.Xml.XmlTextReader.ReadContentAsBase64","System::Xml::XmlTextReader::ReadContentAsBase64","System.Xml.XmlTextReader.ReadContentAsBinHex","System::Xml::XmlTextReader::ReadContentAsBinHex","System.Xml.XmlTextReader.ReadElementContentAsBase64","System::Xml::XmlTextReader::ReadElementContentAsBase64","System.Xml.XmlTextReader.ReadElementContentAsBinHex","System::Xml::XmlTextReader::ReadElementContentAsBinHex","System.Xml.XmlTextReader.ReadState","System::Xml::XmlTextReader::ReadState","System.Xml.XmlTextReader.ReadString","System::Xml::XmlTextReader::ReadString","System.Xml.XmlTextReader.ResetState","System::Xml::XmlTextReader::ResetState","System.Xml.XmlTextReader.ResolveEntity","System::Xml::XmlTextReader::ResolveEntity","System.Xml.XmlTextReader.Skip","System::Xml::XmlTextReader::Skip","System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System::Xml::XmlTextReader::System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace","System::Xml::XmlTextReader::System#Xml#IXmlNamespaceResolver#LookupNamespace","System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix","System::Xml::XmlTextReader::System#Xml#IXmlNamespaceResolver#LookupPrefix","System.Xml.XmlTextReader.Value","System::Xml::XmlTextReader::Value","System.Xml.XmlTextReader.WhitespaceHandling","System::Xml::XmlTextReader::WhitespaceHandling","System.Xml.XmlTextReader.XmlLang","System::Xml::XmlTextReader::XmlLang","System.Xml.XmlTextReader.XmlResolver","System::Xml::XmlTextReader::XmlResolver","System.Xml.XmlTextReader.XmlSpace","System::Xml::XmlTextReader::XmlSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bf1f919c-ba03-bd00-9e0b-959b19d90ba8","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlTextReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlTextReader class | Microsoft Docs","_op_ogTitle":"XmlTextReader class","description":"Represents a reader that provides fast, non-cached, forward-only access to XML data.  \n Starting with the .NET Framework 2.0, we recommend that you use the  class instead.\n","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlTextReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmltextreader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmltextreader","fileRelativePath":"System.Xml.XmlTextReader.html"},"themesRelativePathToOutputRoot":"_themes/"}