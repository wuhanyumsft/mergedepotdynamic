{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_ECDiffieHellmanCng\">\r\n      <span class=\"lang-csharp\">ECDiffieHellmanCng</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">System.Security.Cryptography.ECDiffieHellman</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ECDiffieHellmanCng</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySize\" data-linktype=\"relative-path\">KeySize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_\" data-linktype=\"relative-path\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___\" data-linktype=\"relative-path\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_KeyExchangeAlgorithm\" data-linktype=\"relative-path\">KeyExchangeAlgorithm</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_SignatureAlgorithm\" data-linktype=\"relative-path\">SignatureAlgorithm</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the <em>secret agreement</em> in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value. This post processing is referred to as the <em>key derivation function (KDF)</em>; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.  </p>\n<table>\n<thead>\n<tr>\n<th>Key derivation function</th>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a></td>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a> - The hash algorithm that is used to process the secret agreement.<br><br> <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_SecretPrepend_\" data-linktype=\"relative-path\">SecretPrepend</a> - An optional byte array to prepend to the secret agreement before hashing it.<br><br> <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_SecretAppend_\" data-linktype=\"relative-path\">SecretAppend</a> - An optional byte array to append to the secret agreement before hashing it.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a></td>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a> - The hash algorithm that is used to process the secret agreement.<br><br> <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_SecretPrepend_\" data-linktype=\"relative-path\">SecretPrepend</a>- An optional byte array to prepend to the secret agreement before hashing it.<br><br> <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_SecretAppend_\" data-linktype=\"relative-path\">SecretAppend</a> - An optional byte array to append to the secret agreement before hashing it.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a></td>\n<td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_Label_\" data-linktype=\"relative-path\">Label</a> - The label for key derivation.<br><br> <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_Seed_\" data-linktype=\"relative-path\">Seed</a> - The seed for key derivation.</td>\n</tr>\n</tbody>\n</table>\n<p> The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:  </p>\n<ol>\n<li><p>Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation  </p>\n</li>\n<li><p>Alice and Bob configure the KDF using parameters the agree on.  </p>\n</li>\n<li><p>Alice sends Bob her public key.  </p>\n</li>\n<li><p>Bob sends Alice his public key.  </p>\n</li>\n<li><p>Alice and Bob use each other&#39;s public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng__ctor\" data-linktype=\"self-bookmark\">ECDiffieHellmanCng()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class with a random key pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng__ctor_System_Int32_\" data-linktype=\"self-bookmark\">ECDiffieHellmanCng(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class with a random key pair, using the specified key size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng__ctor_System_Security_Cryptography_CngKey_\" data-linktype=\"self-bookmark\">ECDiffieHellmanCng(CngKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class by using the specified <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_HashAlgorithm\" data-linktype=\"self-bookmark\">HashAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the hash algorithm to use when generating key material.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_HmacKey\" data-linktype=\"self-bookmark\">HmacKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_Key\" data-linktype=\"self-bookmark\">Key</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> that is used by the current object for cryptographic operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction\" data-linktype=\"self-bookmark\">KeyDerivationFunction</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key derivation function for the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_Label\" data-linktype=\"self-bookmark\">Label</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the label value that is used for key derivation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_PublicKey\" data-linktype=\"self-bookmark\">PublicKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the public key that can be used by another <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> object to generate a shared secret agreement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_SecretAppend\" data-linktype=\"self-bookmark\">SecretAppend</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that will be appended to the secret agreement when generating key material.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_SecretPrepend\" data-linktype=\"self-bookmark\">SecretPrepend</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_Seed\" data-linktype=\"self-bookmark\">Seed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the seed value that will be used when deriving key material.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_UseSecretAgreementAsHmacKey\" data-linktype=\"self-bookmark\">UseSecretAgreementAsHmacKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key using a hash function, given another party&#39;s public key, hash algorithm&#39;s name, a prepend value and an append value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_System_Security_Cryptography_CngKey_\" data-linktype=\"self-bookmark\">DeriveKeyMaterial(CngKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives the key material that is generated from the secret agreement between two parties, given a <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object that contains the second party&#39;s public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_System_Security_Cryptography_ECDiffieHellmanPublicKey_\" data-linktype=\"self-bookmark\">DeriveKeyMaterial(ECDiffieHellmanPublicKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives the key material that is generated from the secret agreement between two parties, given an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> object that contains the second party&#39;s public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyTls_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_System_Security_Cryptography_CngKey_\" data-linktype=\"self-bookmark\">DeriveSecretAgreementHandle(CngKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a handle to the secret agreement generated between two parties, given a <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object that contains the second party&#39;s public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_System_Security_Cryptography_ECDiffieHellmanPublicKey_\" data-linktype=\"self-bookmark\">DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a handle to the secret agreement generated between two parties, given an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> object that contains the second party&#39;s public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_System_String_\" data-linktype=\"self-bookmark\">FromXmlString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method is not implemented.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_System_String_System_Security_Cryptography_ECKeyXmlFormat_\" data-linktype=\"self-bookmark\">FromXmlString(String,ECKeyXmlFormat)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deserializes the key information from an XML string by using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_System_Boolean_\" data-linktype=\"self-bookmark\">ToXmlString(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method is not implemented.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_System_Security_Cryptography_ECKeyXmlFormat_\" data-linktype=\"self-bookmark\">ToXmlString(ECKeyXmlFormat)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serializes the key information to an XML string by using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ECDiffieHellmanCng()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class with a random key pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ECDiffieHellmanCng ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The random key pair has a default public key length of 521 bits.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ECDiffieHellmanCng(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class with a random key pair, using the specified key size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ECDiffieHellmanCng (int keySize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the key. Valid key sizes are 256, 384, and 521 bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>keySize</code> specifies an invalid length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The random key pair will have the public key length defined by the <code>keySize</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor_System_Security_Cryptography_CngKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ECDiffieHellmanCng(CngKey)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class by using the specified <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key that will be used as input to the cryptographic operations performed by the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_HashAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_HashAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the hash algorithm to use when generating key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cngalgorithm\" data-linktype=\"relative-path\">CngAlgorithm</a></div>\r\n                  </div>\r\n                  <p>An object that specifies the hash algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value is <code>null.</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is used by Cryptography Next Generation (CNG) objects only if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> or <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> value is set in the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property.  </p>\n<p> This property accepts the following algorithms: <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_MD5_\" data-linktype=\"relative-path\">MD5</a>, <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_Sha1_\" data-linktype=\"relative-path\">Sha1</a>, <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_Sha256_\" data-linktype=\"relative-path\">Sha256</a>, <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_Sha384_\" data-linktype=\"relative-path\">Sha384</a>, and <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_Sha512_\" data-linktype=\"relative-path\">Sha512</a>.  </p>\n<p> Other custom hash algorithms may also be used.  </p>\n<p> The default algorithm is <a class=\"xref\" href=\"system.security.cryptography.cngalgorithm#System_Security_Cryptography_CngAlgorithm_Sha256_\" data-linktype=\"relative-path\">Sha256</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_HmacKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_HmacKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HmacKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] HmacKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property applies only when the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> value is set in the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property, and the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_UseSecretAgreementAsHmacKey_\" data-linktype=\"relative-path\">UseSecretAgreementAsHmacKey</a> property is <code>false</code>. By default, the value is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_Key\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_Key_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Key</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> that is used by the current object for cryptographic operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.CngKey Key { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a></div>\r\n                  </div>\r\n                  <p>The key pair used by this object to perform cryptographic operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyDerivationFunction</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key derivation function for the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> enumeration values: <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>, <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>, or <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>. The default value is <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The enumeration value is out of range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property specifies the key derivation function that is used to transform the secret agreement into key material.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_Label\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the label value that is used for key derivation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Label { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The label value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value is used for key derivation if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> value is set in the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property. By default, it is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_PublicKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_PublicKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PublicKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the public key that can be used by another <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> object to generate a shared secret agreement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </div>\r\n                  <p>The public key that is associated with this instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_SecretAppend\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_SecretAppend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecretAppend</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that will be appended to the secret agreement when generating key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SecretAppend { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The value that is appended to the secret agreement.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value is used for key derivation if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> or <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> key derivation function (KDF) is used. The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material. By default, the value is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_SecretPrepend\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_SecretPrepend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecretPrepend</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SecretPrepend { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The value that is appended to the beginning of the secret agreement during key derivation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value is used for key derivation if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property is set to one of the following values:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>  \n</li>\n<li><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>  \n\n<p>The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material. By default, the value is <code>null</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_Seed\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_Seed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seed</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the seed value that will be used when deriving key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Seed { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The seed value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value is used for key derivation if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property is set to <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>. By default, the value is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_UseSecretAgreementAsHmacKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_UseSecretAgreementAsHmacKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseSecretAgreementAsHmacKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseSecretAgreementAsHmacKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the secret agreement is used as an HMAC key to derive key material; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <ul>\n<li>This value is used for key derivation if the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_KeyDerivationFunction_\" data-linktype=\"relative-path\">KeyDerivationFunction</a> property is set to <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a>. By default, the value is <code>false</code>.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key using a hash function, given another party&#39;s public key, hash algorithm&#39;s name, a prepend value and an append value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm  to use to derive the key material.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretPrepend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to prepend to the derived secret before hashing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to append to the derived secret before hashing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  </p>\n<p> -or-  </p>\n<p> <code>hashAlgorithm</code>.<span class=\"xref\">stem.Security.Cryptography.HashAlgorithmName.Name*</span> is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>All other errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of <code>secretPrepend</code> or <code>secretAppend</code> is <code>null</code>, they are treated as empty arrays.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyFromHmac_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to derive the key material.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hmacKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key for the HMAC.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretPrepend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to prepend to the derived secret before hashing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to append to the derived secret before hashing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  </p>\n<p> -or-  </p>\n<p> <code>hashAlgorithm</code>.<span class=\"xref\">stem.Security.Cryptography.HashAlgorithmName.Name*</span> is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>All other errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of <code>secretPrepend</code> or <code>secretAppend</code> is <code>null</code>, they are treated as empty arrays. If the value of <code>hmacKey</code> is <code>null</code>, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_System_Security_Cryptography_CngKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyMaterial(CngKey)</div>        \r\n          </div>\r\n    \r\n            <p>Derives the key material that is generated from the secret agreement between two parties, given a <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object that contains the second party&#39;s public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object&#39;s private key and the specified public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is invalid. Either its <span class=\"xref\">stem.Security.Cryptography.CngKey.AlgorithmGroup*</span> property does not specify <span class=\"xref\">stem.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*</span> or its key size does not match the key size of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This object&#39;s <span class=\"xref\">stem.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*</span> property specifies the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmankeyderivationfunction\" data-linktype=\"relative-path\">ECDiffieHellmanKeyDerivationFunction</a> key derivation function, but either <span class=\"xref\">stem.Security.Cryptography.ECDiffieHellmanCng.Label*</span> or <span class=\"xref\">stem.Security.Cryptography.ECDiffieHellmanCng.Seed*</span> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>All other errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_System_Security_Cryptography_ECDiffieHellmanPublicKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyMaterial_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyMaterial(ECDiffieHellmanPublicKey)</div>        \r\n          </div>\r\n    \r\n            <p>Derives the key material that is generated from the secret agreement between two parties, given an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> object that contains the second party&#39;s public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The public key from the other party in the key exchange.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object&#39;s private key and the specified public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancngpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanCngPublicKey</a> key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyTls_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveKeyTls_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prfLabel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ASCII-encoded PRF label.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prfSeed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-byte PRF seed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>prfLabel</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>prfSeed</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p><code>prfSeed</code> is not exactly 64 bytes in length.  </p>\n<p> -or-  </p>\n<p> All other cryptographic errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_System_Security_Cryptography_CngKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveSecretAgreementHandle(CngKey)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a handle to the secret agreement generated between two parties, given a <a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a> object that contains the second party&#39;s public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cngkey\" data-linktype=\"relative-path\">CngKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safencryptsecrethandle\" data-linktype=\"relative-path\">SafeNCryptSecretHandle</a></div>\r\n                  </div>\r\n                  <p>A handle to the secret agreement. This information is calculated from the current object&#39;s private key and the specified public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>All other errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_System_Security_Cryptography_ECDiffieHellmanPublicKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_DeriveSecretAgreementHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a handle to the secret agreement generated between two parties, given an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> object that contains the second party&#39;s public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The public key from the other party in the key exchange.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safencryptsecrethandle\" data-linktype=\"relative-path\">SafeNCryptSecretHandle</a></div>\r\n                  </div>\r\n                  <p>A handle to the secret agreement. This information is calculated from the current object&#39;s private key and the specified public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>otherPartyPublicKey</code> is not an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXmlString(String)</div>        \r\n          </div>\r\n    \r\n            <p>This method is not implemented.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void FromXmlString (string xmlString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML-based key information to be deserialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method was not overridden for this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To deserialize an XML key, use the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_System_String_System_Security_Cryptography_ECKeyXmlFormat_\" data-linktype=\"relative-path\">FromXmlString(String,ECKeyXmlFormat)</a> overload instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_System_String_System_Security_Cryptography_ECKeyXmlFormat_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_FromXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXmlString(String,ECKeyXmlFormat)</div>        \r\n          </div>\r\n    \r\n            <p>Deserializes the key information from an XML string by using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xml</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML-based key information to be deserialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>xml</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>xml</code> is malformed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> specifies an invalid format. The only accepted value is <a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>All other errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXmlString(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>This method is not implemented.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToXmlString (bool includePrivateParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includePrivateParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include private parameters; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Not applicable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method was not overridden for this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To convert the current key to an XML representation, use the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng#System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_System_Security_Cryptography_ECKeyXmlFormat_\" data-linktype=\"relative-path\">ToXmlString(ECKeyXmlFormat)</a> overload instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_System_Security_Cryptography_ECKeyXmlFormat_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellmanCng_ToXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXmlString(ECKeyXmlFormat)</div>        \r\n          </div>\r\n    \r\n            <p>Serializes the key information to an XML string by using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string object that contains the key information, serialized to an XML string, according to the requested format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> specifies an invalid format. The only accepted value is <a class=\"xref\" href=\"system.security.cryptography.eckeyxmlformat\" data-linktype=\"relative-path\">ECKeyXmlFormat</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.Security.Cryptography.ECDiffieHellmanCng.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.ECDiffieHellmanCng.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.Key\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.Label\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.Seed\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-02-28 06:06 AM\">\r\n<meta name=\"document_id\" content=\"4145d720-f4d3-281d-01c4-44b5cc0657fe\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.ECDiffieHellmanCng\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.Security.Cryptography.ECDiffieHellmanCng.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.ECDiffieHellmanCng.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.ECDiffieHellmanCng","System.Security.Cryptography.ECDiffieHellmanCng..ctor","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls","System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle","System.Security.Cryptography.ECDiffieHellmanCng.Dispose","System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString","System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm","System.Security.Cryptography.ECDiffieHellmanCng.HmacKey","System.Security.Cryptography.ECDiffieHellmanCng.Key","System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction","System.Security.Cryptography.ECDiffieHellmanCng.Label","System.Security.Cryptography.ECDiffieHellmanCng.PublicKey","System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend","System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend","System.Security.Cryptography.ECDiffieHellmanCng.Seed","System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString","System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.ECDiffieHellmanCng","System::Security::Cryptography::ECDiffieHellmanCng","System.Security.Cryptography.ECDiffieHellmanCng.#ctor","System::Security::Cryptography::ECDiffieHellmanCng::#ctor","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash","System::Security::Cryptography::ECDiffieHellmanCng::DeriveKeyFromHash","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac","System::Security::Cryptography::ECDiffieHellmanCng::DeriveKeyFromHmac","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial","System::Security::Cryptography::ECDiffieHellmanCng::DeriveKeyMaterial","System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls","System::Security::Cryptography::ECDiffieHellmanCng::DeriveKeyTls","System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle","System::Security::Cryptography::ECDiffieHellmanCng::DeriveSecretAgreementHandle","System.Security.Cryptography.ECDiffieHellmanCng.Dispose","System::Security::Cryptography::ECDiffieHellmanCng::Dispose","System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString","System::Security::Cryptography::ECDiffieHellmanCng::FromXmlString","System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm","System::Security::Cryptography::ECDiffieHellmanCng::HashAlgorithm","System.Security.Cryptography.ECDiffieHellmanCng.HmacKey","System::Security::Cryptography::ECDiffieHellmanCng::HmacKey","System.Security.Cryptography.ECDiffieHellmanCng.Key","System::Security::Cryptography::ECDiffieHellmanCng::Key","System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction","System::Security::Cryptography::ECDiffieHellmanCng::KeyDerivationFunction","System.Security.Cryptography.ECDiffieHellmanCng.Label","System::Security::Cryptography::ECDiffieHellmanCng::Label","System.Security.Cryptography.ECDiffieHellmanCng.PublicKey","System::Security::Cryptography::ECDiffieHellmanCng::PublicKey","System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend","System::Security::Cryptography::ECDiffieHellmanCng::SecretAppend","System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend","System::Security::Cryptography::ECDiffieHellmanCng::SecretPrepend","System.Security.Cryptography.ECDiffieHellmanCng.Seed","System::Security::Cryptography::ECDiffieHellmanCng::Seed","System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString","System::Security::Cryptography::ECDiffieHellmanCng::ToXmlString","System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey","System::Security::Cryptography::ECDiffieHellmanCng::UseSecretAgreementAsHmacKey"],"dev_langs":["csharp"],"updated_at":"2017-02-28 06:06 AM","document_id":"4145d720-f4d3-281d-01c4-44b5cc0657fe","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ECDiffieHellmanCng class | Microsoft Docs","_op_ogTitle":"ECDiffieHellmanCng class","description":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.ECDiffieHellmanCng","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.ecdiffiehellmancng","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.ecdiffiehellmancng","fileRelativePath":"System.Security.Cryptography.ECDiffieHellmanCng.html"},"themesRelativePathToOutputRoot":"_themes/"}