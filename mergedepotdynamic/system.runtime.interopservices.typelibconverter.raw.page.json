{"content":"    \r\n    <h1 id=\"System_Runtime_InteropServices_TypeLibConverter\">\r\n      <span class=\"lang-csharp\">TypeLibConverter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of services that convert a managed assembly to a COM type library and vice versa.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComVisible(true)]\n[System.Runtime.InteropServices.Guid(&quot;F1C3BF79-C3E4-11d3-88E7-00902754C43A&quot;)]\npublic sealed class TypeLibConverter : System.Runtime.InteropServices.ITypeLibConverter</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TypeLibConverter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_TypeLibConverter__ctor\" data-linktype=\"self-bookmark\">TypeLibConverter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.typelibconverter\" data-linktype=\"relative-path\">TypeLibConverter</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_TypeLibConverter_ConvertAssemblyToTypeLib_System_Reflection_Assembly_System_String_System_Runtime_InteropServices_TypeLibExporterFlags_System_Runtime_InteropServices_ITypeLibExporterNotifySink_\" data-linktype=\"self-bookmark\">ConvertAssemblyToTypeLib(Assembly,String,TypeLibExporterFlags,ITypeLibExporterNotifySink)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an assembly to a COM type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_System_Object_System_String_System_Int32_System_Runtime_InteropServices_ITypeLibImporterNotifySink_System_Byte___System_Reflection_StrongNameKeyPair_System_Boolean_\" data-linktype=\"self-bookmark\">ConvertTypeLibToAssembly(Object,String,Int32,ITypeLibImporterNotifySink,Byte[],StrongNameKeyPair,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a COM type library to an assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_System_Object_System_String_System_Runtime_InteropServices_TypeLibImporterFlags_System_Runtime_InteropServices_ITypeLibImporterNotifySink_System_Byte___System_Reflection_StrongNameKeyPair_System_String_System_Version_\" data-linktype=\"self-bookmark\">ConvertTypeLibToAssembly(Object,String,TypeLibImporterFlags,ITypeLibImporterNotifySink,Byte[],StrongNameKeyPair,String,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a COM type library to an assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_TypeLibConverter_GetPrimaryInteropAssembly_System_Guid_System_Int32_System_Int32_System_Int32_System_String__System_String__\" data-linktype=\"self-bookmark\">GetPrimaryInteropAssembly(Guid,Int32,Int32,Int32,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name and code base of a primary interop assembly for a specified type library.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_TypeLibConverter__ctor\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_TypeLibConverter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeLibConverter()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.typelibconverter\" data-linktype=\"relative-path\">TypeLibConverter</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeLibConverter ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertAssemblyToTypeLib_System_Reflection_Assembly_System_String_System_Runtime_InteropServices_TypeLibExporterFlags_System_Runtime_InteropServices_ITypeLibExporterNotifySink_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertAssemblyToTypeLib_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertAssemblyToTypeLib(Assembly,String,TypeLibExporterFlags,ITypeLibExporterNotifySink)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an assembly to a COM type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object ConvertAssemblyToTypeLib (System.Reflection.Assembly assembly, string strTypeLibName, System.Runtime.InteropServices.TypeLibExporterFlags flags, System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strTypeLibName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name of the resulting type library.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.typelibexporterflags\" data-linktype=\"relative-path\">TypeLibExporterFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.interopservices.typelibexporterflags\" data-linktype=\"relative-path\">TypeLibExporterFlags</a> value indicating any special settings.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>notifySink</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.itypelibexporternotifysink\" data-linktype=\"relative-path\">ITypeLibExporterNotifySink</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.interopservices.itypelibexporternotifysink\" data-linktype=\"relative-path\">ITypeLibExporterNotifySink</a> interface implemented by the caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that implements the <code>ITypeLib</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on <code>ITypeLib</code>, please see its existing documentation in the MSDN library.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\n[ComImport,\nGuidAttribute(&quot;00020406-0000-0000-C000-000000000046&quot;),\nInterfaceTypeAttribute(ComInterfaceType::InterfaceIsIUnknown),\nComVisible(false)]\ninterface class UCOMICreateITypeLib\n{\n   void CreateTypeInfo();\n   void SetName();\n   void SetVersion();\n   void SetGuid();\n   void SetDocString();\n   void SetHelpFileName();\n   void SetHelpContext();\n   void SetLcid();\n   void SetLibFlags();\n   void SaveAllChanges();\n};\n\npublic ref class ConversionEventHandler: public ITypeLibExporterNotifySink\n{\npublic:\n   virtual void ReportEvent( ExporterEventKind eventKind, int eventCode, String^ eventMsg )\n   {\n      // Handle the warning event here.\n   }\n\n   virtual Object^ ResolveRef( Assembly^ a )\n   {\n      // Resolve the reference here and return a correct type library.\n      return nullptr;\n   }\n};\n\nint main()\n{\n   Assembly^ a = Assembly::LoadFrom( &quot;MyAssembly.dll&quot; );\n   TypeLibConverter^ converter = gcnew TypeLibConverter;\n   ConversionEventHandler^ eventHandler = gcnew ConversionEventHandler;\n   UCOMICreateITypeLib^ typeLib = dynamic_cast&lt;UCOMICreateITypeLib^&gt;(converter-&gt;ConvertAssemblyToTypeLib( a, &quot;MyTypeLib.dll&quot;, static_cast&lt;TypeLibExporterFlags&gt;(0), eventHandler ));\n   typeLib-&gt;SaveAllChanges();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\n&lt;ComImport(), GuidAttribute(&quot;00020406-0000-0000-C000-000000000046&quot;), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown), ComVisible(False)&gt; _\nPublic Interface UCOMICreateITypeLib\n    Sub CreateTypeInfo()\n    Sub SetName()\n    Sub SetVersion()\n    Sub SetGuid()\n    Sub SetDocString()\n    Sub SetHelpFileName()\n    Sub SetHelpContext()\n    Sub SetLcid()\n    Sub SetLibFlags()\n    Sub SaveAllChanges()\nEnd Interface &#39;UCOMICreateITypeLib\n\nPublic Class App\n\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = [Assembly].LoadFrom(&quot;MyAssembly.dll&quot;)\n        Dim converter As New TypeLibConverter()\n        Dim eventHandler As New ConversionEventHandler()\n\n        Dim typeLib As UCOMICreateITypeLib = CType(converter.ConvertAssemblyToTypeLib(asm, &quot;MyTypeLib.dll&quot;, 0, eventHandler), UCOMICreateITypeLib)\n        typeLib.SaveAllChanges()\n    End Sub &#39;Main\nEnd Class &#39;App\n\nPublic Class ConversionEventHandler\n    Implements ITypeLibExporterNotifySink\n\n    Public Sub ReportEvent(ByVal eventKind As ExporterEventKind, ByVal eventCode As Integer, ByVal eventMsg As String) Implements ITypeLibExporterNotifySink.ReportEvent\n        &#39; Handle the warning event here.\n    End Sub &#39;ReportEvent\n\n    Public Function ResolveRef(ByVal asm As [Assembly]) As [Object] Implements ITypeLibExporterNotifySink.ResolveRef\n        &#39; Resolve the reference here and return a correct type library.\n        Return Nothing\n    End Function &#39;ResolveRef\n\nEnd Class &#39;ConversionEventHandler\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\n[ComImport,\nGuidAttribute( &quot;00020406-0000-0000-C000-000000000046&quot; ),\nInterfaceTypeAttribute( ComInterfaceType.InterfaceIsIUnknown ),\nComVisible( false )]\npublic interface UCOMICreateITypeLib\n{\n    void CreateTypeInfo();\n    void SetName();\n    void SetVersion();\n    void SetGuid();\n    void SetDocString();\n    void SetHelpFileName();\n    void SetHelpContext();\n    void SetLcid();\n    void SetLibFlags();\n    void SaveAllChanges();\n}\n\npublic class App\n{\n    public static void Main()\n    {\n        Assembly asm = Assembly.LoadFrom( &quot;MyAssembly.dll&quot; );\n        TypeLibConverter converter = new TypeLibConverter();\n        ConversionEventHandler eventHandler = new ConversionEventHandler();\n\t\t\n        UCOMICreateITypeLib typeLib = (UCOMICreateITypeLib)converter.ConvertAssemblyToTypeLib( asm, &quot;MyTypeLib.dll&quot;, 0, eventHandler );\t\n        typeLib.SaveAllChanges();\n    }\n}\n\npublic class ConversionEventHandler : ITypeLibExporterNotifySink\n{\n    public void ReportEvent( ExporterEventKind eventKind, int eventCode, string eventMsg )\n    {\n        // Handle the warning event here.\n    }\n\t\n    public Object ResolveRef( Assembly asm )\n    {\n        // Resolve the reference here and return a correct type library.\n        return null; \n    }\t\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_System_Object_System_String_System_Int32_System_Runtime_InteropServices_ITypeLibImporterNotifySink_System_Byte___System_Reflection_StrongNameKeyPair_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertTypeLibToAssembly(Object,String,Int32,ITypeLibImporterNotifySink,Byte[],StrongNameKeyPair,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a COM type library to an assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, int flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeLib</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that implements the <code>ITypeLib</code> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name of the resulting assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">TypeLibImporterFlags</a> value indicating any special settings.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>notifySink</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.itypelibimporternotifysink\" data-linktype=\"relative-path\">ITypeLibImporterNotifySink</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.runtime.interopservices.itypelibimporternotifysink\" data-linktype=\"relative-path\">ITypeLibImporterNotifySink</a> interface implemented by the caller.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <code>byte</code> array containing the public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyPair</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.strongnamekeypair\" data-linktype=\"relative-path\">StrongNameKeyPair</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.strongnamekeypair\" data-linktype=\"relative-path\">StrongNameKeyPair</a> object containing the public and private cryptographic key pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>unsafeInterfaces</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the interfaces require link time checks for <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> permission. If <code>false</code>, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> object containing the converted type library.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeLib</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>asmFileName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>notifySink</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asmFileName</code> is an empty string.  </p>\n<p> -or-  </p>\n<p> <code>asmFileName</code> is longer than MAX_PATH.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>flags</code> is not <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">TypeLibImporterFlags</a>.  </p>\n<p> -or-  </p>\n<p> <code>publicKey</code> and <code>keyPair</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The metadata produced has errors preventing any types from loading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not want to generate a strong name for your assembly, it is valid for <code>publicKey</code> and <code>keyPair</code> to be <code>null</code>, as long as <code>flags</code> does not equal <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">System.Runtime.InteropServices.TypeLibImporterFlags</a>. Otherwise, at least one of these parameters must be specified. If <code>publicKey</code> is <code>null</code>, the public key in <code>keyPair</code> will be set in the target assembly&#39;s manifest metadata and a signature will be generated based on the contents of the assembly. If <code>keyPair</code> is <code>null</code>, <code>publicKey</code> will be set in the target assembly&#39;s manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  </p>\n<p> For more information on <code>ITypeLib</code>, please see its existing documentation in the MSDN library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_System_Object_System_String_System_Runtime_InteropServices_TypeLibImporterFlags_System_Runtime_InteropServices_ITypeLibImporterNotifySink_System_Byte___System_Reflection_StrongNameKeyPair_System_String_System_Version_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_TypeLibConverter_ConvertTypeLibToAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertTypeLibToAssembly(Object,String,TypeLibImporterFlags,ITypeLibImporterNotifySink,Byte[],StrongNameKeyPair,String,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a COM type library to an assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, System.Runtime.InteropServices.TypeLibImporterFlags flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeLib</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that implements the <code>ITypeLib</code> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name of the resulting assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">TypeLibImporterFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">TypeLibImporterFlags</a> value indicating any special settings.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>notifySink</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.itypelibimporternotifysink\" data-linktype=\"relative-path\">ITypeLibImporterNotifySink</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.runtime.interopservices.itypelibimporternotifysink\" data-linktype=\"relative-path\">ITypeLibImporterNotifySink</a> interface implemented by the caller.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <code>byte</code> array containing the public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyPair</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.strongnamekeypair\" data-linktype=\"relative-path\">StrongNameKeyPair</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.strongnamekeypair\" data-linktype=\"relative-path\">StrongNameKeyPair</a> object containing the public and private cryptographic key pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmNamespace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace for the resulting assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmVersion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The version of the resulting assembly. If <code>null</code>, the version of the type library is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> object containing the converted type library.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeLib</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>asmFileName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>notifySink</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asmFileName</code> is an empty string.  </p>\n<p> -or-  </p>\n<p> <code>asmFileName</code> is longer than MAX_PATH.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>flags</code> is not <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">TypeLibImporterFlags</a>.  </p>\n<p> -or-  </p>\n<p> <code>publicKey</code> and <code>keyPair</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The metadata produced has errors preventing any types from loading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not want to generate a strong name for your assembly, it is valid for <code>publicKey</code> and <code>keyPair</code> to be <code>null</code>, as long as <code>flags</code> does not equal <a class=\"xref\" href=\"system.runtime.interopservices.typelibimporterflags\" data-linktype=\"relative-path\">System.Runtime.InteropServices.TypeLibImporterFlags</a>. Otherwise, atleast one of these parameters must be specified. If <code>publicKey</code> is <code>null</code>, the public key in <code>keyPair</code> will be set in the target assembly&#39;s manifest metadata and a signature will be generated based on the contents of the assembly. If <code>keyPair</code> is <code>null</code>, <code>publicKey</code> will be set in the target assembly&#39;s manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  </p>\n<p> For more information on <code>ITypeLib</code>, please see its existing documentation in the MSDN library.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"System.Runtime.InteropServices.ConvertTypelibToASSembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\nenum class RegKind\n{\n   RegKind_Default, RegKind_Register, RegKind_None\n};\n\nref class ConversionEventHandler: public ITypeLibImporterNotifySink\n{\npublic:\n   virtual void ReportEvent( ImporterEventKind eventKind, int eventCode, String^ eventMsg )\n   {\n      \n      // handle warning event here...\n   }\n\n   virtual Assembly^ ResolveRef( Object^ typeLib )\n   {\n      \n      // resolve reference here and return a correct assembly...\n      return nullptr;\n   }\n\n};\n\n\n[DllImport(&quot;oleaut32.dll&quot;,CharSet=CharSet::Unicode,PreserveSig=false)]\nextern void LoadTypeLibEx( String^ strTypeLibName, RegKind regkind,\n         [MarshalAs(UnmanagedType::Interface)] interior_ptr&lt;Object^&gt; typeLib );\n\nint main()\n{\n   Object^ typeLib = gcnew Object;\n   LoadTypeLibEx( &quot;SHDocVw.dll&quot;, RegKind::RegKind_None,  &amp;typeLib );\n   if ( typeLib == nullptr )\n   {\n      Console::WriteLine( &quot;LoadTypeLibEx failed.&quot; );\n      return 0;\n   }\n\n   TypeLibConverter^ converter = gcnew TypeLibConverter;\n   ConversionEventHandler^ eventHandler = gcnew ConversionEventHandler;\n   AssemblyBuilder^ asmb = converter-&gt;ConvertTypeLibToAssembly( typeLib, &quot;ExplorerLib.dll&quot;, (System::Runtime::InteropServices::TypeLibImporterFlags)0, eventHandler, nullptr, nullptr, nullptr, nullptr );\n   asmb-&gt;Save( &quot;ExplorerLib.dll&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.ConvertTypelibToASSembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\n\npublic class App\n{\n\tprivate enum RegKind\n\t{\n\t\tRegKind_Default = 0,\n\t\tRegKind_Register = 1,\n\t\tRegKind_None = 2\n\t}\n\t\n\t[ DllImport( &quot;oleaut32.dll&quot;, CharSet = CharSet.Unicode, PreserveSig = false )]\n\tprivate static extern void LoadTypeLibEx( String strTypeLibName, RegKind regKind, \n\t\t[ MarshalAs( UnmanagedType.Interface )] out Object typeLib );\n\t\n\tpublic static void Main()\n\t{\n\t\tObject typeLib;\n\t\tLoadTypeLibEx( &quot;SHDocVw.dll&quot;, RegKind.RegKind_None, out typeLib ); \n\t\t\n\t\tif( typeLib == null )\n\t\t{\n\t\t\tConsole.WriteLine( &quot;LoadTypeLibEx failed.&quot; );\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tTypeLibConverter converter = new TypeLibConverter();\n\t\tConversionEventHandler eventHandler = new ConversionEventHandler();\n\t\tAssemblyBuilder asm = converter.ConvertTypeLibToAssembly( typeLib, &quot;ExplorerLib.dll&quot;, 0, eventHandler, null, null, null, null );\t\n\t\tasm.Save( &quot;ExplorerLib.dll&quot; );\n\t}\n}\n\npublic class ConversionEventHandler : ITypeLibImporterNotifySink\n{\n\tpublic void ReportEvent( ImporterEventKind eventKind, int eventCode, string eventMsg )\n\t{\n\t\t// handle warning event here...\n\t}\n\t\n\tpublic Assembly ResolveRef( object typeLib )\n\t{\n\t\t// resolve reference here and return a correct assembly...\n\t\treturn null; \n\t}\t\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Runtime.InteropServices.ConvertTypelibToASSembly#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nPublic Class App\n    Private Enum RegKind\n        RegKind_Default = 0\n        RegKind_Register = 1\n        RegKind_None = 2\n    End Enum &#39;RegKind\n\n    &lt;DllImport(&quot;oleaut32.dll&quot;, CharSet:=CharSet.Unicode, PreserveSig:=False)&gt; _\n    Private Shared Sub LoadTypeLibEx(ByVal strTypeLibName As [String], ByVal regKind As RegKind, &lt;MarshalAs(UnmanagedType.Interface)&gt; ByRef typeLib As [Object])\n    End Sub\n\n    Public Shared Sub Main()\n        Dim typeLib As [Object]\n        LoadTypeLibEx(&quot;SHDocVw.dll&quot;, RegKind.RegKind_None, typeLib)\n\n        If typeLib Is Nothing Then\n            Console.WriteLine(&quot;LoadTypeLibEx failed.&quot;)\n            Return\n        End If\n\n        Dim converter As New TypeLibConverter()\n        Dim eventHandler As New ConversionEventHandler()\n        Dim asm As AssemblyBuilder = converter.ConvertTypeLibToAssembly(typeLib, &quot;ExplorerLib.dll&quot;, 0, eventHandler, Nothing, Nothing, Nothing, Nothing)\n        asm.Save(&quot;ExplorerLib.dll&quot;)\n    End Sub &#39;Main\nEnd Class &#39;App\n _\n\nPublic Class ConversionEventHandler\n    Implements ITypeLibImporterNotifySink\n\n    Public Sub ReportEvent(ByVal eventKind As ImporterEventKind, ByVal eventCode As Integer, ByVal eventMsg As String) Implements ITypeLibImporterNotifySink.ReportEvent\n        &#39; handle warning event here...\n    End Sub &#39;ReportEvent\n\n    Public Function ResolveRef(ByVal typeLib As Object) As [Assembly] Implements ITypeLibImporterNotifySink.ResolveRef\n        &#39; resolve reference here and return a correct assembly...\n        Return Nothing\n    End Function &#39;ResolveRef\nEnd Class &#39;ConversionEventHandler\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_TypeLibConverter_GetPrimaryInteropAssembly_System_Guid_System_Int32_System_Int32_System_Int32_System_String__System_String__\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_TypeLibConverter_GetPrimaryInteropAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPrimaryInteropAssembly(Guid,Int32,Int32,Int32,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name and code base of a primary interop assembly for a specified type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetPrimaryInteropAssembly (Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>g</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The GUID of the type library.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>major</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The major version number of the type library.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minor version number of the type library.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The LCID of the type library.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>On successful return, the name of the primary interop assembly associated with <code>g</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asmCodeBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>On successful return, the code base of the primary interop assembly associated with <code>g</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the primary interop assembly was found in the registry; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.TypeLibConverter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.TypeLibConverter.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.TypeLibConverter\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.TypeLibConverter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bd324b5e-84c4-1240-efeb-d8f3b20932f6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.InteropServices\\TypeLibConverter.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of services that convert a managed assembly to a COM type library and vice versa.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.InteropServices/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.InteropServices.TypeLibConverter\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.TypeLibConverter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.TypeLibConverter.yml","open_to_public_contributors":true,"api_name":["System.Runtime.InteropServices.TypeLibConverter","System.Runtime.InteropServices.TypeLibConverter..ctor","System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib","System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly","System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.InteropServices.TypeLibConverter","System::Runtime::InteropServices::TypeLibConverter","System.Runtime.InteropServices.TypeLibConverter.#ctor","System::Runtime::InteropServices::TypeLibConverter::#ctor","System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib","System::Runtime::InteropServices::TypeLibConverter::ConvertAssemblyToTypeLib","System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly","System::Runtime::InteropServices::TypeLibConverter::ConvertTypeLibToAssembly","System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly","System::Runtime::InteropServices::TypeLibConverter::GetPrimaryInteropAssembly"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bd324b5e-84c4-1240-efeb-d8f3b20932f6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.InteropServices\\TypeLibConverter.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.InteropServices/TypeLibConverter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TypeLibConverter class | Microsoft Docs","_op_ogTitle":"TypeLibConverter class","description":"Provides a set of services that convert a managed assembly to a COM type library and vice versa.\n","toc_asset_id":"_splitted/System.Runtime.InteropServices/toc.json","toc_rel":"_splitted/System.Runtime.InteropServices/toc.json","source_url":"","ms.assetid":"System.Runtime.InteropServices.TypeLibConverter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.typelibconverter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.typelibconverter","fileRelativePath":"System.Runtime.InteropServices.TypeLibConverter.html"},"themesRelativePathToOutputRoot":"_themes/"}