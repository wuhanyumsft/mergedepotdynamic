{"content":"    \r\n    <h1 id=\"System_Diagnostics_TextWriterTraceListener\">\r\n      <span class=\"lang-csharp\">TextWriterTraceListener</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Directs tracing or debugging output to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> or to a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, such as <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TextWriterTraceListener : System.Diagnostics.TraceListener</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">System.Diagnostics.TraceListener</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TextWriterTraceListener</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Fail_System_String_\" data-linktype=\"relative-path\">Fail(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Fail_System_String_System_String_\" data-linktype=\"relative-path\">Fail(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Filter\" data-linktype=\"relative-path\">Filter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_GetSupportedAttributes\" data-linktype=\"relative-path\">GetSupportedAttributes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_IndentLevel\" data-linktype=\"relative-path\">IndentLevel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_IndentSize\" data-linktype=\"relative-path\">IndentSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_IsThreadSafe\" data-linktype=\"relative-path\">IsThreadSafe</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_NeedIndent\" data-linktype=\"relative-path\">NeedIndent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceData_System_Diagnostics_TraceEventCache_System_String_System_Diagnostics_TraceEventType_System_Int32_System_Object_\" data-linktype=\"relative-path\">TraceData(TraceEventCache,String,TraceEventType,Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceData_System_Diagnostics_TraceEventCache_System_String_System_Diagnostics_TraceEventType_System_Int32_System_Object___\" data-linktype=\"relative-path\">TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceEvent_System_Diagnostics_TraceEventCache_System_String_System_Diagnostics_TraceEventType_System_Int32_\" data-linktype=\"relative-path\">TraceEvent(TraceEventCache,String,TraceEventType,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceEvent_System_Diagnostics_TraceEventCache_System_String_System_Diagnostics_TraceEventType_System_Int32_System_String_\" data-linktype=\"relative-path\">TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceEvent_System_Diagnostics_TraceEventCache_System_String_System_Diagnostics_TraceEventType_System_Int32_System_String_System_Object___\" data-linktype=\"relative-path\">TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceOutputOptions\" data-linktype=\"relative-path\">TraceOutputOptions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_TraceTransfer_System_Diagnostics_TraceEventCache_System_String_System_Int32_System_String_System_Guid_\" data-linktype=\"relative-path\">TraceTransfer(TraceEventCache,String,Int32,String,Guid)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_System_Object_\" data-linktype=\"relative-path\">Write(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_System_Object_System_String_\" data-linktype=\"relative-path\">Write(Object,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_System_String_System_String_\" data-linktype=\"relative-path\">Write(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteIndent\" data-linktype=\"relative-path\">WriteIndent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_System_Object_\" data-linktype=\"relative-path\">WriteLine(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_System_Object_System_String_\" data-linktype=\"relative-path\">WriteLine(Object,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_System_String_System_String_\" data-linktype=\"relative-path\">WriteLine(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The TextWriterTraceListener class provides the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Writer_\" data-linktype=\"relative-path\">Writer</a> property to get or set the text writer that receives the tracing or debugging output.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> This class also provides methods to <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Close_\" data-linktype=\"relative-path\">Close</a> the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Writer_\" data-linktype=\"relative-path\">Writer</a> so that it no longer receives tracing or debugging output, to <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Flush_\" data-linktype=\"relative-path\">Flush</a> the output buffer for the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Writer_\" data-linktype=\"relative-path\">Writer</a>, and to <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Write_\" data-linktype=\"relative-path\">Write</a> a message to the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Writer_\" data-linktype=\"relative-path\">Writer</a>.  </p>\n<p> You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  </p>\n<ul>\n<li><p>To enable debugging in C#, add the <code>/d:DEBUG</code> flag to the compiler command line when you compile your code, or you can add <code>#define DEBUG</code> to the top of your file. In Visual Basic, add the <code>/d:DEBUG=True</code> flag to the compiler command line.  </p>\n</li>\n<li><p>To enable tracing in C#, add the <code>/d:TRACE</code> flag to the compiler command line when you compile your code, or add <code>#define TRACE</code> to the top of your file. In Visual Basic, add the <code>/d:TRACE=True</code> flag to the compiler command line.  </p>\n<p>To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.  </p>\n</li>\n</ul>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;&gt;  \n      &lt;listeners&gt;  \n        &lt;add name=&quot;myListener&quot;   \n          type=&quot;System.Diagnostics.TextWriterTraceListener&quot;   \n          initializeData=&quot;TextWriterOutput.log&quot; /&gt;  \n        &lt;remove name=&quot;Default&quot; /&gt;  \n      &lt;/listeners&gt;  \n    &lt;/trace&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If an attempt is made to write to a file that is in use or unavailable, the file name is automatically prefixed by a GUID.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor\" data-linktype=\"self-bookmark\">TextWriterTraceListener()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> as the output recipient.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class, using the stream as the recipient of the debugging and tracing output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class using the specified writer as recipient of the tracing or debugging output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_String_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class, using the file as the recipient of the debugging and tracing output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_IO_Stream_System_String_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(Stream,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the stream as the recipient of the debugging and tracing output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_IO_TextWriter_System_String_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(TextWriter,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">TextWriterTraceListener(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the file as the recipient of the debugging and tracing output.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_Writer\" data-linktype=\"self-bookmark\">Writer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text writer that receives the tracing or debugging output.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span> so that it no longer receives tracing or debugging output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Disposes this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Flushes the output buffer for the <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_Write_System_String_\" data-linktype=\"self-bookmark\">Write(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message to this instance&#39;s <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_TextWriterTraceListener_WriteLine_System_String_\" data-linktype=\"self-bookmark\">WriteLine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message to this instance&#39;s <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span> followed by a line terminator. The default line terminator is a carriage return followed by a line feed (\\r\\n).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> as the output recipient.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor uses the <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> stream as the recipient of the tracing or debugging output. Its <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property is initialized to an empty string (&quot;&quot;, or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor. It sets the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Writer_\" data-linktype=\"relative-path\">Writer</a> property to console output, and then adds the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. It writes a message in two segments, and then closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">void main()\n{\n   #if defined(TRACE)\n   // Create a text writer that writes to the console screen and add\n   // it to the trace listeners.\n   TextWriterTraceListener^ myWriter = gcnew TextWriterTraceListener;\n   myWriter-&gt;Writer = System::Console::Out;\n   Trace::Listeners-&gt;Add( myWriter );\n   \n   // Write the output to the console screen.\n   myWriter-&gt;Write( &quot;Write to the Console screen. &quot; );\n   myWriter-&gt;WriteLine( &quot;Again, write to console screen.&quot; );\n   \n   // Flush and close the output.\n   myWriter-&gt;Flush();\n   myWriter-&gt;Close();\n   #endif\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">Public Class Sample\n    \n    Public Shared Sub Main()\n        &#39; Create a text writer that writes to the console screen and add\n        &#39; it to the trace listeners \n        Dim myWriter As New TextWriterTraceListener()\n        myWriter.Writer = System.Console.Out\n        Trace.Listeners.Add(myWriter)\n        \n        &#39; Write the output to the console screen.\n        myWriter.Write(&quot;Write to the Console screen. &quot;)\n        myWriter.WriteLine(&quot;Again, write to console screen.&quot;)\n        \n        &#39; Flush and close the output.\n        myWriter.Flush()\n        myWriter.Close()\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">public class Sample\n{\n\npublic static void Main(string[] args) {\n    /* Create a text writer that writes to the console screen and add\n     * it to the trace listeners */\n    TextWriterTraceListener myWriter = new TextWriterTraceListener();\n    myWriter.Writer = System.Console.Out;\n    Trace.Listeners.Add(myWriter);\n \n    // Write the output to the console screen.\n    myWriter.Write(&quot;Write to the Console screen. &quot;);\n    myWriter.WriteLine(&quot;Again, write to console screen.&quot;);\n \n    // Flush and close the output.\n    myWriter.Flush();\n    myWriter.Close();\n }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class, using the stream as the recipient of the debugging and tracing output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> that represents the stream the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> writes to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The stream is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property to an empty string (&quot;&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor and adds it to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example then writes two messages to this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, and writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. Finally, it flushes and closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#1\">using System;\nusing System.Diagnostics;\nusing System.IO;\nusing Microsoft.VisualBasic;\n\nclass TWTLConStreamMod\n{\n\n    // args(0) is the specification of the trace log file.\n    public static void Main(string[] args)\n    {\n\n        // Verify that a parameter was entered.\n        if (args.Length==0)\n        {\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;);\n\n        }\n        else\n        {\n            // Create a stream object.\n            FileStream traceStream;\n            try\n            {\n                traceStream = new FileStream(args[0], FileMode.Append, FileAccess.Write);\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine(&quot;Error creating FileStream for trace file \\&quot;{0}\\&quot;:&quot; +\n                    &quot;\\r<br>{1}&quot;, args[0], ex.Message);\n                return;\n            }\n\n            // Create a TextWriterTraceListener object that takes a stream.\n            TextWriterTraceListener textListener;\n            textListener = new TextWriterTraceListener(traceStream);\n            Trace.Listeners.Add(textListener);\n\n            // Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine(&quot;This is trace listener named \\&quot;&quot;+ textListener.Name+&quot;\\&quot;&quot;);\n            textListener.WriteLine(&quot;Trace written through a stream to: &quot; +\n                &quot;\\r<br>    \\&quot;&quot;+args[0]+&quot;\\&quot;&quot;);\n\n            // Write a message to all trace listeners.\n            Trace.WriteLine(String.Format(&quot;This trace message written {0} to all listeners.&quot;, DateTime.Now));\n\n            // Flush and close the output.\n            Trace.Flush();\n            textListener.Flush();\n            textListener.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#1\">Imports System\nImports System.Diagnostics\nImports System.IO\nImports Microsoft.VisualBasic\n\nModule TWTLConStreamMod\n\n    &#39; args(0) is the specification of the trace log file.\n    Sub Main(ByVal args() As String)\n\n        &#39; Verify that a parameter was entered.\n        If args.Length = 0 Then\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;)\n\n        Else\n            &#39; Create a stream object.\n            Dim traceStream As FileStream\n            Try\n                traceStream = New FileStream( _\n                    args(0), FileMode.Append, FileAccess.Write)\n            Catch ex As Exception\n                Console.WriteLine( _\n                    &quot;Error creating FileStream for trace file &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                    vbCrLf &amp; &quot;{1}&quot;, args(0), ex.Message)\n                Return\n            End Try\n\n            &#39; Create a TextWriterTraceListener object that takes a stream.\n            Dim textListener As TextWriterTraceListener\n            textListener = New TextWriterTraceListener(traceStream)\n            Trace.Listeners.Add(textListener)\n\n            &#39; Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine( _\n                &quot;This is trace listener named &quot;&quot;&quot; &amp; textListener.Name &amp; &quot;&quot;&quot;&quot;)\n            textListener.WriteLine( _\n                &quot;Trace written through a stream to: &quot; &amp; _\n                vbCrLf &amp; &quot;    &quot;&quot;&quot; &amp; args(0) &amp; &quot;&quot;&quot;&quot;)\n\n            &#39; Write a message to all trace listeners.\n            Trace.WriteLine(String.Format( _\n                &quot;This trace message written {0} to all listeners.&quot;, Now))\n\n            &#39; Flush and close the output.\n            Trace.Flush()\n            textListener.Flush()\n            textListener.Close()\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class using the specified writer as recipient of the tracing or debugging output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that receives the output from the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The writer is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property to an empty string (&quot;&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor. The example creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a>, then references the <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> when it creates the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, which it then adds to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>, then closes this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.Close Example#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nvoid main()\n{\n   #if defined(TRACE)\n   TextWriterTraceListener^ myTextListener = nullptr;\n   \n   // Create a file for output named TestFile.txt.\n   String^ myFileName = &quot;TestFile.txt&quot;;\n   StreamWriter^ myOutputWriter = gcnew StreamWriter( myFileName,true );\n   \n   // Add a TextWriterTraceListener for the file.\n   if ( myOutputWriter )\n   {\n      myTextListener = gcnew TextWriterTraceListener( myOutputWriter );\n      Trace::Listeners-&gt;Add( myTextListener );\n   }\n\n   // Write trace output to all trace listeners.\n   Trace::WriteLine( \n      String::Concat( DateTime::Now.ToString(), &quot; - Trace output&quot; ) );\n   if ( myTextListener )\n   {\n      // Remove and close the file writer/trace listener.\n      myTextListener-&gt;Flush();\n      Trace::Listeners-&gt;Remove( myTextListener );\n      myTextListener-&gt;Close();\n   }\n   #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.Close Example#1\">#define TRACE\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\npublic class TextWriterTraceListenerSample\n{\n    public static void Main() \n    {\n        TextWriterTraceListener myTextListener = null;\n\n        // Create a file for output named TestFile.txt.\n        String myFileName = &quot;TestFile.txt&quot;;\n        StreamWriter myOutputWriter = new StreamWriter(myFileName, true);\n\n        // Add a TextWriterTraceListener for the file.\n        myTextListener = new TextWriterTraceListener(myOutputWriter);\n        Trace.Listeners.Add(myTextListener);\n      \n \n        // Write trace output to all trace listeners.\n        Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;);\n \n        // Remove and close the file writer/trace listener.\n        myTextListener.Flush();\n        Trace.Listeners.Remove(myTextListener);\n        myTextListener.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.Close Example#1\">#Const TRACE=True\n\nImports System\nImports System.IO\nImports System.Diagnostics\n\nPublic Class TextWriterTraceListenerSample\n   \n   Public Shared Sub Main()\n      Dim myTextListener As TextWriterTraceListener = Nothing\n\n      &#39; Create a file for output named TestFile.txt.\n      Dim myFileName As String = &quot;TestFile.txt&quot;\n      Dim myOutputWriter As New StreamWriter(myFileName, True)\n \n      &#39; Add a TextWriterTraceListener for the file.\n      myTextListener = New TextWriterTraceListener(myOutputWriter)\n      Trace.Listeners.Add(myTextListener)\n     \n      &#39; Write trace output to all trace listeners.\n      Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;)\n      \n      &#39; Remove and close the file writer/trace listener.\n      myTextListener.Flush()\n      Trace.Listeners.Remove(myTextListener)\n      myTextListener.Close()\n\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class, using the file as the recipient of the debugging and tracing output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> writes to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The file is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property to an empty string (&quot;&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor, then adds it to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example writes two messages to this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, then writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. Finally, it flushes and closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#3\">using System;\nusing System.Diagnostics;\nusing Microsoft.VisualBasic;\n\nclass TWTLConStringMod\n{\n\n    // args(0) is the specification of the trace log file.\n    public static void Main(string[] args)\n    {\n\n        // Verify that a parameter was entered.\n        if (args.Length==0)\n        {\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;);\n\n        }\n        else\n        {\n            // Create a TextWriterTraceListener object that takes a \n            // file specification.\n            TextWriterTraceListener textListener;\n            try\n            {\n                textListener = new TextWriterTraceListener(args[0]);\n                Trace.Listeners.Add(textListener);\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine(&quot;Error creating TextWriterTraceListener for trace &quot; +\n                    &quot;file \\&quot;{0}\\&quot;:\\r<br>{1}&quot;, args[0], ex.Message);\n                return;\n            }\n\n            // Write these messages only to the TextWriterTraceListener.\n            textListener.WriteLine(&quot;This is trace listener named \\&quot;&quot;+textListener.Name+&quot;\\&quot;&quot;);\n            textListener.WriteLine(&quot;Trace written to a file: &quot; +\n                &quot;\\r<br>    \\&quot;&quot;+args[0]+&quot;\\&quot;&quot;);\n\n            // Write a message to all trace listeners.\n            Trace.WriteLine(String.Format(&quot;This trace message written {0} to all listeners.&quot;, DateTime.Now));\n\n            // Flush and close the output.\n            Trace.Flush();\n            textListener.Flush();\n            textListener.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#3\">Imports System\nImports System.Diagnostics\nImports Microsoft.VisualBasic\n\nModule TWTLConStringMod\n\n    &#39; args(0) is the specification of the trace log file.\n    Sub Main(ByVal args() As String)\n\n        &#39; Verify that a parameter was entered.\n        If args.Length = 0 Then\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;)\n\n        Else\n            &#39; Create a TextWriterTraceListener object that takes a \n            &#39; file specification.\n            Dim textListener As TextWriterTraceListener\n            Try\n                textListener = New TextWriterTraceListener(args(0))\n                Trace.Listeners.Add(textListener)\n            Catch ex As Exception\n                Console.WriteLine( _\n                    &quot;Error creating TextWriterTraceListener for trace &quot; &amp; _\n                    &quot;file &quot;&quot;{0}&quot;&quot;:&quot; &amp; vbCrLf &amp; &quot;{1}&quot;, args(0), ex.Message)\n                Return\n            End Try\n\n            &#39; Write these messages only to the TextWriterTraceListener.\n            textListener.WriteLine( _\n                &quot;This is trace listener named &quot;&quot;&quot; &amp; textListener.Name &amp; &quot;&quot;&quot;&quot;)\n            textListener.WriteLine(&quot;Trace written to a file: &quot; &amp; _\n                vbCrLf &amp; &quot;    &quot;&quot;&quot; &amp; args(0) &amp; &quot;&quot;&quot;&quot;)\n\n            &#39; Write a message to all trace listeners.\n            Trace.WriteLine(String.Format( _\n                &quot;This trace message written {0} to all listeners.&quot;, Now))\n\n            &#39; Flush and close the output.\n            Trace.Flush()\n            textListener.Flush()\n            textListener.Close()\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_IO_Stream_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(Stream,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the stream as the recipient of the debugging and tracing output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (System.IO.Stream stream, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> that represents the stream the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> writes to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the new instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The stream is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property to the <code>name</code> parameter or to an empty string (&quot;&quot;), if the <code>name</code> parameter is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor and adds it to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example then writes two messages to this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> and writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. Finally, it flushes and closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#2\">using System;\nusing System.Diagnostics;\nusing System.IO;\nusing Microsoft.VisualBasic;\n\nclass TWTLConStreamNameMod\n{\n\n    const string LISTENER_NAME = &quot;myStreamListener&quot;;\n\n    // args(0) is the specification of the trace log file.\n    public static void Main(string[] args)\n    {\n\n        // Verify that a parameter was entered.\n        if (args.Length==0)\n        {\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;);\n\n        }\n        else\n        {\n            // Create a stream object.\n            FileStream traceStream;\n            try\n            {\n                traceStream = new FileStream(args[0], FileMode.Append, FileAccess.Write);\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine(&quot;Error creating FileStream for trace file \\&quot;{0}\\&quot;:&quot; +\n                    &quot;\\r<br>{1}&quot;, args[0], ex.Message);\n                return;\n            }\n\n            // Create a TextWriterTraceListener object that takes a stream.\n            TextWriterTraceListener textListener;\n            textListener = new TextWriterTraceListener(traceStream, LISTENER_NAME);\n            Trace.Listeners.Add(textListener);\n\n            // Write these messages only to the TextWriterTraceListener.\n            textListener.WriteLine(&quot;This is trace listener named \\&quot;&quot;+textListener.Name+&quot;\\&quot;&quot;);\n            textListener.WriteLine(&quot;Trace written through a stream to: &quot; +\n                &quot;\\r<br>    \\&quot;&quot;+args[0]+&quot;\\&quot;&quot;);\n\n            // Write a message to all trace listeners.\n            Trace.WriteLine(String.Format(&quot;This trace message written {0} to all listeners.&quot;, DateTime.Now));\n\n            // Flush and close the output.\n            Trace.Flush();\n            textListener.Flush();\n            textListener.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#2\">Imports System\nImports System.Diagnostics\nImports System.IO\nImports Microsoft.VisualBasic\n\nModule TWTLConStreamNameMod\n\n    Const LISTENER_NAME As String = &quot;myStreamListener&quot;\n\n    &#39; args(0) is the specification of the trace log file.\n    Sub Main(ByVal args() As String)\n\n        &#39; Verify that a parameter was entered.\n        If args.Length = 0 Then\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;)\n\n        Else\n            &#39; Create a stream object.\n            Dim traceStream As FileStream\n            Try\n                traceStream = New FileStream( _\n                    args(0), FileMode.Append, FileAccess.Write)\n            Catch ex As Exception\n                Console.WriteLine( _\n                    &quot;Error creating FileStream for trace file &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                    vbCrLf &amp; &quot;{1}&quot;, args(0), ex.Message)\n                Return\n            End Try\n\n            &#39; Create a TextWriterTraceListener object that takes a stream.\n            Dim textListener As TextWriterTraceListener\n            textListener = _\n                New TextWriterTraceListener(traceStream, LISTENER_NAME)\n            Trace.Listeners.Add(textListener)\n\n            &#39; Write these messages only to the TextWriterTraceListener.\n            textListener.WriteLine( _\n                &quot;This is trace listener named &quot;&quot;&quot; &amp; textListener.Name &amp; &quot;&quot;&quot;&quot;)\n            textListener.WriteLine( _\n                &quot;Trace written through a stream to: &quot; &amp; _\n                vbCrLf &amp; &quot;    &quot;&quot;&quot; &amp; args(0) &amp; &quot;&quot;&quot;&quot;)\n\n            &#39; Write a message to all trace listeners.\n            Trace.WriteLine(String.Format( _\n                &quot;This trace message written {0} to all listeners.&quot;, Now))\n\n            &#39; Flush and close the output.\n            Trace.Flush()\n            textListener.Flush()\n            textListener.Close()\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_IO_TextWriter_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(TextWriter,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (System.IO.TextWriter writer, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that receives the output from the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the new instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The writer is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor. The example creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a>, then references the <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> when it creates the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, which it then adds to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example writes two messages to this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, then writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. Finally, it flushes and closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#5\">using System;\nusing System.Diagnostics;\nusing System.IO;\nusing Microsoft.VisualBasic;\n\nclass TWTLConWriterNameMod\n{\n\n    const string LISTENER_NAME = &quot;myWriterListener&quot;;\n\n    // args(0) is the specification of the trace log file.\n    public static void Main(string[] args)\n    {\n\n        // Verify that a parameter was entered.\n        if (args.Length==0)\n        {\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;);\n\n        }\n        else\n        {\n            // Create a StreamWriter object that supports appending.\n            StreamWriter traceWriter;\n            try\n            {\n                traceWriter = new StreamWriter(args[0], true);\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine(&quot;Error creating StreamWriter for trace file \\&quot;{0}\\&quot;:&quot; +\n                    &quot;\\r<br>{1}&quot;, args[0], ex.Message);\n                return;\n            }\n\n            // Create a TextWriterTraceListener that takes a StreamWriter.\n            TextWriterTraceListener textListener;\n            textListener = new TextWriterTraceListener(traceWriter, LISTENER_NAME);\n            Trace.Listeners.Add(textListener);\n\n            // Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine(&quot;This is trace listener named \\&quot;&quot;+textListener.Name+&quot;\\&quot;&quot;);\n            textListener.WriteLine(&quot;Trace written through a stream to: &quot; +\n                &quot;\\r<br>    \\&quot;&quot;+args[0]+&quot;\\&quot;&quot;);\n\n            // Write a message to all trace listeners.\n            Trace.WriteLine(String.Format(&quot;This trace message written {0} to all listeners.&quot;, DateTime.Now));\n\n            // Flush and close the output.\n            Trace.Flush();\n            textListener.Flush();\n            textListener.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#5\">Imports System\nImports System.Diagnostics\nImports System.IO\nImports Microsoft.VisualBasic\n\nModule TWTLConWriterNameMod\n\n    Const LISTENER_NAME As String = &quot;myWriterListener&quot;\n\n    &#39; args(0) is the specification of the trace log file.\n    Sub Main(ByVal args() As String)\n\n        &#39; Verify that a parameter was entered.\n        If args.Length = 0 Then\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;)\n\n        Else\n            &#39; Create a StreamWriter object that supports appending.\n            Dim traceWriter As StreamWriter\n            Try\n                traceWriter = New StreamWriter(args(0), True)\n            Catch ex As Exception\n                Console.WriteLine( _\n                    &quot;Error creating StreamWriter for trace file &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                    vbCrLf &amp; &quot;{1}&quot;, args(0), ex.Message)\n                Return\n            End Try\n\n            &#39; Create a TextWriterTraceListener that takes a StreamWriter.\n            Dim textListener As TextWriterTraceListener\n            textListener = _\n                New TextWriterTraceListener(traceWriter, LISTENER_NAME)\n            Trace.Listeners.Add(textListener)\n\n            &#39; Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine( _\n                &quot;This is trace listener named &quot;&quot;&quot; &amp; textListener.Name &amp; &quot;&quot;&quot;&quot;)\n            textListener.WriteLine( _\n                &quot;Trace written through a stream to: &quot; &amp; _\n                vbCrLf &amp; &quot;    &quot;&quot;&quot; &amp; args(0) &amp; &quot;&quot;&quot;&quot;)\n\n            &#39; Write a message to all trace listeners.\n            Trace.WriteLine(String.Format( _\n                &quot;This trace message written {0} to all listeners.&quot;, Now))\n\n            &#39; Flush and close the output.\n            Trace.Flush()\n            textListener.Flush()\n            textListener.Close()\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextWriterTraceListener(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class with the specified name, using the file as the recipient of the debugging and tracing output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextWriterTraceListener (string fileName, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> writes to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the new instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The stream is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Name_\" data-linktype=\"relative-path\">Name</a> property to the <code>name</code> parameter or to an empty string (&quot;&quot;), if the <code>name</code> parameter is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> using the TextWriterTraceListener constructor, then adds it to the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. The example writes two messages to this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>, then writes a message to all <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> objects in the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a>. Finally, it flushes and closes the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#4\">Imports System\nImports System.Diagnostics\nImports Microsoft.VisualBasic\n\nModule TWTLConStringNameMod\n\n    Const LISTENER_NAME As String = &quot;myStringListener&quot;\n\n    &#39; args(0) is the specification of the trace log file.\n    Sub Main(ByVal args() As String)\n\n        &#39; Verify that a parameter was entered.\n        If args.Length = 0 Then\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;)\n\n        Else\n            &#39; Create a TextWriterTraceListener object that takes a \n            &#39; file specification.\n            Dim textListener As TextWriterTraceListener\n            Try\n                textListener = _\n                    New TextWriterTraceListener(args(0), LISTENER_NAME)\n                Trace.Listeners.Add(textListener)\n            Catch ex As Exception\n                Console.WriteLine( _\n                    &quot;Error creating TextWriterTraceListener for trace &quot; &amp; _\n                    &quot;file &quot;&quot;{0}&quot;&quot;:&quot; &amp; vbCrLf &amp; &quot;{1}&quot;, args(0), ex.Message)\n                Return\n            End Try\n\n            &#39; Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine( _\n                &quot;This is trace listener named &quot;&quot;&quot; &amp; textListener.Name &amp; &quot;&quot;&quot;&quot;)\n            textListener.WriteLine(&quot;Trace written to a file: &quot; &amp; _\n                vbCrLf &amp; &quot;    &quot;&quot;&quot; &amp; args(0) &amp; &quot;&quot;&quot;&quot;)\n\n            &#39; Write a message to all trace listeners.\n            Trace.WriteLine(String.Format( _\n                &quot;This trace message written {0} to all listeners.&quot;, Now))\n\n            &#39; Flush and close the output.\n            Trace.Flush()\n            textListener.Flush()\n            textListener.Close()\n        End If\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Diagnostics.TextWriterTraceListener.Ctor#4\">using System;\nusing System.Diagnostics;\nusing Microsoft.VisualBasic;\n\nclass TWTLConStringNameMod\n{\n\n    const string LISTENER_NAME = &quot;myStringListener&quot;;\n\n    // args(0) is the specification of the trace log file.\n    public static void Main(string[] args)\n    {\n\n        // Verify that a parameter was entered.\n        if (args.Length==0)\n        {\n            Console.WriteLine(&quot;Enter a trace file specification.&quot;);\n\n        }\n        else\n        {\n            // Create a TextWriterTraceListener object that takes a \n            // file specification.\n            TextWriterTraceListener textListener;\n            try\n            {\n                textListener = new TextWriterTraceListener(args[0], LISTENER_NAME);\n                Trace.Listeners.Add(textListener);\n            }\n            catch(Exception ex)\n            {\n                Console.WriteLine(&quot;Error creating TextWriterTraceListener for trace &quot; +\n                    &quot;file \\&quot;{0}\\&quot;:\\r<br>{1}&quot;, args[0], ex.Message);\n                return;\n            }\n\n            // Write these messages only to this TextWriterTraceListener.\n            textListener.WriteLine(&quot;This is trace listener named \\&quot;&quot;+textListener.Name+&quot;\\&quot;&quot;);\n            textListener.WriteLine(&quot;Trace written to a file: &quot; +\n                &quot;\\r<br>    \\&quot;&quot;+args[0]+&quot;\\&quot;&quot;);\n\n            // Write a message to all trace listeners.\n            Trace.WriteLine(String.Format(&quot;This trace message written {0} to all listeners.&quot;, DateTime.Now));\n\n            // Flush and close the output.\n            Trace.Flush();\n            textListener.Flush();\n            textListener.Close();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_Writer\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_Writer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Writer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text writer that receives the tracing or debugging output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.TextWriter Writer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that represents the writer that receives the tracing or debugging output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> that writes to the console screen. Then the code adds the new trace listener to the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> in the trace class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.Writer Example#1\">      #if defined(TRACE)\n      TextWriterTraceListener^ myWriter = gcnew TextWriterTraceListener;\n      myWriter-&gt;Writer = System::Console::Out;\n      Trace::Listeners-&gt;Add( myWriter );\n      #endif\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.Writer Example#1\">\n TextWriterTraceListener myWriter = new TextWriterTraceListener();\n    myWriter.Writer = System.Console.Out;\n    Trace.Listeners.Add(myWriter);\n    \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.Writer Example#1\"> Dim myWriter As New TextWriterTraceListener()\n myWriter.Writer = System.Console.Out\n Trace.Listeners.Add(myWriter)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_Close\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span> so that it no longer receives tracing or debugging output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Write_\" data-linktype=\"relative-path\">Write</a> or <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method after calling Close automatically reopens the stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myTextListener</code>, which uses a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> called <code>myOutputWriter</code> to write to a file named <code>TestFile.txt</code>. The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.Close Example#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nvoid main()\n{\n   #if defined(TRACE)\n   TextWriterTraceListener^ myTextListener = nullptr;\n   \n   // Create a file for output named TestFile.txt.\n   String^ myFileName = &quot;TestFile.txt&quot;;\n   StreamWriter^ myOutputWriter = gcnew StreamWriter( myFileName,true );\n   \n   // Add a TextWriterTraceListener for the file.\n   if ( myOutputWriter )\n   {\n      myTextListener = gcnew TextWriterTraceListener( myOutputWriter );\n      Trace::Listeners-&gt;Add( myTextListener );\n   }\n\n   // Write trace output to all trace listeners.\n   Trace::WriteLine( \n      String::Concat( DateTime::Now.ToString(), &quot; - Trace output&quot; ) );\n   if ( myTextListener )\n   {\n      // Remove and close the file writer/trace listener.\n      myTextListener-&gt;Flush();\n      Trace::Listeners-&gt;Remove( myTextListener );\n      myTextListener-&gt;Close();\n   }\n   #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.Close Example#1\">#define TRACE\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\npublic class TextWriterTraceListenerSample\n{\n    public static void Main() \n    {\n        TextWriterTraceListener myTextListener = null;\n\n        // Create a file for output named TestFile.txt.\n        String myFileName = &quot;TestFile.txt&quot;;\n        StreamWriter myOutputWriter = new StreamWriter(myFileName, true);\n\n        // Add a TextWriterTraceListener for the file.\n        myTextListener = new TextWriterTraceListener(myOutputWriter);\n        Trace.Listeners.Add(myTextListener);\n      \n \n        // Write trace output to all trace listeners.\n        Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;);\n \n        // Remove and close the file writer/trace listener.\n        myTextListener.Flush();\n        Trace.Listeners.Remove(myTextListener);\n        myTextListener.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.Close Example#1\">#Const TRACE=True\n\nImports System\nImports System.IO\nImports System.Diagnostics\n\nPublic Class TextWriterTraceListenerSample\n   \n   Public Shared Sub Main()\n      Dim myTextListener As TextWriterTraceListener = Nothing\n\n      &#39; Create a file for output named TestFile.txt.\n      Dim myFileName As String = &quot;TestFile.txt&quot;\n      Dim myOutputWriter As New StreamWriter(myFileName, True)\n \n      &#39; Add a TextWriterTraceListener for the file.\n      myTextListener = New TextWriterTraceListener(myOutputWriter)\n      Trace.Listeners.Add(myTextListener)\n     \n      &#39; Write trace output to all trace listeners.\n      Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;)\n      \n      &#39; Remove and close the file writer/trace listener.\n      myTextListener.Flush()\n      Trace.Listeners.Remove(myTextListener)\n      myTextListener.Close()\n\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Disposes this <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release managed resources; if <code>false</code>, Dispose has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener#System_Diagnostics_TextWriterTraceListener_Close_\" data-linktype=\"relative-path\">Close</a> method of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> class to release the managed resources of a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_Flush\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Flushes the output buffer for the <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myTextListener</code>, which uses a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> called <code>myOutputWriter</code> to write to a file named <code>TestFile.txt</code>. The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.Close Example#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nvoid main()\n{\n   #if defined(TRACE)\n   TextWriterTraceListener^ myTextListener = nullptr;\n   \n   // Create a file for output named TestFile.txt.\n   String^ myFileName = &quot;TestFile.txt&quot;;\n   StreamWriter^ myOutputWriter = gcnew StreamWriter( myFileName,true );\n   \n   // Add a TextWriterTraceListener for the file.\n   if ( myOutputWriter )\n   {\n      myTextListener = gcnew TextWriterTraceListener( myOutputWriter );\n      Trace::Listeners-&gt;Add( myTextListener );\n   }\n\n   // Write trace output to all trace listeners.\n   Trace::WriteLine( \n      String::Concat( DateTime::Now.ToString(), &quot; - Trace output&quot; ) );\n   if ( myTextListener )\n   {\n      // Remove and close the file writer/trace listener.\n      myTextListener-&gt;Flush();\n      Trace::Listeners-&gt;Remove( myTextListener );\n      myTextListener-&gt;Close();\n   }\n   #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.Close Example#1\">#define TRACE\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\npublic class TextWriterTraceListenerSample\n{\n    public static void Main() \n    {\n        TextWriterTraceListener myTextListener = null;\n\n        // Create a file for output named TestFile.txt.\n        String myFileName = &quot;TestFile.txt&quot;;\n        StreamWriter myOutputWriter = new StreamWriter(myFileName, true);\n\n        // Add a TextWriterTraceListener for the file.\n        myTextListener = new TextWriterTraceListener(myOutputWriter);\n        Trace.Listeners.Add(myTextListener);\n      \n \n        // Write trace output to all trace listeners.\n        Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;);\n \n        // Remove and close the file writer/trace listener.\n        myTextListener.Flush();\n        Trace.Listeners.Remove(myTextListener);\n        myTextListener.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.Close Example#1\">#Const TRACE=True\n\nImports System\nImports System.IO\nImports System.Diagnostics\n\nPublic Class TextWriterTraceListenerSample\n   \n   Public Shared Sub Main()\n      Dim myTextListener As TextWriterTraceListener = Nothing\n\n      &#39; Create a file for output named TestFile.txt.\n      Dim myFileName As String = &quot;TestFile.txt&quot;\n      Dim myOutputWriter As New StreamWriter(myFileName, True)\n \n      &#39; Add a TextWriterTraceListener for the file.\n      myTextListener = New TextWriterTraceListener(myOutputWriter)\n      Trace.Listeners.Add(myTextListener)\n     \n      &#39; Write trace output to all trace listeners.\n      Trace.WriteLine(DateTime.Now.ToString() + &quot; - Trace output&quot;)\n      \n      &#39; Remove and close the file writer/trace listener.\n      myTextListener.Flush()\n      Trace.Listeners.Remove(myTextListener)\n      myTextListener.Close()\n\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_Write_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message to this instance&#39;s <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myWriter</code> to write to the console screen. The example writes two lines to the console screen. Note the second write appears on the same line as the first write. The example then flushes and closes the stream.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.Write Example#1\">void main()\n{\n   #if defined(TRACE)\n   // Create a text writer that writes to the console screen and add\n   // it to the trace listeners.\n   TextWriterTraceListener^ myWriter = gcnew TextWriterTraceListener;\n   myWriter-&gt;Writer = System::Console::Out;\n   Trace::Listeners-&gt;Add( myWriter );\n   \n   // Write the output to the console screen.\n   myWriter-&gt;Write( &quot;Write to console screen. &quot; );\n   myWriter-&gt;WriteLine( &quot;Again, write to the Console screen.&quot; );\n   \n   // Flush and close the output.\n   myWriter-&gt;Flush();\n   myWriter-&gt;Close();\n   #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.Write Example#1\">public class Sample \n{\n\n void Main(string[] args) {\n    /* Create a text writer that writes to the console screen and add\n     * it to the trace listeners */\n    TextWriterTraceListener myWriter = new TextWriterTraceListener();\n    myWriter.Writer = System.Console.Out;\n    Trace.Listeners.Add(myWriter);\n \n    // Write the output to the console screen.\n    myWriter.Write(&quot;Write to console screen. &quot;);\n    myWriter.WriteLine(&quot;Again, write to the Console screen.&quot;);\n \n    // Flush and close the output.\n    myWriter.Flush();\n    myWriter.Close();\n }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.Write Example#1\">Public Class Sample    \n\n    Public Shared Sub Main()\n        &#39; Create a text writer that writes to the console screen and add\n        &#39; it to the trace listeners \n        Dim myWriter As New TextWriterTraceListener()\n        myWriter.Writer = System.Console.Out\n        Trace.Listeners.Add(myWriter)\n        \n        &#39; Write the output to the console screen.\n        myWriter.Write(&quot;Write to console screen. &quot;)\n        myWriter.WriteLine(&quot;Again, write to the Console screen.&quot;)\n        \n        &#39; Flush and close the output.\n        myWriter.Flush()\n        myWriter.Close()\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_TextWriterTraceListener_WriteLine_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_TextWriterTraceListener_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message to this instance&#39;s <span class=\"xref\">stem.Diagnostics.TextWriterTraceListener.Writer*</span> followed by a line terminator. The default line terminator is a carriage return followed by a line feed (\\r\\n).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteLine (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myWriter</code> to write to the console screen. The example writes two lines to the console screen. Note the second write appears on the same line as the first write. The example then flushes and closes the stream.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">void main()\n{\n   #if defined(TRACE)\n   // Create a text writer that writes to the console screen and add\n   // it to the trace listeners.\n   TextWriterTraceListener^ myWriter = gcnew TextWriterTraceListener;\n   myWriter-&gt;Writer = System::Console::Out;\n   Trace::Listeners-&gt;Add( myWriter );\n   \n   // Write the output to the console screen.\n   myWriter-&gt;Write( &quot;Write to the Console screen. &quot; );\n   myWriter-&gt;WriteLine( &quot;Again, write to console screen.&quot; );\n   \n   // Flush and close the output.\n   myWriter-&gt;Flush();\n   myWriter-&gt;Close();\n   #endif\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">Public Class Sample\n    \n    Public Shared Sub Main()\n        &#39; Create a text writer that writes to the console screen and add\n        &#39; it to the trace listeners \n        Dim myWriter As New TextWriterTraceListener()\n        myWriter.Writer = System.Console.Out\n        Trace.Listeners.Add(myWriter)\n        \n        &#39; Write the output to the console screen.\n        myWriter.Write(&quot;Write to the Console screen. &quot;)\n        myWriter.WriteLine(&quot;Again, write to console screen.&quot;)\n        \n        &#39; Flush and close the output.\n        myWriter.Flush()\n        myWriter.Close()\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TextWriterTraceListener.WriteLine Example#1\">public class Sample\n{\n\npublic static void Main(string[] args) {\n    /* Create a text writer that writes to the console screen and add\n     * it to the trace listeners */\n    TextWriterTraceListener myWriter = new TextWriterTraceListener();\n    myWriter.Writer = System.Console.Out;\n    Trace.Listeners.Add(myWriter);\n \n    // Write the output to the console screen.\n    myWriter.Write(&quot;Write to the Console screen. &quot;);\n    myWriter.WriteLine(&quot;Again, write to console screen.&quot;);\n \n    // Flush and close the output.\n    myWriter.Flush();\n    myWriter.Close();\n }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.TextWriterTraceListener.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.TextWriterTraceListener.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.Close\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.Flush\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.Write\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.WriteLine\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.TextWriterTraceListener.Writer\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bfbd4cb9-a071-a6c2-6c4f-264cce8a8434\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Directs tracing or debugging output to a  or to a , such as .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.TextWriterTraceListener\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.TextWriterTraceListener.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.TextWriterTraceListener.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.TextWriterTraceListener","System.Diagnostics.TextWriterTraceListener..ctor","System.Diagnostics.TextWriterTraceListener.Close","System.Diagnostics.TextWriterTraceListener.Dispose","System.Diagnostics.TextWriterTraceListener.Flush","System.Diagnostics.TextWriterTraceListener.Write","System.Diagnostics.TextWriterTraceListener.WriteLine","System.Diagnostics.TextWriterTraceListener.Writer"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.TextWriterTraceListener","System::Diagnostics::TextWriterTraceListener","System.Diagnostics.TextWriterTraceListener.#ctor","System::Diagnostics::TextWriterTraceListener::#ctor","System.Diagnostics.TextWriterTraceListener.Close","System::Diagnostics::TextWriterTraceListener::Close","System.Diagnostics.TextWriterTraceListener.Dispose","System::Diagnostics::TextWriterTraceListener::Dispose","System.Diagnostics.TextWriterTraceListener.Flush","System::Diagnostics::TextWriterTraceListener::Flush","System.Diagnostics.TextWriterTraceListener.Write","System::Diagnostics::TextWriterTraceListener::Write","System.Diagnostics.TextWriterTraceListener.WriteLine","System::Diagnostics::TextWriterTraceListener::WriteLine","System.Diagnostics.TextWriterTraceListener.Writer","System::Diagnostics::TextWriterTraceListener::Writer"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bfbd4cb9-a071-a6c2-6c4f-264cce8a8434","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/TextWriterTraceListener.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TextWriterTraceListener class | Microsoft Docs","_op_ogTitle":"TextWriterTraceListener class","description":"Directs tracing or debugging output to a  or to a , such as .\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.TextWriterTraceListener","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.textwritertracelistener","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.textwritertracelistener","fileRelativePath":"System.Diagnostics.TextWriterTraceListener.html"},"themesRelativePathToOutputRoot":"_themes/"}