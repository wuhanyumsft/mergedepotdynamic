{"content":"    \r\n    <h1 id=\"System_Xml_XmlDocument\">\r\n      <span class=\"lang-csharp\">XmlDocument</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlDocument : System.Xml.XmlNode</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlDocument</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_AppendChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">AppendChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ChildNodes\" data-linktype=\"relative-path\">ChildNodes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_FirstChild\" data-linktype=\"relative-path\">FirstChild</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetEnumerator\" data-linktype=\"relative-path\">GetEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetNamespaceOfPrefix_System_String_\" data-linktype=\"relative-path\">GetNamespaceOfPrefix(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetPrefixOfNamespace_System_String_\" data-linktype=\"relative-path\">GetPrefixOfNamespace(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_HasChildNodes\" data-linktype=\"relative-path\">HasChildNodes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertAfter_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">InsertAfter(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertBefore_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">InsertBefore(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Item_System_String_\" data-linktype=\"relative-path\">Item(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Item_System_String_System_String_\" data-linktype=\"relative-path\">Item(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_LastChild\" data-linktype=\"relative-path\">LastChild</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_NamespaceURI\" data-linktype=\"relative-path\">NamespaceURI</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_NextSibling\" data-linktype=\"relative-path\">NextSibling</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Normalize\" data-linktype=\"relative-path\">Normalize()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_OuterXml\" data-linktype=\"relative-path\">OuterXml</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Prefix\" data-linktype=\"relative-path\">Prefix</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_PrependChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">PrependChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_PreviousSibling\" data-linktype=\"relative-path\">PreviousSibling</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_PreviousText\" data-linktype=\"relative-path\">PreviousText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_RemoveAll\" data-linktype=\"relative-path\">RemoveAll()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_RemoveChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">RemoveChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ReplaceChild_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">ReplaceChild(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_System_String_\" data-linktype=\"relative-path\">SelectNodes(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_System_String_System_Xml_XmlNamespaceManager_\" data-linktype=\"relative-path\">SelectNodes(String,XmlNamespaceManager)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_System_String_\" data-linktype=\"relative-path\">SelectSingleNode(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_System_String_System_Xml_XmlNamespaceManager_\" data-linktype=\"relative-path\">SelectSingleNode(String,XmlNamespaceManager)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Supports_System_String_System_String_\" data-linktype=\"relative-path\">Supports(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"relative-path\">IEnumerable.GetEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_System_ICloneable_Clone\" data-linktype=\"relative-path\">ICloneable.Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Value\" data-linktype=\"relative-path\">Value</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p><a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C <a href=\"../Topic/XML%20Document%20Object%20Model%20(DOM).md\" data-linktype=\"relative-path\">XML Document Object Model (DOM)</a> Level 1 Core and the Core DOM Level 2.  </p>\n<p> <em>DOM</em> stands for <em>document object model</em>. To read more about it, see <a href=\"../Topic/XML%20Document%20Object%20Model%20(DOM).md\" data-linktype=\"relative-path\">XML Document Object Model (DOM)</a>.  </p>\n<p> You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  </p>\n<p> If you want to pry open the XmlDocument class and see how it’s implemented, see the <a href=\"http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12\" data-linktype=\"external\">Reference Source</a>.  </p>\n<p><a name=\"Common\"></a>   </p>\n<h2 id=\"tasks\">Tasks</h2>\n<ul>\n<li><p><a href=\"#Load\" data-linktype=\"self-bookmark\">Load XML into the document object model</a>  </p>\n</li>\n<li><p><a href=\"#Validation\" data-linktype=\"self-bookmark\">Validate it against a schema</a>  </p>\n</li>\n<li><p><a href=\"#Navigate\" data-linktype=\"self-bookmark\">Navigate the document tree</a>  </p>\n</li>\n<li><p><a href=\"#Find\" data-linktype=\"self-bookmark\">Find nodes</a>  </p>\n</li>\n<li><p><a href=\"#Edit\" data-linktype=\"self-bookmark\">Edit nodes</a>  </p>\n</li>\n<li><p><a href=\"#Add\" data-linktype=\"self-bookmark\">Add nodes</a>  </p>\n</li>\n<li><p><a href=\"#Remove\" data-linktype=\"self-bookmark\">Remove nodes</a>  </p>\n</li>\n<li><p><a href=\"#Position\" data-linktype=\"self-bookmark\">Position nodes</a>  </p>\n</li>\n</ul>\n<p><a name=\"Load\"></a>   </p>\n<h2 id=\"load-xml-into-the-document-object-model\">Load XML into the document object model</h2>\n<p> Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  </p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;books xmlns=&quot;http://www.contoso.com/books&quot;&gt;  \n  &lt;book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-8&quot; publicationdate=&quot;1823-01-28&quot;&gt;  \n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;  \n    &lt;price&gt;24.95&lt;/price&gt;  \n  &lt;/book&gt;  \n  &lt;book genre=&quot;novel&quot; ISBN=&quot;1-861002-30-1&quot; publicationdate=&quot;1985-01-01&quot;&gt;  \n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;  \n    &lt;price&gt;29.95&lt;/price&gt;  \n  &lt;/book&gt;  \n  &lt;book genre=&quot;novel&quot; ISBN=&quot;1-861001-45-3&quot; publicationdate=&quot;1811-01-01&quot;&gt;  \n    &lt;title&gt;Sense and Sensibility&lt;/title&gt;  \n    &lt;price&gt;19.95&lt;/price&gt;  \n  &lt;/book&gt;  \n&lt;/books&gt;  \n</code></pre><p> Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  </p>\n<p> This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#1\">XmlDocument ^doc = gcnew XmlDocument();\ndoc-&gt;PreserveWhitespace = true;\ntry\n{doc-&gt;Load(&quot;booksData.xml&quot;);}\ncatch (System::IO::FileNotFoundException ^e1)\n{\n\t// If no book is found, generate some XML.\n\n\tdoc-&gt;LoadXml(&quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt; \\n&quot; +\n\t&quot;&lt;books xmlns=\\&quot;http://www.contoso.com/books\\&quot;&gt; \\n&quot; +\n\t&quot;  &lt;book genre=\\&quot;novel\\&quot; ISBN=\\&quot;1-861001-57-8\\&quot; publicationdate=\\&quot;1823-01-28\\&quot;&gt; \\n&quot; +\n\t&quot;    &lt;title&gt;Pride And Prejudice&lt;/title&gt; \\n&quot; +\n\t&quot;    &lt;price&gt;24.95&lt;/price&gt; \\n&quot; +\n\t&quot;  &lt;/book&gt; \\n&quot; +\n\t&quot;  &lt;book genre=\\&quot;novel\\&quot; ISBN=\\&quot;1-861002-30-1\\&quot; publicationdate=\\&quot;1985-01-01\\&quot;&gt; \\n&quot; +\n\t&quot;    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt; \\n&quot; +\n\t&quot;    &lt;price&gt;29.95&lt;/price&gt; \\n&quot; +\n\t&quot;  &lt;/book&gt; \\n&quot; +\n\t&quot;&lt;/books&gt;&quot;);\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#1\">XmlDocument doc = new XmlDocument();\ndoc.PreserveWhitespace = true;\ntry { doc.Load(&quot;booksData.xml&quot;); }\ncatch (System.IO.FileNotFoundException)\n{\n    doc.LoadXml(&quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt; \\n&quot; +\n    &quot;&lt;books xmlns=\\&quot;http://www.contoso.com/books\\&quot;&gt; \\n&quot; +\n    &quot;  &lt;book genre=\\&quot;novel\\&quot; ISBN=\\&quot;1-861001-57-8\\&quot; publicationdate=\\&quot;1823-01-28\\&quot;&gt; \\n&quot; +\n    &quot;    &lt;title&gt;Pride And Prejudice&lt;/title&gt; \\n&quot; +\n    &quot;    &lt;price&gt;24.95&lt;/price&gt; \\n&quot; +\n    &quot;  &lt;/book&gt; \\n&quot; +\n    &quot;  &lt;book genre=\\&quot;novel\\&quot; ISBN=\\&quot;1-861002-30-1\\&quot; publicationdate=\\&quot;1985-01-01\\&quot;&gt; \\n&quot; +\n    &quot;    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt; \\n&quot; +\n    &quot;    &lt;price&gt;29.95&lt;/price&gt; \\n&quot; +\n    &quot;  &lt;/book&gt; \\n&quot; +\n    &quot;&lt;/books&gt;&quot;);             \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#1\">Dim doc As XmlDocument = New XmlDocument\ndoc.PreserveWhitespace = True\nTry\n    doc.Load(&quot;booksData.xml&quot;)\nCatch ex As System.IO.FileNotFoundException\n    &#39; If no file is found, generate some XML.\n    doc.LoadXml(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;&lt;books xmlns=&quot;&quot;http://www.contoso.com/books&quot;&quot;&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;  &lt;book genre=&quot;&quot;novel&quot;&quot; ISBN=&quot;&quot;1-861001-57-8&quot;&quot; publicationdate=&quot;&quot;1823-01-28&quot;&quot;&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;    &lt;title&gt;Pride And Prejudice&lt;/title&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;    &lt;price&gt;24.95&lt;/price&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;  &lt;/book&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;  &lt;book genre=&quot;&quot;novel&quot;&quot; ISBN=&quot;&quot;1-861002-30-1&quot;&quot; publicationdate=&quot;&quot;1985-01-01&quot;&quot;&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;    &lt;price&gt;29.95&lt;/price&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;  &lt;/book&gt; &quot; &amp; ControlChars.NewLine &amp; _\n        &quot;&lt;/books&gt;&quot;)\nEnd Try\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p> <strong>Learn more:</strong> <a href=\"../Topic/Reading%20an%20XML%20Document%20into%20the%20DOM.md\" data-linktype=\"relative-path\">Reading an XML Document into the DOM</a>  </p>\n<p><a name=\"Validation\"></a>   </p>\n<h2 id=\"validate-it-against-a-schema\">Validate it against a schema</h2>\n<p> Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  </p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;  \n  attributeFormDefault=&quot;unqualified&quot;   \n  elementFormDefault=&quot;qualified&quot;  \n  targetNamespace=&quot;http://www.contoso.com/books&quot;&gt;   \n  &lt;xs:element name=&quot;books&quot;&gt;  \n    &lt;xs:complexType&gt;  \n      &lt;xs:sequence&gt;  \n        &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;  \n          &lt;xs:complexType&gt;  \n            &lt;xs:sequence&gt;  \n              &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;  \n              &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;  \n            &lt;/xs:sequence&gt;  \n            &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;  \n            &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;  \n            &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;  \n          &lt;/xs:complexType&gt;  \n        &lt;/xs:element&gt;  \n      &lt;/xs:sequence&gt;  \n    &lt;/xs:complexType&gt;  \n  &lt;/xs:element&gt;  \n&lt;/xs:schema&gt;  \n</code></pre><p> Create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  </p>\n<p> These blocks of code show helper methods that do all of this.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#2\">//************************************************************************************\n//\n//  Associate the schema with XML. Then, load the XML and validate it against\n//  the schema.\n//\n//************************************************************************************\n\nXmlDocument ^XMLDOMProcessing::XMLHelperMethods::LoadDocumentWithSchemaValidation(bool generateXML, bool generateSchema)\n{\n\tXmlReader ^reader;\n\n\tXmlReaderSettings ^settings = gcnew XmlReaderSettings();\n\n\t// Helper method to retrieve schema.\n\tXmlSchema ^schema = getSchema(generateSchema);\n\t\n\tif (schema == nullptr)\n\t{\n\t\treturn nullptr;\n\t}\n\n\tsettings-&gt;Schemas-&gt;Add(schema);\n\tsettings-&gt;ValidationEventHandler +=\n\t\tgcnew System::Xml::Schema::ValidationEventHandler\n\t\t(this, &amp;XMLDOMProcessing::XMLHelperMethods::OnValidationEventHandler);\n\tsettings-&gt;ValidationFlags = settings-&gt;ValidationFlags | XmlSchemaValidationFlags::ReportValidationWarnings;\n\tsettings-&gt;ValidationType = ValidationType::Schema;\n\n\ttry\n\t{\n\t\treader = XmlReader::Create(&quot;booksData.xml&quot;, settings);\n\t}\n\tcatch (System::IO::FileNotFoundException ^e1)\n\t{\n\t\tif (generateXML)\n\t\t{\n\t\t\tString ^xml = generateXMLString();\n\t\t\tarray&lt;Byte&gt; ^byteArray = Encoding::UTF8-&gt;GetBytes(xml);\n\t\t\tMemoryStream ^stream = gcnew MemoryStream(byteArray);\n\t\t\treader = XmlReader::Create(stream, settings);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t}\n\n\tXmlDocument ^doc = gcnew XmlDocument();\n\tdoc-&gt;PreserveWhitespace = true;\n\tdoc-&gt;Load(reader);\n\treader-&gt;Close();\n\n\treturn doc;\n}\n\n//************************************************************************************\n//\n//  Helper method that generates an XML Schema.\n//\n//************************************************************************************\n\nString ^XMLDOMProcessing::XMLHelperMethods::generateXMLSchema()\n{\n\tString ^xmlSchema = &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt; &quot; + \n\t\t&quot;&lt;xs:schema attributeFormDefault=\\&quot;unqualified\\&quot; &quot; + \n\t\t&quot;elementFormDefault=\\&quot;qualified\\&quot; targetNamespace=\\&quot;http://www.contoso.com/books\\&quot; &quot; + \n\t\t&quot;xmlns:xs=\\&quot;http://www.w3.org/2001/XMLSchema\\&quot;&gt; &quot; + &quot;&lt;xs:element name=\\&quot;books\\&quot;&gt; &quot; + \n\t\t&quot;&lt;xs:complexType&gt; &quot; + &quot;&lt;xs:sequence&gt; &quot; + &quot;&lt;xs:element maxOccurs=\\&quot;unbounded\\&quot; name=\\&quot;book\\&quot;&gt; &quot; + \n\t\t&quot;&lt;xs:complexType&gt; &quot; + &quot;&lt;xs:sequence&gt; &quot; + &quot;&lt;xs:element name=\\&quot;title\\&quot; type=\\&quot;xs:string\\&quot; /&gt; &quot; + \n\t\t&quot;&lt;xs:element name=\\&quot;price\\&quot; type=\\&quot;xs:decimal\\&quot; /&gt; &quot; + &quot;&lt;/xs:sequence&gt; &quot; + \n\t\t&quot;&lt;xs:attribute name=\\&quot;genre\\&quot; type=\\&quot;xs:string\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; + \n\t\t&quot;&lt;xs:attribute name=\\&quot;publicationdate\\&quot; type=\\&quot;xs:date\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; + \n\t\t&quot;&lt;xs:attribute name=\\&quot;ISBN\\&quot; type=\\&quot;xs:string\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; + &quot;&lt;/xs:complexType&gt; &quot; + \n\t\t&quot;&lt;/xs:element&gt; &quot; + &quot;&lt;/xs:sequence&gt; &quot; + &quot;&lt;/xs:complexType&gt; &quot; + &quot;&lt;/xs:element&gt; &quot; + &quot;&lt;/xs:schema&gt; &quot;;\n\t\n\treturn xmlSchema;\n}\n\n//************************************************************************************\n//\n//  Helper method that gets a schema\n//\n//************************************************************************************\n\nXmlSchema ^XMLDOMProcessing::XMLHelperMethods::getSchema(bool generateSchema)\n{\n\tXmlSchemaSet ^xs = gcnew XmlSchemaSet();\n\tXmlSchema ^schema;\n\ttry\n\t{\n\t\tschema = xs-&gt;Add(&quot;http://www.contoso.com/books&quot;, &quot;booksData.xsd&quot;);\n\t}\n\tcatch (System::IO::FileNotFoundException ^e1)\n\t{\n\t\tif (generateSchema)\n\t\t{\n\t\t\tString ^xmlSchemaString = generateXMLSchema();\n\t\t\tarray&lt;Byte&gt; ^byteArray = Encoding::UTF8-&gt;GetBytes(xmlSchemaString);\n\t\t\tMemoryStream ^stream = gcnew MemoryStream(byteArray);\n\t\t\tXmlReader ^reader = XmlReader::Create(stream);\n\t\t\tschema = xs-&gt;Add(&quot;http://www.contoso.com/books&quot;, reader);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t}\n\treturn schema;\n}\n//************************************************************************************\n//\n//  Helper method to validate the XML against the schema.\n//\n//************************************************************************************\nbool XMLDOMProcessing::XMLHelperMethods::validateXML(bool generateSchema, XmlDocument ^doc)\n{\n\tif (doc-&gt;Schemas-&gt;Count == 0)\n\t{\n\t\t// Helper method to retrieve schema.\n\t\tXmlSchema ^schema = getSchema(generateSchema);\n\t\tdoc-&gt;Schemas-&gt;Add(schema);\n\t}\n\n\tValidationEventHandler^ eventHandler = gcnew System::Xml::Schema::ValidationEventHandler\n\t\t(this, &amp;XMLDOMProcessing::XMLHelperMethods::OnValidationEventHandler);\n\n\t// Use an event handler to validate the XML node against the schema.\n\tdoc-&gt;Validate(eventHandler);\n\n\tif (_IsValid == false)\n\t{\n\t\t_IsValid = true;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n\n}\n//************************************************************************************\n//\n//  Event handler that is raised when XML doesn&#39;t validate against the schema.\n//\n//************************************************************************************\n\nvoid XMLDOMProcessing::XMLHelperMethods::OnValidationEventHandler(System::Object ^sender, System::Xml::Schema::ValidationEventArgs ^e)\n{\n\tif (e-&gt;Severity == XmlSeverityType::Warning)\n\t{\n\t\t// do nothing.\n\t}\n\telse if (e-&gt;Severity == XmlSeverityType::Error)\n\t{\n\t\t// set some global variables.\n\t\t_IsValid = false;\n\t\tValidationError = e-&gt;Message;\n\t}\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#2\">\n//************************************************************************************\n//\n//  Associate the schema with XML. Then, load the XML and validate it against\n//  the schema.\n//\n//************************************************************************************\npublic XmlDocument LoadDocumentWithSchemaValidation(bool generateXML, bool generateSchema)\n{\n    XmlReader reader;\n\n    XmlReaderSettings settings = new XmlReaderSettings();\n\n    // Helper method to retrieve schema.\n    XmlSchema schema = getSchema(generateSchema);\n\n    if (schema == null)\n    {\n        return null;\n    }\n\n    settings.Schemas.Add(schema);\n\n    settings.ValidationEventHandler += settings_ValidationEventHandler;\n    settings.ValidationFlags =\n        settings.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;\n    settings.ValidationType = ValidationType.Schema;\n\n    try\n    {\n        reader = XmlReader.Create(&quot;booksData.xml&quot;, settings);\n    }\n    catch (System.IO.FileNotFoundException)\n    {\n        if (generateXML)\n        {\n            string xml = generateXMLString();\n            byte[] byteArray = Encoding.UTF8.GetBytes(xml);\n            MemoryStream stream = new MemoryStream(byteArray);\n            reader = XmlReader.Create(stream, settings);\n        }\n        else\n        {\n            return null;\n        }\n\n    }\n\n    XmlDocument doc = new XmlDocument();\n    doc.PreserveWhitespace = true;\n    doc.Load(reader);\n    reader.Close();\n\n    return doc;\n}\n\n//************************************************************************************\n//\n//  Helper method that generates an XML Schema.\n//\n//************************************************************************************\nprivate string generateXMLSchema()\n{\n    string xmlSchema =\n        &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt; &quot; +\n        &quot;&lt;xs:schema attributeFormDefault=\\&quot;unqualified\\&quot; &quot; +\n        &quot;elementFormDefault=\\&quot;qualified\\&quot; targetNamespace=\\&quot;http://www.contoso.com/books\\&quot; &quot; +\n        &quot;xmlns:xs=\\&quot;http://www.w3.org/2001/XMLSchema\\&quot;&gt; &quot; +\n        &quot;&lt;xs:element name=\\&quot;books\\&quot;&gt; &quot; +\n        &quot;&lt;xs:complexType&gt; &quot; +\n        &quot;&lt;xs:sequence&gt; &quot; +\n        &quot;&lt;xs:element maxOccurs=\\&quot;unbounded\\&quot; name=\\&quot;book\\&quot;&gt; &quot; +\n        &quot;&lt;xs:complexType&gt; &quot; +\n        &quot;&lt;xs:sequence&gt; &quot; +\n        &quot;&lt;xs:element name=\\&quot;title\\&quot; type=\\&quot;xs:string\\&quot; /&gt; &quot; +\n        &quot;&lt;xs:element name=\\&quot;price\\&quot; type=\\&quot;xs:decimal\\&quot; /&gt; &quot; +\n        &quot;&lt;/xs:sequence&gt; &quot; +\n        &quot;&lt;xs:attribute name=\\&quot;genre\\&quot; type=\\&quot;xs:string\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; +\n        &quot;&lt;xs:attribute name=\\&quot;publicationdate\\&quot; type=\\&quot;xs:date\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; +\n        &quot;&lt;xs:attribute name=\\&quot;ISBN\\&quot; type=\\&quot;xs:string\\&quot; use=\\&quot;required\\&quot; /&gt; &quot; +\n        &quot;&lt;/xs:complexType&gt; &quot; +\n        &quot;&lt;/xs:element&gt; &quot; +\n        &quot;&lt;/xs:sequence&gt; &quot; +\n        &quot;&lt;/xs:complexType&gt; &quot; +\n        &quot;&lt;/xs:element&gt; &quot; +\n        &quot;&lt;/xs:schema&gt; &quot;;\n    return xmlSchema;\n}\n\n//************************************************************************************\n//\n//  Helper method that gets a schema\n//\n//************************************************************************************\nprivate XmlSchema getSchema(bool generateSchema)\n{\n    XmlSchemaSet xs = new XmlSchemaSet();\n    XmlSchema schema;\n    try\n    {\n        schema = xs.Add(&quot;http://www.contoso.com/books&quot;, &quot;booksData.xsd&quot;);\n    }\n    catch (System.IO.FileNotFoundException)\n    {\n        if (generateSchema)\n        {\n            string xmlSchemaString = generateXMLSchema();\n            byte[] byteArray = Encoding.UTF8.GetBytes(xmlSchemaString);\n            MemoryStream stream = new MemoryStream(byteArray);\n            XmlReader reader = XmlReader.Create(stream);\n            schema = xs.Add(&quot;http://www.contoso.com/books&quot;, reader);\n        }\n        else\n        {\n            return null;\n        }\n\n    }\n    return schema;\n}\n\n//************************************************************************************\n//\n//  Helper method to validate the XML against the schema.\n//\n//************************************************************************************\nprivate void validateXML(bool generateSchema, XmlDocument doc)\n{\n    if (doc.Schemas.Count == 0)\n    {\n        // Helper method to retrieve schema.\n        XmlSchema schema = getSchema(generateSchema);\n        doc.Schemas.Add(schema);\n    }\n\n    // Use an event handler to validate the XML node against the schema.\n    doc.Validate(settings_ValidationEventHandler);\n\n}\n\n//************************************************************************************\n//\n//  Event handler that is raised when XML doesn&#39;t validate against the schema.\n//\n//************************************************************************************\nvoid settings_ValidationEventHandler(object sender,\n    System.Xml.Schema.ValidationEventArgs e)\n{\n    if (e.Severity == XmlSeverityType.Warning)\n    {\n        System.Windows.Forms.MessageBox.Show\n            (&quot;The following validation warning occurred: &quot; + e.Message);\n    }\n    else if (e.Severity == XmlSeverityType.Error)\n    {\n        System.Windows.Forms.MessageBox.Show\n            (&quot;The following critical validation errors occurred: &quot; + e.Message);\n        Type objectType = sender.GetType();\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#2\">&#39;************************************************************************************\n&#39;\n&#39;  Associate the schema with XML. Then, load the XML and validate it against\n&#39;  the schema.\n&#39;\n&#39;************************************************************************************\nPublic Function LoadDocumentWithSchemaValidation(ByVal generateXML As Boolean, ByVal generateSchema As Boolean) As XmlDocument\n    Dim reader As XmlReader\n    Dim settings As XmlReaderSettings = New XmlReaderSettings\n    &#39; Helper method to retrieve schema.\n    Dim schema As XmlSchema = getSchema(generateSchema)\n    If (schema Is Nothing) Then\n        Return Nothing\n    End If\n    settings.Schemas.Add(schema)\n    AddHandler settings.ValidationEventHandler, AddressOf settings_ValidationEventHandler\n    settings.ValidationFlags = (settings.ValidationFlags Or XmlSchemaValidationFlags.ReportValidationWarnings)\n    settings.ValidationType = ValidationType.Schema\n    Try\n        reader = XmlReader.Create(&quot;booksData.xml&quot;, settings)\n    Catch ex As System.IO.FileNotFoundException\n        If generateXML Then\n            Dim xml As String = generateXMLString()\n            Dim byteArray() As Byte = Encoding.UTF8.GetBytes(xml)\n            Dim stream As MemoryStream = New MemoryStream(byteArray)\n            reader = XmlReader.Create(stream, settings)\n        Else\n            Return Nothing\n        End If\n    End Try\n    Dim doc As XmlDocument = New XmlDocument\n    doc.PreserveWhitespace = True\n    doc.Load(reader)\n    reader.Close()\n    Return doc\nEnd Function\n\n&#39;************************************************************************************\n&#39;\n&#39;  Helper method that generates an XML Schema.\n&#39;\n&#39;************************************************************************************\nPrivate Function generateXMLSchema() As String\n\n    Dim generatedXmlSchema As String = &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt; &quot; &amp; _\n            &quot;&lt;xs:schema attributeFormDefault=&quot;&quot;unqualified&quot;&quot; &quot; &amp; _\n            &quot;elementFormDefault=&quot;&quot;qualified&quot;&quot; targetNamespace=&quot;&quot;http://www.contoso.com/books&quot;&quot; &quot; &amp; _\n            &quot;xmlns:xs=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot;&gt; &quot; &amp; _\n            &quot;&lt;xs:element name=&quot;&quot;books&quot;&quot;&gt; &quot; &amp; _\n            &quot;&lt;xs:complexType&gt; &quot; &amp; _\n            &quot;&lt;xs:sequence&gt; &quot; &amp; _\n            &quot;&lt;xs:element maxOccurs=&quot;&quot;unbounded&quot;&quot; name=&quot;&quot;book&quot;&quot;&gt; &quot; &amp; _\n            &quot;&lt;xs:complexType&gt; &quot; &amp; _\n            &quot;&lt;xs:sequence&gt; &quot; &amp; _\n            &quot;&lt;xs:element name=&quot;&quot;title&quot;&quot; type=&quot;&quot;xs:string&quot;&quot; /&gt; &quot; &amp; _\n            &quot;&lt;xs:element name=&quot;&quot;price&quot;&quot; type=&quot;&quot;xs:decimal&quot;&quot; /&gt; &quot; &amp; _\n            &quot;&lt;/xs:sequence&gt; &quot; &amp; _\n            &quot;&lt;xs:attribute name=&quot;&quot;genre&quot;&quot; type=&quot;&quot;xs:string&quot;&quot; use=&quot;&quot;required&quot;&quot; /&gt; &quot; &amp; _\n            &quot;&lt;xs:attribute name=&quot;&quot;publicationdate&quot;&quot; type=&quot;&quot;xs:date&quot;&quot; use=&quot;&quot;required&quot;&quot; /&gt; &quot; &amp; _\n            &quot;&lt;xs:attribute name=&quot;&quot;ISBN&quot;&quot; type=&quot;&quot;xs:string&quot;&quot; use=&quot;&quot;required&quot;&quot; /&gt; &quot; &amp; _\n            &quot;&lt;/xs:complexType&gt; &quot; &amp; _\n            &quot;&lt;/xs:element&gt; &quot; &amp; _\n            &quot;&lt;/xs:sequence&gt; &quot; &amp; _\n            &quot;&lt;/xs:complexType&gt; &quot; &amp; _\n            &quot;&lt;/xs:element&gt; &quot; &amp; _\n            &quot;&lt;/xs:schema&gt; &quot;\n\n\n    Return generatedXmlSchema\n\nEnd Function\n\n&#39;************************************************************************************\n&#39;\n&#39;  Helper method that gets a schema\n&#39;\n&#39;************************************************************************************\nPrivate Function getSchema(ByVal generateSchema As Boolean) As XmlSchema\n    Dim xs As XmlSchemaSet = New XmlSchemaSet\n    Dim schema As XmlSchema\n    Try\n        schema = xs.Add(&quot;http://www.contoso.com/books&quot;, &quot;booksData.xsd&quot;)\n    Catch ex As System.IO.FileNotFoundException\n        If generateSchema Then\n            Dim xmlSchemaString As String = generateXMLSchema()\n            Dim byteArray() As Byte = Encoding.UTF8.GetBytes(xmlSchemaString)\n            Dim stream As MemoryStream = New MemoryStream(byteArray)\n            Dim reader As XmlReader = XmlReader.Create(stream)\n            schema = xs.Add(&quot;http://www.contoso.com/books&quot;, reader)\n        Else\n            Return Nothing\n        End If\n    End Try\n    Return schema\nEnd Function\n\n&#39;************************************************************************************\n&#39;\n&#39;  Helper method to validate the XML against the schema.\n&#39;\n&#39;************************************************************************************\nPrivate Sub validateXML(ByVal generateSchema As Boolean, ByVal doc As XmlDocument)\n    If (doc.Schemas.Count = 0) Then\n        &#39; Helper method to retrieve schema.\n        Dim schema As XmlSchema = getSchema(generateSchema)\n        doc.Schemas.Add(schema)\n    End If\n    &#39; Use an event handler to validate the XML node against the schema.\n    doc.Validate(AddressOf settings_ValidationEventHandler)\nEnd Sub\n\n&#39;************************************************************************************\n&#39;\n&#39;  Event handler that is raised when XML doesn&#39;t validate against the schema.\n&#39;\n&#39;************************************************************************************\nPrivate Sub settings_ValidationEventHandler(ByVal sender As Object, ByVal e As System.Xml.Schema.ValidationEventArgs)\n    If (e.Severity = XmlSeverityType.Warning) Then\n        System.Windows.Forms.MessageBox.Show((&quot;The following validation warning occurred: &quot; &amp; e.Message))\n    ElseIf (e.Severity = XmlSeverityType.Error) Then\n        System.Windows.Forms.MessageBox.Show((&quot;The following critical validation errors occurred: &quot; &amp; e.Message))\n        Dim objectType As Type = sender.GetType\n    End If\nEnd Sub\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p> <strong>Learn more:</strong> <a href=\"../Topic/Validating%20an%20XML%20Document%20in%20the%20DOM.md\" data-linktype=\"relative-path\">Validating an XML Document in the DOM</a>  </p>\n<p><a name=\"Navigate\"></a>   </p>\n<h2 id=\"navigate-the-document-tree\">Navigate the document tree</h2>\n<p> You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single <em>parent</em> node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have <em>child</em> nodes, which are nodes directly below them. Nodes that are at the same level are <em>siblings</em>.  </p>\n<p> The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  </p>\n<p> <strong>Start with the root node</strong>  </p>\n<p> This example gets the root node and then uses that node to output the contents of the document to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Display the document element.\n    Console.WriteLine(doc.DocumentElement.OuterXml);\n }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Display the document element.\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Display the document element.\n        Console.WriteLine(doc.DocumentElement.OuterXml)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><p> <strong>Get child nodes</strong>  </p>\n<p> This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNode.HasChildNodes Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlNode root = doc.FirstChild;\n\n    //Display the contents of the child nodes.\n    if (root.HasChildNodes)\n    {\n      for (int i=0; i&lt;root.ChildNodes.Count; i++)\n      {\n        Console.WriteLine(root.ChildNodes[i].InnerText);\n      }\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNode.HasChildNodes Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\n\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   XmlNode^ root = doc-&gt;FirstChild;\n   \n   //Display the contents of the child nodes.\n   if ( root-&gt;HasChildNodes )\n   {\n      for ( int i = 0; i &lt; root-&gt;ChildNodes-&gt;Count; i++ )\n      {\n         Console::WriteLine( root-&gt;ChildNodes[ i ]-&gt;InnerText );\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNode.HasChildNodes Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        \n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        Dim root As XmlNode = doc.FirstChild\n        \n        &#39;Display the contents of the child nodes.\n        If root.HasChildNodes Then\n            Dim i As Integer\n            For i = 0 To root.ChildNodes.Count - 1\n                Console.WriteLine(root.ChildNodes(i).InnerText)\n            Next i\n        End If\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><p> <strong>Get back to the parent node</strong>  </p>\n<p> Use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_ParentNode_\" data-linktype=\"relative-path\">ParentNode</a> property.  </p>\n<p> <strong>Refer to the last child node</strong>  </p>\n<p> This example writes the price of a book to the console (which is the last child node of a book node).  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNode.LastChild Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   XmlNode^ root = doc-&gt;FirstChild;\n   Console::WriteLine( &quot;Display the price element...&quot; );\n   Console::WriteLine( root-&gt;LastChild-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNode.LastChild Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlNode root = doc.FirstChild;\n\n    Console.WriteLine(&quot;Display the price element...&quot;);\n    Console.WriteLine(root.LastChild.OuterXml);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNode.LastChild Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        \n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        Dim root As XmlNode = doc.FirstChild\n        \n        Console.WriteLine(&quot;Display the price element...&quot;)\n        Console.WriteLine(root.LastChild.OuterXml)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><p> <strong>Navigate forward across siblings</strong>  </p>\n<p> This example moves forward from book to book. Book nodes are siblings to one another.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlNode.NextSibling Example#1\"> Imports System\n Imports System.Xml\n Imports Microsoft.VisualBasic\n \n public class Sample \n\n   public shared sub Main() \n\n       Dim doc as XmlDocument = new XmlDocument()\n       doc.Load(&quot;books.xml&quot;)\n \n       Dim currNode as XmlNode = doc.DocumentElement.FirstChild\n       Console.WriteLine(&quot;First book...&quot;)\n       Console.WriteLine(currNode.OuterXml)\n\n       Dim nextNode as XmlNode = currNode.NextSibling\n       Console.WriteLine(ControlChars.LF + &quot;Second book...&quot;)\n       Console.WriteLine(nextNode.OuterXml) \n \n   end sub\n end class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNode.NextSibling Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;books.xml&quot; );\n   XmlNode^ currNode = doc-&gt;DocumentElement-&gt;FirstChild;\n   Console::WriteLine( &quot;First book...&quot; );\n   Console::WriteLine( currNode-&gt;OuterXml );\n   XmlNode^ nextNode = currNode-&gt;NextSibling;\n   Console::WriteLine( &quot;\\r\\nSecond book...&quot; );\n   Console::WriteLine( nextNode-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNode.NextSibling Example#1\"> using System;\n using System.Xml;\n \n public class Sample {\n\n   public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.Load(&quot;books.xml&quot;);\n \n       XmlNode currNode = doc.DocumentElement.FirstChild;\n       Console.WriteLine(&quot;First book...&quot;);\n       Console.WriteLine(currNode.OuterXml);\n\n       XmlNode nextNode = currNode.NextSibling;\n       Console.WriteLine(&quot;\\r\\nSecond book...&quot;);\n       Console.WriteLine(nextNode.OuterXml); \n \n   }\n }\n</code></pre><p> <strong>Navigate backwards across siblings</strong>  </p>\n<p> This example moves backwards from book to book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNode.PreviousSibling Example#1\"> using System;\n using System.Xml;\n \n public class Sample {\n\n   public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.Load(&quot;books.xml&quot;);\n \n       XmlNode lastNode = doc.DocumentElement.LastChild;\n       Console.WriteLine(&quot;Last book...&quot;);\n       Console.WriteLine(lastNode.OuterXml);\n\n       XmlNode prevNode = lastNode.PreviousSibling;\n       Console.WriteLine(&quot;\\r\\nPrevious book...&quot;);\n       Console.WriteLine(prevNode.OuterXml);  \n   }\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNode.PreviousSibling Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;books.xml&quot; );\n   XmlNode^ lastNode = doc-&gt;DocumentElement-&gt;LastChild;\n   Console::WriteLine( &quot;Last book...&quot; );\n   Console::WriteLine( lastNode-&gt;OuterXml );\n   XmlNode^ prevNode = lastNode-&gt;PreviousSibling;\n   Console::WriteLine( &quot;\\r\\nPrevious book...&quot; );\n   Console::WriteLine( prevNode-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNode.PreviousSibling Example#1\"> Imports System\n Imports System.Xml\n Imports Microsoft.VisualBasic\n \n public class Sample \n\n   public shared sub Main() \n\n       Dim doc as XmlDocument = new XmlDocument()\n       doc.Load(&quot;books.xml&quot;)\n \n       Dim lastNode as XmlNode = doc.DocumentElement.LastChild\n       Console.WriteLine(&quot;Last book...&quot;)\n       Console.WriteLine(lastNode.OuterXml)\n\n       Dim prevNode as XmlNode = lastNode.PreviousSibling\n       Console.WriteLine(ControlChars.LF + &quot;Previous book...&quot;)\n       Console.WriteLine(prevNode.OuterXml)  \n   end sub\n end class\n</code></pre><p><a name=\"Find\"></a>   </p>\n<h2 id=\"find-nodes\">Find nodes</h2>\n<p> The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  </p>\n<p> <strong>Get a single node</strong>  </p>\n<p> This example locates a book by using the ISBN number.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#3\">XmlNode ^XMLDOMProcessing::XMLHelperMethods::GetBook(String ^uniqueAttribute, XmlDocument ^doc)\n{\n\tXmlNamespaceManager ^nsmgr = gcnew XmlNamespaceManager(doc-&gt;NameTable);\n\tnsmgr-&gt;AddNamespace(&quot;bk&quot;, &quot;http://www.contoso.com/books&quot;);\n\tString ^xPathString = &quot;//bk:books/bk:book[@ISBN=&#39;&quot; + uniqueAttribute + &quot;&#39;]&quot;;\n\tXmlNode ^xmlNode = doc-&gt;DocumentElement-&gt;SelectSingleNode(xPathString, nsmgr);\n\treturn xmlNode;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#3\">public XmlNode GetBook(string uniqueAttribute, XmlDocument doc)\n{\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);\n    nsmgr.AddNamespace(&quot;bk&quot;, &quot;http://www.contoso.com/books&quot;);\n    string xPathString = &quot;//bk:books/bk:book[@ISBN=&#39;&quot; + uniqueAttribute + &quot;&#39;]&quot;;\n    XmlNode xmlNode = doc.DocumentElement.SelectSingleNode(xPathString, nsmgr);\n   return xmlNode;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#3\">Public Function GetBook(ByVal uniqueAttribute As String, ByVal doc As XmlDocument) As XmlNode\n    Dim nsmgr As XmlNamespaceManager = New XmlNamespaceManager(doc.NameTable)\n    nsmgr.AddNamespace(&quot;bk&quot;, &quot;http://www.contoso.com/books&quot;)\n    Dim xPathString As String = (&quot;//bk:books/bk:book[@ISBN=&#39;&quot; _\n                &amp; (uniqueAttribute &amp; &quot;&#39;]&quot;))\n    Dim xmlNode As XmlNode = doc.DocumentElement.SelectSingleNode(xPathString, nsmgr)\n    Return xmlNode\nEnd Function\n</code></pre><p> The string used in this example is an Xpath query. You can find more examples of them here:   <a href=\"https://msdn.microsoft.com/en-us/library/ms256086.aspx\" data-linktype=\"external\">XPath examples</a>.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_GetElementById_\" data-linktype=\"relative-path\">GetElementById</a> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  </p>\n<p> After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#4\">void XMLDOMProcessing::XMLHelperMethods::GetBookInformation\n(String ^%title, String ^%ISBN, String ^%publicationDate, String ^%price, String ^%genre, XmlNode ^book)\n{\n\tXmlElement ^bookElement = safe_cast&lt;XmlElement^&gt;(book);\n\n\t// Get the attributes of a book.        \n\tXmlAttribute ^attr = bookElement-&gt;GetAttributeNode(&quot;ISBN&quot;);\n\tISBN = attr-&gt;InnerXml;\n\n\tattr = bookElement-&gt;GetAttributeNode(&quot;genre&quot;);\n\tgenre = attr-&gt;InnerXml;\n\n\tattr = bookElement-&gt;GetAttributeNode(&quot;publicationdate&quot;);\n\tpublicationDate = attr-&gt;InnerXml;\n\n\t// Get the values of child elements of a book.\n\ttitle = bookElement[&quot;title&quot;]-&gt;InnerText;\n\tprice = bookElement[&quot;price&quot;]-&gt;InnerText;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#4\">public void GetBookInformation(ref string title, ref string ISBN, ref string publicationDate,\n    ref string price, ref string genre, XmlNode book)\n{\n    XmlElement bookElement = (XmlElement)book;\n\n    // Get the attributes of a book.        \n    XmlAttribute attr = bookElement.GetAttributeNode(&quot;ISBN&quot;);\n    ISBN = attr.InnerXml;\n\n    attr = bookElement.GetAttributeNode(&quot;genre&quot;);\n    genre = attr.InnerXml;\n\n    attr = bookElement.GetAttributeNode(&quot;publicationdate&quot;);\n    publicationDate = attr.InnerXml;\n\n    // Get the values of child elements of a book.\n    title = bookElement[&quot;title&quot;].InnerText;\n    price = bookElement[&quot;price&quot;].InnerText;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#4\">Public Sub GetBookInformation(ByRef title As String, ByRef ISBN As String, ByRef publicationDate As String, ByRef price As String, ByRef genre As String, ByVal book As XmlNode)\n    Dim bookElement As XmlElement = CType(book, XmlElement)\n    &#39; Get the attributes of a book.        \n    Dim attr As XmlAttribute = bookElement.GetAttributeNode(&quot;ISBN&quot;)\n    ISBN = attr.InnerXml\n    attr = bookElement.GetAttributeNode(&quot;genre&quot;)\n    genre = attr.InnerXml\n    attr = bookElement.GetAttributeNode(&quot;publicationdate&quot;)\n    publicationDate = attr.InnerXml\n    &#39; Get the values of child elements of a book.\n    title = bookElement(&quot;title&quot;).InnerText\n    price = bookElement(&quot;price&quot;).InnerText\nEnd Sub\n</code></pre><p> <strong>Get a collection of nodes</strong>  </p>\n<p> This example selects all books where the author&#39;s last name is <strong>Austen</strong>, and then changes the price of those books.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNode.SelectNodes Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;booksort.xml&quot; );\n   XmlNodeList^ nodeList;\n   XmlNode^ root = doc-&gt;DocumentElement;\n   nodeList = root-&gt;SelectNodes( &quot;descendant::book[author/last-name=&#39;Austen&#39;]&quot; );\n   \n   //Change the price on the books.\n   System::Collections::IEnumerator^ myEnum = nodeList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      XmlNode^ book = safe_cast&lt;XmlNode^&gt;(myEnum-&gt;Current);\n      book-&gt;LastChild-&gt;InnerText = &quot;15.95&quot;;\n   }\n\n   Console::WriteLine( &quot;Display the modified XML document....&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNode.SelectNodes Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    XmlDocument doc = new XmlDocument();\n    doc.Load(&quot;booksort.xml&quot;);\n\n    XmlNodeList nodeList;\n    XmlNode root = doc.DocumentElement;\n\n    nodeList=root.SelectNodes(&quot;descendant::book[author/last-name=&#39;Austen&#39;]&quot;);\n \n    //Change the price on the books.\n    foreach (XmlNode book in nodeList)\n    {\n      book.LastChild.InnerText=&quot;15.95&quot;;\n    }\n\n    Console.WriteLine(&quot;Display the modified XML document....&quot;);\n    doc.Save(Console.Out);\n    \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNode.SelectNodes Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39;Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.Load(&quot;booksort.xml&quot;)\n           \n    Dim book as XmlNode\n    Dim nodeList as XmlNodeList \n    Dim root as XmlNode = doc.DocumentElement\n\n    nodeList=root.SelectNodes(&quot;descendant::book[author/last-name=&#39;Austen&#39;]&quot;)\n \n    &#39;Change the price on the books.\n    for each book in nodeList      \n      book.LastChild.InnerText=&quot;15.95&quot;\n    next \n\n    Console.WriteLine(&quot;Display the modified XML document....&quot;)\n    doc.Save(Console.Out)\n    \n  end sub\nend class\n</code></pre><p> You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.Load(&quot;books.xml&quot;);\n\n    //Display all the book titles.\n    XmlNodeList elemList = doc.GetElementsByTagName(&quot;title&quot;);\n    for (int i=0; i &lt; elemList.Count; i++)\n    {   \n      Console.WriteLine(elemList[i].InnerXml);\n    }  \n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\n\nint main()\n{\n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;books.xml&quot; );\n   \n   //Display all the book titles.\n   XmlNodeList^ elemList = doc-&gt;GetElementsByTagName( &quot;title&quot; );\n   for ( int i = 0; i &lt; elemList-&gt;Count; i++ )\n   {\n      Console::WriteLine( elemList[ i ]-&gt;InnerXml );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.Load(&quot;books.xml&quot;)\n        \n        &#39;Display all the book titles.\n        Dim elemList As XmlNodeList = doc.GetElementsByTagName(&quot;title&quot;)\n        Dim i As Integer\n        For i = 0 To elemList.Count - 1\n            Console.WriteLine(elemList(i).InnerXml)\n        Next i\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p> <strong>Learn more:</strong> <a href=\"../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md\" data-linktype=\"relative-path\">Select Nodes Using XPath Navigation</a>  </p>\n<p><a name=\"Edit\"></a>   </p>\n<h2 id=\"edit-nodes\">Edit nodes</h2>\n<p> This example edits a book node and its attributes.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#7\">bool XMLDOMProcessing::XMLHelperMethods::editBook(String ^title, String ^ISBN, String ^publicationDate, String ^genre, String ^price, XmlNode ^book, bool validateNode, bool generateSchema)\n{\n\n\tXmlElement ^bookElement = safe_cast&lt;XmlElement^&gt;(book);\n\n\t// Get the attributes of a book.        \n\tbookElement-&gt;SetAttribute(&quot;ISBN&quot;, ISBN);\n\tbookElement-&gt;SetAttribute(&quot;genre&quot;, genre);\n\tbookElement-&gt;SetAttribute(&quot;publicationdate&quot;, publicationDate);\n\n\t// Get the values of child elements of a book.\n\tbookElement[&quot;title&quot;]-&gt;InnerText = title;\n\tbookElement[&quot;price&quot;]-&gt;InnerText = price;\n\n\tif (validateNode)\n\t{\n\t\tif (validateXML(generateSchema, bookElement-&gt;OwnerDocument))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#7\">public void editBook(string title, string ISBN, string publicationDate,\n    string genre, string price, XmlNode book, bool validateNode, bool generateSchema)\n{\n\n    XmlElement bookElement = (XmlElement)book;\n\n    // Get the attributes of a book.        \n    bookElement.SetAttribute(&quot;ISBN&quot;, ISBN);\n    bookElement.SetAttribute(&quot;genre&quot;, genre);\n    bookElement.SetAttribute(&quot;publicationdate&quot;, publicationDate);\n\n    // Get the values of child elements of a book.\n    bookElement[&quot;title&quot;].InnerText = title;\n    bookElement[&quot;price&quot;].InnerText = price;\n\n    if (validateNode)\n    {\n        validateXML(generateSchema, bookElement.OwnerDocument);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#7\">Public Sub editBook(ByVal title As String, ByVal ISBN As String,\n                    ByVal publicationDate As String, ByVal genre As String,\n                    ByVal price As String, ByVal book As XmlNode, ByVal validateNode As Boolean,\n                    ByVal generateSchema As Boolean)\n\n    Dim bookElement As XmlElement = CType(book, XmlElement)\n\n    &#39; Get the attributes of a book.        \n    bookElement.SetAttribute(&quot;ISBN&quot;, ISBN)\n    bookElement.SetAttribute(&quot;genre&quot;, genre)\n    bookElement.SetAttribute(&quot;publicationdate&quot;, publicationDate)\n\n    &#39; Get the values of child elements of a book.\n    bookElement(&quot;title&quot;).InnerText = title\n    bookElement(&quot;price&quot;).InnerText = price\n    If validateNode Then\n        validateXML(generateSchema, bookElement.OwnerDocument)\n    End If\n\nEnd Sub\n</code></pre><p> <strong>Learn more:</strong> <a href=\"../Topic/Modifying%20Nodes,%20Content,%20and%20Values%20in%20an%20XML%20Document.md\" data-linktype=\"relative-path\">Modifying Nodes, Content, and Values in an XML Document</a>  </p>\n<p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p><a name=\"Add\"></a>   </p>\n<h2 id=\"add-nodes\">Add nodes</h2>\n<p> To add a node, use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a> method or the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateNode_\" data-linktype=\"relative-path\">CreateNode</a> method.  </p>\n<p> To add a data node such as a book, use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a> method.  </p>\n<p> For any other type of node such as a comment, whitespace node, or CDATA node, use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateNode_\" data-linktype=\"relative-path\">CreateNode</a> method.  </p>\n<p> This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#5\">XmlElement ^XMLDOMProcessing::XMLHelperMethods::AddNewBook(String ^genre, String ^ISBN, String ^misc, String ^title, String ^price, XmlDocument ^doc)\n{\n\t// Create a new book element.\n\tXmlElement ^bookElement = doc-&gt;CreateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;);\n\n\t// Create attributes for book and append them to the book element.\n\tXmlAttribute ^attribute = doc-&gt;CreateAttribute(&quot;genre&quot;);\n\tattribute-&gt;Value = genre;\n\tbookElement-&gt;Attributes-&gt;Append(attribute);\n\n\tattribute = doc-&gt;CreateAttribute(&quot;ISBN&quot;);\n\tattribute-&gt;Value = ISBN;\n\tbookElement-&gt;Attributes-&gt;Append(attribute);\n\n\tattribute = doc-&gt;CreateAttribute(&quot;publicationdate&quot;);\n\tattribute-&gt;Value = misc;\n\tbookElement-&gt;Attributes-&gt;Append(attribute);\n\n\t// Create and append a child element for the title of the book.\n\tXmlElement ^titleElement = doc-&gt;CreateElement(&quot;title&quot;);\n\ttitleElement-&gt;InnerText = title;\n\tbookElement-&gt;AppendChild(titleElement);\n\n\t// Introduce a newline character so that XML is nicely formatted.\n\tbookElement-&gt;InnerXml = bookElement-&gt;InnerXml-&gt;Replace(titleElement-&gt;OuterXml, &quot;\\n    &quot; + titleElement-&gt;OuterXml + &quot; \\n    &quot;);\n\n\t// Create and append a child element for the price of the book.\n\tXmlElement ^priceElement = doc-&gt;CreateElement(&quot;price&quot;);\n\tpriceElement-&gt;InnerText = price;\n\tbookElement-&gt;AppendChild(priceElement);\n\n\t// Introduce a newline character so that XML is nicely formatted.\n\tbookElement-&gt;InnerXml = bookElement-&gt;InnerXml-&gt;Replace(priceElement-&gt;OuterXml, priceElement-&gt;OuterXml + &quot;   \\n  &quot;);\n\n\treturn bookElement;\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#5\">public XmlElement AddNewBook(string genre, string ISBN, string misc, \n    string title, string price, XmlDocument doc)\n{\n    // Create a new book element.\n    XmlElement bookElement = doc.CreateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;);\n\n    // Create attributes for book and append them to the book element.\n    XmlAttribute attribute = doc.CreateAttribute(&quot;genre&quot;);\n    attribute.Value = genre;\n    bookElement.Attributes.Append(attribute);\n\n    attribute = doc.CreateAttribute(&quot;ISBN&quot;);\n    attribute.Value = ISBN;\n    bookElement.Attributes.Append(attribute);\n\n    attribute = doc.CreateAttribute(&quot;publicationdate&quot;);\n    attribute.Value = misc;\n    bookElement.Attributes.Append(attribute);\n\n    // Create and append a child element for the title of the book.\n    XmlElement titleElement = doc.CreateElement(&quot;title&quot;);\n    titleElement.InnerText = title;\n    bookElement.AppendChild(titleElement);\n\n    // Introduce a newline character so that XML is nicely formatted.\n    bookElement.InnerXml = \n        bookElement.InnerXml.Replace(titleElement.OuterXml, \n        &quot;\\n    &quot; + titleElement.OuterXml + &quot; \\n    &quot;);\n    \n    // Create and append a child element for the price of the book.\n    XmlElement priceElement = doc.CreateElement(&quot;price&quot;);\n    priceElement.InnerText= price;\n    bookElement.AppendChild(priceElement);\n\n    // Introduce a newline character so that XML is nicely formatted.\n    bookElement.InnerXml =\n        bookElement.InnerXml.Replace(priceElement.OuterXml, priceElement.OuterXml + &quot;   \\n  &quot;);\n\n    return bookElement;\n     \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#5\">Public Function AddNewBook(ByVal genre As String, ByVal ISBN As String, ByVal misc As String, ByVal title As String, ByVal price As String, ByVal doc As XmlDocument) As XmlElement\n    &#39; Create a new book element.\n    Dim bookElement As XmlElement = doc.CreateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;)\n\n    &#39; Create attributes for book and append them to the book element.\n    Dim attribute As XmlAttribute = doc.CreateAttribute(&quot;genre&quot;)\n    attribute.Value = genre\n    bookElement.Attributes.Append(attribute)\n\n    attribute = doc.CreateAttribute(&quot;ISBN&quot;)\n    attribute.Value = ISBN\n    bookElement.Attributes.Append(attribute)\n\n    attribute = doc.CreateAttribute(&quot;publicationdate&quot;)\n    attribute.Value = misc\n    bookElement.Attributes.Append(attribute)\n\n    &#39; Create and append a child element for the title of the book.\n    Dim titleElement As XmlElement = doc.CreateElement(&quot;title&quot;)\n    titleElement.InnerText = title\n    bookElement.AppendChild(titleElement)\n\n    &#39; Introduce a newline character so that XML is nicely formatted.\n    bookElement.InnerXml = bookElement.InnerXml.Replace(titleElement.OuterXml, _\n                           &quot;\\n   &quot; &amp; titleElement.OuterXml &amp; &quot; &quot; &amp; ControlChars.NewLine + &quot;    &quot;)\n    &#39; Create and append a child element for the price of the book.\n    Dim priceElement As XmlElement = doc.CreateElement(&quot;price&quot;)\n    priceElement.InnerText = price\n    bookElement.AppendChild(priceElement)\n\n    &#39; Introduce a newline character so that XML is nicely formatted.\n    bookElement.InnerXml = bookElement.InnerXml.Replace(priceElement.OuterXml,\n                                                        (priceElement.OuterXml &amp; &quot;   &quot; &amp; ControlChars.NewLine &amp; &quot;  &quot;))\n    Return bookElement\nEnd Function\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p> <strong>Learn more:</strong> <a href=\"../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md\" data-linktype=\"relative-path\">Inserting Nodes into an XML Document</a>  </p>\n<p><a name=\"Remove\"></a>   </p>\n<h2 id=\"remove-nodes\">Remove nodes</h2>\n<p> To remove a node, use the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_RemoveChild_\" data-linktype=\"relative-path\">RemoveChild</a> method.  </p>\n<p> This example removes a book from the document and any whitespace that appears just before the book node.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#6\">void XMLDOMProcessing::XMLHelperMethods::deleteBook(XmlNode ^book)\n{\n\tXmlNode ^prevNode = book-&gt;PreviousSibling;\n\n\tbook-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(book);\n\n\n\tif (prevNode-&gt;NodeType == XmlNodeType::Whitespace || prevNode-&gt;NodeType == XmlNodeType::SignificantWhitespace)\n\t{\n\t\tprevNode-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(prevNode);\n\t}\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#6\">public void deleteBook(XmlNode book)\n{\n    XmlNode prevNode = book.PreviousSibling;\n    \n    book.OwnerDocument.DocumentElement.RemoveChild(book);\n\n\n    if (prevNode.NodeType == XmlNodeType.Whitespace || \n        prevNode.NodeType == XmlNodeType.SignificantWhitespace)\n    {\n        prevNode.OwnerDocument.DocumentElement.RemoveChild(prevNode);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#6\">Public Sub deleteBook(ByVal book As XmlNode)\n\n    Dim prevNode As XmlNode = book.PreviousSibling\n    book.OwnerDocument.DocumentElement.RemoveChild(book)\n\n    If ((prevNode.NodeType = XmlNodeType.Whitespace) _\n                OrElse (prevNode.NodeType = XmlNodeType.SignificantWhitespace)) Then\n        prevNode.OwnerDocument.DocumentElement.RemoveChild(prevNode)\n\n    End If\nEnd Sub\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a>  </p>\n<p> <strong>Learn more:</strong> <a href=\"../Topic/Removing%20Nodes,%20Content,%20and%20Values%20from%20an%20XML%20Document.md\" data-linktype=\"relative-path\">Removing Nodes, Content, and Values from an XML Document</a>  </p>\n<p><a name=\"Position\"></a>   </p>\n<h2 id=\"position-nodes\">Position nodes</h2>\n<p> You can choose where you want a node to appear in your document by using the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertBefore_\" data-linktype=\"relative-path\">InsertBefore</a> and <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertAfter_\" data-linktype=\"relative-path\">InsertAfter</a> methods.  </p>\n<p> This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  </p>\n<p> These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLProcessingApp#8\">//************************************************************************************\n//\n//  Summary: Move elements up in the XML.\n//  \n//\n//************************************************************************************\nvoid XMLDOMProcessing::XMLHelperMethods::MoveElementUp(XmlNode ^book)\n{\n\tXmlNode ^previousNode = book-&gt;PreviousSibling;\n\twhile (previousNode != nullptr &amp;&amp; (previousNode-&gt;NodeType != XmlNodeType::Element))\n\t{\n\t\tpreviousNode = previousNode-&gt;PreviousSibling;\n\t}\n\tif (previousNode != nullptr)\n\t{\n\t\tXmlNode ^newLineNode = book-&gt;NextSibling;\n\t\tbook-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(book);\n\t\tif (newLineNode-&gt;NodeType == XmlNodeType::Whitespace || newLineNode-&gt;NodeType == XmlNodeType::SignificantWhitespace)\n\t\t{\n\t\t\tnewLineNode-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(newLineNode);\n\t\t}\n\t\tInsertBookElement(safe_cast&lt;XmlElement^&gt;(book), Constants::positionAbove, previousNode, false, false);\n\t}\n}\n\n//************************************************************************************\n//\n//  Summary: Move elements down in the XML.\n//  \n//\n//************************************************************************************\nvoid XMLDOMProcessing::XMLHelperMethods::MoveElementDown(XmlNode ^book)\n{\n\t// Walk backwards until we find an element - ignore text nodes\n\tXmlNode ^NextNode = book-&gt;NextSibling;\n\twhile (NextNode != nullptr &amp;&amp; (NextNode-&gt;NodeType != XmlNodeType::Element))\n\t{\n\t\tNextNode = NextNode-&gt;NextSibling;\n\t}\n\tif (NextNode != nullptr)\n\t{\n\t\tXmlNode ^newLineNode = book-&gt;PreviousSibling;\n\t\tbook-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(book);\n\t\tif (newLineNode-&gt;NodeType == XmlNodeType::Whitespace || newLineNode-&gt;NodeType == XmlNodeType::SignificantWhitespace)\n\t\t{\n\t\t\tnewLineNode-&gt;OwnerDocument-&gt;DocumentElement-&gt;RemoveChild(newLineNode);\n\t\t}\n\n\t\tInsertBookElement(safe_cast&lt;XmlElement^&gt;(book), Constants::positionBelow, NextNode, false, false);\n\t}\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLProcessingApp#8\">//************************************************************************************\n//\n//  Summary: Move elements up in the XML.\n//  \n//\n//************************************************************************************\n\npublic void MoveElementUp(XmlNode book)\n{\n    XmlNode previousNode = book.PreviousSibling;\n    while (previousNode != null &amp;&amp; (previousNode.NodeType != XmlNodeType.Element))\n    {\n        previousNode = previousNode.PreviousSibling;\n    }\n    if (previousNode != null)\n    {\n        XmlNode newLineNode = book.NextSibling;\n        book.OwnerDocument.DocumentElement.RemoveChild(book);\n        if (newLineNode.NodeType == XmlNodeType.Whitespace | \n            newLineNode.NodeType == XmlNodeType.SignificantWhitespace)\n        {\n            newLineNode.OwnerDocument.DocumentElement.RemoveChild(newLineNode);\n        }\n        InsertBookElement((XmlElement)book, Constants.positionAbove, \n            previousNode, false, false);\n    }\n}\n\n\n//************************************************************************************\n//\n//  Summary: Move elements down in the XML.\n//  \n//\n//************************************************************************************\npublic void MoveElementDown(XmlNode book)\n{\n    // Walk backwards until we find an element - ignore text nodes\n    XmlNode NextNode = book.NextSibling;\n    while (NextNode != null &amp;&amp; (NextNode.NodeType != XmlNodeType.Element))\n    {\n        NextNode = NextNode.NextSibling;\n    }\n    if (NextNode != null)\n    {\n        XmlNode newLineNode = book.PreviousSibling;\n        book.OwnerDocument.DocumentElement.RemoveChild(book);\n        if (newLineNode.NodeType == XmlNodeType.Whitespace |\n            newLineNode.NodeType == XmlNodeType.SignificantWhitespace)\n        {\n            newLineNode.OwnerDocument.DocumentElement.RemoveChild(newLineNode);\n        }\n\n        InsertBookElement((XmlElement)book, Constants.positionBelow, \n            NextNode, false, false);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLProcessingApp#8\">&#39;************************************************************************************\n&#39;\n&#39;  Summary: Move elements up in the XML.\n&#39;  \n&#39;\n&#39;************************************************************************************\nPublic Sub MoveElementUp(ByVal book As XmlNode)\n    Dim previousNode As XmlNode = book.PreviousSibling\n\n    While ((Not (previousNode) Is Nothing) _\n                AndAlso (previousNode.NodeType &lt;&gt; XmlNodeType.Element))\n        previousNode = previousNode.PreviousSibling\n\n    End While\n    If (Not (previousNode) Is Nothing) Then\n        Dim newLineNode As XmlNode = book.NextSibling\n        book.OwnerDocument.DocumentElement.RemoveChild(book)\n\n        If ((newLineNode.NodeType = XmlNodeType.Whitespace) _\n                    Or (newLineNode.NodeType = XmlNodeType.SignificantWhitespace)) Then\n            newLineNode.OwnerDocument.DocumentElement.RemoveChild(newLineNode)\n        End If\n\n        InsertBookElement(CType(book, XmlElement), Constants.positionAbove,\n                          previousNode, False, False)\n    End If\nEnd Sub\n\n&#39;************************************************************************************\n&#39;\n&#39;  Summary: Move elements down in the XML.\n&#39;  \n&#39;\n&#39;************************************************************************************\nPublic Sub MoveElementDown(ByVal book As XmlNode)\n    &#39; Walk backwards until we find an element - ignore text nodes\n    Dim NextNode As XmlNode = book.NextSibling\n\n    While ((Not (NextNode) Is Nothing) _\n                AndAlso (NextNode.NodeType &lt;&gt; XmlNodeType.Element))\n        NextNode = NextNode.NextSibling\n\n    End While\n\n    If (Not (NextNode) Is Nothing) Then\n        Dim newLineNode As XmlNode = book.PreviousSibling\n        book.OwnerDocument.DocumentElement.RemoveChild(book)\n\n        If ((newLineNode.NodeType = XmlNodeType.Whitespace) _\n                    Or (newLineNode.NodeType = XmlNodeType.SignificantWhitespace)) Then\n            newLineNode.OwnerDocument.DocumentElement.RemoveChild(newLineNode)\n        End If\n\n        InsertBookElement(CType(book, XmlElement), Constants.positionBelow,\n                          NextNode, False, False)\n    End If\nEnd Sub\n</code></pre><p> <strong>Complete sample:</strong> <a href=\"https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode\" data-linktype=\"external\">Manipulate XML in-Memory by using the XmlDocument class and other related types</a></p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument__ctor\" data-linktype=\"self-bookmark\">XmlDocument()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument__ctor_System_Xml_XmlImplementation_\" data-linktype=\"self-bookmark\">XmlDocument(XmlImplementation)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlDocument</code> class with the specified <a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument__ctor_System_Xml_XmlNameTable_\" data-linktype=\"self-bookmark\">XmlDocument(XmlNameTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlDocument</code> class with the specified <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_BaseURI\" data-linktype=\"self-bookmark\">BaseURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base URI of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_DocumentElement\" data-linktype=\"self-bookmark\">DocumentElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the root <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> for the document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_DocumentType\" data-linktype=\"self-bookmark\">DocumentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the node containing the DOCTYPE declaration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Implementation\" data-linktype=\"self-bookmark\">Implementation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a> object for the current document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_InnerText\" data-linktype=\"self-bookmark\">InnerText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_InnerXml\" data-linktype=\"self-bookmark\">InnerXml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the markup representing the children of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local name of the node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the qualified name of the node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NameTable\" data-linktype=\"self-bookmark\">NameTable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_OwnerDocument\" data-linktype=\"self-bookmark\">OwnerDocument</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to which the current node belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_ParentNode\" data-linktype=\"self-bookmark\">ParentNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent node of this node (for nodes that can have parents).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_PreserveWhitespace\" data-linktype=\"self-bookmark\">PreserveWhitespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to preserve white space in element content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_SchemaInfo\" data-linktype=\"self-bookmark\">SchemaInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Schemas\" data-linktype=\"self-bookmark\">Schemas</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object associated with this <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_XmlResolver\" data-linktype=\"self-bookmark\">XmlResolver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> to use for resolving external resources.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CloneNode_System_Boolean_\" data-linktype=\"self-bookmark\">CloneNode(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a duplicate of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateAttribute_System_String_\" data-linktype=\"self-bookmark\">CreateAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified qualified name and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateAttribute_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateAttribute(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateCDataSection_System_String_\" data-linktype=\"self-bookmark\">CreateCDataSection(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlcdatasection\" data-linktype=\"relative-path\">XmlCDataSection</a> containing the specified data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateComment_System_String_\" data-linktype=\"self-bookmark\">CreateComment(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlcomment\" data-linktype=\"relative-path\">XmlComment</a> containing the specified data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateDefaultAttribute_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateDefaultAttribute(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a default attribute with the specified prefix, local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateDocumentFragment\" data-linktype=\"self-bookmark\">CreateDocumentFragment()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmldocumentfragment\" data-linktype=\"relative-path\">XmlDocumentFragment</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateDocumentType_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateDocumentType(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.xml.xmldocumenttype\" data-linktype=\"relative-path\">XmlDocumentType</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateElement_System_String_\" data-linktype=\"self-bookmark\">CreateElement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an element with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateElement_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateElement(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> with the qualified name and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateElement_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateElement(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an element with the specified <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateEntityReference_System_String_\" data-linktype=\"self-bookmark\">CreateEntityReference(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a> with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateNavigator\" data-linktype=\"self-bookmark\">CreateNavigator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object for navigating this document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateNavigator_System_Xml_XmlNode_\" data-linktype=\"self-bookmark\">CreateNavigator(XmlNode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object for navigating this document positioned on the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateNode_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateNode(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified node type, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateNode_System_Xml_XmlNodeType_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateNode(XmlNodeType,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateNode_System_Xml_XmlNodeType_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateNode(XmlNodeType,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateProcessingInstruction_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateProcessingInstruction(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlprocessinginstruction\" data-linktype=\"relative-path\">XmlProcessingInstruction</a> with the specified name and data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateSignificantWhitespace_System_String_\" data-linktype=\"self-bookmark\">CreateSignificantWhitespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlsignificantwhitespace\" data-linktype=\"relative-path\">XmlSignificantWhitespace</a> node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateTextNode_System_String_\" data-linktype=\"self-bookmark\">CreateTextNode(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmltext\" data-linktype=\"relative-path\">XmlText</a> with the specified text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateWhitespace_System_String_\" data-linktype=\"self-bookmark\">CreateWhitespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlwhitespace\" data-linktype=\"relative-path\">XmlWhitespace</a> node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_CreateXmlDeclaration_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateXmlDeclaration(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmldeclaration\" data-linktype=\"relative-path\">XmlDeclaration</a> node with the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_GetElementById_System_String_\" data-linktype=\"self-bookmark\">GetElementById(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> with the specified ID.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_GetElementsByTagName_System_String_\" data-linktype=\"self-bookmark\">GetElementsByTagName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_GetElementsByTagName_System_String_System_String_\" data-linktype=\"self-bookmark\">GetElementsByTagName(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_ImportNode_System_Xml_XmlNode_System_Boolean_\" data-linktype=\"self-bookmark\">ImportNode(XmlNode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Imports a node from another document to the current document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Load_System_IO_Stream_\" data-linktype=\"self-bookmark\">Load(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the XML document from the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Load_System_IO_TextReader_\" data-linktype=\"self-bookmark\">Load(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the XML document from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Load_System_String_\" data-linktype=\"self-bookmark\">Load(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the XML document from the specified URL.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Load_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">Load(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the XML document from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_LoadXml_System_String_\" data-linktype=\"self-bookmark\">LoadXml(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the XML document from the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_ReadNode_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadNode(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object based on the information in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The reader must be positioned on a node or attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Save_System_IO_Stream_\" data-linktype=\"self-bookmark\">Save(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the XML document to the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Save_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">Save(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the XML document to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Save_System_String_\" data-linktype=\"self-bookmark\">Save(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the XML document to the specified file. If the specified file exists, this method overwrites it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Save_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">Save(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the XML document to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Validate_System_Xml_Schema_ValidationEventHandler_\" data-linktype=\"self-bookmark\">Validate(ValidationEventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> against the XML Schema Definition Language (XSD) schemas contained in the <span class=\"xref\">stem.Xml.XmlDocument.Schemas*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_Validate_System_Xml_Schema_ValidationEventHandler_System_Xml_XmlNode_\" data-linktype=\"self-bookmark\">Validate(ValidationEventHandler,XmlNode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object specified against the XML Schema Definition Language (XSD) schemas in the <span class=\"xref\">stem.Xml.XmlDocument.Schemas*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_WriteContentTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteContentTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves all the children of the <code>XmlDocument</code> node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the <code>XmlDocument</code> node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeChanged\" data-linktype=\"self-bookmark\">NodeChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Xml.XmlNode.Value*</span> of a node belonging to this document has been changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeChanging\" data-linktype=\"self-bookmark\">NodeChanging</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Xml.XmlNode.Value*</span> of a node belonging to this document is about to be changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeInserted\" data-linktype=\"self-bookmark\">NodeInserted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a node belonging to this document has been inserted into another node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeInserting\" data-linktype=\"self-bookmark\">NodeInserting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a node belonging to this document is about to be inserted into another node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeRemoved\" data-linktype=\"self-bookmark\">NodeRemoved</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a node belonging to this document has been removed from its parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlDocument_NodeRemoving\" data-linktype=\"self-bookmark\">NodeRemoving</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a node belonging to this document is about to be removed from the document.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument__ctor\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDocument()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlDocument ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is an example of load-time validation. A document type definition (DTD) validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is passed to the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Load_\" data-linktype=\"relative-path\">Load</a> method and a <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to throw an exception and stop the load process when a validation error is found by not specifying the <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a>. For more information about validating XML data, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlDocument.cctor#1\">Option Explicit On\nOption Strict On\n\nImports System\nImports System.Xml\nImports System.Xml.Schema\n\nNamespace Microsoft.Samples.Xml\n\n    NotInheritable Class XmlDocumentSample\n\n        Private Sub New()\n\n        End Sub\n\n        Shared reader As XmlReader\n        Shared filename As String = &quot;bookdtd.xml&quot;\n\n        Public Shared Sub Main()\n\n\n            Dim eventHandler As New ValidationEventHandler(AddressOf XmlDocumentSample.ValidationCallback)\n\n            Try\n\n                &#39; Create the validating reader and specify DTD validation.\n                Dim settings As New XmlReaderSettings()\n                settings.DtdProcessing = DtdProcessing.Parse\n                settings.ValidationType = ValidationType.DTD\n                AddHandler settings.ValidationEventHandler, eventHandler\n\n                reader = XmlReader.Create(filename, settings)\n\n                &#39; Pass the validating reader to the XML document.\n                &#39; Validation fails due to an undefined attribute, but the \n                &#39; data is still loaded into the document.\n                Dim doc As New XmlDocument()\n                doc.Load(reader)\n                Console.WriteLine(doc.OuterXml)\n            \n            Finally\n\n                If Not (reader Is Nothing) Then\n                    reader.Close()\n                End If\n\n            End Try\n\n        End Sub\n\n        &#39; Display the validation error.\n        Private Shared Sub ValidationCallback(ByVal sender As Object, ByVal args As ValidationEventArgs)\n            Console.WriteLine(&quot;Validation error loading: {0}&quot;, filename)\n            Console.WriteLine(args.Message)\n        End Sub\n\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlDocument.cctor#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\n\nnamespace Microsoft.Samples.Xml\n{\n    sealed class XmlDocumentSample\n    {\n        private XmlDocumentSample() { }\n\n        static XmlReader reader;\n        static String filename = &quot;bookdtd.xml&quot;;\n\n        public static void Main()\n        {\n\n            ValidationEventHandler eventHandler = new ValidationEventHandler(XmlDocumentSample.ValidationCallback);\n\n            try\n            {\n                // Create the validating reader and specify DTD validation.\n                XmlReaderSettings settings = new XmlReaderSettings();\n                settings.DtdProcessing = DtdProcessing.Parse;\n                settings.ValidationType = ValidationType.DTD;\n                settings.ValidationEventHandler += eventHandler;\n\n                reader = XmlReader.Create(filename, settings);\n\n                // Pass the validating reader to the XML document.\n                // Validation fails due to an undefined attribute, but the \n                // data is still loaded into the document.\n                XmlDocument doc = new XmlDocument();\n                doc.Load(reader);\n                Console.WriteLine(doc.OuterXml);\n            }\n            finally\n            {\n                if (reader != null)\n                    reader.Close();\n            }\n        }\n\n        // Display the validation error.\n        private static void ValidationCallback(object sender, ValidationEventArgs args)\n        {\n            Console.WriteLine(&quot;Validation error loading: {0}&quot;, filename);\n            Console.WriteLine(args.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlDocument.cctor#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\n\nref class XmlDocumentSample\n{\nprivate:\n\tstatic XmlReader^ reader;\n\tstatic String^ filename = &quot;bookdtd.xml&quot;;\n\n\t// Display the validation error.\n\tstatic void ValidationCallback(Object^ sender, ValidationEventArgs^ args)\n\t{\n\t\tConsole::WriteLine(&quot;Validation error loading: {0}&quot;, filename);\n\t\tConsole::WriteLine(args-&gt;Message);\n\t}\n\npublic:\n\tstatic void Main()\n\t{\n\t\tValidationEventHandler^ eventHandler = gcnew ValidationEventHandler(XmlDocumentSample::ValidationCallback);\n\n\t\ttry\n\t\t{\n\t\t\t// Create the validating reader and specify DTD validation.\n\t\t\tXmlReaderSettings^ settings = gcnew XmlReaderSettings();\n                        settings-&gt;DtdProcessing = DtdProcessing::Parse;\n\t\t\tsettings-&gt;ValidationType = ValidationType::DTD;\n\t\t\tsettings-&gt;ValidationEventHandler += eventHandler;\n\n\t\t\treader = XmlReader::Create(filename, settings);\n\n\t\t\t// Pass the validating reader to the XML document.\n\t\t\t// Validation fails due to an undefined attribute, but the \n\t\t\t// data is still loaded into the document.\n\t\t\tXmlDocument^ doc = gcnew XmlDocument();\n\t\t\tdoc-&gt;Load(reader);\n\t\t\tConsole::WriteLine(doc-&gt;OuterXml);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (reader != nullptr)\n\t\t\t\treader-&gt;Close();\n\t\t}\n\t}\n};\n\nint main()\n{\n\tXmlDocumentSample::Main();\n\treturn 0;\n}\n</code></pre><p> The example uses the <code>bookDTD.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlDocument.cctor#2\">&lt;!DOCTYPE bookstore [\n  &lt;!ELEMENT bookstore (book)*&gt; \n  &lt;!ELEMENT book (title,author,price)&gt;\n  &lt;!ATTLIST book genre CDATA #REQUIRED&gt;\n  &lt;!ELEMENT title (#PCDATA)&gt;\n  &lt;!ELEMENT author (#PCDATA)&gt;\n  &lt;!ELEMENT price (#PCDATA)&gt;]&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&quot;fantasy&quot;  ISBN=&quot;2-3631-4&quot;&gt;\n    &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;\n    &lt;author&gt;Corets, Eva&lt;/author&gt;\n    &lt;price&gt;5.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument__ctor_System_Xml_XmlImplementation_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDocument(XmlImplementation)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlDocument</code> class with the specified <a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected XmlDocument (System.Xml.XmlImplementation imp);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>imp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlImplementation</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument__ctor_System_Xml_XmlNameTable_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDocument(XmlNameTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlDocument</code> class with the specified <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlDocument (System.Xml.XmlNameTable nt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNameTable</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_BaseURI\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_BaseURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base URI of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string BaseURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location from which the node was loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. The <code>BaseURI</code> tells you where these nodes came from.  </p>\n<p> For Document nodes, <code>BaseURI</code> returns the location of the XML document. For example, if the <code>XmlDocument</code> was loaded using the following call doc.Load(&quot;<a href=\"http://server/mydata.xml\" data-linktype=\"external\">http://server/mydata.xml</a>&quot;), the <code>BaseURI</code> for the document node is <a href=\"http://server/mydata.xml\" data-linktype=\"external\">http://server/mydata.xml</a>. However, if the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Load_\" data-linktype=\"relative-path\">Load</a> method is redirected by server to a different URI, <code>BaseURI</code> returns the original URI passed to the <code>Load</code> method.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM). For additional information on <code>BaseURI</code> and how it behaves with other node types, see <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_BaseURI_\" data-linktype=\"relative-path\">BaseURI</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_DocumentElement\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_DocumentElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DocumentElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets the root <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> for the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlElement DocumentElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlElement</code> that represents the root of the XML document tree. If no root exists, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the root element of the XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Display the document element.\n    Console.WriteLine(doc.DocumentElement.OuterXml);\n }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Display the document element.\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.DocumentElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Display the document element.\n        Console.WriteLine(doc.DocumentElement.OuterXml)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><p> <strong>Output:</strong>  </p>\n<pre><code>&lt;book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_DocumentType\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_DocumentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DocumentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the node containing the DOCTYPE declaration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlDocumentType DocumentType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocumenttype\" data-linktype=\"relative-path\">XmlDocumentType</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> containing the DocumentType (DOCTYPE declaration).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <code>XmlDocument</code> can have one and only one child with <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> equal to DocumentType.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is read-only. To change the DocumentType node, delete the existing node, create a new one using the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateDocumentType_\" data-linktype=\"relative-path\">CreateDocumentType</a> method, and add the new node to the document.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets and displays the DOCTYPE declaration for the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.DocumentType Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot;\n   &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   // Display the DocumentType.\n   Console::WriteLine( doc-&gt;DocumentType-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.DocumentType Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Display the DocumentType.\n    Console.WriteLine(doc.DocumentType.OuterXml);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.DocumentType Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        &#39; Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39; Display the DocumentType.\n        Console.WriteLine(doc.DocumentType.OuterXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Implementation\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Implementation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Implementation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a> object for the current document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlImplementation Implementation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlimplementation\" data-linktype=\"relative-path\">XmlImplementation</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlImplementation</code> object for the current document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>XmlDocument</code> objects created from the same <code>XmlImplementation</code> share the same <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>. This allows users to compare attribute and element names as objects rather than strings.  </p>\n<p> Although the <code>XmlDocument</code> objects share the same implementation, to move nodes from one document to another you must use the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_ImportNode_\" data-linktype=\"relative-path\">ImportNode</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <code>XmlDocument</code> using another document&#39;s implementation.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.Implementation Example#1\">XmlDocument doc1 = new XmlDocument();\n doc1.Load(&quot;books.xml&quot;);\n XmlDocument doc2 = doc1.Implementation.CreateDocument();\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.Implementation Example#1\">      XmlDocument^ doc1 = gcnew XmlDocument;\n      doc1-&gt;Load( &quot;books.xml&quot; );\n      XmlDocument^ doc2 = doc1-&gt;Implementation-&gt;CreateDocument();\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.Implementation Example#1\">        Dim doc1 As New XmlDocument()\n        doc1.Load(&quot;books.xml&quot;)\n        Dim doc2 As XmlDocument = doc1.Implementation.CreateDocument()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_InnerText\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_InnerText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerText</div>        \r\n          </div>\r\n    \r\n            <p>Throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string InnerText { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The values of the node and all its child nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not implemented.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_InnerXml\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_InnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerXml</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the markup representing the children of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string InnerXml { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The markup of the children of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The XML specified when setting this property is not well-formed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property replaces the children of the node with the parsed contents of the given string. The parsing is done in the current namespace context.  </p>\n<p> <code>InnerXml</code> removes redundant namespace declarations. As a result, numerous cut and paste operations do not increase the size of your document with redundant namespace declarations. Consider the following XSL document:  </p>\n<pre><code>&lt;xsl:stylesheet version=&quot;1.0&quot;   \n      xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;  \n     &lt;xsl:template match=&quot;stock&quot;&gt;  \n         ...  \n     &lt;/xsl:template&gt;  \n    &lt;/xsl:stylesheet&gt;  \n</code></pre><p> The <code>InnerXml</code> property on the stylesheet node returns the following string:  </p>\n<pre><code>&lt;xsl:template match=&quot;stock&quot;   \n      xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;  \n     ...  \n    &lt;/xsl:template&gt;  \n</code></pre><p> Notice the additional xmlns:xsl namespace declaration which is used to preserve the node identity. If you re-insert this inner XML string, you will get back your original document. In other words, <code>InnerXml</code> recognizes that the xmlns:xsl namespace declaration is redundant, given that the parent xsl:stylesheet element already has the xmlns:xsl namespace delcaration, and therefore removes it.  </p>\n<p> If you move <code>InnerXml</code> from a document with no default namespace to a document with a default namespace, the behavior is a little different. Consider the following XML string:  </p>\n<pre><code>&lt;test&gt;  \n      &lt;item&gt;123&lt;/item&gt;  \n    &lt;/test&gt;  \n</code></pre><p> <code>InnerXml</code> returns a plain XML string with no namespace declarations:  </p>\n<pre><code>&lt;item&gt;123&lt;/item&gt;  \n</code></pre><p> If you then insert this string into a document that does have a default namespace, such as the following:  </p>\n<pre><code>&lt;test2 xmlns=&quot;urn:1&quot;&gt;  \n    &lt;/test&gt;  \n</code></pre><p> <code>InnerXml</code> parses the string in context, and the new nodes pick up the urn:1 namespace. The result looks like this:  </p>\n<pre><code>&lt;test2 xmlns=&quot;urn:1&quot;&gt;  \n      &lt;item&gt;123&lt;/item&gt;  \n    &lt;/test&gt;  \n</code></pre><p> Now when you ask for the <code>InnerXml</code> you get back the following:  </p>\n<pre><code>&lt;item xmlns=&quot;urn:1&quot;&gt;123&lt;/item&gt;  \n</code></pre><p> If you explicitly want the inserted item to preserve the fact that it came from a document that had no namespace then you need to manually add an xmlns= &quot;&quot; declaration and insert the resulting string:  </p>\n<pre><code>&lt;item xmlns=&quot;&quot;&gt;123&lt;/item&gt;  \n</code></pre><p> The net effect of all this is as follows:  </p>\n<ol>\n<li><p>Cutting and pasting <code>InnerXml</code> among documents that do not use namespaces is clean and simple and does not create &quot;xmlns&quot; redundancy in your strings.  </p>\n</li>\n<li><p><code>InnerXml</code> can also be used to cut and paste between documents which have more than one namespace (that is XSL stylesheets).  </p>\n</li>\n<li><p>xmlns:xsl declarations automatically appear in your strings and disappear in your node hierarchies.  </p>\n</li>\n<li><p>In the case where you are moving <code>InnerXml</code> from a document that has no default namespace to a document that does have a default namespace, the new nodes will pick up the new default namespace.  </p>\n<p>If <code>InnerXml</code> is set with text containing entity references that are not currently defined in the document, the resulting tree will contain empty EntityReference nodes.  </p>\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_IsReadOnly\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is read-only; otherwise <code>false</code>. <code>XmlDocument</code> nodes always return <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A read-only node is one whose properties, attributes, or children cannot be changed. You can remove a read-only node from the tree and insert it somewhere else.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the <code>IsReadOnly</code> property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.IsReadOnly Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Determine whether the node is read-only.\n    if (doc.DocumentElement.LastChild.FirstChild.IsReadOnly)\n       Console.WriteLine(&quot;Entity reference nodes are always read-only&quot;);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.IsReadOnly Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot;\n   &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   //Check if the node is read-only.\n   if ( doc-&gt;DocumentElement-&gt;LastChild-&gt;FirstChild-&gt;IsReadOnly )\n      Console::WriteLine( &quot;Entity reference nodes are always read-only&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.IsReadOnly Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;style&gt;&amp;h;&lt;/style&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Determine whether the node is read-only.\n        If doc.DocumentElement.LastChild.FirstChild.IsReadOnly Then\n            Console.WriteLine(&quot;Entity reference nodes are always read-only&quot;)\n        End If \n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local name of the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>For <code>XmlDocument</code> nodes, the local name is #document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The local name returned depends on the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeType_\" data-linktype=\"relative-path\">NodeType</a> of the node. To see a table describing the local name returned for each of the node types, see the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_LocalName_\" data-linktype=\"relative-path\">LocalName</a> property in the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the qualified name of the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>For <code>XmlDocument</code> nodes, the name is #document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name returned depends on the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeType_\" data-linktype=\"relative-path\">NodeType</a> of the node. To see a table describing the name returned for each of the node types, see the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Name_\" data-linktype=\"relative-path\">Name</a> property in the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NameTable\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_NameTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameTable</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlNameTable NameTable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </div>\r\n                  <p>An <code>XmlNameTable</code> enabling you to get the atomized version of a string within the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each <code>XmlDocument</code> object has a <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> object. Element and attribute names are stored in the <code>NameTable</code> as atomized strings. This means that even if a name is referenced in the document multiple times it is stored only once in the <code>NameTable</code>. For example, if the document had multiple elements with the name &quot;Customer&quot;, <code>NameTable</code> returns the same object whenever it receives a request for that name. As a result, users can write code using object comparisons on these strings rather than the more expensive string comparisons.  </p>\n<p> For more information on atomized strings, see <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a>.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>The node type. For <code>XmlDocument</code> nodes, this value is XmlNodeType.Document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_OwnerDocument\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_OwnerDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OwnerDocument</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to which the current node belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlDocument OwnerDocument { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a></div>\r\n                  </div>\r\n                  <p>For <code>XmlDocument</code> nodes (<span class=\"xref\">stem.Xml.XmlDocument.NodeType*</span> equals XmlNodeType.Document), this property always returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_ParentNode\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_ParentNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParentNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent node of this node (for nodes that can have parents).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNode ParentNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>Always returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_PreserveWhitespace\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_PreserveWhitespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreserveWhitespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to preserve white space in element content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool PreserveWhitespace { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to preserve white space; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property determines how white space is handled during the load and save process.  </p>\n<p> If <code>PreserveWhitespace</code> is <code>true</code> before <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Load_\" data-linktype=\"relative-path\">Load</a> or <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_LoadXml_\" data-linktype=\"relative-path\">LoadXml</a> is called, white space nodes are preserved; otherwise, if this property is <code>false</code>, significant white space is preserved, white space is not.  </p>\n<p> If <code>PreserveWhitespace</code> is <code>true</code> before <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Save_\" data-linktype=\"relative-path\">Save</a> is called, white space in the document is preserved in the output; otherwise, if this property is <code>false</code>, <code>XmlDocument</code> auto-indents the output.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to strip white space from a file.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.PreserveWhitespace Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Load XML data which includes white space, but ignore\n    //any white space in the file.\n    XmlDocument doc = new XmlDocument();\n    doc.PreserveWhitespace = false;\n    doc.Load(&quot;book.xml&quot;);\n\n    //Save the document as is (no white space).\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.PreserveWhitespace = true;\n    doc.Save(Console.Out);\n\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.PreserveWhitespace Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39;Load XML data which includes white space, but ignore\n    &#39;any white space in the file.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.PreserveWhitespace = false\n    doc.Load(&quot;book.xml&quot;)\n\n    &#39;Save the document as is (no white space).\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    doc.PreserveWhitespace = true\n    doc.Save(Console.Out)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.PreserveWhitespace Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Load XML data which includes white space, but ignore\n   //any white space in the file.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;PreserveWhitespace = false;\n   doc-&gt;Load( &quot;book.xml&quot; );\n   \n   //Save the document as is (no white space).\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;PreserveWhitespace = true;\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><p> The example uses the file <code>book.xml</code> as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlDocument.PreserveWhitespace Example#2\">&lt;!--sample XML fragment--&gt;\n&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; misc=&#39;sale-item&#39;&gt;\n  &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n  &lt;price&gt;14.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_SchemaInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_SchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaInfo</div>        \r\n          </div>\r\n    \r\n            <p>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> object representing the PSVI of the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PSVI contents of this property are set after the node has been validated.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Schemas\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Schemas_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Schemas</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object associated with this <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object containing the XML Schema Definition Language (XSD) schemas associated with this <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>; otherwise, an empty <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The schemas contained in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object associated with an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object are used for validation when the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Validate_\" data-linktype=\"relative-path\">Validate</a> method of an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> is executed.  </p>\n<p> When an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object is initialized with XML data from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object, the <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object is loaded from the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_XmlResolver\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_XmlResolver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlResolver</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> to use for resolving external resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlResolver XmlResolver { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlResolver</code> to use.  </p>\n<p> In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an <code>XmlResolver</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>This property is set to <code>null</code> and an external DTD or entity is encountered.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>XmlResolver</code> can be used to load DTDs or expand entity references. Using the <a class=\"xref\" href=\"system.xml.xmlresolver#System_Xml_XmlResolver_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property, you can set credentials on the <code>XmlResolver</code> to access resources stored on a secure network resource.  </p>\n<ul>\n<li><p>If the document was not loaded using an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> (that is, if it was loaded using a stream, file, and so on) the <code>XmlResolver</code> on the <code>XmlDocument</code> is always used.  </p>\n</li>\n<li><p>If the document was loaded with an <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a>, the resolver on the <code>XmlTextReader</code> is used to resolve any DTD references in the DocumentType node. The resolver on the <code>XmlDocument</code> is used to expand any entity references.  </p>\n</li>\n<li><p>If the document was loaded with an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>, the resolver on the <code>XmlDocument</code> is never used.  </p>\n</li>\n<li><p>If the document was loaded with a class that extends <code>XmlReader</code> and the <code>XmlReader</code> cannot resolve entities (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_CanResolveEntity_\" data-linktype=\"relative-path\">CanResolveEntity</a> returns <code>false</code>), the <code>XmlResolver</code> on the <code>XmlDocument</code> is used to resolve any references in the DocumentType node and to expand any entity references.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <code>XmlDocument</code> is loaded using an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> which had an <code>XmlResolver</code> set to it, the <code>XmlResolver</code> on the <code>XmlReader</code> is not cached by the <code>XmlDocument</code> after <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Load_\" data-linktype=\"relative-path\">Load</a> completes.  </p>\n</div>\n<p> In version 1.1 of the.NET Framework, if this property is not set, the trust level of the application determines the default behavior.  </p>\n<p> <code>Fully trusted code:</code> The document uses a default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no user credentials. If authentication is required to access a network resource, use the <code>XmlResolver</code> property to specify an <code>XmlResolver</code> with the necessary credentials.  </p>\n<p> <code>Semi-trusted code:</code> The <code>XmlResolver</code> property is set to <code>null</code>. External resources are not resolved.  </p>\n<p> For more information on security and the <code>XmlResolver</code> property, see <a href=\"../Topic/Resolving%20External%20Resources.md\" data-linktype=\"relative-path\">Resolving External Resources</a>.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an XML document which includes a reference to a DTD file. The <code>XmlResolver</code> property is used to set the credentials necessary to access the network resource.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlDocument.XmlResolver#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Net;\nint main()\n{\n   \n   // Supply the credentials necessary to access the DTD file stored on the network.\n   XmlUrlResolver^ resolver = gcnew XmlUrlResolver;\n   resolver-&gt;Credentials = CredentialCache::DefaultCredentials;\n   \n   // Create and load the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;XmlResolver = resolver; // Set the resolver.\n   doc-&gt;Load( &quot;book5.xml&quot; );\n   \n   // Display the entity replacement text which is pulled from the DTD file.\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;LastChild-&gt;InnerText );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlDocument.XmlResolver#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Net;\n\npublic class Sample {\n\n  public static void Main() {\n\n    // Supply the credentials necessary to access the DTD file stored on the network.\n    XmlUrlResolver resolver = new XmlUrlResolver();\n    resolver.Credentials = CredentialCache.DefaultCredentials;\n\n    // Create and load the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.XmlResolver = resolver;  // Set the resolver.\n    doc.Load(&quot;book5.xml&quot;);\n\n    // Display the entity replacement text which is pulled from the DTD file.\n    Console.WriteLine(doc.DocumentElement.LastChild.InnerText);\n  \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlDocument.XmlResolver#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Net\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39; Supply the credentials necessary access the DTD file stored on the network.\n    Dim resolver as XmlUrlResolver = new XmlUrlResolver()\n    resolver.Credentials = CredentialCache.DefaultCredentials\n\n    &#39; Create and load the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.XmlResolver = resolver  &#39; Set the resolver.\n    doc.Load(&quot;book5.xml&quot;)\n\n    &#39; Display the entity replacement text which is pulled from the DTD file.\n    Console.WriteLine(doc.DocumentElement.LastChild.InnerText)\n  \n  end sub\nend class\n</code></pre><p> The example uses the following data files as input.  </p>\n<p> <code>book5.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlDocument.XmlResolver#2\">&lt;!DOCTYPE book SYSTEM &#39;http://myServer/data/books.dtd&#39;&gt;\n&lt;book ISBN = &#39;1-861001-57-5&#39;&gt;\n  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre><p> <code>books.dtd</code></p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CloneNode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CloneNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CloneNode(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a duplicate of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNode CloneNode (bool deep);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>deep</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to recursively clone the subtree under the specified node; <code>false</code> to clone only the node itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The cloned <code>XmlDocument</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method serves as a copy constructor for nodes. The cloned node has no parent (<a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ParentNode_\" data-linktype=\"relative-path\">ParentNode</a> returns <code>null</code>).  </p>\n<p> If <code>deep</code> is <code>true</code>, the cloned node includes all the child nodes, otherwise only the <code>XmlDocument</code> node is cloned. See the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_CloneNode_\" data-linktype=\"relative-path\">CloneNode</a> method to see how this method behaves on other node types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the difference between a deep and shallow clone.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CloneNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a deep clone.  The cloned node \n   //includes the child node.\n   XmlDocument^ deep = dynamic_cast&lt;XmlDocument^&gt;(doc-&gt;CloneNode( true ));\n   Console::WriteLine( deep-&gt;ChildNodes-&gt;Count );\n   \n   //Create a shallow clone.  The cloned node does not \n   //include the child node.\n   XmlDocument^ shallow = dynamic_cast&lt;XmlDocument^&gt;(doc-&gt;CloneNode( false ));\n   Console::WriteLine( &quot;{0}{1}&quot;, shallow-&gt;Name, shallow-&gt;OuterXml );\n   Console::WriteLine( shallow-&gt;ChildNodes-&gt;Count );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CloneNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a deep clone.  The cloned node \n    //includes the child node.\n    XmlDocument deep = (XmlDocument) doc.CloneNode(true);\n    Console.WriteLine(deep.ChildNodes.Count);\n\n    //Create a shallow clone.  The cloned node does not \n    //include the child node.\n    XmlDocument shallow = (XmlDocument) doc.CloneNode(false);\n    Console.WriteLine(shallow.Name + shallow.OuterXml);\n    Console.WriteLine(shallow.ChildNodes.Count);\n    \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CloneNode Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a deep clone.  The cloned node \n        &#39;includes the child node.\n        Dim deep As XmlDocument = CType(doc.CloneNode(True), XmlDocument)\n        Console.WriteLine(deep.ChildNodes.Count)\n        \n        &#39;Create a shallow clone.  The cloned node does not \n        &#39;include the child node.\n        Dim shallow As XmlDocument = CType(doc.CloneNode(False), XmlDocument)\n        Console.WriteLine(shallow.Name + shallow.OuterXml)\n        Console.WriteLine(shallow.ChildNodes.Count)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlAttribute CreateAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute. If the name contains a colon, the <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> property reflects the part of the name preceding the first colon and the <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> property reflects the part of the name following the first colon. The <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <code>NamespaceURI</code> has a value of <a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlAttribute</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>XmlAttribute</code> can be added to an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> using the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_SetAttributeNode_\" data-linktype=\"relative-path\">SetAttributeNode</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following creates an attribute and adds it to an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create an attribute.\n    XmlAttribute attr = doc.CreateAttribute(&quot;publisher&quot;);\n    attr.Value = &quot;WorldWide Publishing&quot;;\n          \n    //Add the new node to the document. \n    doc.DocumentElement.SetAttributeNode(attr);\n        \n    Console.WriteLine(&quot;Display the modified XML...&quot;);        \n    doc.Save(Console.Out);\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create an attribute.\n   XmlAttribute^ attr = doc-&gt;CreateAttribute( &quot;publisher&quot; );\n   attr-&gt;Value = &quot;WorldWide Publishing&quot;;\n   \n   //Add the new node to the document. \n   doc-&gt;DocumentElement-&gt;SetAttributeNode( attr );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create an attribute.\n        Dim attr As XmlAttribute = doc.CreateAttribute(&quot;publisher&quot;)\n        attr.Value = &quot;WorldWide Publishing&quot;\n        \n        &#39;Add the new node to the document. \n        doc.DocumentElement.SetAttributeNode(attr)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified qualified name and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>qualifiedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute. If the name contains a colon then the <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> property will reflect the part of the name preceding the colon and the <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> property will reflect the part of the name after the colon.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be <a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlAttribute</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>XmlAttribute</code> can be added to an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> using the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_SetAttributeNode_\" data-linktype=\"relative-path\">SetAttributeNode</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateAttribute_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAttribute(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix of the attribute (if any). String.Empty and <code>null</code> are equivalent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute (if any). String.Empty and <code>null</code> are equivalent. If <code>prefix</code> is xmlns, then this parameter must be <a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a>; otherwise an exception is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlAttribute</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>XmlAttribute</code> can be added to an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> using the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_SetAttributeNode_\" data-linktype=\"relative-path\">SetAttributeNode</a> method.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateCDataSection_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateCDataSection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateCDataSection(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlcdatasection\" data-linktype=\"relative-path\">XmlCDataSection</a> containing the specified data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The content of the new <code>XmlCDataSection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlcdatasection\" data-linktype=\"relative-path\">XmlCDataSection</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlCDataSection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), CDataSection nodes are allowed within Element nodes and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a CDATA node and adds it to the document.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateCDataSection Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a CData section.\n        Dim CData As XmlCDataSection\n        CData = doc.CreateCDataSection(&quot;All Jane Austen novels 25% off starting 3/23!&quot;)\n        \n        &#39;Add the new node to the document.\n        Dim root As XmlElement = doc.DocumentElement\n        root.AppendChild(CData)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateCDataSection Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a CData section.\n   XmlCDataSection^ CData;\n   CData = doc-&gt;CreateCDataSection( &quot;All Jane Austen novels 25% off starting 3/23!&quot; );\n   \n   //Add the new node to the document.\n   XmlElement^ root = doc-&gt;DocumentElement;\n   root-&gt;AppendChild( CData );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateCDataSection Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a CData section.\n    XmlCDataSection CData;\n    CData = doc.CreateCDataSection(&quot;All Jane Austen novels 25% off starting 3/23!&quot;);    \n\n    //Add the new node to the document.\n    XmlElement root = doc.DocumentElement;\n    root.AppendChild(CData);  \n        \n    Console.WriteLine(&quot;Display the modified XML...&quot;);        \n    doc.Save(Console.Out);\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateComment_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateComment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateComment(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlcomment\" data-linktype=\"relative-path\">XmlComment</a> containing the specified data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlComment CreateComment (string data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The content of the new <code>XmlComment</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlcomment\" data-linktype=\"relative-path\">XmlComment</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlComment</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Comment nodes are only allowed within Document, Element and EntityReference nodes, when the EntityReference node is not a child of an Attribute node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a comment and adds it to an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateComment Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a comment.\n    XmlComment newComment;\n    newComment = doc.CreateComment(&quot;Sample XML document&quot;);\n\n    //Add the new node to the document.\n    XmlElement root = doc.DocumentElement;\n    doc.InsertBefore(newComment, root);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);        \n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateComment Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a comment.\n        Dim newComment As XmlComment\n        newComment = doc.CreateComment(&quot;Sample XML document&quot;)\n        \n        &#39;Add the new node to the document.\n        Dim root As XmlElement = doc.DocumentElement\n        doc.InsertBefore(newComment, root)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateComment Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a comment.\n   XmlComment^ newComment;\n   newComment = doc-&gt;CreateComment( &quot;Sample XML document&quot; );\n   \n   //Add the new node to the document.\n   XmlElement^ root = doc-&gt;DocumentElement;\n   doc-&gt;InsertBefore( newComment, root );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateDefaultAttribute_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateDefaultAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDefaultAttribute(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a default attribute with the specified prefix, local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix of the attribute (if any).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute (if any).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateDocumentFragment\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateDocumentFragment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDocumentFragment()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmldocumentfragment\" data-linktype=\"relative-path\">XmlDocumentFragment</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocumentfragment\" data-linktype=\"relative-path\">XmlDocumentFragment</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlDocumentFragment</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>DocumentFragment nodes cannot be inserted into a document. However, you can insert children of the DocumentFragment node into a document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds new nodes to an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateDocumentFragment Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;items/&gt;&quot; );\n   \n   //Create a document fragment.\n   XmlDocumentFragment^ docFrag = doc-&gt;CreateDocumentFragment();\n   \n   //Set the contents of the document fragment.\n   docFrag-&gt;InnerXml = &quot;&lt;item&gt;widget&lt;/item&gt;&quot;;\n   \n   //Add the children of the document fragment to the\n   //original document.\n   doc-&gt;DocumentElement-&gt;AppendChild( docFrag );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateDocumentFragment Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;items/&gt;&quot;)\n        \n        &#39;Create a document fragment.\n        Dim docFrag As XmlDocumentFragment = doc.CreateDocumentFragment()\n        \n        &#39;Set the contents of the document fragment.\n        docFrag.InnerXml = &quot;&lt;item&gt;widget&lt;/item&gt;&quot;\n        \n        &#39;Add the children of the document fragment to the\n        &#39;original document.\n        doc.DocumentElement.AppendChild(docFrag)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        Console.WriteLine(doc.OuterXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateDocumentFragment Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;items/&gt;&quot;);\n\n    //Create a document fragment.\n    XmlDocumentFragment docFrag = doc.CreateDocumentFragment();\n \n    //Set the contents of the document fragment.\n    docFrag.InnerXml =&quot;&lt;item&gt;widget&lt;/item&gt;&quot;;\n\n   //Add the children of the document fragment to the\n   //original document.\n   doc.DocumentElement.AppendChild(docFrag);\n\n   Console.WriteLine(&quot;Display the modified XML...&quot;);\n   Console.WriteLine(doc.OuterXml);\n  \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateDocumentType_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateDocumentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDocumentType(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.xml.xmldocumenttype\" data-linktype=\"relative-path\">XmlDocumentType</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name of the document type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publicId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The public identifier of the document type or <code>null</code>. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>systemId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The system identifier of the document type or <code>null</code>. Specifies the URL of the file location for the external DTD subset.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>internalSubset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The DTD internal subset of the document type or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocumenttype\" data-linktype=\"relative-path\">XmlDocumentType</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlDocumentType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned node will have parsed <a class=\"xref\" href=\"system.xml.xmldocumenttype#System_Xml_XmlDocumentType_Entities_\" data-linktype=\"relative-path\">Entities</a> and <a class=\"xref\" href=\"system.xml.xmldocumenttype#System_Xml_XmlDocumentType_Notations_\" data-linktype=\"relative-path\">Notations</a> collections.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), DocumentType nodes are only allowed within Document nodes. Each <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> can have only one DocumentType node. The DocumentType node must also be inserted before the root element of the <code>XmlDocument</code> (if the document already has a root element, you cannot add a DocumentType node).  </p>\n<p> If the passed parameters do not combine to build a valid <code>XmlDocumentType</code>, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a DocumentType node and adds it to an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateDocumentType Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Create a document type node and  \n   //add it to the document.\n   XmlDocumentType^ doctype;\n   doctype = doc-&gt;CreateDocumentType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ELEMENT book ANY&gt;&quot; );\n   doc-&gt;AppendChild( doctype );\n   \n   //Create the root element and \n   //add it to the document.\n   doc-&gt;AppendChild( doc-&gt;CreateElement( &quot;book&quot; ) );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateDocumentType Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n\n    //Create a document type node and  \n    //add it to the document.\n    XmlDocumentType doctype;\n    doctype = doc.CreateDocumentType(&quot;book&quot;, null, null, &quot;&lt;!ELEMENT book ANY&gt;&quot;);\n    doc.AppendChild(doctype);\n\n    //Create the root element and \n    //add it to the document.\n    doc.AppendChild(doc.CreateElement(&quot;book&quot;));\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateDocumentType Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        \n        &#39;Create a document type node and  \n        &#39;add it to the document.\n        Dim doctype As XmlDocumentType\n        doctype = doc.CreateDocumentType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ELEMENT book ANY&gt;&quot;)\n        doc.AppendChild(doctype)\n        \n        &#39;Create the root element and \n        &#39;add it to the document.\n        doc.AppendChild(doc.CreateElement(&quot;book&quot;))\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateElement_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateElement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an element with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlElement CreateElement (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the element. If the name contains a colon then the <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> property reflects the part of the name preceding the colon and the <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> property reflects the part of the name after the colon. The qualified name cannot include a prefix of&#39;xmlns&#39;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlElement</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the instance returned implements the <code>XmlElement</code> interface, so default attributes would be created directly on the returned object.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new element and adds it to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a new node and add it to the document.\n   //The text node is the content of the price element.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;price&quot; );\n   XmlText^ text = doc-&gt;CreateTextNode( &quot;19.95&quot; );\n   doc-&gt;DocumentElement-&gt;AppendChild( elem );\n   doc-&gt;DocumentElement-&gt;LastChild-&gt;AppendChild( text );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a new node and add it to the document.\n    //The text node is the content of the price element.\n    XmlElement elem = doc.CreateElement(&quot;price&quot;);\n    XmlText text = doc.CreateTextNode(&quot;19.95&quot;);\n    doc.DocumentElement.AppendChild(elem);\n    doc.DocumentElement.LastChild.AppendChild(text);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a new node and add it to the document.\n        &#39;The text node is the content of the price element.\n        Dim elem As XmlElement = doc.CreateElement(&quot;price&quot;)\n        Dim text As XmlText = doc.CreateTextNode(&quot;19.95&quot;)\n        doc.DocumentElement.AppendChild(elem)\n        doc.DocumentElement.LastChild.AppendChild(text)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateElement_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateElement(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> with the qualified name and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>qualifiedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the element. If the name contains a colon then the <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> property will reflect the part of the name preceding the colon and the <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of&#39;xmlns&#39;.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlElement</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following C# code  </p>\n<pre><code>XmlElement elem;  \nelem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);  \n</code></pre><p> results in an element that is equivalent to the following XML text.  </p>\n<pre><code>&lt;xy:item  \n       xmlns:xy=&quot;urn:abc&quot;/&gt;  \n</code></pre><p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateElement_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateElement(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an element with the specified <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix of the new element (if any). String.Empty and <code>null</code> are equivalent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the new element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the new element (if any). String.Empty and <code>null</code> are equivalent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following C# code  </p>\n<pre><code>XmlElement elem;  \nelem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);  \n</code></pre><p> creates an element equivalent to the following XML text:  </p>\n<pre><code>&lt;xy:item xmlns:xy=&quot;urn:abc&quot;/&gt;  \n</code></pre><p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference is outside an Attribute node.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a new element to the existing XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    string xmlData = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;;\n\n    doc.Load(new StringReader(xmlData));\n\n    // Create a new element and add it to the document.\n    XmlElement elem = doc.CreateElement(&quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot;);\n    elem.InnerText = &quot;fantasy&quot;;\n    doc.DocumentElement.AppendChild(elem);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main() \n\n    &#39; Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    Dim xmlData as string = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;\n\n    doc.Load(new StringReader(xmlData))\n\n    &#39; Create a new element and add it to the document.\n    Dim elem as XmlElement = doc.CreateElement(&quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot;)\n    elem.InnerText = &quot;fantasy&quot;\n    doc.DocumentElement.AppendChild(elem)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    doc.Save(Console.Out)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   String^ xmlData = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;;\n   doc-&gt;Load( gcnew StringReader( xmlData ) );\n   \n   // Create a new element and add it to the document.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot; );\n   elem-&gt;InnerText = &quot;fantasy&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( elem );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateEntityReference_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateEntityReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEntityReference(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a> with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the entity reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlEntityReference</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name is invalid (for example, names starting with&#39;#&#39; are invalid.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the referenced entity is known, the child list of the <code>XmlEntityReference</code> node is made the same as that of the corresponding <a class=\"xref\" href=\"system.xml.xmlentity\" data-linktype=\"relative-path\">XmlEntity</a> node.  </p>\n<p> The namespaces used in the replacement text for the entity reference are bound at the time the parent of the entity reference node is first set (for example, when the entity reference node is inserted into the document). For example, given the following entity:  </p>\n<pre><code>&lt;!ENTITY a &quot;&lt;b&gt;test&lt;/b&gt;&quot;&gt;  \n</code></pre><p> If you call <code>CreateEntityReference(&quot;a&quot;)</code> you get back a single node of type EntityReference with no children. If you append this node as a child of the following node,  </p>\n<pre><code>&lt;item xmlns=&quot;urn:1&quot;/&gt;  \n</code></pre><p> then, at the time of calling <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a>, the parent of the newly created entity reference node is set and the children are expanded in this namespace context. The child element node <code>b</code> will have NamespaceURI equal to <code>urn:1</code>. The child nodes of the entity reference remain the same even if you move the entity reference to a place in the document that has a different default namespace context. This does not happen for existing entity reference nodes when you remove and insert them or for entity references that you clone with <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CloneNode_\" data-linktype=\"relative-path\">CloneNode</a>. It only happens for newly created entity references.  </p>\n<p> If the corresponding entity is not defined in the DocumentType when the entity reference node is added, because the entity reference is not defined, its only child node will be an empty text node.  </p>\n<p> The built-in entities amp, lt, gt, apos, and quot are also allowed, and they will have a child text node with the appropriate expanded character value.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), EntityReference nodes are only allowed within Element, Attribute and EntityReference nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two entity reference nodes and inserts them into an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateEntityReference Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;misc/&gt;&lt;/book&gt;&quot; );\n   \n   //Create an entity reference node. The child count should be 0 \n   //since the node has not been expanded.\n   XmlEntityReference^ entityref = doc-&gt;CreateEntityReference( &quot;h&quot; );\n   Console::WriteLine( entityref-&gt;ChildNodes-&gt;Count );\n   \n   //After the the node has been added to the document, its parent node\n   //is set and the entity reference node is expanded.  It now has a child\n   //node containing the entity replacement text. \n   doc-&gt;DocumentElement-&gt;LastChild-&gt;AppendChild( entityref );\n   Console::WriteLine( entityref-&gt;FirstChild-&gt;InnerText );\n   \n   //Create and insert an undefined entity reference node.  When the entity\n   //reference node is expanded, because the entity reference is undefined\n   //the child is an empty text node.\n   XmlEntityReference^ entityref2 = doc-&gt;CreateEntityReference( &quot;p&quot; );\n   doc-&gt;DocumentElement-&gt;LastChild-&gt;AppendChild( entityref2 );\n   Console::WriteLine( entityref2-&gt;FirstChild-&gt;InnerText );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateEntityReference Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;misc/&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;); \n\n    //Create an entity reference node. The child count should be 0 \n    //since the node has not been expanded.\n    XmlEntityReference entityref = doc.CreateEntityReference(&quot;h&quot;);\n    Console.WriteLine(entityref.ChildNodes.Count ); \n\n    //After the the node has been added to the document, its parent node\n    //is set and the entity reference node is expanded.  It now has a child\n    //node containing the entity replacement text. \n    doc.DocumentElement.LastChild.AppendChild(entityref);\n    Console.WriteLine(entityref.FirstChild.InnerText);\n\n    //Create and insert an undefined entity reference node.  When the entity\n    //reference node is expanded, because the entity reference is undefined\n    //the child is an empty text node.\n    XmlEntityReference entityref2 = doc.CreateEntityReference(&quot;p&quot;);\n    doc.DocumentElement.LastChild.AppendChild(entityref2);\n    Console.WriteLine(entityref2.FirstChild.InnerText);\n    \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateEntityReference Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;misc/&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create an entity reference node. The child count should be 0 \n        &#39;since the node has not been expanded.\n        Dim entityref As XmlEntityReference = doc.CreateEntityReference(&quot;h&quot;)\n        Console.WriteLine(entityref.ChildNodes.Count)\n        \n        &#39;After the the node has been added to the document, its parent node\n        &#39;is set and the entity reference node is expanded.  It now has a child\n        &#39;node containing the entity replacement text. \n        doc.DocumentElement.LastChild.AppendChild(entityref)\n        Console.WriteLine(entityref.FirstChild.InnerText)\n        \n        &#39;Create and insert an undefined entity reference node.  When the entity\n        &#39;reference node is expanded, because the entity reference is undefined\n        &#39;the child is an empty text node.\n        Dim entityref2 As XmlEntityReference = doc.CreateEntityReference(&quot;p&quot;)\n        doc.DocumentElement.LastChild.AppendChild(entityref2)\n        Console.WriteLine(entityref2.FirstChild.InnerText)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateNavigator\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateNavigator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNavigator()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object for navigating this document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XPath.XPathNavigator CreateNavigator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_CreateNavigator_\" data-linktype=\"relative-path\">CreateNavigator</a> for an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateNavigator_System_Xml_XmlNode_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateNavigator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNavigator(XmlNode)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object for navigating this document positioned on the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>node</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> you want the navigator initially positioned on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_CreateNavigator_\" data-linktype=\"relative-path\">CreateNavigator</a> for an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateNode_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNode(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified node type, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nodeTypeString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>String version of the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> of the new node. This parameter must be one of the values listed in the table below.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the new node. If the name contains a colon, it is parsed into <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> and <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> components.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the new node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlNode</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name was not provided and the <code>XmlNodeType</code> requires a name; or <code>nodeTypeString</code> is not one of the strings listed below.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>nodeTypeString</code> parameter is case sensitive and must be one of the values in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>nodeTypeString</th>\n<th>XmlNodeType</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>attribute</td>\n<td>Attribute</td>\n</tr>\n<tr>\n<td>cdatasection</td>\n<td>CDATA</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>Comment</td>\n</tr>\n<tr>\n<td>document</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>documentfragment</td>\n<td>DocumentFragment</td>\n</tr>\n<tr>\n<td>documenttype</td>\n<td>DocumentType</td>\n</tr>\n<tr>\n<td>element</td>\n<td>Element</td>\n</tr>\n<tr>\n<td>entityreference</td>\n<td>EntityReference</td>\n</tr>\n<tr>\n<td>processinginstruction</td>\n<td>ProcessingInstruction</td>\n</tr>\n<tr>\n<td>significantwhitespace</td>\n<td>SignificantWhitespace</td>\n</tr>\n<tr>\n<td>text</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>whitespace</td>\n<td>Whitespace</td>\n</tr>\n</tbody>\n</table>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Document</th>\n<th>DocumentType</th>\n<th>XmlDeclaration</th>\n<th>Element</th>\n<th>Attribute</th>\n<th>Text</th>\n<th>CDATA</th>\n<th>Markup</th>\n<th>EntityReference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Document</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>yes*</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Element</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes****</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Markup**</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>EntityReference</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p> * The XmlDeclaration node must be the first child of the Document node.  </p>\n<p> ** Markup includes ProcessingInstruction and Comment nodes.  </p>\n<p> *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  </p>\n<p> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new element and inserts it into the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateNode1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book&gt;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;  &lt;price&gt;5.95&lt;/price&gt;&lt;/book&gt;&quot; );\n   \n   // Create a new element node.\n   XmlNode^ newElem = doc-&gt;CreateNode( &quot;element&quot;, &quot;pages&quot;, &quot;&quot; );\n   newElem-&gt;InnerText = &quot;290&quot;;\n   Console::WriteLine( &quot;Add the new element to the document...&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   root-&gt;AppendChild( newElem );\n   Console::WriteLine( &quot;Display the modified XML document...&quot; );\n   Console::WriteLine( doc-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateNode1 Example#1\">Imports System\nImports System.Xml\n \npublic class Sample \n\n  public shared sub Main() \n\n       Dim doc as XmlDocument = new XmlDocument()\n       doc.LoadXml(&quot;&lt;book&gt;&quot; &amp; _\n                   &quot;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;&quot; &amp; _\n                   &quot;  &lt;price&gt;5.95&lt;/price&gt;&quot; &amp; _\n                   &quot;&lt;/book&gt;&quot;) \n \n       &#39; Create a new element node.\n       Dim newElem as XmlNode = doc.CreateNode(&quot;element&quot;, &quot;pages&quot;, &quot;&quot;)  \n       newElem.InnerText = &quot;290&quot;\n     \n       Console.WriteLine(&quot;Add the new element to the document...&quot;)\n       Dim root as XmlElement = doc.DocumentElement\n       root.AppendChild(newElem)\n     \n       Console.WriteLine(&quot;Display the modified XML document...&quot;)\n       Console.WriteLine(doc.OuterXml)\n   end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateNode1 Example#1\">using System;\nusing System.Xml;\n \npublic class Sample {\n\n  public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book&gt;&quot; +\n                   &quot;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;&quot; +\n                   &quot;  &lt;price&gt;5.95&lt;/price&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n \n       // Create a new element node.\n       XmlNode newElem = doc.CreateNode(&quot;element&quot;, &quot;pages&quot;, &quot;&quot;);  \n       newElem.InnerText = &quot;290&quot;;\n     \n       Console.WriteLine(&quot;Add the new element to the document...&quot;);\n       XmlElement root = doc.DocumentElement;\n       root.AppendChild(newElem);\n     \n       Console.WriteLine(&quot;Display the modified XML document...&quot;);\n       Console.WriteLine(doc.OuterXml);\n   }\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateNode_System_Xml_XmlNodeType_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNode(XmlNodeType,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNodeType</code> of the new node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the new node. If the name contains a colon then it is parsed into <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span> and <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> components.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the new node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlNode</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name was not provided and the <code>XmlNodeType</code> requires a name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Document</th>\n<th>DocumentType</th>\n<th>XmlDeclaration</th>\n<th>Element</th>\n<th>Attribute</th>\n<th>Text</th>\n<th>CDATA</th>\n<th>Markup</th>\n<th>EntityReference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Document</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>yes*</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Element</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes****</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Markup**</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>EntityReference</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p> * The XmlDeclaration node must be the first child of the Document node.  </p>\n<p> ** Markup includes ProcessingInstruction and Comment nodes.  </p>\n<p> *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  </p>\n<p> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new element and inserts it into an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a new node and add it to the document.\n    XmlNode elem = doc.CreateNode(XmlNodeType.Element, &quot;price&quot;, null);\n    elem.InnerText = &quot;19.95&quot;;\n    doc.DocumentElement.AppendChild(elem); \n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a new node and add it to the document.\n   XmlNode^ elem = doc-&gt;CreateNode( XmlNodeType::Element, &quot;price&quot;, nullptr );\n   elem-&gt;InnerText = &quot;19.95&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( elem );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateNode Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a new node and add it to the document.\n        Dim elem As XmlNode = doc.CreateNode(XmlNodeType.Element, &quot;price&quot;, Nothing)\n        elem.InnerText = &quot;19.95&quot;\n        doc.DocumentElement.AppendChild(elem)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateNode_System_Xml_XmlNodeType_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNode(XmlNodeType,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> with the specified <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <span class=\"xref\">stem.Xml.XmlNode.Prefix*</span>, <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>, and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNodeType</code> of the new node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix of the new node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the new node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the new node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlNode</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name was not provided and the <code>XmlNodeType</code> requires a name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Document</th>\n<th>DocumentType</th>\n<th>XmlDeclaration</th>\n<th>Element</th>\n<th>Attribute</th>\n<th>Text</th>\n<th>CDATA</th>\n<th>Markup</th>\n<th>EntityReference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Document</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>yes*</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Element</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes****</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes***</td>\n</tr>\n<tr>\n<td><code>Markup**</code></td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>EntityReference</code></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p> * The XmlDeclaration node must be the first child of the Document node.  </p>\n<p> ** Markup includes ProcessingInstruction and Comment nodes.  </p>\n<p> *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  </p>\n<p> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a new element to the document.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateNode2 Example#1\">Imports System\nImports System.Xml\n \npublic class Sample \n\n  public shared sub Main() \n\n       Dim doc as XmlDocument = new XmlDocument()\n       doc.LoadXml(&quot;&lt;book&gt;&quot; &amp; _\n                   &quot;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;&quot; &amp; _\n                   &quot;  &lt;price&gt;5.95&lt;/price&gt;&quot; &amp; _\n                   &quot;&lt;/book&gt;&quot;) \n \n       &#39; Create a new element node.\n       Dim newElem as XmlNode\n       newElem = doc.CreateNode(XmlNodeType.Element, &quot;pages&quot;, &quot;&quot;)  \n       newElem.InnerText = &quot;290&quot;\n     \n       Console.WriteLine(&quot;Add the new element to the document...&quot;)\n       Dim root as XmlElement = doc.DocumentElement\n       root.AppendChild(newElem)\n     \n       Console.WriteLine(&quot;Display the modified XML document...&quot;)\n       Console.WriteLine(doc.OuterXml)\n   end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateNode2 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book&gt;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;  &lt;price&gt;5.95&lt;/price&gt;&lt;/book&gt;&quot; );\n   \n   // Create a new element node.\n   XmlNode^ newElem;\n   newElem = doc-&gt;CreateNode( XmlNodeType::Element, &quot;pages&quot;, &quot;&quot; );\n   newElem-&gt;InnerText = &quot;290&quot;;\n   Console::WriteLine( &quot;Add the new element to the document...&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   root-&gt;AppendChild( newElem );\n   Console::WriteLine( &quot;Display the modified XML document...&quot; );\n   Console::WriteLine( doc-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateNode2 Example#1\">using System;\nusing System.Xml;\n \npublic class Sample {\n\n  public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book&gt;&quot; +\n                   &quot;  &lt;title&gt;Oberon&#39;s Legacy&lt;/title&gt;&quot; +\n                   &quot;  &lt;price&gt;5.95&lt;/price&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n \n       // Create a new element node.\n       XmlNode newElem;\n       newElem = doc.CreateNode(XmlNodeType.Element, &quot;pages&quot;, &quot;&quot;);  \n       newElem.InnerText = &quot;290&quot;;\n     \n       Console.WriteLine(&quot;Add the new element to the document...&quot;);\n       XmlElement root = doc.DocumentElement;\n       root.AppendChild(newElem);\n     \n       Console.WriteLine(&quot;Display the modified XML document...&quot;);\n       Console.WriteLine(doc.OuterXml);\n   }\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateProcessingInstruction_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateProcessingInstruction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateProcessingInstruction(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlprocessinginstruction\" data-linktype=\"relative-path\">XmlProcessingInstruction</a> with the specified name and data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the processing instruction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the processing instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlprocessinginstruction\" data-linktype=\"relative-path\">XmlProcessingInstruction</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlProcessingInstruction</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), ProcessingInstruction nodes are only allowed within Document, Element, and EntityReference nodes, when the EntityReference node is not a child of an Attribute node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a ProcessingInstruction node and adds it to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateProcessingInstruction Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Create a procesing instruction.\n   XmlProcessingInstruction^ newPI;\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   newPI = doc-&gt;CreateProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   // Display the target and data information.\n   Console::WriteLine( &quot;&lt;?{0} {1}?&gt;&quot;, newPI-&gt;Target, newPI-&gt;Data );\n   \n   // Add the processing instruction node to the document.\n   doc-&gt;AppendChild( newPI );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateProcessingInstruction Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n  \n    Dim doc as XmlDocument = new XmlDocument()\n\n    &#39; Create a procesing instruction.\n    Dim newPI as XmlProcessingInstruction \n    Dim PItext as String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n    newPI = doc.CreateProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n\n    &#39; Display the target and data information.\n    Console.WriteLine(&quot;&lt;?{0} {1}?&gt;&quot;, newPI.Target, newPI.Data)\n\n    &#39; Add the processing instruction node to the document.\n    doc.AppendChild(newPI)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateProcessingInstruction Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n\n    // Create a procesing instruction.\n    XmlProcessingInstruction newPI;\n    String PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n    newPI = doc.CreateProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n    // Display the target and data information.\n    Console.WriteLine(&quot;&lt;?{0} {1}?&gt;&quot;, newPI.Target, newPI.Data);\n\n    // Add the processing instruction node to the document.\n    doc.AppendChild(newPI);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateSignificantWhitespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateSignificantWhitespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSignificantWhitespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlsignificantwhitespace\" data-linktype=\"relative-path\">XmlSignificantWhitespace</a> node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string must contain only the following characters &#20; &#10; &#13; and &#9;</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlsignificantwhitespace\" data-linktype=\"relative-path\">XmlSignificantWhitespace</a></div>\r\n                  </div>\r\n                  <p>A new <code>XmlSignificantWhitespace</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM). It is used when you want to manually format your document.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds significant white space to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateSignificantWhitespace Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;author xml:space=&#39;preserve&#39;&gt;&lt;first-name&gt;Eva&lt;/first-name&gt;&lt;last-name&gt;Corets&lt;/last-name&gt;&lt;/author&gt;&quot; );\n   Console::WriteLine( &quot;InnerText before...&quot; );\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;InnerText );\n   \n   // Add white space.     \n   XmlNode^ currNode = doc-&gt;DocumentElement;\n   XmlSignificantWhitespace^ sigws = doc-&gt;CreateSignificantWhitespace( &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   currNode-&gt;InsertAfter( sigws, currNode-&gt;FirstChild );\n   Console::WriteLine();\n   Console::WriteLine( &quot;InnerText after...&quot; );\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;InnerText );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateSignificantWhitespace Example#1\"> using System;\n using System.Xml;\n \n public class Sample {\n   \n   public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;author xml:space=&#39;preserve&#39;&gt;&quot; +\n                   &quot;&lt;first-name&gt;Eva&lt;/first-name&gt;&quot;+\n                   &quot;&lt;last-name&gt;Corets&lt;/last-name&gt;&quot; + \n                   &quot;&lt;/author&gt;&quot;); \n         \n       Console.WriteLine(&quot;InnerText before...&quot;);\n       Console.WriteLine(doc.DocumentElement.InnerText);\n \n       // Add white space.     \n       XmlNode currNode = doc.DocumentElement;\n       XmlSignificantWhitespace sigws = doc.CreateSignificantWhitespace(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n       currNode.InsertAfter(sigws, currNode.FirstChild);\n \n       Console.WriteLine();\n       Console.WriteLine(&quot;InnerText after...&quot;);\n       Console.WriteLine(doc.DocumentElement.InnerText);\n \n   } \n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateSignificantWhitespace Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.Xml\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        \n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;author xml:space=&#39;preserve&#39;&gt;&quot; &amp; _\n                    &quot;&lt;first-name&gt;Eva&lt;/first-name&gt;&quot; &amp; _\n                    &quot;&lt;last-name&gt;Corets&lt;/last-name&gt;&quot; &amp; _\n                    &quot;&lt;/author&gt;&quot;)\n            \n        Console.WriteLine(&quot;InnerText before...&quot;)\n        Console.WriteLine(doc.DocumentElement.InnerText)\n            \n        &#39; Add white space.    \n        Dim currNode as XmlNode = doc.DocumentElement\n        Dim sigws As XmlSignificantWhitespace = doc.CreateSignificantWhitespace(ControlChars.Tab)\n        currNode.InsertAfter(sigws, currNode.FirstChild)\n            \n        Console.WriteLine()\n        Console.WriteLine(&quot;InnerText after...&quot;)\n        Console.WriteLine(doc.DocumentElement.InnerText)\n        \n    End Sub \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateTextNode_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateTextNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateTextNode(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmltext\" data-linktype=\"relative-path\">XmlText</a> with the specified text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlText CreateTextNode (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text for the Text node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmltext\" data-linktype=\"relative-path\">XmlText</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlText</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Text nodes are only allowed within Element, Attribute and EntityReference nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new element and adds it to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create a new node and add it to the document.\n   //The text node is the content of the price element.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;price&quot; );\n   XmlText^ text = doc-&gt;CreateTextNode( &quot;19.95&quot; );\n   doc-&gt;DocumentElement-&gt;AppendChild( elem );\n   doc-&gt;DocumentElement-&gt;LastChild-&gt;AppendChild( text );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create a new node and add it to the document.\n    //The text node is the content of the price element.\n    XmlElement elem = doc.CreateElement(&quot;price&quot;);\n    XmlText text = doc.CreateTextNode(&quot;19.95&quot;);\n    doc.DocumentElement.AppendChild(elem);\n    doc.DocumentElement.LastChild.AppendChild(text);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateElement Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot;  &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;  &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create a new node and add it to the document.\n        &#39;The text node is the content of the price element.\n        Dim elem As XmlElement = doc.CreateElement(&quot;price&quot;)\n        Dim text As XmlText = doc.CreateTextNode(&quot;19.95&quot;)\n        doc.DocumentElement.AppendChild(elem)\n        doc.DocumentElement.LastChild.AppendChild(text)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateWhitespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateWhitespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateWhitespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlwhitespace\" data-linktype=\"relative-path\">XmlWhitespace</a> node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string must contain only the following characters &#20; &#10; &#13; and &#9;</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwhitespace\" data-linktype=\"relative-path\">XmlWhitespace</a></div>\r\n                  </div>\r\n                  <p>A new <code>XmlWhitespace</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM). It is used when you want to manually format your document.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds white space to the document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateWhitespace Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;author&gt;&lt;first-name&gt;Eva&lt;/first-name&gt;&lt;last-name&gt;Corets&lt;/last-name&gt;&lt;/author&gt;&quot; );\n   Console::WriteLine( &quot;InnerText before...&quot; );\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;InnerText );\n   \n   // Add white space.     \n   XmlNode^ currNode = doc-&gt;DocumentElement;\n   XmlWhitespace^ ws = doc-&gt;CreateWhitespace( &quot;\\r<br>&quot; );\n   currNode-&gt;InsertAfter( ws, currNode-&gt;FirstChild );\n   Console::WriteLine();\n   Console::WriteLine( &quot;InnerText after...&quot; );\n   Console::WriteLine( doc-&gt;DocumentElement-&gt;InnerText );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateWhitespace Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.Xml\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;author&gt;&quot; &amp; _\n                    &quot;&lt;first-name&gt;Eva&lt;/first-name&gt;&quot; &amp; _\n                    &quot;&lt;last-name&gt;Corets&lt;/last-name&gt;&quot; &amp; _\n                    &quot;&lt;/author&gt;&quot;)\n            \n        Console.WriteLine(&quot;InnerText before...&quot;)\n        Console.WriteLine(doc.DocumentElement.InnerText)\n            \n        &#39; Add white space.    \n        Dim currNode as XmlNode = doc.DocumentElement\n        Dim ws As XmlWhitespace = doc.CreateWhitespace(ControlChars.CrLf)\n        currNode.InsertAfter(ws, currNode.FirstChild)\n            \n        Console.WriteLine()\n        Console.WriteLine(&quot;InnerText after...&quot;)\n        Console.WriteLine(doc.DocumentElement.InnerText)\n        \n    End Sub \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateWhitespace Example#1\"> using System;\n using System.Xml;\n \n public class Sample {\n\n   public static void Main() {\n \n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;author&gt;&quot; +\n                   &quot;&lt;first-name&gt;Eva&lt;/first-name&gt;&quot;+\n                   &quot;&lt;last-name&gt;Corets&lt;/last-name&gt;&quot; + \n                   &quot;&lt;/author&gt;&quot;); \n         \n       Console.WriteLine(&quot;InnerText before...&quot;);\n       Console.WriteLine(doc.DocumentElement.InnerText);\n \n       // Add white space.     \n       XmlNode currNode=doc.DocumentElement;\n       XmlWhitespace ws = doc.CreateWhitespace(&quot;\\r<br>&quot;);\n       currNode.InsertAfter(ws, currNode.FirstChild);\n \n       Console.WriteLine();\n       Console.WriteLine(&quot;InnerText after...&quot;);\n       Console.WriteLine(doc.DocumentElement.InnerText);\n \n   } \n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_CreateXmlDeclaration_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_CreateXmlDeclaration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateXmlDeclaration(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmldeclaration\" data-linktype=\"relative-path\">XmlDeclaration</a> node with the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The version must be &quot;1.0&quot;.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the encoding attribute. This is the encoding that is used when you save the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to a file or a stream; therefore, it must be set to a string supported by the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class, otherwise <span class=\"xref\">stem.Xml.XmlDocument.Save*</span> fails. If this is <code>null</code> or String.Empty, the <code>Save</code> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.  </p>\n<p> Note: If the <code>XmlDocument</code> is saved to either a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> or an <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a>, this encoding value is discarded. Instead, the encoding of the <code>TextWriter</code> or the <code>XmlTextWriter</code> is used. This ensures that the XML written out can be read back using the correct encoding.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>standalone</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value must be either &quot;yes&quot; or &quot;no&quot;. If this is <code>null</code> or String.Empty, the <code>Save</code> method does not write a standalone attribute on the XML declaration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldeclaration\" data-linktype=\"relative-path\">XmlDeclaration</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlDeclaration</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The values of <code>version</code> or <code>standalone</code> are something other than the ones specified above.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The attributes are exposed as special properties on the <code>XmlDeclaration</code> node, and not as <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> nodes.  </p>\n<p> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  </p>\n<p> According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), the <code>XmlDeclaration</code> node must be the first node in the document.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML declaration and adds it to the document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateXmlDeclaration Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    //Create an XML declaration. \n    XmlDeclaration xmldecl;\n    xmldecl = doc.CreateXmlDeclaration(&quot;1.0&quot;,null,null);\n\n    //Add the new node to the document.\n    XmlElement root = doc.DocumentElement;\n    doc.InsertBefore(xmldecl, root);\n        \n    Console.WriteLine(&quot;Display the modified XML...&quot;);        \n    doc.Save(Console.Out);\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateXmlDeclaration Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   //Create an XML declaration. \n   XmlDeclaration^ xmldecl;\n   xmldecl = doc-&gt;CreateXmlDeclaration( &quot;1.0&quot;, nullptr, nullptr );\n   \n   //Add the new node to the document.\n   XmlElement^ root = doc-&gt;DocumentElement;\n   doc-&gt;InsertBefore( xmldecl, root );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateXmlDeclaration Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot;)\n        \n        &#39;Create an XML declaration. \n        Dim xmldecl As XmlDeclaration\n        xmldecl = doc.CreateXmlDeclaration(&quot;1.0&quot;, Nothing, Nothing)\n        \n        &#39;Add the new node to the document.\n        Dim root As XmlElement = doc.DocumentElement\n        doc.InsertBefore(xmldecl, root)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_GetElementById_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_GetElementById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementById(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> with the specified ID.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlElement GetElementById (string elementId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute ID to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlElement</code> with the matching ID or <code>null</code> if no matching element is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the document has multiple elements with the matching ID, this method returns the first matching element in the document.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The DOM implementation must have information which defines which attributes are of type ID. Although attributes of type ID can be defined in either XSD schemas or DTDs, this version of the product only supports those defined in DTDs. Attributes with the name &quot;ID&quot; are not of type ID unless so defined in the DTD. Implementations where it is unknown whether the attributes are of type ID are expected to return <code>null</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>GetElementById</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.GetElementById Example#1\">\nusing System;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.Load(&quot;ids.xml&quot;);\n\n    //Get the first element with an attribute of type ID and value of A111.\n    //This displays the node &lt;Person SSN=&quot;A111&quot; Name=&quot;Fred&quot;/&gt;.\n    XmlElement elem = doc.GetElementById(&quot;A111&quot;);\n    Console.WriteLine( elem.OuterXml );\n\n    //Get the first element with an attribute of type ID and value of A222.\n    //This displays the node &lt;Person SSN=&quot;A222&quot; Name=&quot;Tom&quot;/&gt;.\n    elem = doc.GetElementById(&quot;A222&quot;);\n    Console.WriteLine( elem.OuterXml ); \n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.GetElementById Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;ids.xml&quot; );\n   \n   //Get the first element with an attribute of type ID and value of A111.\n   //This displays the node &lt;Person SSN=&quot;A111&quot; Name=&quot;Fred&quot;/&gt;.\n   XmlElement^ elem = doc-&gt;GetElementById( &quot;A111&quot; );\n   Console::WriteLine( elem-&gt;OuterXml );\n   \n   //Get the first element with an attribute of type ID and value of A222.\n   //This displays the node &lt;Person SSN=&quot;A222&quot; Name=&quot;Tom&quot;/&gt;.\n   elem = doc-&gt;GetElementById( &quot;A222&quot; );\n   Console::WriteLine( elem-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.GetElementById Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim doc As New XmlDocument()\n        doc.Load(&quot;ids.xml&quot;)\n        \n        &#39;Get the first element with an attribute of type ID and value of A111.\n        &#39;This displays the node &lt;Person SSN=&quot;A111&quot; Name=&quot;Fred&quot;/&gt;.\n        Dim elem As XmlElement = doc.GetElementById(&quot;A111&quot;)\n        Console.WriteLine(elem.OuterXml)\n        \n        &#39;Get the first element with an attribute of type ID and value of A222.\n        &#39;This displays the node &lt;Person SSN=&quot;A222&quot; Name=&quot;Tom&quot;/&gt;.\n        elem = doc.GetElementById(&quot;A222&quot;)\n        Console.WriteLine(elem.OuterXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>ids.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\">&lt;!DOCTYPE root [  \n  &lt;!ELEMENT root ANY&gt;   \n  &lt;!ELEMENT Person ANY&gt;   \n  &lt;!ELEMENT Customer EMPTY&gt;  \n  &lt;!ELEMENT Team EMPTY&gt;  \n  &lt;!ATTLIST Person SSN ID #REQUIRED&gt;  \n  &lt;!ATTLIST Customer id IDREF #REQUIRED &gt;  \n  &lt;!ATTLIST Team members IDREFS #REQUIRED&gt;]&gt;  \n&lt;root&gt;  \n  &lt;Person SSN=&#39;A111&#39; Name=&#39;Fred&#39;/&gt;  \n  &lt;Person SSN=&#39;A222&#39; Name=&#39;Tom&#39;/&gt;  \n  &lt;Customer id=&#39;A222334444&#39;/&gt;  \n  &lt;Team members=&#39;A222334444 A333445555&#39;/&gt;  \n&lt;/root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_GetElementsByTagName_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_GetElementsByTagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementsByTagName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlDocument.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name to match. It is matched against the <code>Name</code> property of the matching node. The special value &quot;*&quot; matches all tags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all matching nodes. If no nodes match <code>name</code>, the returned collection will be empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The nodes are placed in the order in which they would be encountered in the document.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is recommended that you use the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_\" data-linktype=\"relative-path\">SelectNodes</a> or <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_\" data-linktype=\"relative-path\">SelectSingleNode</a> method instead of the GetElementsByTagName method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <code>XmlDocument</code> object and uses the <code>GetElementsByTagName</code> method and the resulting <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object to display all the book titles.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.Load(&quot;books.xml&quot;);\n\n    //Display all the book titles.\n    XmlNodeList elemList = doc.GetElementsByTagName(&quot;title&quot;);\n    for (int i=0; i &lt; elemList.Count; i++)\n    {   \n      Console.WriteLine(elemList[i].InnerXml);\n    }  \n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\n\nint main()\n{\n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;books.xml&quot; );\n   \n   //Display all the book titles.\n   XmlNodeList^ elemList = doc-&gt;GetElementsByTagName( &quot;title&quot; );\n   for ( int i = 0; i &lt; elemList-&gt;Count; i++ )\n   {\n      Console::WriteLine( elemList[ i ]-&gt;InnerXml );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.GetElementsByTagName Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.Load(&quot;books.xml&quot;)\n        \n        &#39;Display all the book titles.\n        Dim elemList As XmlNodeList = doc.GetElementsByTagName(&quot;title&quot;)\n        Dim i As Integer\n        For i = 0 To elemList.Count - 1\n            Console.WriteLine(elemList(i).InnerXml)\n        Next i\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the <code>books.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XslTransform.Transform7 Example#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;!-- This file represents a fragment of a book store inventory database --&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n    &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;8.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n    &lt;title&gt;The Gorgias&lt;/title&gt;\n    &lt;author&gt;\n      &lt;name&gt;Plato&lt;/name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;9.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_GetElementsByTagName_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_GetElementsByTagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementsByTagName(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlDocument.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlNode.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The LocalName to match. The special value &quot;*&quot; matches all tags.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>NamespaceURI to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all matching nodes. If no nodes match the specified <code>localName</code> and <code>namespaceURI</code>, the returned collection will be empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The nodes are placed in the order in which they would be encountered in the document tree.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is recommended that you use the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_\" data-linktype=\"relative-path\">SelectNodes</a> or <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_\" data-linktype=\"relative-path\">SelectSingleNode</a> method instead of the GetElementsByTagName method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_ImportNode_System_Xml_XmlNode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_ImportNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImportNode(XmlNode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Imports a node from another document to the current document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>node</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The node being imported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>deep</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform a deep clone; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The imported <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling this method on a node type which cannot be imported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned node has no parent. The source node is not altered or removed from the original document; <code>ImportNode</code> creates a copy of the source node.  </p>\n<p> Importing a node creates an <code>XmlNode</code> object owned by the importing document, with <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_NodeType_\" data-linktype=\"relative-path\">NodeType</a> identical to the source node. The new object also has the attributes related to namespaces (<a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Prefix_\" data-linktype=\"relative-path\">Prefix</a>, <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_LocalName_\" data-linktype=\"relative-path\">LocalName</a>, and <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>).  </p>\n<p> Depending on the node type of the imported node and the value of the <code>deep</code> parameter, additional information is copied as appropriate. This method attempts to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another (recognizing that, in the XML case, the two documents could have different DTDs).  </p>\n<p> The following table describes the specific behavior for each <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>ImportNode(true)</th>\n<th>ImportNode(false)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Attribute</td>\n<td>The <a class=\"xref\" href=\"system.xml.xmlattribute#System_Xml_XmlAttribute_Specified_\" data-linktype=\"relative-path\">Specified</a> property is set to <code>true</code> on the generated <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>. The descendants of the source <code>XmlAttribute</code> are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</td>\n<td>The <code>deep</code> parameter does not apply to <code>XmlAttribute</code> nodes; they always carry their children with them when imported.</td>\n</tr>\n<tr>\n<td>CData</td>\n<td>Copies the node, including its data.</td>\n<td>Copies the node, including its data.</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>Copies the node, including its data.</td>\n<td>Copies the node, including its data.</td>\n</tr>\n<tr>\n<td>DocumentFragment</td>\n<td>The descendants of the source node are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</td>\n<td>An empty <a class=\"xref\" href=\"system.xml.xmldocumentfragment\" data-linktype=\"relative-path\">XmlDocumentFragment</a> is generated.</td>\n</tr>\n<tr>\n<td>DocumentType</td>\n<td>Copies the node, including its data.*</td>\n<td>Copies the node, including its data.*</td>\n</tr>\n<tr>\n<td>Element</td>\n<td>The descendants of the source element and its specified attribute nodes are recursively imported and the resulting nodes reassembled to form the corresponding subtree.<br><br> Note: Default attributes are not copied. If the document being imported into defines default attributes for this element name, those are assigned.</td>\n<td>Specified attribute nodes of the source element are imported, and the generated <code>XmlAttribute</code> nodes are attached to the generated <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a>.<br><br> Note: Default attributes are not copied. If the document being imported into defines default attributes for this element name, those are assigned.</td>\n</tr>\n<tr>\n<td>EntityReference</td>\n<td>Because the source and destination documents could have the entities defined differently, this method only copies the <a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a> node. The replacement text is not included. If the destination document has the entity defined, its value is assigned.</td>\n<td>Because the source and destination documents could have the entities defined differently, this method only copies the <a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a> node. The replacement text is not included. If the destination document has the entity defined, its value is assigned.</td>\n</tr>\n<tr>\n<td>ProcessingInstruction</td>\n<td>Copies the target and data value from the imported node.</td>\n<td>Copies the target and data value from the imported node.</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>Copies the node, including its data.</td>\n<td>Copies the node, including its data.</td>\n</tr>\n<tr>\n<td>SignificantWhitespace</td>\n<td>Copies the node, including its data.</td>\n<td>Copies the node, including its data.</td>\n</tr>\n<tr>\n<td>Whitespace</td>\n<td>Copies the node, including its data.</td>\n<td>Copies the node, including its data.</td>\n</tr>\n<tr>\n<td>XmlDeclaration</td>\n<td>Copies the target and data value from the imported node.</td>\n<td>Copies the target and data value from the imported node.</td>\n</tr>\n<tr>\n<td>All other node types.</td>\n<td>These node types cannot be imported.</td>\n<td>These node types cannot be imported.</td>\n</tr>\n</tbody>\n</table>\n<p> *Although DocumentType nodes can be imported, a document can only have one DocumentType. If the document currently has a DocumenType node, it must be removed before adding a new one.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example imports a book node from a second XML document into the original XML document.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.ImportNode Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;bookstore&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot; &amp; _\n                    &quot;&lt;/bookstore&gt;&quot;)\n        \n        &#39;Create another XmlDocument which holds a list of books.\n        Dim doc2 As New XmlDocument()\n        doc2.Load(&quot;books.xml&quot;)\n        \n        &#39;Import the last book node from doc2 into the original document.\n        Dim newBook As XmlNode = doc.ImportNode(doc2.DocumentElement.LastChild, True)\n        doc.DocumentElement.AppendChild(newBook)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.ImportNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;bookstore&gt;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&lt;/bookstore&gt;&quot; );\n   \n   //Create another XmlDocument which holds a list of books.\n   XmlDocument^ doc2 = gcnew XmlDocument;\n   doc2-&gt;Load( &quot;books.xml&quot; );\n   \n   //Import the last book node from doc2 into the original document.\n   XmlNode^ newBook = doc-&gt;ImportNode( doc2-&gt;DocumentElement-&gt;LastChild, true );\n   doc-&gt;DocumentElement-&gt;AppendChild( newBook );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.ImportNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;bookstore&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot; +\n                &quot;&lt;/bookstore&gt;&quot;);\n\n    //Create another XmlDocument which holds a list of books.\n    XmlDocument doc2 = new XmlDocument();\n    doc2.Load(&quot;books.xml&quot;);\n\n    //Import the last book node from doc2 into the original document.\n    XmlNode newBook = doc.ImportNode(doc2.DocumentElement.LastChild, true);\n    doc.DocumentElement.AppendChild(newBook); \n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><p> The example uses the file, <code>books.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XslTransform.Transform7 Example#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;!-- This file represents a fragment of a book store inventory database --&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n    &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;8.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n    &lt;title&gt;The Gorgias&lt;/title&gt;\n    &lt;author&gt;\n      &lt;name&gt;Plato&lt;/name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;9.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Load_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the XML document from the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (System.IO.Stream inStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML document to load.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>There is a load or parse error in the XML. In this case, a <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> is raised.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <code>Load</code> method always preserves significant white space. The <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is <code>false</code>; white space in element content is not preserved.  </p>\n</div>\n<p> If you want validation to occur, you can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).  </p>\n<p> This method automatically detects the string format of the input XML (for example, UTF-8, ANSI, and so on). If your application needs to know which encoding is used to read the stream, consider using an <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> object to read the stream, and then use the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property to determine the encoding. If you need to use a <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object to work with XML, you can use the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> object to create one. For more information, see <a href=\"../Topic/Reading%20XML%20Data%20using%20XPathDocument%20and%20XmlDocument.md\" data-linktype=\"relative-path\">Reading XML Data using XPathDocument and XmlDocument</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Load_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the XML document from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (System.IO.TextReader txtReader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>txtReader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> used to feed the XML data into the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>There is a load or parse error in the XML. In this case, the document remains empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <code>Load</code> method always preserves significant white space. The <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is <code>false</code>; white space in element content is not preserved.  </p>\n</div>\n<p> If you want validation to occur, you can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> class to load a string of XML data into the <code>XmlDocument</code> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n\n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    string xmlData = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;;\n\n    doc.Load(new StringReader(xmlData));\n\n    // Create a new element and add it to the document.\n    XmlElement elem = doc.CreateElement(&quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot;);\n    elem.InnerText = &quot;fantasy&quot;;\n    doc.DocumentElement.AppendChild(elem);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main() \n\n    &#39; Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    Dim xmlData as string = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;\n\n    doc.Load(new StringReader(xmlData))\n\n    &#39; Create a new element and add it to the document.\n    Dim elem as XmlElement = doc.CreateElement(&quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot;)\n    elem.InnerText = &quot;fantasy&quot;\n    doc.DocumentElement.AppendChild(elem)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    doc.Save(Console.Out)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.CreateElement2 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   String^ xmlData = &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&lt;/book&gt;&quot;;\n   doc-&gt;Load( gcnew StringReader( xmlData ) );\n   \n   // Create a new element and add it to the document.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;bk&quot;, &quot;genre&quot;, &quot;urn:samples&quot; );\n   elem-&gt;InnerText = &quot;fantasy&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( elem );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Load_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the XML document from the specified URL.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (string filename);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filename</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>There is a load or parse error in the XML. In this case, a <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> is raised.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>filename</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>filename</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>filename</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>filename</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>filename</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>filename</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <code>Load</code> method always preserves significant white space. The <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is <code>false</code>; white space in element content is not preserved.  </p>\n</div>\n<p> If you want validation to occur, you can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Load_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the XML document from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlReader</code> used to feed the XML data into the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>There is a load or parse error in the XML. In this case, the document remains empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <code>Load</code> method always preserves significant white space. The <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is <code>false</code>; white space in element content is not preserved.  </p>\n</div>\n<p> If the reader is in the initial state (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> =ReadState.Initial), <code>Load</code> consumes the entire contents of the reader and builds the DOM from what it finds.  </p>\n<p> If the reader is already positioned on some node at depth &quot;n&quot;, this method loads that node and all subsequent siblings up to the end tag that closes depth &quot;n&quot;. This has the following results.  </p>\n<p> If the current node and its siblings look like the following:  </p>\n<pre><code>&lt;!--comment--&gt;&lt;element1&gt;one&lt;/element1&gt;&lt;element2&gt;two&lt;/element2&gt;  \n</code></pre><p> <code>Load</code> throws an exception because a document cannot have two root level elements. If the current node and its siblings look like the following:  </p>\n<pre><code>&lt;!--comment--&gt;&lt;?process instruction?&gt;&lt;!--comment--&gt;&lt;/endtag&gt;  \n</code></pre><p> <code>Load</code> succeeds, but you have an incomplete DOM tree because there is no root level element. Before you save the document, you must add a root level element, otherwise <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Save_\" data-linktype=\"relative-path\">Save</a> will throw an exception.  </p>\n<p> If the reader is positioned on a leaf node that is invalid for the root level of a document, for example a white space or attribute node, the reader continues to read until it is positioned on a node that can be used for the root. The document begins loading at this point.  </p>\n<p> If you want validation to occur, you can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads the last book node of the <code>books.xml</code> file into the XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.Load2 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n\n    //Load the the document with the last book node.\n    XmlTextReader reader = new XmlTextReader(&quot;books.xml&quot;);\n    reader.WhitespaceHandling = WhitespaceHandling.None;\n    reader.MoveToContent();\n    reader.Read();\n    reader.Skip(); //Skip the first book.\n    reader.Skip(); //Skip the second book.\n    doc.Load(reader);\n\n    doc.Save(Console.Out);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.Load2 Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        \n        &#39;Load the the document with the last book node.\n        Dim reader As New XmlTextReader(&quot;books.xml&quot;)\n        reader.WhitespaceHandling = WhitespaceHandling.None\n        reader.MoveToContent()\n        reader.Read()\n        reader.Skip() &#39;Skip the first book.\n        reader.Skip() &#39;Skip the second book.\n        doc.Load(reader)\n        \n        doc.Save(Console.Out)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.Load2 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Load the the document with the last book node.\n   XmlTextReader^ reader = gcnew XmlTextReader( &quot;books.xml&quot; );\n   reader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   reader-&gt;MoveToContent();\n   reader-&gt;Read();\n   reader-&gt;Skip(); //Skip the first book.\n   reader-&gt;Skip(); //Skip the second book.\n   doc-&gt;Load( reader );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><p> The example uses the file, <code>books.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XslTransform.Transform7 Example#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;!-- This file represents a fragment of a book store inventory database --&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n    &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;8.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n    &lt;title&gt;The Gorgias&lt;/title&gt;\n    &lt;author&gt;\n      &lt;name&gt;Plato&lt;/name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;9.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_LoadXml_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_LoadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadXml(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the XML document from the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void LoadXml (string xml);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xml</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>String containing the XML document to load.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>There is a load or parse error in the XML. In this case, the document remains empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default the <code>LoadXml</code> method does not preserve white space or significant white space.  </p>\n<p> This method parses DTDs, but does not do DTD or Schema validation. If you want validation to occur, you can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n<p> If you want to load from a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, or <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, use the Load method instead of this method.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads XML into an <code>XmlDocument</code> object and saves it out to a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot; );\n   \n   // Add a price element.\n   XmlElement^ newElem = doc-&gt;CreateElement( &quot;price&quot; );\n   newElem-&gt;InnerText = &quot;10.95&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( newElem );\n   \n   // Save the document to a file and auto-indent the output.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( &quot;data.xml&quot;, nullptr );\n   writer-&gt;Formatting = Formatting::Indented;\n   doc-&gt;Save( writer );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">using System;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n \n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;);\n\n   // Add a price element.\n   XmlElement newElem = doc.CreateElement(&quot;price&quot;);\n   newElem.InnerText = &quot;10.95&quot;;\n   doc.DocumentElement.AppendChild(newElem);\n\n   XmlWriterSettings settings = new XmlWriterSettings();\n   settings.Indent = true;\n   // Save the document to a file and auto-indent the output.\n   XmlWriter writer = XmlWriter.Create(&quot;data.xml&quot;, settings);\n    doc.Save(writer);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">Imports System\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main() \n \n    &#39; Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;)\n\n   &#39; Add a price element.\n   Dim newElem as XmlElement = doc.CreateElement(&quot;price&quot;)\n   newElem.InnerText = &quot;10.95&quot;\n   doc.DocumentElement.AppendChild(newElem)\n\n   Dim settings As New XmlWriterSettings()\n   settings.Indent = True\n   &#39; Save the document to a file and auto-indent the output.\n   Dim writer As XmlWriter = XmlWriter.Create(&quot;data.xml&quot;, settings)\n    doc.Save(writer)\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_ReadNode_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_ReadNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadNode(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object based on the information in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The reader must be positioned on a node or attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML source</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </div>\r\n                  <p>The new <code>XmlNode</code> or <code>null</code> if no more nodes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Reads one <code>XmlNode</code> from the given reader and positions the reader on the next node. This method creates the type of <code>XmlNode</code> matching the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_NodeType_\" data-linktype=\"relative-path\">NodeType</a> on which the reader is currently positioned. (If the reader is in the initial state, <code>ReadNode</code> advances the reader to the first node and then operates on that node.)  </p>\n<p> If the reader is positioned on the start of an element, <code>ReadNode</code> reads all the attributes and any child nodes, up to and including the end tag of the current node. The <code>XmlNode</code> returned contains the sub-tree representing everything read. The reader is positioned immediately after the end tag.  </p>\n<p> <code>ReadNode</code> can also read attributes, but in this case it does not advance the reader to the next attribute. This allows you to write the following C# code:  </p>\n<pre><code>XmlDocument doc = new XmlDocument();  \nwhile (reader.MoveToNextAttribute())  \n{  \n  XmlNode a = doc.ReadNode(reader);  \n  // Do some more processing.  \n}  \n</code></pre><p> <code>ReadNode</code> does consume the attribute value though, which means after calling <code>ReadNode</code> on an attribute, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses <code>ReadNode</code> to create a new node and then inserts the new node into the document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.ReadNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    //Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;bookstore&gt;&quot; +\n                &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot; +\n                &quot;&lt;/bookstore&gt;&quot;);\n\n    //Create a reader.\n    XmlTextReader reader = new XmlTextReader(&quot;cd.xml&quot;);\n    reader.MoveToContent(); //Move to the cd element node.\n\n    //Create a node representing the cd element node.\n    XmlNode cd = doc.ReadNode(reader);\n\n    //Insert the new node into the document.\n    doc.DocumentElement.AppendChild(cd); \n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.ReadNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;bookstore&gt;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&lt;/bookstore&gt;&quot; );\n   \n   //Create a reader.\n   XmlTextReader^ reader = gcnew XmlTextReader( &quot;cd.xml&quot; );\n   reader-&gt;MoveToContent(); //Move to the cd element node.\n   \n   //Create a node representing the cd element node.\n   XmlNode^ cd = doc-&gt;ReadNode( reader );\n   \n   //Insert the new node into the document.\n   doc-&gt;DocumentElement-&gt;AppendChild( cd );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.ReadNode Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create the XmlDocument.\n        Dim doc As New XmlDocument()\n        doc.LoadXml(&quot;&lt;bookstore&gt;&quot; &amp; _\n                    &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                    &quot;&lt;/book&gt;&quot; &amp; _\n                    &quot;&lt;/bookstore&gt;&quot;)\n        \n        &#39;Create a reader.\n        Dim reader As New XmlTextReader(&quot;cd.xml&quot;)\n        reader.MoveToContent() &#39;Move to the cd element node.\n        &#39;Create a node representing the cd element node.\n        Dim cd As XmlNode = doc.ReadNode(reader)\n        \n        &#39;Insert the new node into the document.\n        doc.DocumentElement.AppendChild(cd)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>cd.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlDocument.ReadNode Example#2\">\n&lt;!-- sample CD --&gt;\n&lt;cd genre=&#39;alternative&#39;&gt;\n  &lt;title&gt;Americana&lt;/title&gt;\n  &lt;artist&gt;Offspring&lt;/artist&gt;\n&lt;/cd&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Save_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the XML document to the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Save (System.IO.Stream outStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>White space is preserved only if <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> is set to <code>true</code>.  </p>\n<p> The XmlDeclaration of the current <code>XmlDocument</code> object determines the encoding attribute in the saved document. The value of the encoding attribute is taken from the <a class=\"xref\" href=\"system.xml.xmldeclaration#System_Xml_XmlDeclaration_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property. If the <code>XmlDocument</code> does not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding attribute, the saved document will not have one either.  </p>\n<p> When the document is saved, xmlns attributes are generated to persist the node identity (local name + namespace URI) correctly. For example, the following C# code  </p>\n<pre><code>XmlDocument doc = new XmlDocument();  \ndoc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));  \ndoc.Save(Console.Out);  \n</code></pre><p> generates this xmls attribute <code>&lt;item xmls=&quot;urn:1&quot;/&gt;</code>.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).  </p>\n<p> Note that only the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Save_\" data-linktype=\"relative-path\">Save</a> method enforces a well-formed XML document. All other <code>Save</code> overloads only guarantee a well-formed fragment.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Save_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the XML document to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Save (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The encoding on the <code>TextWriter</code> determines the encoding that is written out (The encoding of the XmlDeclaration node is replaced by the encoding of the <code>TextWriter</code>). If there was no encoding specified on the <code>TextWriter</code>, the <code>XmlDocument</code> is saved without an encoding attribute.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).  </p>\n<p> Note that only the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Save_\" data-linktype=\"relative-path\">Save</a> method enforces a well-formed XML document. All other <code>Save</code> overloads only guarantee a well-formed fragment.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Save_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the XML document to the specified file. If the specified file exists, this method overwrites it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Save (string filename);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filename</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the file where you want to save the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>White space is preserved in the output file only if <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> is set to <code>true</code>.  </p>\n<p> The XmlDeclaration of the current <code>XmlDocument</code> object determines the encoding attribute in the saved document. The value of the encoding attribute is taken from the <a class=\"xref\" href=\"system.xml.xmldeclaration#System_Xml_XmlDeclaration_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property. If the <code>XmlDocument</code> does not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding attribute, the saved document will not have one either.  </p>\n<p> When the document is saved, xmlns attributes are generated to persist the node identity (local name + namespace URI) correctly. For example, the following C# code  </p>\n<pre><code>XmlDocument doc = new XmlDocument();  \ndoc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));  \ndoc.Save(Console.Out);  \n</code></pre><p> generates this xmls attribute <code>&lt;item xmls=&quot;urn:1&quot;/&gt;</code>.  </p>\n<p> This method is a Microsoft extension to the Document Object Model (DOM).  </p>\n<p> Note that only the Save method enforces a well-formed XML document. All other <code>Save</code> overloads only guarantee a well-formed fragment.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.Save Example#1\">using System;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n \n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;);\n\n    // Add a price element.\n    XmlElement newElem = doc.CreateElement(&quot;price&quot;);\n    newElem.InnerText = &quot;10.95&quot;;\n    doc.DocumentElement.AppendChild(newElem);\n\n    // Save the document to a file. White space is\n    // preserved (no white space).\n    doc.PreserveWhitespace = true;\n    doc.Save(&quot;data.xml&quot;);\n \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.Save Example#1\">Imports System\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main() \n \n    &#39; Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;)\n\n    &#39; Add a price element.\n    Dim newElem as XmlElement = doc.CreateElement(&quot;price&quot;)\n    newElem.InnerText = &quot;10.95&quot;\n    doc.DocumentElement.AppendChild(newElem)\n\n    &#39; Save the document to a file. White space is\n    &#39; preserved (no white space).\n    doc.PreserveWhitespace = true\n    doc.Save(&quot;data.xml&quot;)\n \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.Save Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot; );\n   \n   // Add a price element.\n   XmlElement^ newElem = doc-&gt;CreateElement( &quot;price&quot; );\n   newElem-&gt;InnerText = &quot;10.95&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( newElem );\n   \n   // Save the document to a file. White space is\n   // preserved (no white space).\n   doc-&gt;PreserveWhitespace = true;\n   doc-&gt;Save( &quot;data.xml&quot; );\n}\n</code></pre><p> The data.xml file will contain the following XML: <code>&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;price&gt;10.95&lt;/price&gt;&lt;/item&gt;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Save_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the XML document to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Save (System.Xml.XmlWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>White space is preserved only if <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_PreserveWhitespace_\" data-linktype=\"relative-path\">PreserveWhitespace</a> is set to <code>true</code>.  </p>\n<p> The encoding on the <code>XmlWriter</code> determines the encoding that is written out (The encoding of the XmlDeclaration node is replaced by the encoding of the <code>XmlWriter</code>). If there was no encoding specified on the <code>XmlWriter</code>, the <code>XmlDocument</code> is saved without an encoding attribute.  </p>\n<p> When the document is saved, xmlns attributes are generated to persist the node identity (LocalName + NamespaceURI) correctly. For example, the following C# code  </p>\n<pre><code>XmlDocument doc = new XmlDocument();  \ndoc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));  \ndoc.Save(Console.Out);  \n</code></pre><p> generates this xmls attribute:  </p>\n<pre><code>&lt;item  \n    xmls=&quot;urn:1&quot;/&gt;  \n</code></pre><p> This method is a Microsoft extension to the Document Object Model (DOM).  </p>\n<p> Note that only the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Save_\" data-linktype=\"relative-path\">Save</a> method enforces a well-formed XML document. All other <code>Save</code> overloads only guarantee a well-formed fragment.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads XML into an <code>XmlDocument</code> object and saves it out to a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XmlDocument.\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot; );\n   \n   // Add a price element.\n   XmlElement^ newElem = doc-&gt;CreateElement( &quot;price&quot; );\n   newElem-&gt;InnerText = &quot;10.95&quot;;\n   doc-&gt;DocumentElement-&gt;AppendChild( newElem );\n   \n   // Save the document to a file and auto-indent the output.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( &quot;data.xml&quot;, nullptr );\n   writer-&gt;Formatting = Formatting::Indented;\n   doc-&gt;Save( writer );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">using System;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n \n    // Create the XmlDocument.\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;);\n\n   // Add a price element.\n   XmlElement newElem = doc.CreateElement(&quot;price&quot;);\n   newElem.InnerText = &quot;10.95&quot;;\n   doc.DocumentElement.AppendChild(newElem);\n\n   XmlWriterSettings settings = new XmlWriterSettings();\n   settings.Indent = true;\n   // Save the document to a file and auto-indent the output.\n   XmlWriter writer = XmlWriter.Create(&quot;data.xml&quot;, settings);\n    doc.Save(writer);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.LoadXml Example#1\">Imports System\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main() \n \n    &#39; Create the XmlDocument.\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;item&gt;&lt;name&gt;wrench&lt;/name&gt;&lt;/item&gt;&quot;)\n\n   &#39; Add a price element.\n   Dim newElem as XmlElement = doc.CreateElement(&quot;price&quot;)\n   newElem.InnerText = &quot;10.95&quot;\n   doc.DocumentElement.AppendChild(newElem)\n\n   Dim settings As New XmlWriterSettings()\n   settings.Indent = True\n   &#39; Save the document to a file and auto-indent the output.\n   Dim writer As XmlWriter = XmlWriter.Create(&quot;data.xml&quot;, settings)\n    doc.Save(writer)\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Validate_System_Xml_Schema_ValidationEventHandler_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(ValidationEventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>Validates the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> against the XML Schema Definition Language (XSD) schemas contained in the <span class=\"xref\">stem.Xml.XmlDocument.Schemas*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> object that receives information about schema validation warnings and errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>A schema validation event occurred and no <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> object was specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Validate method validates the XML data in the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> against the schemas contained in the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property. The Validate method performs infoset augmentation. Specifically, after successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items. The result is a previously un-typed XML sub-tree in the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> replaced with a typed sub-tree.  </p>\n<p> The following are important notes to consider when using the Validate method.  </p>\n<ul>\n<li><p>Schema location hints like <code>xsi:schemaLocation</code> or <code>xsi:noNamespaceSchemaLocation</code> are ignored.  </p>\n</li>\n<li><p>Inline schemas are ignored.  </p>\n</li>\n<li><p>If schema validation errors occur during validation the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> becomes partially validated with some nodes with correct type information and some without.  </p>\n</li>\n<li><p>The validation process includes checking for uniqueness and reference constraints (<code>xs:ID</code>, <code>xs:IDREF</code>, <code>xs:key</code>, <code>xs:keyref</code>, and <code>xs:unique</code>).</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates use of the Validate method. The example creates an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> that contains an associated XSD schema using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> and <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> objects. The example then uses the <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  </p>\n<pre><code class=\"lang-cs\" name=\"XPathValidation#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.XPath;\n\nclass XPathValidation\n{\n    static void Main()\n    {\n        try\n        {\n            XmlReaderSettings settings = new XmlReaderSettings();\n            settings.Schemas.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n            settings.ValidationType = ValidationType.Schema;\n\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;, settings);\n            XmlDocument document = new XmlDocument();\n            document.Load(reader);\n\n            ValidationEventHandler eventHandler = new ValidationEventHandler(ValidationEventHandler);\n\n            // the following call to Validate succeeds.\n            document.Validate(eventHandler);\n\n            // add a node so that the document is no longer valid\n            XPathNavigator navigator = document.CreateNavigator();\n            navigator.MoveToFollowing(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;);\n            XmlWriter writer = navigator.InsertAfter();\n            writer.WriteStartElement(&quot;anotherNode&quot;, &quot;http://www.contoso.com/books&quot;);\n            writer.WriteEndElement();\n            writer.Close();\n\n            // the document will now fail to successfully validate\n            document.Validate(eventHandler);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n\n    static void ValidationEventHandler(object sender, ValidationEventArgs e)\n    {\n        switch (e.Severity)\n        {\n            case XmlSeverityType.Error:\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n                break;\n            case XmlSeverityType.Warning:\n                Console.WriteLine(&quot;Warning {0}&quot;, e.Message);\n                break;\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XPathValidation#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\nusing namespace System::Xml::XPath;\n\nclass XPathValidation\n{\npublic:\n\n    static void Main()\n    {\n        try\n        {\n            XmlReaderSettings^ settings = gcnew XmlReaderSettings();\n            settings-&gt;Schemas-&gt;Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n            settings-&gt;ValidationType = ValidationType::Schema;\n\n            XmlReader^ reader = XmlReader::Create(&quot;contosoBooks.xml&quot;, settings);\n            XmlDocument^ document = gcnew XmlDocument();\n            document-&gt;Load(reader);\n\n            ValidationEventHandler^ eventHandler = gcnew ValidationEventHandler(ValidationEventHandlerOne);\n\n            // the following call to Validate succeeds.\n            document-&gt;Validate(eventHandler);\n\n            // add a node so that the document is no longer valid\n            XPathNavigator^ navigator = document-&gt;CreateNavigator();\n            navigator-&gt;MoveToFollowing(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;);\n            XmlWriter^ writer = navigator-&gt;InsertAfter();\n            writer-&gt;WriteStartElement(&quot;anotherNode&quot;, &quot;http://www.contoso.com/books&quot;);\n            writer-&gt;WriteEndElement();\n            writer-&gt;Close();\n\n            // the document will now fail to successfully validate\n            document-&gt;Validate(eventHandler);\n        }\n        catch(Exception^ ex)\n        {\n            Console::WriteLine(ex-&gt;Message);\n        }\n    }\n\n    static void ValidationEventHandlerOne(Object^ sender, ValidationEventArgs^ e)\n    {\n        switch (e-&gt;Severity)\n        {\n        case XmlSeverityType::Error:\n            Console::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n            break;\n        case XmlSeverityType::Warning:\n            Console::WriteLine(&quot;Warning {0}&quot;, e-&gt;Message);\n            break;\n        }\n\n    }\n};\n\nint main()\n{\n    XPathValidation::Main();\n    Console::ReadLine();\n    return 0;\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"XPathValidation#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.XPath\n\nClass XPathValidation\n\n    Shared Sub Main()\n\n        Try\n\n            Dim settings As XmlReaderSettings = New XmlReaderSettings()\n            settings.Schemas.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n            settings.ValidationType = ValidationType.Schema\n\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;, settings)\n            Dim document As XmlDocument = New XmlDocument()\n            document.Load(reader)\n\n            Dim eventHandler As ValidationEventHandler = New ValidationEventHandler(AddressOf ValidationEventHandler)\n\n            &#39; the following call to Validate succeeds.\n            document.Validate(eventHandler)\n\n            &#39; add a node so that the document is no longer valid\n            Dim navigator As XPathNavigator = document.CreateNavigator()\n            navigator.MoveToFollowing(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;)\n            Dim writer As XmlWriter = navigator.InsertAfter()\n            writer.WriteStartElement(&quot;anotherNode&quot;, &quot;http://www.contoso.com/books&quot;)\n            writer.WriteEndElement()\n            writer.Close()\n\n            &#39; the document will now fail to successfully validate\n            document.Validate(eventHandler)\n\n        Catch ex As Exception\n\n            Console.WriteLine(ex.Message)\n\n        End Try\n\n    End Sub\n\n    Shared Sub ValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n        Select Case e.Severity\n            Case XmlSeverityType.Error\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n            Case XmlSeverityType.Warning\n                Console.WriteLine(&quot;Warning {0}&quot;, e.Message)\n        End Select\n\n    End Sub\n\nEnd Class\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> and <code>contosoBooks.xsd</code> files as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_Validate_System_Xml_Schema_ValidationEventHandler_System_Xml_XmlNode_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(ValidationEventHandler,XmlNode)</div>        \r\n          </div>\r\n    \r\n            <p>Validates the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object specified against the XML Schema Definition Language (XSD) schemas in the <span class=\"xref\">stem.Xml.XmlDocument.Schemas*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> object that receives information about schema validation warnings and errors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nodeToValidate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">System.Xml.XmlNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object created from an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to validate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object parameter was not created from an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object parameter is not an element, attribute, document fragment, or the root node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>A schema validation event occurred and no <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> object was specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Validate method validates the XML data in the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object against the schemas contained in the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property. The Validate method performs infoset augmentation. Specifically, after successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items. The result is a previously un-typed XML sub-tree in the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> replaced with a typed sub-tree.  </p>\n<p> The following are important notes to consider when using the Validate method.  </p>\n<ul>\n<li><p>Schema location hints like <code>xsi:schemaLocation</code> or <code>xsi:noNamespaceSchemaLocation</code> are ignored.  </p>\n</li>\n<li><p>Inline schemas are ignored.  </p>\n</li>\n<li><p>If schema validation errors occur during validation the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> becomes partially validated with some nodes with correct type information and some without.  </p>\n<p>If the node to validate is the root node, the validation process includes checking for uniqueness and reference constraints (<code>xs:ID</code>, <code>xs:IDREF</code>, <code>xs:key</code>, <code>xs:keyref</code>, and <code>xs:unique</code>); otherwise, uniqueness and reference constraints are omitted.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>For an example of the Validate method, see the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_Validate_\" data-linktype=\"relative-path\">Validate</a> method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_WriteContentTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_WriteContentTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteContentTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves all the children of the <code>XmlDocument</code> node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteContentTo (System.Xml.XmlWriter xw);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xw</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_InnerXml_\" data-linktype=\"relative-path\">InnerXml</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmldeclaration#System_Xml_XmlDeclaration_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property determines the encoding that is written out. If the <code>Encoding</code> property does not have a value, the <code>XmlDocument</code> is written out without an encoding attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the document onscreen.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.WriteContentTo Example#1\">public static void WriteXml( XmlDocument doc )\n {\n    XmlTextWriter writer = new XmlTextWriter(Console.Out);\n    writer.Formatting = Formatting.Indented;\n    doc.WriteContentTo( writer );\n    writer.Flush();\n    Console.WriteLine();\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.WriteContentTo Example#1\">    Public Shared Sub WriteXml(doc As XmlDocument)\n        Dim writer As New XmlTextWriter(Console.Out)\n        writer.Formatting = Formatting.Indented\n        doc.WriteContentTo(writer)\n        writer.Flush()\n        Console.WriteLine()\n    End Sub &#39;WriteXml\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.WriteContentTo Example#1\">void WriteXml( XmlDocument^ doc )\n{\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   writer-&gt;Formatting = Formatting::Indented;\n   doc-&gt;WriteContentTo( writer );\n   writer-&gt;Flush();\n   Console::WriteLine();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_WriteTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlDocument_WriteTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the <code>XmlDocument</code> node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteTo (System.Xml.XmlWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_OuterXml_\" data-linktype=\"relative-path\">OuterXml</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmldeclaration#System_Xml_XmlDeclaration_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property determines the encoding that is written out. If the <code>Encoding</code> property does not have a value, the <code>XmlDocument</code> is written out without an encoding attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the document onscreen.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlDocument.WriteTo Example#1\">void WriteXml( XmlDocument^ doc )\n{\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   writer-&gt;Formatting = Formatting::Indented;\n   doc-&gt;WriteTo( writer );\n   writer-&gt;Flush();\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlDocument.WriteTo Example#1\">    Public Shared Sub WriteXml(doc As XmlDocument)\n        Dim writer As New XmlTextWriter(Console.Out)\n        writer.Formatting = Formatting.Indented\n        doc.WriteTo(writer)\n        writer.Flush()\n        Console.WriteLine()\n    End Sub &#39;WriteXml\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlDocument.WriteTo Example#1\">public static void WriteXml( XmlDocument doc )\n {\n    XmlTextWriter writer = new XmlTextWriter(Console.Out);\n    writer.Formatting = Formatting.Indented;\n    doc.WriteTo( writer );\n    writer.Flush();\n    Console.WriteLine();\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Xml.XmlNode.Value*</span> of a node belonging to this document has been changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event only applies to nodes that have a value.  </p>\n<p> All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeChanging\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeChanging</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Xml.XmlNode.Value*</span> of a node belonging to this document is about to be changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeChanging;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the <code>XmlDocument</code> returns to its original state. This event only applies to nodes that have a value.  </p>\n<p> All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeInserted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeInserted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a node belonging to this document has been inserted into another node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeInserted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeInserting\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeInserting</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a node belonging to this document is about to be inserted into another node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeInserting;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the <code>XmlDocument</code> returns to its original state.  </p>\n<p> All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeRemoved\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeRemoved</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a node belonging to this document has been removed from its parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlDocument_NodeRemoving\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeRemoving</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a node belonging to this document is about to be removed from the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the <code>XmlDocument</code> returns to its original state.  </p>\n<p> All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlDocument.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlDocument.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.BaseURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CloneNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateCDataSection\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateComment\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateDefaultAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateDocumentFragment\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateDocumentType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateEntityReference\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateNavigator\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateProcessingInstruction\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateSignificantWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateTextNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.CreateXmlDeclaration\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.DocumentElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.DocumentType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.GetElementById\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.GetElementsByTagName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Implementation\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.ImportNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.InnerText\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.InnerXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Load\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.LoadXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NameTable\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeChanged\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeChanged\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeChanged\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeChanging\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeChanging\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeChanging\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeInserted\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeInserted\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeInserted\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeInserting\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeInserting\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeInserting\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeRemoved\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeRemoved\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeRemoved\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeRemoving\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.add_NodeRemoving\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.remove_NodeRemoving\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.OwnerDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.ParentNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.PreserveWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.ReadNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Save\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.SchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Schemas\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.Validate\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.WriteContentTo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.WriteTo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlDocument.XmlResolver\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6e4d679d-0933-1bc3-8284-9fe5db2e42b6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlDocument\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlDocument.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlDocument.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlDocument","System.Xml.XmlDocument..ctor","System.Xml.XmlDocument.BaseURI","System.Xml.XmlDocument.CloneNode","System.Xml.XmlDocument.CreateAttribute","System.Xml.XmlDocument.CreateCDataSection","System.Xml.XmlDocument.CreateComment","System.Xml.XmlDocument.CreateDefaultAttribute","System.Xml.XmlDocument.CreateDocumentFragment","System.Xml.XmlDocument.CreateDocumentType","System.Xml.XmlDocument.CreateElement","System.Xml.XmlDocument.CreateEntityReference","System.Xml.XmlDocument.CreateNavigator","System.Xml.XmlDocument.CreateNode","System.Xml.XmlDocument.CreateProcessingInstruction","System.Xml.XmlDocument.CreateSignificantWhitespace","System.Xml.XmlDocument.CreateTextNode","System.Xml.XmlDocument.CreateWhitespace","System.Xml.XmlDocument.CreateXmlDeclaration","System.Xml.XmlDocument.DocumentElement","System.Xml.XmlDocument.DocumentType","System.Xml.XmlDocument.GetElementById","System.Xml.XmlDocument.GetElementsByTagName","System.Xml.XmlDocument.Implementation","System.Xml.XmlDocument.ImportNode","System.Xml.XmlDocument.InnerText","System.Xml.XmlDocument.InnerXml","System.Xml.XmlDocument.IsReadOnly","System.Xml.XmlDocument.Load","System.Xml.XmlDocument.LoadXml","System.Xml.XmlDocument.LocalName","System.Xml.XmlDocument.Name","System.Xml.XmlDocument.NameTable","System.Xml.XmlDocument.NodeChanged","System.Xml.XmlDocument.add_NodeChanged","System.Xml.XmlDocument.remove_NodeChanged","System.Xml.XmlDocument.NodeChanging","System.Xml.XmlDocument.add_NodeChanging","System.Xml.XmlDocument.remove_NodeChanging","System.Xml.XmlDocument.NodeInserted","System.Xml.XmlDocument.add_NodeInserted","System.Xml.XmlDocument.remove_NodeInserted","System.Xml.XmlDocument.NodeInserting","System.Xml.XmlDocument.add_NodeInserting","System.Xml.XmlDocument.remove_NodeInserting","System.Xml.XmlDocument.NodeRemoved","System.Xml.XmlDocument.add_NodeRemoved","System.Xml.XmlDocument.remove_NodeRemoved","System.Xml.XmlDocument.NodeRemoving","System.Xml.XmlDocument.add_NodeRemoving","System.Xml.XmlDocument.remove_NodeRemoving","System.Xml.XmlDocument.NodeType","System.Xml.XmlDocument.OwnerDocument","System.Xml.XmlDocument.ParentNode","System.Xml.XmlDocument.PreserveWhitespace","System.Xml.XmlDocument.ReadNode","System.Xml.XmlDocument.Save","System.Xml.XmlDocument.SchemaInfo","System.Xml.XmlDocument.Schemas","System.Xml.XmlDocument.Validate","System.Xml.XmlDocument.WriteContentTo","System.Xml.XmlDocument.WriteTo","System.Xml.XmlDocument.XmlResolver"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlDocument","System::Xml::XmlDocument","System.Xml.XmlDocument.#ctor","System::Xml::XmlDocument::#ctor","System.Xml.XmlDocument.BaseURI","System::Xml::XmlDocument::BaseURI","System.Xml.XmlDocument.CloneNode","System::Xml::XmlDocument::CloneNode","System.Xml.XmlDocument.CreateAttribute","System::Xml::XmlDocument::CreateAttribute","System.Xml.XmlDocument.CreateCDataSection","System::Xml::XmlDocument::CreateCDataSection","System.Xml.XmlDocument.CreateComment","System::Xml::XmlDocument::CreateComment","System.Xml.XmlDocument.CreateDefaultAttribute","System::Xml::XmlDocument::CreateDefaultAttribute","System.Xml.XmlDocument.CreateDocumentFragment","System::Xml::XmlDocument::CreateDocumentFragment","System.Xml.XmlDocument.CreateDocumentType","System::Xml::XmlDocument::CreateDocumentType","System.Xml.XmlDocument.CreateElement","System::Xml::XmlDocument::CreateElement","System.Xml.XmlDocument.CreateEntityReference","System::Xml::XmlDocument::CreateEntityReference","System.Xml.XmlDocument.CreateNavigator","System::Xml::XmlDocument::CreateNavigator","System.Xml.XmlDocument.CreateNode","System::Xml::XmlDocument::CreateNode","System.Xml.XmlDocument.CreateProcessingInstruction","System::Xml::XmlDocument::CreateProcessingInstruction","System.Xml.XmlDocument.CreateSignificantWhitespace","System::Xml::XmlDocument::CreateSignificantWhitespace","System.Xml.XmlDocument.CreateTextNode","System::Xml::XmlDocument::CreateTextNode","System.Xml.XmlDocument.CreateWhitespace","System::Xml::XmlDocument::CreateWhitespace","System.Xml.XmlDocument.CreateXmlDeclaration","System::Xml::XmlDocument::CreateXmlDeclaration","System.Xml.XmlDocument.DocumentElement","System::Xml::XmlDocument::DocumentElement","System.Xml.XmlDocument.DocumentType","System::Xml::XmlDocument::DocumentType","System.Xml.XmlDocument.GetElementById","System::Xml::XmlDocument::GetElementById","System.Xml.XmlDocument.GetElementsByTagName","System::Xml::XmlDocument::GetElementsByTagName","System.Xml.XmlDocument.Implementation","System::Xml::XmlDocument::Implementation","System.Xml.XmlDocument.ImportNode","System::Xml::XmlDocument::ImportNode","System.Xml.XmlDocument.InnerText","System::Xml::XmlDocument::InnerText","System.Xml.XmlDocument.InnerXml","System::Xml::XmlDocument::InnerXml","System.Xml.XmlDocument.IsReadOnly","System::Xml::XmlDocument::IsReadOnly","System.Xml.XmlDocument.Load","System::Xml::XmlDocument::Load","System.Xml.XmlDocument.LoadXml","System::Xml::XmlDocument::LoadXml","System.Xml.XmlDocument.LocalName","System::Xml::XmlDocument::LocalName","System.Xml.XmlDocument.Name","System::Xml::XmlDocument::Name","System.Xml.XmlDocument.NameTable","System::Xml::XmlDocument::NameTable","System.Xml.XmlDocument.NodeChanged","System::Xml::XmlDocument::NodeChanged","System.Xml.XmlDocument.NodeChanging","System::Xml::XmlDocument::NodeChanging","System.Xml.XmlDocument.NodeInserted","System::Xml::XmlDocument::NodeInserted","System.Xml.XmlDocument.NodeInserting","System::Xml::XmlDocument::NodeInserting","System.Xml.XmlDocument.NodeRemoved","System::Xml::XmlDocument::NodeRemoved","System.Xml.XmlDocument.NodeRemoving","System::Xml::XmlDocument::NodeRemoving","System.Xml.XmlDocument.NodeType","System::Xml::XmlDocument::NodeType","System.Xml.XmlDocument.OwnerDocument","System::Xml::XmlDocument::OwnerDocument","System.Xml.XmlDocument.ParentNode","System::Xml::XmlDocument::ParentNode","System.Xml.XmlDocument.PreserveWhitespace","System::Xml::XmlDocument::PreserveWhitespace","System.Xml.XmlDocument.ReadNode","System::Xml::XmlDocument::ReadNode","System.Xml.XmlDocument.Save","System::Xml::XmlDocument::Save","System.Xml.XmlDocument.SchemaInfo","System::Xml::XmlDocument::SchemaInfo","System.Xml.XmlDocument.Schemas","System::Xml::XmlDocument::Schemas","System.Xml.XmlDocument.Validate","System::Xml::XmlDocument::Validate","System.Xml.XmlDocument.WriteContentTo","System::Xml::XmlDocument::WriteContentTo","System.Xml.XmlDocument.WriteTo","System::Xml::XmlDocument::WriteTo","System.Xml.XmlDocument.XmlResolver","System::Xml::XmlDocument::XmlResolver"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6e4d679d-0933-1bc3-8284-9fe5db2e42b6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlDocument.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDocument class | Microsoft Docs","_op_ogTitle":"XmlDocument class","description":"Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.\n","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlDocument","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmldocument","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmldocument","fileRelativePath":"System.Xml.XmlDocument.html"},"themesRelativePathToOutputRoot":"_themes/"}