{"content":"    \r\n    <h1 id=\"System_Data_DataSet\">\r\n      <span class=\"lang-csharp\">DataSet</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an in-memory cache of data.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultProperty(&quot;DataSetName&quot;)]\n[System.ComponentModel.Designer(&quot;Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.ToolboxItem(&quot;Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.Xml.Serialization.XmlRoot(&quot;DataSet&quot;)]\n[System.Xml.Serialization.XmlSchemaProvider(&quot;GetDataSetSchema&quot;)]\npublic class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent\" data-linktype=\"relative-path\">System.ComponentModel.MarshalByValueComponent</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataSet</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The DataSet, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The DataSet consists of a collection of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that you can relate to each other with <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> objects. You can also enforce data integrity in the DataSet by using the <a class=\"xref\" href=\"system.data.uniqueconstraint\" data-linktype=\"relative-path\">UniqueConstraint</a> and <a class=\"xref\" href=\"system.data.foreignkeyconstraint\" data-linktype=\"relative-path\">ForeignKeyConstraint</a> objects. For further details about working with DataSet objects, see <a href=\"../Topic/DataSets,%20DataTables,%20and%20DataViews.md\" data-linktype=\"relative-path\">DataSets, DataTables, and DataViews</a>.  </p>\n<p> Whereas <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects contain the data, the <a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a> allows you to navigate though the table hierarchy. The tables are contained in a <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a> accessed through the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Tables_\" data-linktype=\"relative-path\">Tables</a> property. When accessing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects, note that they are conditionally case sensitive. For example, if one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is named &quot;mydatatable&quot; and another is named &quot;Mydatatable&quot;, a string used to search for one of the tables is regarded as case sensitive. However, if &quot;mydatatable&quot; exists and &quot;Mydatatable&quot; does not, the search string is regarded as case insensitive. For more information about working with <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects, see <a href=\"../Topic/Creating%20a%20DataTable.md\" data-linktype=\"relative-path\">Creating a DataTable</a>.  </p>\n<p> A DataSet can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method, and both schema and data can be saved using the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. To read an XML document that includes both schema and data, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method.  </p>\n<p> In a typical multiple-tier implementation, the steps for creating and refreshing a DataSet, and in turn, updating the original data are to:  </p>\n<ol>\n<li><p>Build and fill each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> in a DataSet with data from a data source using a <a class=\"xref\" href=\"system.data.common.dataadapter\" data-linktype=\"relative-path\">DataAdapter</a>.  </p>\n</li>\n<li><p>Change the data in individual <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects by adding, updating, or deleting <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.  </p>\n</li>\n<li><p>Invoke the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method to create a second DataSet that features only the changes to the data.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.data.common.dataadapter#System_Data_Common_DataAdapter_Update_\" data-linktype=\"relative-path\">Update</a> method of the <a class=\"xref\" href=\"system.data.common.dataadapter\" data-linktype=\"relative-path\">DataAdapter</a>, passing the second DataSet as an argument.  </p>\n</li>\n<li><p>Invoke the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method to merge the changes from the second DataSet into the first.  </p>\n</li>\n<li><p>Invoke the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> on the DataSet. Alternatively, invoke <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_RejectChanges_\" data-linktype=\"relative-path\">RejectChanges</a> to cancel the changes.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The DataSet and <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects inherit from <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent\" data-linktype=\"relative-path\">MarshalByValueComponent</a>, and support the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface for remoting. These are the only ADO.NET objects that can be remoted.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet. The derived class can call the <a class=\"xref\" href=\"system.gc#System_GC_ReRegisterForFinalize_\" data-linktype=\"relative-path\">ReRegisterForFinalize</a> method in its constructor to allow the class to be finalized by the garbage collector.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet__ctor\" data-linktype=\"self-bookmark\">DataSet()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet__ctor_System_String_\" data-linktype=\"self-bookmark\">DataSet(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class with the given name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">DataSet(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class that has the given serialization information and context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_System_Boolean_\" data-linktype=\"self-bookmark\">DataSet(SerializationInfo,StreamingContext,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_CaseSensitive\" data-linktype=\"self-bookmark\">CaseSensitive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether string comparisons within <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects are case-sensitive.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_DataSetName\" data-linktype=\"self-bookmark\">DataSetName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_DefaultViewManager\" data-linktype=\"self-bookmark\">DefaultViewManager</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a custom view of the data contained in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to allow filtering, searching, and navigating using a custom <a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_EnforceConstraints\" data-linktype=\"self-bookmark\">EnforceConstraints</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ExtendedProperties\" data-linktype=\"self-bookmark\">ExtendedProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of customized user information associated with the <code>DataSet</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_HasErrors\" data-linktype=\"self-bookmark\">HasErrors</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether there are errors in any of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects within this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_IsInitialized\" data-linktype=\"self-bookmark\">IsInitialized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Locale\" data-linktype=\"self-bookmark\">Locale</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the locale information used to compare strings within the table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an XML prefix that aliases the namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Relations\" data-linktype=\"self-bookmark\">Relations</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get the collection of relations that link tables and allow navigation from parent tables to child tables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_RemotingFormat\" data-linktype=\"self-bookmark\">RemotingFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a> for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> used during remoting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_SchemaSerializationMode\" data-linktype=\"self-bookmark\">SchemaSerializationMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Site\" data-linktype=\"self-bookmark\">Site</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Tables\" data-linktype=\"self-bookmark\">Tables</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of tables contained in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_AcceptChanges\" data-linktype=\"self-bookmark\">AcceptChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Commits all the changes made to this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> since it was loaded or since the last time AcceptChanges was called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_BeginInit\" data-linktype=\"self-bookmark\">BeginInit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins the initialization of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> of any data by removing all rows in all tables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the structure of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, including all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schemas, relations, and constraints. Does not copy any data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies both the structure and data for this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_CreateDataReader\" data-linktype=\"self-bookmark\">CreateDataReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> with one result set per <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, in the same sequence as the tables appear in the <span class=\"xref\">stem.Data.DataSet.Tables*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_CreateDataReader_System_Data_DataTable___\" data-linktype=\"self-bookmark\">CreateDataReader(DataTable[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> with one result set per <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_DetermineSchemaSerializationMode_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">DetermineSchemaSerializationMode(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the <span class=\"xref\">stem.Data.DataSet.SchemaSerializationMode*</span> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_DetermineSchemaSerializationMode_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the <span class=\"xref\">stem.Data.DataSet.SchemaSerializationMode*</span> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_EndInit\" data-linktype=\"self-bookmark\">EndInit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the initialization of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetChanges\" data-linktype=\"self-bookmark\">GetChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains all changes made to it since it was loaded or since <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was last called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetChanges_System_Data_DataRowState_\" data-linktype=\"self-bookmark\">GetChanges(DataRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> containing all changes made to it since it was last loaded, or since <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was called, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetDataSetSchema_System_Xml_Schema_XmlSchemaSet_\" data-linktype=\"self-bookmark\">GetDataSetSchema(XmlSchemaSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a copy of <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> for the DataSet.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetSchemaSerializable\" data-linktype=\"self-bookmark\">GetSchemaSerializable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a serializable <span class=\"xref\">stem.Xml.Schema.XMLSchema</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetSerializationData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetSerializationData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deserializes the table data from the binary or XML stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetXml\" data-linktype=\"self-bookmark\">GetXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_GetXmlSchema\" data-linktype=\"self-bookmark\">GetXmlSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML Schema for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_HasChanges\" data-linktype=\"self-bookmark\">HasChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes, including new, deleted, or modified rows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_HasChanges_System_Data_DataRowState_\" data-linktype=\"self-bookmark\">HasChanges(DataRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes, including new, deleted, or modified rows, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_InferXmlSchema_System_IO_Stream_System_String___\" data-linktype=\"self-bookmark\">InferXmlSchema(Stream,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_InferXmlSchema_System_IO_TextReader_System_String___\" data-linktype=\"self-bookmark\">InferXmlSchema(TextReader,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_InferXmlSchema_System_String_System_String___\" data-linktype=\"self-bookmark\">InferXmlSchema(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the XML schema from the specified file to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_InferXmlSchema_System_Xml_XmlReader_System_String___\" data-linktype=\"self-bookmark\">InferXmlSchema(XmlReader,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_InitializeDerivedDataSet\" data-linktype=\"self-bookmark\">InitializeDerivedDataSet()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deserialize all of the tables data of the DataSet from the binary or XML stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_IsBinarySerialized_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">IsBinarySerialized(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inspects the format of the serialized representation of the <code>DataSet</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_DataTable___\" data-linktype=\"self-bookmark\">Load(IDataReader,LoadOption,DataTable[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances to supply the schema and namespace information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_String___\" data-linktype=\"self-bookmark\">Load(IDataReader,LoadOption,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of strings to supply the names for the tables within the <code>DataSet</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_FillErrorEventHandler_System_Data_DataTable___\" data-linktype=\"self-bookmark\">Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances to supply the schema and namespace information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataRow___\" data-linktype=\"self-bookmark\">Merge(DataRow[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataSet_\" data-linktype=\"self-bookmark\">Merge(DataSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema into the current <code>DataSet</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataTable_\" data-linktype=\"self-bookmark\">Merge(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its schema into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataSet_System_Boolean_\" data-linktype=\"self-bookmark\">Merge(DataSet,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema into the current <code>DataSet</code>, preserving or discarding any changes in this <code>DataSet</code> according to the given argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataRow___System_Boolean_System_Data_MissingSchemaAction_\" data-linktype=\"self-bookmark\">Merge(DataRow[],Boolean,MissingSchemaAction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, preserving or discarding changes in the <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataSet_System_Boolean_System_Data_MissingSchemaAction_\" data-linktype=\"self-bookmark\">Merge(DataSet,Boolean,MissingSchemaAction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema with the current <code>DataSet</code>, preserving or discarding changes in the current <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Merge_System_Data_DataTable_System_Boolean_System_Data_MissingSchemaAction_\" data-linktype=\"self-bookmark\">Merge(DataTable,Boolean,MissingSchemaAction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its schema into the current <code>DataSet</code>, preserving or discarding changes in the <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_OnPropertyChanging_System_ComponentModel_PropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnPropertyChanging(PropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the OnPropertyChanging event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_OnRemoveRelation_System_Data_DataRelation_\" data-linktype=\"self-bookmark\">OnRemoveRelation(DataRelation)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> object is removed from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_OnRemoveTable_System_Data_DataTable_\" data-linktype=\"self-bookmark\">OnRemoveTable(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is removed from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_RaisePropertyChanging_System_String_\" data-linktype=\"self-bookmark\">RaisePropertyChanging(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a notification that the specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> property is about to change.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_IO_Stream_\" data-linktype=\"self-bookmark\">ReadXml(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_IO_TextReader_\" data-linktype=\"self-bookmark\">ReadXml(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_String_\" data-linktype=\"self-bookmark\">ReadXml(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXml(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_IO_Stream_System_Data_XmlReadMode_\" data-linktype=\"self-bookmark\">ReadXml(Stream,XmlReadMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_IO_TextReader_System_Data_XmlReadMode_\" data-linktype=\"self-bookmark\">ReadXml(TextReader,XmlReadMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_String_System_Data_XmlReadMode_\" data-linktype=\"self-bookmark\">ReadXml(String,XmlReadMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXml_System_Xml_XmlReader_System_Data_XmlReadMode_\" data-linktype=\"self-bookmark\">ReadXml(XmlReader,XmlReadMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXmlSchema_System_IO_Stream_\" data-linktype=\"self-bookmark\">ReadXmlSchema(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXmlSchema_System_IO_TextReader_\" data-linktype=\"self-bookmark\">ReadXmlSchema(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXmlSchema_System_String_\" data-linktype=\"self-bookmark\">ReadXmlSchema(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XML schema from the specified file into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXmlSchema_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXmlSchema(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ReadXmlSerializable_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXmlSerializable(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ignores attributes and returns an empty DataSet.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_RejectChanges\" data-linktype=\"self-bookmark\">RejectChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rolls back all the changes made to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> since it was created, or since the last time <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears all tables and removes all relations, foreign constraints, and tables from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. Subclasses should override Reset to restore a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to its original state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ShouldSerializeRelations\" data-linktype=\"self-bookmark\">ShouldSerializeRelations()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether <span class=\"xref\">stem.Data.DataSet.Relations*</span> property should be persisted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_ShouldSerializeTables\" data-linktype=\"self-bookmark\">ShouldSerializeTables()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether <span class=\"xref\">stem.Data.DataSet.Tables*</span> property should be persisted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_IO_Stream_\" data-linktype=\"self-bookmark\">WriteXml(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_String_\" data-linktype=\"self-bookmark\">WriteXml(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(Stream,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_String_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(String,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_IO_Stream_\" data-linktype=\"self-bookmark\">WriteXmlSchema(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">WriteXmlSchema(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_String_\" data-linktype=\"self-bookmark\">WriteXmlSchema(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteXmlSchema(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_IO_Stream_System_Converter_System_Type_System_String__\" data-linktype=\"self-bookmark\">WriteXmlSchema(Stream,Converter&lt;Type,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_IO_TextWriter_System_Converter_System_Type_System_String__\" data-linktype=\"self-bookmark\">WriteXmlSchema(TextWriter,Converter&lt;Type,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_String_System_Converter_System_Type_System_String__\" data-linktype=\"self-bookmark\">WriteXmlSchema(String,Converter&lt;Type,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_WriteXmlSchema_System_Xml_XmlWriter_System_Converter_System_Type_System_String__\" data-linktype=\"self-bookmark\">WriteXmlSchema(XmlWriter,Converter&lt;Type,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_Initialized\" data-linktype=\"self-bookmark\">Initialized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_MergeFailed\" data-linktype=\"self-bookmark\">MergeFailed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a target and source <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> have the same primary key value, and <span class=\"xref\">stem.Data.DataSet.EnforceConstraints*</span> is set to true.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_System_ComponentModel_IListSource_ContainsListCollection\" data-linktype=\"self-bookmark\">IListSource.ContainsListCollection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.ContainsListCollection*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_System_ComponentModel_IListSource_GetList\" data-linktype=\"self-bookmark\">IListSource.GetList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.GetList*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_GetSchema\" data-linktype=\"self-bookmark\">IXmlSerializable.GetSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">IXmlSerializable.ReadXml(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">IXmlSerializable.WriteXml(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet__ctor\">\r\n    \r\n            <a id=\"System_Data_DataSet__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSet()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataSet ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> constructor takes no parameters, and creates a default name, &quot;NewDataSet,&quot; for the new instance.  </p>\n<p> A name for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is required to ensure that the XML representation of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> always has a name for the document element, which is the highest-level element in a schema definition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and adds two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects to it.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.DataSet Example#1\">Private Sub CreateDataSet()\n    Dim dataSet As DataSet = New DataSet\n\n    &#39; Create two DataTable objects using a function.\n    Dim table1 As DataTable = MakeTable(&quot;idTable1&quot;, &quot;thing1&quot;)\n    Dim table2 As DataTable = MakeTable(&quot;idTable2&quot;, &quot;thing2&quot;)\n    dataSet.Tables.Add(table1)\n    dataSet.Tables.Add(table2)\n    Console.WriteLine(dataSet.Tables.Count)\nEnd Sub\n \n \nPrivate Function MakeTable(c1Name As String, _\n    c2Name As String) As DataTable\n    Dim table As New DataTable\n    \n    &#39; Add two DataColumns\n    Dim column As DataColumn = New DataColumn( _\n        c1Name, System.Type.GetType(&quot;System.Integer&quot;))\n    table.Columns.Add(column)\n    column = New DataColumn(c2Name, _\n        System.Type.GetType(&quot;System.String&quot;))\n    MakeTable = table\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSet(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class with the given name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataSet (string dataSetName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A name for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is required to ensure that the XML representation of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> always has a name for the document element, which is the highest level element in a schema definition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, to which two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects are added.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.DataSet1 Example#1\">Private Sub CreateDataSet()\n    Dim  dataSet As DataSet = New DataSet(&quot;aNewDataSet&quot;)\n\n    &#39; Create two DataTable objects using a function.\n    Dim table1 As DataTable = MakeTable(&quot;idTable1&quot;, &quot;thing1&quot;)\n    Dim table2 As DataTable = MakeTable(&quot;idTable2&quot;, &quot;thing2&quot;)\n\n    dataSet.Tables.Add(table1)\n    dataSet.Tables.Add(table2)\n    Console.WriteLine(dataSet.DataSetName, dataSet.Tables.Count)\nEnd Sub\n\n\nPrivate Function MakeTable(c1Name As String, c2Name As String) _\n    As DataTable\n    Dim table As New DataTable\n    \n    &#39; Add two DataColumns\n    Dim column As DataColumn = New DataColumn( _\n        c1Name, System.Type.GetType(&quot;System.Integer&quot;))\n    table.Columns.Add(column)\n    column = New DataColumn(c2Name, _\n        System.Type.GetType(&quot;System.String&quot;))\n    table.Columns.Add(column)\n    MakeTable = table\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataSet__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSet(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class that has the given serialization information and context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data needed to serialize or deserialize an object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source and destination of a given serialized stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataSet__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSet(SerializationInfo,StreamingContext,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ConstructSchema</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The boolean value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_CaseSensitive\">\r\n    \r\n            <a id=\"System_Data_DataSet_CaseSensitive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaseSensitive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether string comparisons within <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects are case-sensitive.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CaseSensitive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if string comparisons are case-sensitive; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object contained in a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> when using the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a> method.  </p>\n<p> By default, setting the CaseSensitive property for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> also sets the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_CaseSensitive_\" data-linktype=\"relative-path\">CaseSensitive</a> property of each associated <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the same value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example toggles the CaseSensitive property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.CaseSensitive Example#1\"> DataSet1.CaseSensitive = DataSet1.CaseSensitive Xor True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_DataSetName\">\r\n    \r\n            <a id=\"System_Data_DataSet_DataSetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSetName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DataSetName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the given DataSetName.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.DataSetName Example#1\">Private Sub CreateDataSet() \n    Dim dataSet As DataSet\n    dataSet = New DataSet(&quot;SuppliersProducts&quot;)\n    Console.WriteLine(dataSet.DataSetName)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.DataSetName Example#1\">    private void CreateDataSet()\n    {\n        DataSet dataSet = new DataSet(&quot;SuppliersProducts&quot;);\n        Console.WriteLine(dataSet.DataSetName);\n\n        // Add a DataTable.\n        dataSet.Tables.Add(new DataTable(&quot;Suppliers&quot;));\n\n        // Add a DataColumn to the DataTable.\n        dataSet.Tables[&quot;Suppliers&quot;].Columns.Add\n            (new DataColumn(&quot;CompanyName&quot;, \n            System.Type.GetType(&quot;System.String&quot;)));\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_DefaultViewManager\">\r\n    \r\n            <a id=\"System_Data_DataSet_DefaultViewManager_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultViewManager</div>        \r\n          </div>\r\n    \r\n            <p>Gets a custom view of the data contained in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to allow filtering, searching, and navigating using a custom <a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataViewManager DefaultViewManager { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a> returned by the DefaultViewManager property allows you to create custom settings for each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> When you obtain a <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a> from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, the sort order, filtering, and <a class=\"xref\" href=\"system.data.dataviewrowstate\" data-linktype=\"relative-path\">DataViewRowState</a> are configured according to the settings in the DefaultViewManager property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the default <a class=\"xref\" href=\"system.data.dataviewmanager\" data-linktype=\"relative-path\">DataViewManager</a> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and adds a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.DefaultViewManager Example#1\">Private Sub GetDefaultDataViewManager()\n    &#39; Get a DataSet object&#39;s DefaultViewManager.\n     Dim view As DataViewManager = DataSet1.DefaultViewManager\n\n    &#39; Add a DataTable to the DataTableCollection.\n    Dim table As DataTable\n    table = New DataTable(&quot;TableName&quot;)\n    view.DataSet.Tables.Add(table)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_EnforceConstraints\">\r\n    \r\n            <a id=\"System_Data_DataSet_EnforceConstraints_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnforceConstraints</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnforceConstraints { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if rules are enforced; otherwise <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a></div>\r\n                  </div>\r\n                  <p>One or more constraints cannot be enforced.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Constraints are set at the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> level (<a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Constraints_\" data-linktype=\"relative-path\">Constraints</a> property). For more information about creating constraints, see <a href=\"../Topic/DataTable%20Constraints.md\" data-linktype=\"relative-path\">DataTable Constraints</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, one column, five rows, and one <a class=\"xref\" href=\"system.data.uniqueconstraint\" data-linktype=\"relative-path\">UniqueConstraint</a>. The EnforceConstraints property is set to <code>false</code> and the values of each row are set to the same value. When the EnforceConstraints property is reset to <code>true</code>, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.EnforceConstraints Example#1\">    private void DemonstrateEnforceConstraints()\n    {\n        // Create a DataSet with one table, one column and \n        // a UniqueConstraint.\n        DataSet dataSet= new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn column = new DataColumn(&quot;col1&quot;);\n\n        // A UniqueConstraint is added when the Unique \n        // property is true.\n        column.Unique=true;\n        table.Columns.Add(column);\n        dataSet.Tables.Add(table);\n        Console.WriteLine(&quot;constraints.count: &quot; + \n            table.Constraints.Count);\n\n        // add five rows.\n        DataRow row ;\n        for(int i=0;i&lt;5;i++)\n        {\n            row = table.NewRow();\n            row[&quot;col1&quot;] = i;\n            table.Rows.Add(row);\n        }\n        table.AcceptChanges();\n    \n        dataSet.EnforceConstraints=false;\n        // Change the values of all rows to 1.\n        foreach(DataRow thisRow in table.Rows)\n        {\n            thisRow[&quot;col1&quot;]=1;\n            //Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + thisRow[0]);\n        }\n        try\n        {\n            dataSet.EnforceConstraints=true;\n        }\n        catch(System.Data.ConstraintException e)\n        {\n            // Process exception and return.\n            Console.WriteLine(&quot;Exception of type {0} occurred.&quot;, \n                e.GetType());\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.EnforceConstraints Example#1\">Private Sub DemonstrateEnforceConstraints()\n    &#39; Create a DataSet with one table, one column and \n    &#39; a UniqueConstraint.\n    Dim dataSet As DataSet = New DataSet(&quot;dataSet&quot;)\n    Dim table As DataTable = New DataTable(&quot;table&quot;)\n    Dim column As DataColumn = New DataColumn(&quot;col1&quot;)\n    column.Unique = True\n    table.Columns.Add(column)\n    dataSet.Tables.Add(table)\n    Console.WriteLine(&quot;constraints.count: &quot; _\n        &amp; table.Constraints.Count)\n\n    &#39; add five rows.\n    Dim row As DataRow\n    Dim i As Integer\n    For i = 0 To 4\n       row = table.NewRow()\n       row(&quot;col1&quot;) = i\n       table.Rows.Add(row)\n    Next\n    table.AcceptChanges()\n     \n    dataSet.EnforceConstraints = False\n    &#39; Change the values of all rows to 1.\n    Dim thisRow As DataRow\n    For Each thisRow In table.rows\n       thisRow(&quot;col1&quot;) = 1\n    Next\n \n    Try\n        dataSet.EnforceConstraints = True\n    Catch e As System.Data.ConstraintException\n\t    &#39; Process exception and return.\n        Console.WriteLine(&quot;Exception of type {0} occurred.&quot;, _\n            e.GetType().ToString())\n    End Try\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ExtendedProperties\">\r\n    \r\n            <a id=\"System_Data_DataSet_ExtendedProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExtendedProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of customized user information associated with the <code>DataSet</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.PropertyCollection ExtendedProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.propertycollection\" data-linktype=\"relative-path\">PropertyCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.propertycollection\" data-linktype=\"relative-path\">PropertyCollection</a> with all custom user information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExtendedProperties property enables you to store custom information with the <code>DataSet</code>. For example, you might store a time when the data should be refreshed.  </p>\n<p> Extended properties must be of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if you want them persisted when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is written as XML.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a custom property to the <a class=\"xref\" href=\"system.data.propertycollection\" data-linktype=\"relative-path\">PropertyCollection</a> returned by the <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_ExtendedProperties_\" data-linktype=\"relative-path\">ExtendedProperties</a> property. The second example retrieves the custom property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataColumn.ExtendedProperties Example#1\">    private void SetProperty(DataColumn column)\n    {\n        column.ExtendedProperties.Add(&quot;TimeStamp&quot;, DateTime.Now);\n    }\n \n    private void GetProperty(DataColumn column)\n    {\n        Console.WriteLine(column.ExtendedProperties[&quot;TimeStamp&quot;].ToString());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataColumn.ExtendedProperties Example#1\"> Private Sub SetProperty(column As DataColumn)\n     column.ExtendedProperties.Add(&quot;TimeStamp&quot;, DateTime.Now)\n End Sub    \n    \n Private Sub GetProperty(column As DataColumn)\n     Console.WriteLine(column.ExtendedProperties(&quot;TimeStamp&quot;).ToString())\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_HasErrors\">\r\n    \r\n            <a id=\"System_Data_DataSet_HasErrors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasErrors</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether there are errors in any of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects within this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasErrors { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if any table contains an error;otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> in a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> also has a <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_HasErrors_\" data-linktype=\"relative-path\">HasErrors</a> property. Use the <code>HasErrors</code> property of the <code>DataSet</code> first, to determine if any table has errors, before checking individual <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects. If a <code>DataTable</code> has errors, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_GetErrors_\" data-linktype=\"relative-path\">GetErrors</a> method returns an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects containing the errors.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the HasErrors property to determine whether a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains errors. If so, the errors for each <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> in each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> are printed.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.HasErrors Example#1\">    private void CheckForErrors()\n    {\n        if(!DataSet1.HasErrors)\n        {\n            DataSet1.Merge(DataSet2);\n        }\n        else\n        {\n            PrintRowErrs(DataSet1);\n        }\n    }\n \n    private void PrintRowErrs(DataSet dataSet)\n    {\n        foreach(DataTable table in dataSet.Tables)\n        {\n            foreach(DataRow row in table.Rows)\n            {\n                if(row.HasErrors)\n                {\n                    Console.WriteLine(row.RowError);\n                }\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.HasErrors Example#1\">Private Sub CheckForErrors()\n    If Not DataSet1.HasErrors Then\n        DataSet1.Merge(DataSet2)\n    Else\n       PrintRowErrs(DataSet1)\n    End If\nEnd Sub\n \nPrivate Sub PrintRowErrs(ByVal dataSet As DataSet)\n    Dim row As DataRow\n    Dim table As DataTable\n    For Each table In  dataSet.Tables\n       For Each row In table.Rows\n          If row.HasErrors Then\n             Console.WriteLine(row.RowError)\n          End If\n       Next\n    Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_IsInitialized\">\r\n    \r\n            <a id=\"System_Data_DataSet_IsInitialized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInitialized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsInitialized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to indicate the component has completed initialization; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Returns the status of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> while it’s being constructed, for instance by Visual Studio. The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> method sets it to <code>false</code> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EndInit_\" data-linktype=\"relative-path\">EndInit</a> method sets it to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Locale\">\r\n    \r\n            <a id=\"System_Data_DataSet_Locale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Locale</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the locale information used to compare strings within the table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.CultureInfo Locale { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that contains data about the user&#39;s machine locale. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Locale property specifies the locale for which sorting applies.  </p>\n<p> By default, setting the Locale for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> also sets the Locale for each <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object in that <code>DataSet</code> to the same value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In columns that contain expressions, the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is used. The <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is ignored.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and prints the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DisplayName_\" data-linktype=\"relative-path\">DisplayName</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_EnglishName_\" data-linktype=\"relative-path\">EnglishName</a> properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Locale Example#1\"> Private Sub GetCultureInfo()\n    Dim culture As System.Globalization.CultureInfo\n    culture = DataSet1.Locale\n    Console.WriteLine(culture.DisplayName, culture.EnglishName)\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Namespace\">\r\n    \r\n            <a id=\"System_Data_DataSet_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Namespace { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The namespace already has data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Namespace property is used when reading and writing an XML document into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a>, or <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods.  </p>\n<p> The namespace of an XML document is used to scope XML attributes and elements when read into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. For example, if a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains a schema that was read from a document with the namespace &quot;myCompany,&quot; and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Prefix_\" data-linktype=\"relative-path\">Prefix</a> before calling the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Namespace Example#1\"> Private Sub ReadData(thisDataSet As DataSet)\n     thisDataSet.Namespace = &quot;CorporationA&quot;\n     thisDataSet.Prefix = &quot;DivisionA&quot;\n\n     &#39; Read schema and data.\n     Dim fileName As String = &quot;CorporationA_Schema.xml&quot;\n     thisDataSet.ReadXmlSchema(fileName)\n     fileName = &quot;DivisionA_Report.xml&quot;\n     thisDataSet.ReadXml(fileName)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Namespace Example#1\">    private void ReadData(DataSet thisDataSet)\n    {\n        thisDataSet.Namespace = &quot;CorporationA&quot;;\n        thisDataSet.Prefix = &quot;DivisionA&quot;;\n\n        // Read schema and data.\n        string fileName = &quot;CorporationA_Schema.xml&quot;;\n        thisDataSet.ReadXmlSchema(fileName);\n        fileName = &quot;DivisionA_Report.xml&quot;;\n        thisDataSet.ReadXml(fileName);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Prefix\">\r\n    \r\n            <a id=\"System_Data_DataSet_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an XML prefix that aliases the namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Prefix { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The XML prefix for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object (as set by the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the Prefix before calling the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Namespace Example#1\"> Private Sub ReadData(thisDataSet As DataSet)\n     thisDataSet.Namespace = &quot;CorporationA&quot;\n     thisDataSet.Prefix = &quot;DivisionA&quot;\n\n     &#39; Read schema and data.\n     Dim fileName As String = &quot;CorporationA_Schema.xml&quot;\n     thisDataSet.ReadXmlSchema(fileName)\n     fileName = &quot;DivisionA_Report.xml&quot;\n     thisDataSet.ReadXml(fileName)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Namespace Example#1\">    private void ReadData(DataSet thisDataSet)\n    {\n        thisDataSet.Namespace = &quot;CorporationA&quot;;\n        thisDataSet.Prefix = &quot;DivisionA&quot;;\n\n        // Read schema and data.\n        string fileName = &quot;CorporationA_Schema.xml&quot;;\n        thisDataSet.ReadXmlSchema(fileName);\n        fileName = &quot;DivisionA_Report.xml&quot;;\n        thisDataSet.ReadXml(fileName);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Relations\">\r\n    \r\n            <a id=\"System_Data_DataSet_Relations_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Relations</div>        \r\n          </div>\r\n    \r\n            <p>Get the collection of relations that link tables and allow navigation from parent tables to child tables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRelationCollection Relations { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a> that contains a collection of <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> objects. An empty collection is returned if no <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints the column name of all child tables through the Relations property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Relations Example#1\"> Private Sub PrintChildRelationRows()\n    &#39; Declare variable to hold the row values.\n    Dim rowValues As String\n    Dim dataSet As DataSet\n\n    &#39; Get the DataSet of a DataGrid that is displaying data \n    &#39; of at least two tables.\n    Dim table As DataTable = CType(DataGrid1.DataSource, DataTable)\n\n    &#39; Navigate using the Relations.\n    Dim relation As DataRelation\n    Dim row As DataRow\n    Dim column As DataColumn\n\n    &#39; Print the names of each column in each table.\n    For Each relation In dataSet.Relations\n       For Each column in relation.ChildTable.Columns\n           rowValues &amp;= column.ColumnName &amp; &quot; &quot;\n       Next\n     Next\n\n     &#39; Display results.\n     Console.WriteLine(rowValues)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_RemotingFormat\">\r\n    \r\n            <a id=\"System_Data_DataSet_RemotingFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemotingFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a> for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> used during remoting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SerializationFormat RemotingFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_SchemaSerializationMode\">\r\n    \r\n            <a id=\"System_Data_DataSet_SchemaSerializationMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaSerializationMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a></div>\r\n                  </div>\r\n                  <p>Gets or sets a <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the SchemaSerializationMode property of a typed <code>DataSet</code> to <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> causes schema information to be excluded from the serialization payload.  </p>\n<p> <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> is supported only for a typed <code>DataSet</code>. For an un-typed <code>DataSet</code> this property can only be set to <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a>.  </p>\n<p> <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> should only be used in cases where the schema information of the underlying typed <code>DataTables</code>, <code>DataRelations</code> and <code>Constraints</code> has not been modified. If modifications have occurred, complete schema information should be serialized with <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a>.  </p>\n<p> <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> is supported in version 2.0 of the .NET Framework or later.  </p>\n<p> When <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> is set, only the top level runtime properties present on the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the <code>Tables</code>, <code>Relations</code> or <code>Constraints</code> are serialized. The serialized runtime properties include <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_DataSetName_\" data-linktype=\"relative-path\">DataSetName</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Namespace_\" data-linktype=\"relative-path\">Namespace</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Prefix_\" data-linktype=\"relative-path\">Prefix</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Locale_\" data-linktype=\"relative-path\">Locale</a>, <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a>, and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_CaseSensitive_\" data-linktype=\"relative-path\">CaseSensitive</a>. These properties are serialized to make sure that overall runtime data integrity is preserved.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Site\">\r\n    \r\n            <a id=\"System_Data_DataSet_Site_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Site</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.ComponentModel.ISite Site { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Sites bind a <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a> to a <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a> and enable communication between them, as well as provide a way for the container to manage its components.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Tables\">\r\n    \r\n            <a id=\"System_Data_DataSet_Tables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tables</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of tables contained in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTableCollection Tables { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a> contained by this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. An empty collection is returned if no <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To add tables to the collection, use <a class=\"xref\" href=\"system.data.datatablecollection#System_Data_DataTableCollection_Add_\" data-linktype=\"relative-path\">Add</a> method of the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a>. To remove tables, use the <a class=\"xref\" href=\"system.data.datatablecollection#System_Data_DataTableCollection_Remove_\" data-linktype=\"relative-path\">Remove</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a>, and prints the columns and rows in each table.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Tables Example#1\"> Private Sub PrintRows(ByVal dataSet As DataSet)\n    Dim table As DataTable\n    Dim row As DataRow\n    Dim column As DataColumn\n    &#39; For each table in the DataSet, print the row values.\n    For Each table in dataSet.Tables\n       For Each row In table.Rows\n          For Each column in table.Columns\n             Console.WriteLine(row(column))\n          Next column\n       Next row\n    Next table\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Tables Example#1\">    private void PrintRows(DataSet dataSet)\n    {\n        // For each table in the DataSet, print the row values.\n        foreach(DataTable table in dataSet.Tables)\n        {\n            foreach(DataRow row in table.Rows)\n            {\n                foreach (DataColumn column in table.Columns)\n                {\n                    Console.WriteLine(row[column]);\n                }\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_AcceptChanges\">\r\n    \r\n            <a id=\"System_Data_DataSet_AcceptChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Commits all the changes made to this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> since it was loaded or since the last time AcceptChanges was called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AcceptChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> and <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> classes have AcceptChanges methods. Calling <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> at the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> level causes the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> method for each <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> to be called. Similarly, invoking AcceptChanges on the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> causes <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> to be called on each table within the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. In this manner, you have multiple levels at which the method can be invoked. Calling the AcceptChanges of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.  </p>\n<p> When you call <code>AcceptChanges</code> on the <code>DataSet</code>, any <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects still in edit-mode end their edits successfully. The <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_RowState_\" data-linktype=\"relative-path\">RowState</a> property of each <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> also changes; <code>Added</code> and <code>Modified</code> rows become <code>Unchanged</code>, and <code>Deleted</code> rows are removed.  </p>\n<p> If the <code>DataSet</code> contains <a class=\"xref\" href=\"system.data.foreignkeyconstraint\" data-linktype=\"relative-path\">ForeignKeyConstraint</a> objects, invoking the <code>AcceptChanges</code> method also causes the <a class=\"xref\" href=\"system.data.foreignkeyconstraint#System_Data_ForeignKeyConstraint_AcceptRejectRule_\" data-linktype=\"relative-path\">AcceptRejectRule</a> to be enforced.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>AcceptChanges</code> and <code>RejectChanges</code> only apply to <code>DataRow</code> related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.  </p>\n<p> Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <a class=\"xref\" href=\"system.data.common.dataadapter#System_Data_Common_DataAdapter_Update_\" data-linktype=\"relative-path\">Update</a> instead. See <a href=\"http://msdn.microsoft.com/library/33y2221y.aspx\" data-linktype=\"external\">Updating Data Sources with DataAdapters</a> for more information.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> in a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The AcceptChanges method is then called on the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, which cascades to all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that it contains.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.AcceptChanges#1\">Private Sub AcceptChanges()\n   Dim myDataSet As DataSet\n   myDataSet = new DataSet()\n\n   &#39; Not shown: methods to fill the DataSet with data.\n   Dim t As DataTable\n\n   t = myDataSet.Tables(&quot;Suppliers&quot;)\n\n   &#39; Add a DataRow to a table.\n   Dim myRow As DataRow\n   myRow = t.NewRow()\n   myRow(&quot;CompanyID&quot;) = &quot;NWTRADECO&quot;\n   myRow(&quot;CompanyName&quot;) = &quot;NortWest Trade Company&quot;\n\n   &#39; Add the row.\n   t.Rows.Add( myRow )\n\n   &#39; Calling AcceptChanges on the DataSet causes AcceptChanges to be\n   &#39; called on all subordinate objects.\n   myDataSet.AcceptChanges()\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.AcceptChanges#1\">private void AcceptChanges()\n{\n   DataSet myDataSet;\n   myDataSet = new DataSet();\n\n   // Not shown: methods to fill the DataSet with data.\n   DataTable t;\n   t = myDataSet.Tables[&quot;Suppliers&quot;];\n\n   // Add a DataRow to a table.\n   DataRow myRow;\n   myRow = t.NewRow();\n   myRow[&quot;CompanyID&quot;] = &quot;NWTRADECO&quot;;\n   myRow[&quot;CompanyName&quot;] = &quot;NortWest Trade Company&quot;;\n\n   // Add the row.\n   t.Rows.Add( myRow );\n\n   // Calling AcceptChanges on the DataSet causes AcceptChanges to be\n   // called on all subordinate objects.\n   myDataSet.AcceptChanges();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_BeginInit\">\r\n    \r\n            <a id=\"System_Data_DataSet_BeginInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInit()</div>        \r\n          </div>\r\n    \r\n            <p>Begins the initialization of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginInit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EndInit_\" data-linktype=\"relative-path\">EndInit</a> method ends the initialization. Using the BeginInit and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EndInit_\" data-linktype=\"relative-path\">EndInit</a> methods prevents the control from being used before it is fully initialized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Clear\">\r\n    \r\n            <a id=\"System_Data_DataSet_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> of any data by removing all rows in all tables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is bound to an <a class=\"xref\" href=\"system.xml.xmldatadocument\" data-linktype=\"relative-path\">XmlDataDocument</a>, calling Clear or <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> raises the <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. To avoid this situation, traverse each table, removing each row one at a time.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example clears the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> of all rows in all tables.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Clear Example#1\">Private Sub ClearDataSet(ByVal dataSet As DataSet)\n    &#39; To test, print the number rows in each table.\n    Dim table As DataTable\n    For Each table In dataSet.Tables\n        Console.WriteLine(table.TableName &amp; &quot;Rows.Count = &quot; _\n            &amp; table.Rows.Count.ToString())\n    Next\n\n    &#39; Clear all rows of each table.\n    dataSet.Clear()\n\n    &#39; Print the number of rows again.\n    For Each table In dataSet.Tables\n        Console.WriteLine(table.TableName &amp; &quot;Rows.Count = &quot; _\n            &amp; table.Rows.Count.ToString())\n    Next \nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Clear Example#1\">    private void ClearDataSet(DataSet dataSet)\n    {\n        // To test, print the number rows in each table.\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(table.TableName + &quot;Rows.Count = &quot; \n                + table.Rows.Count.ToString());\n        }\n        // Clear all rows of each table.\n        dataSet.Clear();\n\n        // Print the number of rows again.\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(table.TableName + &quot;Rows.Count = &quot;  \n                + table.Rows.Count.ToString());\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Clone\">\r\n    \r\n            <a id=\"System_Data_DataSet_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the structure of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, including all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schemas, relations, and constraints. Does not copy any data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Data.DataSet Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the same schema as the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, but none of the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If these classes have been subclassed, the clone will also be of the same subclasses.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a clone of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s schema.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Clone Example#1\">    private void GetClone(DataSet dataSet)\n    {\n        // Get a clone of the original DataSet.\n        DataSet cloneSet = dataSet.Clone();\n\n        // Insert code to work with clone of the DataSet.\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Clone Example#1\"> Private Sub GetClone(ByVal dataSet As DataSet)\n    &#39; Get a clone of the original DataSet.\n    Dim cloneSet As DataSet = dataSet.Clone()\n\n    &#39; Insert code to work with clone of the DataSet.\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Copy\">\r\n    \r\n            <a id=\"System_Data_DataSet_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Copies both the structure and data for this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataSet Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the same structure (table schemas, relations, and constraints) and data as this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n <div class=\"alert NOTE\"><br> If these classes have been subclassed, the copy will also be of the same subclasses.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Copy method to create a copy of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Copy Example#1\">    private void CopyDataSet(DataSet dataSet)\n    {\n        // Create an object variable for the copy.\n        DataSet copyDataSet;\n        copyDataSet = dataSet.Copy();\n\n        // Insert code to work with the copy.\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Copy Example#1\">Private Sub CopyDataSet(ByVal dataSet As DataSet )\n    &#39; Create an object variable for the copy.\n    Dim copyDataSet As DataSet = dataSet.Copy()\n\n    &#39; Insert code to work with the copy.\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_CreateDataReader\">\r\n    \r\n            <a id=\"System_Data_DataSet_CreateDataReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDataReader()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> with one result set per <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, in the same sequence as the tables appear in the <span class=\"xref\">stem.Data.DataSet.Tables*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTableReader CreateDataReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> containing one or more result sets, corresponding to the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances contained within the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to ensure the order of the result sets within the returned <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, if a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> within the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is empty, it is represented by an empty result set within the returned <code>DataTableReader</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates three <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, and adds each to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The example then passes the filled <code>DataSet</code> to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. The example displays the results in the Console window.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataSet.DataTableReader#1\">  Sub Main()\n    Dim dataSet As New DataSet\n    &#39; Add some DataTables to the DataSet, including\n    &#39; an empty DataTable:\n    dataSet.Tables.Add(GetCustomers())\n    dataSet.Tables.Add(New DataTable())\n    dataSet.Tables.Add(GetProducts())\n    TestCreateDataReader(dataSet)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub TestCreateDataReader(ByVal dataSet As DataSet)\n    &#39; Given a DataSet, retrieve a DataTableReader\n    &#39; allowing access to all the DataSet&#39;s data:\n    Using reader As DataTableReader = dataSet.CreateDataReader()\n      Do\n        If Not reader.HasRows Then\n          Console.WriteLine(&quot;Empty DataTableReader&quot;)\n        Else\n          PrintColumns(reader)\n        End If\n        Console.WriteLine(&quot;========================&quot;)\n      Loop While reader.NextResult()\n    End Using\n  End Sub\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    Return table\n  End Function\n\n  Private Function GetProducts() As DataTable\n    &#39; Create sample Products table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Wireless Network Card&quot;})\n    table.Rows.Add(New Object() {2, &quot;Hard Drive&quot;})\n    table.Rows.Add(New Object() {3, &quot;Monitor&quot;})\n    table.Rows.Add(New Object() {4, &quot;CPU&quot;})\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal reader As DataTableReader)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    Do While reader.Read()\n      For i As Integer = 0 To reader.FieldCount - 1\n        Console.Write(reader(i).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Loop\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataSet.DataTableReader#1\">    static void Main()\n    {\n        DataSet dataSet = new DataSet();\n        // Add some DataTables to the DataSet, including\n        // an empty DataTable:\n        dataSet.Tables.Add(GetCustomers());\n        dataSet.Tables.Add(new DataTable());\n        dataSet.Tables.Add(GetProducts());\n        TestCreateDataReader(dataSet);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static void TestCreateDataReader(DataSet dataSet)\n    {\n        // Given a DataSet, retrieve a DataTableReader\n        // allowing access to all the DataSet&#39;s data:\n        using (DataTableReader reader = dataSet.CreateDataReader())\n        {\n            do\n            {\n                if (!reader.HasRows)\n                {\n                    Console.WriteLine(&quot;Empty DataTableReader&quot;);\n                }\n                else\n                {\n                    PrintColumns(reader);\n                }\n                Console.WriteLine(&quot;========================&quot;);\n            } while (reader.NextResult());\n        }\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 4, &quot;CPU&quot; });\n        return table;\n    }\n\n    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_CreateDataReader_System_Data_DataTable___\">\r\n    \r\n            <a id=\"System_Data_DataSet_CreateDataReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDataReader(DataTable[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> with one result set per <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataTables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of DataTables providing the order of the result sets to be returned in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> containing one or more result sets, corresponding to the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances contained within the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to ensure that the order of the result sets within the returned <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, if a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> within the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is empty, it is represented by an empty result set within the returned <code>DataTableReader</code>. Because this overloaded version allows you to supply a list of <code>DataTable</code> instances as parameters, you can specify the order in which the result sets appear within the returned <code>DataTableReader</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example, a Console application, creates three <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances and adds each to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The example calls the CreateDataReader method and displays the contents of the returned <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. Note that the order of the result sets in the <code>DataTableReader</code> is controlled by the order of the <code>DataTable</code> instances passed as parameters. The example displays the results in the Console window.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataSet.DataTableReaderTables#1\">  Private emptyTable As DataTable\n  Private customerTable As DataTable\n  Private productTable As DataTable\n\n  Sub Main()\n    Dim dataSet As New DataSet\n    &#39; Add some DataTables to the DataSet, including\n    &#39; an empty DataTable:\n\n    emptyTable = New DataTable()\n    productTable = GetProducts()\n    customerTable = GetCustomers()\n\n    dataSet.Tables.Add(customerTable)\n    dataSet.Tables.Add(emptyTable)\n    dataSet.Tables.Add(productTable)\n    TestCreateDataReader(dataSet)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub TestCreateDataReader(ByVal dataSet As DataSet)\n    &#39; Given a DataSet, retrieve a DataTableReader\n    &#39; allowing access to all the DataSet&#39;s data.\n    &#39; Even though the dataset contains three DataTables,\n    &#39; this code will only display the contents of two of them,\n    &#39; because the code has limited the results to the \n    &#39; DataTables stored in the tables array. Because this\n    &#39; parameter is declared using the ParamArray keyword, \n    &#39; you could also include a list of DataTable instances \n    &#39; individually, as opposed to supplying an array of \n    &#39; DataTables, as in this example:\n    Using reader As DataTableReader = _\n      dataSet.CreateDataReader(productTable, emptyTable)\n      Do\n        If Not reader.HasRows Then\n          Console.WriteLine(&quot;Empty DataTableReader&quot;)\n        Else\n          PrintColumns(reader)\n        End If\n        Console.WriteLine(&quot;========================&quot;)\n      Loop While reader.NextResult()\n    End Using\n  End Sub\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    Return table\n  End Function\n\n  Private Function GetProducts() As DataTable\n    &#39; Create sample Products table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Wireless Network Card&quot;})\n    table.Rows.Add(New Object() {2, &quot;Hard Drive&quot;})\n    table.Rows.Add(New Object() {3, &quot;Monitor&quot;})\n    table.Rows.Add(New Object() {4, &quot;CPU&quot;})\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal reader As DataTableReader)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    Do While reader.Read()\n      For i As Integer = 0 To reader.FieldCount - 1\n        Console.Write(reader(i).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Loop\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataSet.DataTableReaderTables#1\">    static DataTable customerTable;\n    static DataTable productTable;\n    static DataTable emptyTable;\n\n    static void Main()\n    {\n        DataSet dataSet = new DataSet();\n\n        // Add some DataTables to the DataSet, including\n        // an empty DataTable:\n        emptyTable = new DataTable();\n        productTable = GetProducts();\n        customerTable = GetCustomers();\n\n        dataSet.Tables.Add(customerTable);\n        dataSet.Tables.Add(emptyTable);\n        dataSet.Tables.Add(productTable);\n        TestCreateDataReader(dataSet);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static void TestCreateDataReader(DataSet dataSet)\n    {\n        // Given a DataSet, retrieve a DataTableReader\n        // allowing access to all the DataSet&#39;s data.\n        // Even though the dataset contains three DataTables,\n        // this code will only display the contents of two of them,\n        // because the code has limited the results to the \n        // DataTables stored in the tables array. Because this\n        // parameter is declared using the ParamArray keyword, \n        // you could also include a list of DataTable instances \n        // individually, as opposed to supplying an array of \n        // DataTables, as in this example:\n        using (DataTableReader reader = \n           dataSet.CreateDataReader(productTable, emptyTable))\n        {\n            do\n            {\n                if (!reader.HasRows)\n                {\n                    Console.WriteLine(&quot;Empty DataTableReader&quot;);\n                }\n                else\n                {\n                    PrintColumns(reader);\n                }\n                Console.WriteLine(&quot;========================&quot;);\n            } while (reader.NextResult());\n        }\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 4, &quot;CPU&quot; });\n        return table;\n    }\n\n    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_DetermineSchemaSerializationMode_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_DetermineSchemaSerializationMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DetermineSchemaSerializationMode(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the <span class=\"xref\">stem.Data.DataSet.SchemaSerializationMode*</span> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance that is passed during deserialization of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> enumeration indicating whether schema information has been omitted from the payload.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be called when deserializing a typed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to determine its <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_SchemaSerializationMode_\" data-linktype=\"relative-path\">SchemaSerializationMode</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_DetermineSchemaSerializationMode_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataSet_DetermineSchemaSerializationMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the <span class=\"xref\">stem.Data.DataSet.SchemaSerializationMode*</span> for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that a <code>DataSet</code>’s protected constructor <span class=\"xref\">stem.Data.DataSet.#ctor*</span> is invoked with during deserialization in remoting scenarios.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that a <code>DataSet</code>’s protected constructor <span class=\"xref\">stem.Data.DataSet.#ctor*</span> is invoked with during deserialization in remoting scenarios.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.data.schemaserializationmode\" data-linktype=\"relative-path\">SchemaSerializationMode</a> enumeration indicating whether schema information has been omitted from the payload.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be called when deserializing a typed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to determine its <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_SchemaSerializationMode_\" data-linktype=\"relative-path\">SchemaSerializationMode</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_EndInit\">\r\n    \r\n            <a id=\"System_Data_DataSet_EndInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInit()</div>        \r\n          </div>\r\n    \r\n            <p>Ends the initialization of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EndInit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> method starts the initialization. Using the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> and EndInit methods prevents the control from being used before it is fully initialized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetChanges\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains all changes made to it since it was loaded or since <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was last called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataSet GetChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </div>\r\n                  <p>A copy of the changes from this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that can have actions performed on it and later be merged back in using <span class=\"xref\">stem.Data.DataSet.Merge*</span>. If no changed rows are found, the method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains a copy of all rows in the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns <code>null</code> if there are no rows in the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that have pending changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called with the <code>missingSchemaAction</code> set to <code>MissingSchemaAction.Add</code>, the new column is added to the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s schema.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetChanges Example#1\">    private void DemonstrateMerge()\n    {\n        // Create a DataSet with one table, two columns, \n        // and three rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        idColumn.AutoIncrement=true;\n        DataColumn itemColumn = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n\n        // DataColumn array to set primary key.\n        DataColumn[] keyColumn= new DataColumn[1];\n        DataRow row;\n\n        // Create variable for temporary DataSet. \n        DataSet changesDataSet;\n\n        // Add RowChanged event handler for the table.\n        table.RowChanged+=new DataRowChangeEventHandler(\n            Row_Changed);\n        dataSet.Tables.Add(table);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n\n        // Set primary key column.\n        keyColumn[0]= idColumn;\n        table.PrimaryKey=keyColumn;\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            row=table.NewRow();\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n        // Accept changes.\n        dataSet.AcceptChanges();\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Change row values.\n        table.Rows[0][&quot;Item&quot;]= 50;\n        table.Rows[1][&quot;Item&quot;]= 111;\n\n        // Add one row.\n        row=table.NewRow();\n        row[&quot;Item&quot;]=74;\n        table.Rows.Add(row);\n\n        // Insert code for error checking. Set one row in error.\n        table.Rows[1].RowError= &quot;over 100&quot;;\n        PrintValues(dataSet, &quot;Modified and New Values&quot;);\n\n        // If the table has changes or errors, \n        // create a subset DataSet.\n        if(dataSet.HasChanges(DataRowState.Modified | \n            DataRowState.Added)&amp;&amp; dataSet.HasErrors)\n        {\n            // Use GetChanges to extract subset.\n            changesDataSet = dataSet.GetChanges(\n                DataRowState.Modified|DataRowState.Added);\n            PrintValues(changesDataSet, &quot;Subset values&quot;);\n\n            // Insert code to reconcile errors. In this case, reject changes.\n            foreach(DataTable changesTable in changesDataSet.Tables)\n            {\n                if (changesTable.HasErrors)\n                {\n                    foreach(DataRow changesRow in changesTable.Rows)\n                    {\n                        //Console.WriteLine(changesRow[&quot;Item&quot;]);\n                        if((int)changesRow[&quot;Item&quot;,DataRowVersion.Current ]&gt; 100)\n                        {\n                            changesRow.RejectChanges();\n                            changesRow.ClearErrors();\n                        }\n                    }\n                }\n            }\n            // Add a column to the changesDataSet.\n            changesDataSet.Tables[&quot;Items&quot;].Columns.Add(\n                new DataColumn(&quot;newColumn&quot;));\n            PrintValues(changesDataSet, &quot;Reconciled subset values&quot;);\n            // Merge changes back to first DataSet.\n            dataSet.Merge(changesDataSet, false, \n                System.Data.MissingSchemaAction.Add);\n        }\n        PrintValues(dataSet, &quot;Merged Values&quot;);\n    }\n \n    private void Row_Changed(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() \n            + &quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + e.Row.ItemArray[0]);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(label + &quot;<br>&quot;);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetChanges Example#1\">Private Sub DemonstrateMerge()\n    &#39; Create a DataSet with one table, two columns, \n    &#39; and three rows.\n    Dim dataSet As New DataSet(&quot;dataSet&quot;)\n    Dim table As New DataTable(&quot;Items&quot;)\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    idColumn.AutoIncrement = True\n    Dim itemColumn As New DataColumn(&quot;Item&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n\n    &#39; Create DataColumn array to set primary key.\n    Dim keyColumn(1) As DataColumn\n    Dim row As DataRow\n\n    &#39; Create variable for temporary DataSet. \n    Dim changesDataSet As DataSet\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table.RowChanged, AddressOf Row_Changed\n    dataSet.Tables.Add(table)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n\n    &#39; Set primary key column.\n    keyColumn(0) = idColumn\n    table.PrimaryKey = keyColumn\n\n    &#39; Add ten rows.\n    Dim i As Integer\n    For i = 0 To 9\n        row = table.NewRow()\n        row(&quot;Item&quot;) = i\n        table.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    dataSet.AcceptChanges()\n    PrintValues(dataSet, &quot;Original values&quot;)\n\n    &#39; Change row values.\n    table.Rows(0)(&quot;Item&quot;) = 50\n    table.Rows(1)(&quot;Item&quot;) = 111\n\n    &#39; Add one row.\n    row = table.NewRow()\n    row(&quot;Item&quot;) = 74\n    table.Rows.Add(row)\n\n    &#39; Insert code for error checking. Set one row in error.\n    table.Rows(1).RowError = &quot;over 100&quot;\n    PrintValues(dataSet, &quot;Modified and New Values&quot;)\n\n    &#39; If the table has changes or errors, create a subset DataSet.\n    If dataSet.HasChanges(DataRowState.Modified Or DataRowState.Added) _\n        And dataSet.HasErrors Then\n        &#39; Use GetChanges to extract subset.\n        changesDataSet = dataSet.GetChanges( _\n            DataRowState.Modified Or DataRowState.Added)\n        PrintValues(changesDataSet, &quot;Subset values&quot;)\n\n        &#39; Insert code to reconcile errors. In this case, reject changes.\n        Dim changesTable As DataTable\n        For Each changesTable In  changesDataSet.Tables\n            If changesTable.HasErrors Then\n                Dim changesRow As DataRow\n                For Each changesRow In  changesTable.Rows\n                    &#39;Console.WriteLine(changesRow[&quot;Item&quot;]);\n                    If CInt(changesRow(&quot;Item&quot;, _\n                        DataRowVersion.Current)) &gt; 100 Then\n                        changesRow.RejectChanges()\n                        changesRow.ClearErrors()\n                    End If\n                Next changesRow\n            End If\n        Next changesTable\n\n        &#39; Add a column to the changesDataSet.\n        changesDataSet.Tables(&quot;Items&quot;).Columns.Add( _\n            New DataColumn(&quot;newColumn&quot;))\n        PrintValues(changesDataSet, &quot;Reconciled subset values&quot;)\n\n        &#39; Merge changes back to first DataSet.\n        dataSet.Merge(changesDataSet, False, _\n            System.Data.MissingSchemaAction.Add)\n    End If\n    PrintValues(dataSet, &quot;Merged Values&quot;)\nEnd Sub\n        \n Private Sub Row_Changed(sender As Object, e As DataRowChangeEventArgs)\n     Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() _\n        + ControlChars.Tab + e.Row.ItemArray(0).ToString())\n End Sub\n    \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(label + ControlChars.Cr)\n     Dim table As DataTable\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; + table.TableName)\n         Dim row As DataRow\n         For Each row In  table.Rows\n             Dim column As DataColumn\n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetChanges_System_Data_DataRowState_\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChanges(DataRowState)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> containing all changes made to it since it was last loaded, or since <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was called, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowStates</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </div>\r\n                  <p>A filtered copy of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that can have actions performed on it, and subsequently be merged back in using <span class=\"xref\">stem.Data.DataSet.Merge*</span>. If no rows of the desired <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> are found, the method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is used to produce a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object that contains only the changes introduced into the original. Use the <code>rowStates</code> argument to specify the type of changes the new object should include.  </p>\n<p> This returned copy is designed to be merged back in to this original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. Relationship constraints may cause parent rows marked <code>Unchanged</code> to be included. If no rows of the desired <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> are found, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method to create a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object, which is then used to update a data source.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetChanges1 Example#1\"> Private Sub UpdateDataSet(ByVal dataSet As DataSet)\n    &#39; Check for changes with the HasChanges method first.\n    If Not dataSet.HasChanges(DataRowState.Modified) Then \n        Exit Sub\n    End If\n\n    &#39; Create temporary DataSet variable and\n    &#39; GetChanges for modified rows only.\n    Dim tempDataSet As DataSet = _\n        dataSet.GetChanges(DataRowState.Modified)\n\n    &#39; Check the DataSet for errors.\n    If tempDataSet.HasErrors Then\n       &#39; Insert code to resolve errors.\n    End If\n\n    &#39; After fixing errors, update the data source with   \n    &#39; the DataAdapter used to create the DataSet.\n    adapter.Update(tempDataSet)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetChanges1 Example#1\">    private void UpdateDataSet(DataSet dataSet)\n    {\n        // Check for changes with the HasChanges method first.\n        if(!dataSet.HasChanges(DataRowState.Modified)) return;\n\n        // Create temporary DataSet variable and\n        // GetChanges for modified rows only.\n        DataSet tempDataSet = \n            dataSet.GetChanges(DataRowState.Modified);\n\n        // Check the DataSet for errors.\n        if(tempDataSet.HasErrors)\n        {\n            // Insert code to resolve errors.\n        }\n        // After fixing errors, update the data source with  \n        // the DataAdapter used to create the DataSet.\n        adapter.Update(tempDataSet);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetDataSetSchema_System_Xml_Schema_XmlSchemaSet_\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetDataSetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataSetSchema(XmlSchemaSet)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a copy of <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> for the DataSet.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemaSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified schema set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemacomplextype\" data-linktype=\"relative-path\">XmlSchemaComplexType</a></div>\r\n                  </div>\r\n                  <p>A copy of <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that holds the serialized data associated with the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains the source and destination of the serialized stream associated with the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetSchemaSerializable\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetSchemaSerializable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchemaSerializable()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a serializable <span class=\"xref\">stem.Xml.Schema.XMLSchema</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.Schema.XMLSchema</span> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetSerializationData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetSerializationData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSerializationData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Deserializes the table data from the binary or XML stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The streaming context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetXml\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is a representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is identical to calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> with <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> set to <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>.  </p>\n<p> GetXml returns XML as a string, and therefore requires more overhead than <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> to write XML to a file.  </p>\n<p> If you build a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using schema inference and serialize it using XML or Web services, the column ordering may change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, adds sample data, and then displays the data in XML format.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetXml Example#1\">    private static void DemonstrateGetXml()\n    {\n        // Create a DataSet with one table containing \n        // two columns and 10 rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = dataSet.Tables.Add(&quot;Items&quot;);\n        table.Columns.Add(&quot;id&quot;, typeof(int));\n        table.Columns.Add(&quot;Item&quot;, typeof(string));\n\n        // Add ten rows.\n        DataRow row;\n        for(int i = 0; i &lt;10;i++)\n        {\n            row = table.NewRow();\n            row[&quot;id&quot;]= i;\n            row[&quot;Item&quot;]= &quot;Item&quot; + i;\n            table.Rows.Add(row);\n        }\n\n        // Display the DataSet contents as XML.\n        Console.WriteLine( dataSet.GetXml() );\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetXml Example#1\">Private Shared Sub DemonstrateGetXml()\n\t&#39; Create a DataSet with one table \n    &#39; containing two columns and 10 rows.\n\tDim dataSet As DataSet = New DataSet(&quot;dataSet&quot;)\n\tDim table As DataTable = dataSet.Tables.Add(&quot;Items&quot;)\n\ttable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\ttable.Columns.Add(&quot;Item&quot;, Type.GetType(&quot;System.String&quot;))\n\n\t&#39; Add ten rows.\n\tDim row As DataRow\n\tDim i As Integer\n\tFor i = 0 To 9\n\t\trow = table.NewRow()\n\t\trow(&quot;id&quot;) = i\n\t\trow(&quot;Item&quot;)= &quot;Item&quot; &amp; i\n\t\ttable.Rows.Add(row)\n\tNext\n\n\t&#39; Display the DataSet contents as XML.\n\tConsole.WriteLine( dataSet.GetXml() )\nEnd Sub\n</code></pre><p> This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  </p>\n<p> Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  </p>\n<pre><code>&lt;MySchool&gt;  \n  &lt;Course CourseID=&quot;C1045&quot; Year=&quot;2012&quot;  Title=&quot;Calculus&quot; Credits=&quot;4&quot; DepartmentID=&quot;7&quot;&gt;New&lt;/Course&gt;  \n  &lt;Course CourseID=&quot;C1061&quot; Year=&quot;2012&quot;  Title=&quot;Physics&quot; Credits=&quot;4&quot; DepartmentID=&quot;1&quot; /&gt;  \n  &lt;Department DepartmentID=&quot;1&quot; Name=&quot;Engineering&quot; Budget=&quot;350000&quot; StartDate=&quot;2007-09-01T00:00:00+08:00&quot; Administrator=&quot;2&quot; /&gt;  \n  &lt;Department DepartmentID=&quot;7&quot; Name=&quot;Mathematics&quot; Budget=&quot;250024&quot; StartDate=&quot;2007-09-01T00:00:00+08:00&quot; Administrator=&quot;3&quot;&gt;Cancelled&lt;/Department&gt;  \n&lt;/MySchool&gt;  \n</code></pre><p> Next, create ElementsWithChildElementsxml.xml:  </p>\n<pre><code>&lt;MySchool&gt;  \n  &lt;Course&gt;  \n    &lt;CourseID&gt;C1045&lt;/CourseID&gt;  \n    &lt;Year&gt;2012&lt;/Year&gt;  \n    &lt;Title&gt;Calculus&lt;/Title&gt;  \n    &lt;Credits&gt;4&lt;/Credits&gt;  \n    &lt;DepartmentID&gt;7&lt;/DepartmentID&gt;  \n  &lt;/Course&gt;  \n  &lt;Course&gt;  \n    &lt;CourseID&gt;C1061&lt;/CourseID&gt;  \n    &lt;Year&gt;2012&lt;/Year&gt;  \n    &lt;Title&gt;Physics&lt;/Title&gt;  \n    &lt;Credits&gt;4&lt;/Credits&gt;  \n    &lt;DepartmentID&gt;1&lt;/DepartmentID&gt;  \n  &lt;/Course&gt;  \n  &lt;Course&gt;  \n    &lt;CourseID&gt;C2021&lt;/CourseID&gt;  \n    &lt;Year&gt;2012&lt;/Year&gt;  \n    &lt;Title&gt;Composition&lt;/Title&gt;  \n    &lt;Credits&gt;3&lt;/Credits&gt;  \n    &lt;DepartmentID&gt;2&lt;/DepartmentID&gt;  \n  &lt;/Course&gt;  \n  &lt;Course&gt;  \n    &lt;CourseID&gt;C2042&lt;/CourseID&gt;  \n    &lt;Year&gt;2012&lt;/Year&gt;  \n    &lt;Title&gt;Literature&lt;/Title&gt;  \n    &lt;Credits&gt;4&lt;/Credits&gt;  \n    &lt;DepartmentID&gt;2&lt;/DepartmentID&gt;  \n  &lt;/Course&gt;  \n  &lt;Department&gt;  \n    &lt;DepartmentID&gt;1&lt;/DepartmentID&gt;  \n    &lt;Name&gt;Engineering&lt;/Name&gt;  \n    &lt;Budget&gt;350000&lt;/Budget&gt;  \n    &lt;StartDate&gt;2007-09-01T00:00:00+08:00&lt;/StartDate&gt;  \n    &lt;Administrator&gt;2&lt;/Administrator&gt;  \n  &lt;/Department&gt;  \n  &lt;Department&gt;  \n    &lt;DepartmentID&gt;2&lt;/DepartmentID&gt;  \n    &lt;Name&gt;English&lt;/Name&gt;  \n    &lt;Budget&gt;120000&lt;/Budget&gt;  \n    &lt;StartDate&gt;2007-09-01T00:00:00+08:00&lt;/StartDate&gt;  \n    &lt;Administrator&gt;6&lt;/Administrator&gt;  \n  &lt;/Department&gt;  \n  &lt;Department&gt;  \n    &lt;DepartmentID&gt;4&lt;/DepartmentID&gt;  \n    &lt;Name&gt;Economics&lt;/Name&gt;  \n    &lt;Budget&gt;200000&lt;/Budget&gt;  \n    &lt;StartDate&gt;2007-09-01T00:00:00+08:00&lt;/StartDate&gt;  \n    &lt;Administrator&gt;4&lt;/Administrator&gt;  \n  &lt;/Department&gt;  \n  &lt;Department&gt;  \n    &lt;DepartmentID&gt;7&lt;/DepartmentID&gt;  \n    &lt;Name&gt;Mathematics&lt;/Name&gt;  \n    &lt;Budget&gt;250024&lt;/Budget&gt;  \n    &lt;StartDate&gt;2007-09-01T00:00:00+08:00&lt;/StartDate&gt;  \n    &lt;Administrator&gt;3&lt;/Administrator&gt;  \n  &lt;/Department&gt;  \n&lt;/MySchool&gt;  \n</code></pre><p> Now create ElementsWithOnlyAttributes.xml:  </p>\n<pre><code>&lt;MySchool&gt;  \n  &lt;Course CourseID=&quot;C1045&quot; Year=&quot;2012&quot;  Title=&quot;Calculus&quot; Credits=&quot;4&quot; DepartmentID=&quot;7&quot; /&gt;  \n  &lt;Course CourseID=&quot;C1061&quot; Year=&quot;2012&quot;  Title=&quot;Physics&quot; Credits=&quot;4&quot; DepartmentID=&quot;1&quot; /&gt;  \n  &lt;Department DepartmentID=&quot;1&quot; Name=&quot;Engineering&quot; Budget=&quot;350000&quot; StartDate=&quot;2007-09-01T00:00:00+08:00&quot; Administrator=&quot;2&quot; /&gt;  \n  &lt;Department DepartmentID=&quot;7&quot; Name=&quot;Mathematics&quot; Budget=&quot;250024&quot; StartDate=&quot;2007-09-01T00:00:00+08:00&quot; Administrator=&quot;3&quot; /&gt;  \n&lt;/MySchool&gt;  \n</code></pre><p> And finally, create RepeatingElements.xml:  </p>\n<pre><code>&lt;MySchool&gt;  \n  &lt;Course&gt;C1045&lt;/Course&gt;  \n  &lt;Course&gt;C1061&lt;/Course&gt;  \n  &lt;Department&gt;Engineering&lt;/Department&gt;   \n  &lt;Department&gt;Mathematics&lt;/Department&gt;  \n&lt;/MySchool&gt;  \n</code></pre><p> Now you can compile and run the following source code.  <a href=\"http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3\" data-linktype=\"external\">How to Store Data of DataSet into XML File</a> has Visual Basic and C# projects for this sample.  </p>\n<pre><code>using System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n\n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(&quot;Write {0} to the File {1}.&quot;, dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n\n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(&quot;Get Xml data from {0} and write to the File {1}.&quot;, dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n\n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n\n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(&quot;Table {0}:&quot;, table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n\n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(&quot;{0,-14}&quot;, col.ColumnName);  \n      }  \n      Console.WriteLine(&quot;{0,-14}&quot;, &quot;&quot;);  \n\n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(&quot;{0,-14:d}&quot;, row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(&quot;{0,-14:C}&quot;, row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(&quot;{0,-14}&quot;, row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(&quot;{0,-14:d}&quot;, row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(&quot;{0,-14:C}&quot;, row[col]);  \n               }  \n               else {  \n                  Console.Write(&quot;{0,-14}&quot;, row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(&quot;{0,-14}&quot;, &quot;&quot;);  \n      }  \n   }  \n\n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(&quot;{0} contains the following tables:&quot;, dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(&quot;   Table {0} contains the following columns:&quot;, table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n\n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = &quot;&quot;;  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + &quot;   &quot;;  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n\nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(&quot;MySchool&quot;);  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n\n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(&quot;CourseDepartFK&quot;, department.Columns[&quot;DepartmentID&quot;], course.Columns[&quot;DepartmentID&quot;]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n\n      InsertDepartments(department);  \n      InsertCourses(course);  \n\n      // Export the dataset to the XML file.  \n      Console.WriteLine(&quot;Data of the whole DataSet {0}&quot;, school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n\n      String xmlWithSchemaFileName = &quot;WriterXMLWithSchema.xml&quot;;  \n      String xmlGetDataFileName = &quot;GetXML.xml&quot;;  \n\n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n\n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(&quot;Read Xml document into a new DataSet:&quot;);  \n      DataSet newSchool = new DataSet(&quot;NewSchool&quot;);  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n\n      Console.WriteLine(&quot;Infer a schema for a DataSet from an XML document:&quot;);  \n      InferDataSetSchemaFromXml();  \n\n      Console.WriteLine(&quot;Press any key to exit.&quot;);  \n      Console.ReadKey();  \n   }  \n\n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(&quot;Course&quot;);  \n      DataColumn[] cols ={  \n                              new DataColumn(&quot;CourseID&quot;,typeof(String)),  \n                              new DataColumn(&quot;Year&quot;,typeof(Int32)),  \n                              new DataColumn(&quot;Title&quot;,typeof(String)),  \n                              new DataColumn(&quot;Credits&quot;,typeof(Int32)),  \n                              new DataColumn(&quot;DepartmentID&quot;,typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n\n      course.PrimaryKey = new DataColumn[] { course.Columns[&quot;CourseID&quot;], course.Columns[&quot;Year&quot;] };  \n\n      return course;  \n   }  \n\n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(&quot;Department&quot;);  \n      DataColumn[] cols = {   \n                                new DataColumn(&quot;DepartmentID&quot;, typeof(Int32)),  \n                                new DataColumn(&quot;Name&quot;,typeof(String)),  \n                                new DataColumn(&quot;Budget&quot;,typeof(Decimal)),  \n                                new DataColumn(&quot;StartDate&quot;,typeof(DateTime)),  \n                                new DataColumn(&quot;Administrator&quot;,typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n\n      department.PrimaryKey = new DataColumn[] { department.Columns[&quot;DepartmentID&quot;] };  \n\n      return department;  \n   }  \n\n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,&quot;Engineering&quot;,350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,&quot;English&quot;,120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,&quot;Economics&quot;,200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,&quot;Mathematics&quot;,250024.00,new DateTime(2007,9,1),3}};  \n\n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n\n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{&quot;C1045&quot;,2012,&quot;Calculus&quot;,4,7},  \n                               new Object[]{&quot;C1061&quot;,2012,&quot;Physics&quot;,4,1},  \n                               new Object[]{&quot;C2021&quot;,2012,&quot;Composition&quot;,3,2},  \n                               new Object[]{&quot;C2042&quot;,2012,&quot;Literature&quot;,4,2}};  \n\n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n\n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n\n                                    @&quot;ElementsWithOnlyAttributes.xml&quot;,   \n                                    @&quot;ElementsWithAttributes.xml&quot;,  \n                                    @&quot;RepeatingElements.xml&quot;,   \n                                    @&quot;ElementsWithChildElements.xml&quot; };  \n\n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(&quot;Result of {0}&quot;, Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_GetXmlSchema\">\r\n    \r\n            <a id=\"System_Data_DataSet_GetXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetXmlSchema()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML Schema for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetXmlSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>String that is the XML Schema for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is identical to calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a>, except that only the primary schema is written.  </p>\n<p> GetXmlSchema returns XML as a string, and therefore requires more overhead than <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> to write XML to a file.  </p>\n<p> If you build a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using schema inference and serialize it using XML or Web services, the column ordering may change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and then displays the schema in XML format.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetXmlSchema Example#1\">    private static void DemonstrateGetXml()\n    {\n        // Create a DataSet with one table containing \n        // two columns and 10 rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = dataSet.Tables.Add(&quot;Items&quot;);\n        table.Columns.Add(&quot;id&quot;, typeof(int));\n        table.Columns.Add(&quot;Item&quot;, typeof(string));\n\n        // Add ten rows.\n        DataRow row;\n        for(int i = 0; i &lt;10;i++)\n        {\n            row = table.NewRow();\n            row[&quot;id&quot;]= i;\n            row[&quot;Item&quot;]= &quot;Item&quot; + i;\n            table.Rows.Add(row);\n        }\n\n        // Display the DataSet contents as XML.\n        Console.WriteLine( dataSet.GetXml() );\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetXmlSchema Example#1\">Private Shared Sub DemonstrateGetXml()\n\t&#39; Create a DataSet with one table \n    &#39; containing two columns and 10 rows.\n\tDim dataSet As DataSet = New DataSet(&quot;dataSet&quot;)\n\tDim table As DataTable = dataSet.Tables.Add(&quot;Items&quot;)\n\ttable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\ttable.Columns.Add(&quot;Item&quot;, Type.GetType(&quot;System.String&quot;))\n\n\t&#39; Add ten rows.\n\tDim row As DataRow\n\tDim i As Integer\n\tFor i = 0 To 9\n\t\trow = table.NewRow()\n\t\trow(&quot;id&quot;) = i\n\t\trow(&quot;Item&quot;)= &quot;Item&quot; &amp; i\n\t\ttable.Rows.Add(row)\n\tNext\n\n\t&#39; Display the DataSet contents as XML.\n\tConsole.WriteLine( dataSet.GetXml() )\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_HasChanges\">\r\n    \r\n            <a id=\"System_Data_DataSet_HasChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes, including new, deleted, or modified rows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method to create a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object that is then used to update a data source.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.HasChanges Example#1\">Private Sub UpdateDataSet(ByVal dataSet As DataSet)\n    &#39; Check for changes with the HasChanges method first.\n    If Not dataSet.HasChanges() Then \n        Exit Sub\n    End If\n\n    &#39; Create temporary DataSet variable.\n    &#39; GetChanges for modified rows only.\n    Dim tempDataSet As DataSet = _\n        dataSet.GetChanges(DataRowState.Modified)\n\n    &#39; Check the DataSet for errors.\n    If tempDataSet.HasErrors Then\n       &#39; Insert code to resolve errors.\n    End If\n\n    &#39; After fixing errors, update the data source with \n    &#39; the DataAdapter used to create the DataSet.\n    myOleDbDataAdapter.Update(tempDataSet)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.HasChanges Example#1\">    private void UpdateDataSet(DataSet dataSet)\n    {\n        // Check for changes with the HasChanges method first.\n        if(!dataSet.HasChanges()) return;\n\n        // Create temporary DataSet variable.\n        DataSet tempDataSet;\n\n        // GetChanges for modified rows only.\n        tempDataSet = dataSet.GetChanges(DataRowState.Modified);\n\n        // Check the DataSet for errors.\n        if(tempDataSet.HasErrors)\n        {\n            // Insert code to resolve errors.\n        }\n        // After fixing errors, update the data source with \n        // the DataAdapter used to create the DataSet.\n        myOleDbDataAdapter.Update(tempDataSet);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_HasChanges_System_Data_DataRowState_\">\r\n    \r\n            <a id=\"System_Data_DataSet_HasChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasChanges(DataRowState)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes, including new, deleted, or modified rows, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasChanges (System.Data.DataRowState rowStates);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowStates</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> has changes; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Examine the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_HasChanges_\" data-linktype=\"relative-path\">HasChanges</a> property of the <code>DataSet</code> before invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method to create a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object, which is then used to update a data source.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetChanges1 Example#1\"> Private Sub UpdateDataSet(ByVal dataSet As DataSet)\n    &#39; Check for changes with the HasChanges method first.\n    If Not dataSet.HasChanges(DataRowState.Modified) Then \n        Exit Sub\n    End If\n\n    &#39; Create temporary DataSet variable and\n    &#39; GetChanges for modified rows only.\n    Dim tempDataSet As DataSet = _\n        dataSet.GetChanges(DataRowState.Modified)\n\n    &#39; Check the DataSet for errors.\n    If tempDataSet.HasErrors Then\n       &#39; Insert code to resolve errors.\n    End If\n\n    &#39; After fixing errors, update the data source with   \n    &#39; the DataAdapter used to create the DataSet.\n    adapter.Update(tempDataSet)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetChanges1 Example#1\">    private void UpdateDataSet(DataSet dataSet)\n    {\n        // Check for changes with the HasChanges method first.\n        if(!dataSet.HasChanges(DataRowState.Modified)) return;\n\n        // Create temporary DataSet variable and\n        // GetChanges for modified rows only.\n        DataSet tempDataSet = \n            dataSet.GetChanges(DataRowState.Modified);\n\n        // Check the DataSet for errors.\n        if(tempDataSet.HasErrors)\n        {\n            // Insert code to resolve errors.\n        }\n        // After fixing errors, update the data source with  \n        // the DataAdapter used to create the DataSet.\n        adapter.Update(tempDataSet);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_InferXmlSchema_System_IO_Stream_System_String___\">\r\n    \r\n            <a id=\"System_Data_DataSet_InferXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InferXmlSchema(Stream,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Stream</code> from which to read the schema.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nsArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_InferXmlSchema_System_IO_TextReader_System_String___\">\r\n    \r\n            <a id=\"System_Data_DataSet_InferXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InferXmlSchema(TextReader,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> from which to read the schema.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nsArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_InferXmlSchema_System_String_System_String___\">\r\n    \r\n            <a id=\"System_Data_DataSet_InferXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InferXmlSchema(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Applies the XML schema from the specified file to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InferXmlSchema (string fileName, string[] nsArray);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file (including the path) from which to read the schema.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nsArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_InferXmlSchema_System_Xml_XmlReader_System_String___\">\r\n    \r\n            <a id=\"System_Data_DataSet_InferXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InferXmlSchema(XmlReader,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Applies the XML schema from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XMLReader</code> from which to read the schema.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nsArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_InitializeDerivedDataSet\">\r\n    \r\n            <a id=\"System_Data_DataSet_InitializeDerivedDataSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeDerivedDataSet()</div>        \r\n          </div>\r\n    \r\n            <p>Deserialize all of the tables data of the DataSet from the binary or XML stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InitializeDerivedDataSet ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_IsBinarySerialized_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataSet_IsBinarySerialized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsBinarySerialized(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Inspects the format of the serialized representation of the <code>DataSet</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> represents a <code>DataSet</code> serialized in its binary format, <code>false</code> otherwise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_DataTable___\">\r\n    \r\n            <a id=\"System_Data_DataSet_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader,LoadOption,DataTable[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances to supply the schema and namespace information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides one or more result sets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration that indicates how rows already in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances within the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> will be combined with incoming rows that share the same primary key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, from which the Load method retrieves name and namespace information. Each of these tables must be a member of the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a> contained by this <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method provides a technique for filling a single <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with data, retrieved from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance. This method provides the same functionality, but allows you to load multiple result sets from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> into multiple tables within a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The load operation will fail with an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if any of the source data columns in the incoming <code>reader</code> are computed columns.  </p>\n</div>\n<p> The <code>loadOption</code> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration. See the documentation for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a><a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method for more information on using this parameter.  </p>\n<p> The <code>tables</code> parameter allows you to specify an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.  </p>\n<p> The name resolution scheme for this method is the same as that followed by the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method of the <a class=\"xref\" href=\"system.data.common.dbdataadapter\" data-linktype=\"relative-path\">DbDataAdapter</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, adds two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and then fills the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the Load method, retrieving data from a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataSet.LoadTables#1\">    Sub Main()\n        Dim dataSet As New DataSet\n\n        Dim customerTable As New DataTable\n        Dim productTable As New DataTable\n\n        &#39; This information is cosmetic, only.\n        customerTable.TableName = &quot;Customers&quot;\n        productTable.TableName = &quot;Products&quot;\n\n        &#39; Add the tables to the DataSet:\n        dataSet.Tables.Add(customerTable)\n        dataSet.Tables.Add(productTable)\n\n        &#39; Load the data into the existing DataSet. \n        Dim reader As DataTableReader = GetReader()\n        dataSet.Load(reader, LoadOption.OverwriteChanges, _\n            customerTable, productTable)\n\n        &#39; Print out the contents of each table:\n        For Each table As DataTable In dataSet.Tables\n            PrintColumns(table)\n        Next\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;)\n        Console.ReadKey()\n    End Sub\n\n    Private Function GetCustomers() As DataTable\n        &#39; Create sample Customers table.\n        Dim table As New DataTable\n        table.TableName = &quot;Customers&quot;\n\n        &#39; Create two columns, ID and Name.\n        Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n            GetType(Integer))\n        table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n        &#39; Set the ID column as the primary key column.\n        table.PrimaryKey = New DataColumn() {idColumn}\n\n        table.Rows.Add(New Object() {0, &quot;Mary&quot;})\n        table.Rows.Add(New Object() {1, &quot;Andy&quot;})\n        table.Rows.Add(New Object() {2, &quot;Peter&quot;})\n        table.AcceptChanges()\n        Return table\n    End Function\n\n    Private Function GetProducts() As DataTable\n        &#39; Create sample Products table, in order\n        &#39; to demonstrate the behavior of the DataTableReader.\n        Dim table As New DataTable\n        table.TableName = &quot;Products&quot;\n\n        &#39; Create two columns, ID and Name.\n        Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n            GetType(Integer))\n        table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n        &#39; Set the ID column as the primary key column.\n        table.PrimaryKey = New DataColumn() {idColumn}\n\n        table.Rows.Add(New Object() {0, &quot;Wireless Network Card&quot;})\n        table.Rows.Add(New Object() {1, &quot;Hard Drive&quot;})\n        table.Rows.Add(New Object() {2, &quot;Monitor&quot;})\n        table.Rows.Add(New Object() {3, &quot;CPU&quot;})\n        Return table\n    End Function\n\n    Private Function GetReader() As DataTableReader\n        &#39; Return a DataTableReader containing multiple\n        &#39; result sets, just for the sake of this demo.\n        Dim dataSet As New DataSet\n        dataSet.Tables.Add(GetCustomers())\n        dataSet.Tables.Add(GetProducts())\n        Return dataSet.CreateDataReader()\n    End Function\n\n    Private Sub PrintColumns( _\n       ByVal table As DataTable)\n\n        Console.WriteLine()\n        Console.WriteLine(table.TableName)\n        Console.WriteLine(&quot;=========================&quot;)\n        &#39; Loop through all the rows in the table.\n        For Each row As DataRow In table.Rows\n            For Each col As DataColumn In table.Columns\n                Console.Write(row(col).ToString() &amp; &quot; &quot;)\n            Next\n            Console.WriteLine()\n        Next\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataSet.LoadTables#1\">    static void Main()\n    {\n        DataSet dataSet = new DataSet();\n\n        DataTable customerTable = new DataTable();\n        DataTable productTable = new DataTable();\n\n        // This information is cosmetic, only.\n        customerTable.TableName = &quot;Customers&quot;;\n        productTable.TableName = &quot;Products&quot;;\n\n        // Add the tables to the DataSet:\n        dataSet.Tables.Add(customerTable);\n        dataSet.Tables.Add(productTable);\n\n        // Load the data into the existing DataSet. \n        DataTableReader reader = GetReader();\n        dataSet.Load(reader, LoadOption.OverwriteChanges,\n            customerTable, productTable);\n\n        // Print out the contents of each table:\n        foreach (DataTable table in dataSet.Tables)\n        {\n            PrintColumns(table);\n        }\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table.\n        DataTable table = new DataTable();\n        table.TableName = &quot;Customers&quot;;\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 1, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table.\n        DataTable table = new DataTable();\n        table.TableName = &quot;Products&quot;;\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;,\n            typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 1, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 3, &quot;CPU&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintColumns(DataTable table)\n    {\n        Console.WriteLine();\n        Console.WriteLine(table.TableName);\n        Console.WriteLine(&quot;=========================&quot;);\n        // Loop through all the rows in the table:\n        foreach (DataRow row in table.Rows)\n        {\n            for (int i = 0; i &lt; table.Columns.Count; i++)\n            {\n                Console.Write(row[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static DataTableReader GetReader()\n    {\n        // Return a DataTableReader containing multiple\n        // result sets, just for the sake of this demo.\n        DataSet dataSet = new DataSet();\n        dataSet.Tables.Add(GetCustomers());\n        dataSet.Tables.Add(GetProducts());\n        return dataSet.CreateDataReader();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_String___\">\r\n    \r\n            <a id=\"System_Data_DataSet_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader,LoadOption,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of strings to supply the names for the tables within the <code>DataSet</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides one or more result sets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration that indicates how rows already in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances within the <code>DataSet</code> will be combined with incoming rows that share the same primary key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of strings, from which the <code>Load</code> method retrieves table name information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method provides a technique for filling a single <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with data, retrieved from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance. This method provides the same functionality, but allows you to load multiple result sets from an <code>IDataReader</code> into multiple tables within a <code>DataSet</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The load operation will fail with an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if any of the source data columns in the incoming <code>reader</code> are computed columns.  </p>\n</div>\n<p> The <code>loadOption</code> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration. See the documentation for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method for more information on using this parameter.  </p>\n<p> The <code>tables</code> parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The <code>Load</code> method attempts to find a table within the <code>DataSet</code> matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table&#39;s schema is inferred from the result set. After each result set, the <code>Load</code> method moves on to the next result set within the reader, until there are no more result sets.  </p>\n<p> The default namespace associated with <code>DataSet</code>, if any, is associated with each newly created <code>DataTable</code>. The name resolution scheme for this method is the same as that followed by the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method of the <a class=\"xref\" href=\"system.data.common.dbdataadapter\" data-linktype=\"relative-path\">DbDataAdapter</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Console application example first creates tables and loads data from a reader into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, using the <code>Load</code> method. The example then adds tables to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and attempts to fill the tables with data from a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. In this example, because the parameters passed to the <code>Load</code> method indicate a table name that does not exist, the <code>Load</code> method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataSet.LoadString#1\">  Sub Main()\n    Dim dataSet As New DataSet\n    Dim table As DataTable\n\n    Dim reader As DataTableReader = GetReader()\n\n    &#39; The tables listed as parameters for the Load method \n    &#39; should be in the same order as the tables within the IDataReader.\n    dataSet.Load(reader, LoadOption.Upsert, &quot;Customers&quot;, &quot;Products&quot;)\n    For Each table In dataSet.Tables\n      PrintColumns(table)\n    Next\n\n    &#39; Now try the example with the DataSet\n    &#39; already filled with data:\n    dataSet = New DataSet\n    dataSet.Tables.Add(GetCustomers())\n    dataSet.Tables.Add(GetProducts())\n\n    &#39; Retrieve a data reader containing changed data:\n    reader = GetReader()\n\n    &#39; Load the data into the existing DataSet. Retrieve the order of the\n    &#39; the data in the reader from the\n    &#39; list of table names in the parameters. If you specify\n    &#39; a new table name here, the Load method will create\n    &#39; a corresponding new table.\n    dataSet.Load(reader, LoadOption.Upsert, &quot;NewCustomers&quot;, &quot;Products&quot;)\n    For Each table In dataSet.Tables\n      PrintColumns(table)\n    Next\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table.\n    Dim table As New DataTable\n    table.TableName = &quot;Customers&quot;\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {0, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {1, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {2, &quot;Peter&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetProducts() As DataTable\n    &#39; Create sample Products table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n    table.TableName = &quot;Products&quot;\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {0, &quot;Wireless Network Card&quot;})\n    table.Rows.Add(New Object() {1, &quot;Hard Drive&quot;})\n    table.Rows.Add(New Object() {2, &quot;Monitor&quot;})\n    table.Rows.Add(New Object() {3, &quot;CPU&quot;})\n    Return table\n  End Function\n\n  Private Function GetReader() As DataTableReader\n    &#39; Return a DataTableReader containing multiple\n    &#39; result sets, just for the sake of this demo.\n    Dim dataSet As New DataSet\n    dataSet.Tables.Add(GetCustomers())\n    dataSet.Tables.Add(GetProducts())\n    Return dataSet.CreateDataReader()\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal table As DataTable)\n\n    Console.WriteLine()\n    Console.WriteLine(table.TableName)\n    Console.WriteLine(&quot;=========================&quot;)\n    &#39; Loop through all the rows in the table.\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(row(col).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Next\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataSet.LoadString#1\">    static void Main()\n    {\n        DataSet dataSet = new DataSet();\n\n        DataTableReader reader = GetReader();\n\n        // The tables listed as parameters for the Load method \n        // should be in the same order as the tables within the IDataReader.\n        dataSet.Load(reader, LoadOption.Upsert, &quot;Customers&quot;, &quot;Products&quot;);\n        foreach (DataTable table in dataSet.Tables)\n        {\n            PrintColumns(table);\n        }\n\n        // Now try the example with the DataSet\n        // already filled with data:\n        dataSet = new DataSet();\n        dataSet.Tables.Add(GetCustomers());\n        dataSet.Tables.Add(GetProducts());\n\n        // Retrieve a data reader containing changed data:\n        reader = GetReader();\n\n        // Load the data into the existing DataSet. Retrieve the order of the\n        // the data in the reader from the\n        // list of table names in the parameters. If you specify\n        // a new table name here, the Load method will create\n        // a corresponding new table.\n        dataSet.Load(reader, LoadOption.Upsert, \n            &quot;NewCustomers&quot;, &quot;Products&quot;);\n        foreach (DataTable table in dataSet.Tables)\n        {\n            PrintColumns(table);\n        }\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table.\n        DataTable table = new DataTable();\n        table.TableName = &quot;Customers&quot;;\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 1, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table.\n        DataTable table = new DataTable();\n        table.TableName = &quot;Products&quot;;\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 1, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 3, &quot;CPU&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintColumns(DataTable table)\n    {\n        Console.WriteLine();\n        Console.WriteLine(table.TableName);\n        Console.WriteLine(&quot;=========================&quot;);\n        // Loop through all the rows in the table:\n        foreach (DataRow row in table.Rows)\n        {\n            for (int i = 0; i &lt; table.Columns.Count; i++)\n            {\n                Console.Write(row[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static DataTableReader GetReader()\n    {\n        // Return a DataTableReader containing multiple\n        // result sets, just for the sake of this demo.\n        DataSet dataSet = new DataSet();\n        dataSet.Tables.Add(GetCustomers());\n        dataSet.Tables.Add(GetProducts());\n        return dataSet.CreateDataReader();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_FillErrorEventHandler_System_Data_DataTable___\">\r\n    \r\n            <a id=\"System_Data_DataSet_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, using an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances to supply the schema and namespace information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides one or more result sets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration that indicates how rows already in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances within the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> will be combined with incoming rows that share the same primary key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a> delegate to call when an error occurs while loading data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, from which the Load method retrieves name and namespace information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method provides a technique for filling a single <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with data, retrieved from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance. This method provides the same functionality, but allows you to load multiple result sets from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> into multiple tables within a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The load operation will fail with an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if any of the source data columns in the incoming <code>reader</code> are computed columns.  </p>\n</div>\n<p> The <code>loadOption</code> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration. See the documentation for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a><a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a> method for more information on using this parameter.  </p>\n<p> The <code>errorHandler</code> parameter is a <a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a> delegate that refers to a procedure that is called when an error occurs while loading data. The <a class=\"xref\" href=\"system.data.fillerroreventargs\" data-linktype=\"relative-path\">FillErrorEventArgs</a> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <a class=\"xref\" href=\"system.data.fillerroreventargs\" data-linktype=\"relative-path\">FillErrorEventArgs</a> parameter supplies a <a class=\"xref\" href=\"system.data.fillerroreventargs#System_Data_FillErrorEventArgs_Continue_\" data-linktype=\"relative-path\">Continue</a> property: set this property to <code>true</code> to indicate that you have handled the error and wish to continue processing; set the property to <code>false</code> to indicate that you wish to halt processing. Be aware that setting the property to <code>false</code> causes the code that triggered the problem to throw an exception.  </p>\n<p> The <code>tables</code> parameter allows you to specify an array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.  </p>\n<p> The name resolution scheme for this method is the same as that followed by the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method of the <a class=\"xref\" href=\"system.data.common.dbdataadapter\" data-linktype=\"relative-path\">DbDataAdapter</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a table to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and then attempts to use the Load method to load data from a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> that contains an incompatible schema. Rather than trapping the error, this example uses a <a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a> delegate to investigate and handle the error. The output is displayed in the console window.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataSet.Load#1\">  Sub Main()\n    Dim dataSet As New DataSet\n    Dim table As New DataTable()\n\n    &#39; Attempt to load data from a data reader in which\n    &#39; the schema is incompatible with the current schema.\n    &#39; If you use exception handling, you won&#39;t get the chance\n    &#39; to examine each row, and each individual table,\n    &#39; as the Load method progresses.\n    &#39; By taking advantage of the FillErrorEventHandler delegate,\n    &#39; you can interact with the Load process as an error occurs,\n    &#39; attempting to fix the problem, or simply continuing or quitting\n    &#39; the Load process.:\n    dataSet = New DataSet()\n    table = GetIntegerTable()\n    dataSet.Tables.Add(table)\n    Dim reader As New DataTableReader(GetStringTable())\n    dataSet.Load(reader, LoadOption.OverwriteChanges, _\n        AddressOf FillErrorHandler, table)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub FillErrorHandler(ByVal sender As Object, _\n    ByVal e As FillErrorEventArgs)\n    &#39; You can use the e.Errors value to determine exactly what\n    &#39; went wrong.\n    If e.Errors.GetType Is GetType(System.FormatException) Then\n      Console.WriteLine(&quot;Error when attempting to update the value: {0}&quot;, _\n        e.Values(0))\n    End If\n\n    &#39; Setting e.Continue to True tells the Load\n    &#39; method to continue trying. Setting it to False\n    &#39; indicates that an error has occurred, and the \n    &#39; Load method raises the exception that got \n    &#39; you here.\n    e.Continue = True\n  End Sub\n\n  Private Function GetIntegerTable() As DataTable\n    &#39; Create sample table with a single Int32 column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {4})\n    table.Rows.Add(New Object() {5})\n    table.TableName = &quot;IntegerTable&quot;\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetStringTable() As DataTable\n    &#39; Create sample table with a single String column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {&quot;Mary&quot;})\n    table.Rows.Add(New Object() {&quot;Andy&quot;})\n    table.Rows.Add(New Object() {&quot;Peter&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal table As DataTable)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(row(col).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Next\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataSet.Load#1\">    static void Main()\n    {\n        // Attempt to load data from a data reader in which\n        // the schema is incompatible with the current schema.\n        // If you use exception handling, you won&#39;t get the chance\n        // to examine each row, and each individual table,\n        // as the Load method progresses.\n        // By taking advantage of the FillErrorEventHandler delegate,\n        // you can interact with the Load process as an error occurs,\n        // attempting to fix the problem, or simply continuing or quitting\n        // the Load process.:\n        DataSet dataSet = new DataSet();\n        DataTable table = GetIntegerTable();\n        dataSet.Tables.Add(table);\n        DataTableReader reader = new DataTableReader(GetStringTable());\n        dataSet.Load(reader, LoadOption.OverwriteChanges, \n            FillErrorHandler, table);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetIntegerTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 4 });\n        table.Rows.Add(new object[] { 5 });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetStringTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { &quot;Mary&quot; });\n        table.Rows.Add(new object[] { &quot;Andy&quot; });\n        table.Rows.Add(new object[] { &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    static void FillErrorHandler(object sender, FillErrorEventArgs e)\n    {\n        // You can use the e.Errors value to determine exactly what\n        // went wrong.\n        if (e.Errors.GetType() == typeof(System.FormatException))\n        {\n            Console.WriteLine(&quot;Error when attempting to update the value: {0}&quot;, \n                e.Values[0]);\n        }\n\n        // Setting e.Continue to True tells the Load\n        // method to continue trying. Setting it to False\n        // indicates that an error has occurred, and the \n        // Load method raises the exception that got \n        // you here.\n        e.Continue = true;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataRow___\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataRow[])</div>        \r\n          </div>\r\n    \r\n            <p>Merges an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataRow[] rows);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of <code>DataRow</code> objects to be merged into the <code>DataSet</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataSet_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataSet)</div>        \r\n          </div>\r\n    \r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema into the current <code>DataSet</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataSet dataSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>DataSet</code> whose data and schema will be merged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a></div>\r\n                  </div>\r\n                  <p>One or more constraints cannot be enabled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>dataSet</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Merge method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the Merge method.  </p>\n<p> When the Merge method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a>, Update, and Merge methods on a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Merge Example#1\"> Private Sub DemonstrateMerge()\n     &#39; Create a DataSet with one table, two columns, and three rows.\n     Dim dataSet As New DataSet(&quot;dataSet&quot;)\n     Dim table As New DataTable(&quot;Items&quot;)\n     Dim idColumn As New DataColumn(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n     idColumn.AutoIncrement = True\n     Dim itemColumn As New DataColumn(&quot;Item&quot;, Type.GetType(&quot;System.Int32&quot;))\n\n     &#39; DataColumn array to set primary key.\n     Dim keyColumn(1) As DataColumn\n     Dim row As DataRow\n\n     &#39; Create variable for temporary DataSet. \n     Dim changeDataSet As DataSet\n\n     &#39; Add columns to table, and table to DataSet.   \n     table.Columns.Add(idColumn)\n     table.Columns.Add(itemColumn)\n     dataSet.Tables.Add(table)\n\n     &#39; Set primary key column.\n     keyColumn(0) = idColumn\n     table.PrimaryKey = keyColumn\n\n     &#39; Add ten rows.\n     Dim i As Integer\n     For i = 0 To 9\n         row = table.NewRow()\n         row(&quot;Item&quot;) = i\n         table.Rows.Add(row)\n     Next i\n\n     &#39; Accept changes.\n     dataSet.AcceptChanges()\n     PrintValues(dataSet, &quot;Original values&quot;)\n\n     &#39; Change two row values.\n     table.Rows(0)(&quot;Item&quot;) = 50\n     table.Rows(1)(&quot;Item&quot;) = 111\n\n     &#39; Add one row.\n     row = table.NewRow()\n     row(&quot;Item&quot;) = 74\n     table.Rows.Add(row)\n\n     &#39; Insert code for error checking. Set one row in error.\n     table.Rows(1).RowError = &quot;over 100&quot;\n     PrintValues(dataSet, &quot;Modified and New Values&quot;)\n\n     &#39; If the table has changes or errors, create a subset DataSet.\n     If dataSet.HasChanges(DataRowState.Modified Or DataRowState.Added) _\n        And dataSet.HasErrors Then\n\n         &#39; Use GetChanges to extract subset.\n         changeDataSet = dataSet.GetChanges(DataRowState.Modified _\n            Or DataRowState.Added)\n         PrintValues(changeDataSet, &quot;Subset values&quot;)\n\n         &#39; Insert code to reconcile errors. In this case, reject changes.\n         Dim changeTable As DataTable\n         For Each changeTable In  changeDataSet.Tables\n             If changeTable.HasErrors Then\n                 Dim changeRow As DataRow\n                 For Each changeRow In  changeTable.Rows\n                     &#39;Console.WriteLine(changeRow[&quot;Item&quot;]);\n                     If CInt(changeRow(&quot;Item&quot;, _\n                        DataRowVersion.Current)) &gt; 100 Then\n                         changeRow.RejectChanges()\n                         changeRow.ClearErrors()\n                     End If\n                 Next changeRow\n             End If\n         Next changeTable\n         PrintValues(changeDataSet, &quot;Reconciled subset values&quot;)\n\n         &#39; Merge changes back to first DataSet.\n         dataSet.Merge(changeDataSet)\n         PrintValues(dataSet, &quot;Merged Values&quot;)\n     End If\n End Sub\n \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)\n         Dim row As DataRow\n         For Each row In  table.Rows\n             Dim column As DataColumn\n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Merge Example#1\">    private void DemonstrateMerge() \n    {\n        // Create a DataSet with one table, two columns, and three rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement=true;\n        DataColumn itemColumn = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n\n        // DataColumn array to set primary key.\n        DataColumn[] keyColumn= new DataColumn[1];\n        DataRow row;\n\n        // Create variable for temporary DataSet. \n        DataSet changeDataSet;\n\n        // Add columns to table, and table to DataSet.   \n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        dataSet.Tables.Add(table);\n\n        // Set primary key column.\n        keyColumn[0]= idColumn;\n        table.PrimaryKey=keyColumn;\n\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            row=table.NewRow();\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n\n        // Accept changes.\n        dataSet.AcceptChanges();\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Change two row values.\n        table.Rows[0][&quot;Item&quot;]= 50;\n        table.Rows[1][&quot;Item&quot;]= 111;\n\n        // Add one row.\n        row=table.NewRow();\n        row[&quot;Item&quot;]=74;\n        table.Rows.Add(row);\n\n        // Insert code for error checking. Set one row in error.\n        table.Rows[1].RowError= &quot;over 100&quot;;\n        PrintValues(dataSet, &quot;Modified and New Values&quot;);\n        // If the table has changes or errors, create a subset DataSet.\n        if(dataSet.HasChanges(DataRowState.Modified | \n            DataRowState.Added)&amp; dataSet.HasErrors)\n        {\n            // Use GetChanges to extract subset.\n            changeDataSet = dataSet.GetChanges(\n                DataRowState.Modified|DataRowState.Added);\n            PrintValues(changeDataSet, &quot;Subset values&quot;);\n            // Insert code to reconcile errors. In this case reject changes.\n            foreach(DataTable changeTable in changeDataSet.Tables)\n            {\n                if (changeTable.HasErrors)\n                {\n                    foreach(DataRow changeRow in changeTable.Rows)\n                    {\n                        //Console.WriteLine(changeRow[&quot;Item&quot;]);\n                        if((int)changeRow[&quot;Item&quot;,\n                            DataRowVersion.Current ]&gt; 100)\n                        {\n                            changeRow.RejectChanges();\n                            changeRow.ClearErrors();\n                        }\n                    }\n                }\n            }\n            PrintValues(changeDataSet, &quot;Reconciled subset values&quot;);\n            // Merge changes back to first DataSet.\n            dataSet.Merge(changeDataSet);\n            PrintValues(dataSet, &quot;Merged Values&quot;);\n        }\n    }\n\n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its schema into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataTable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose data and schema will be merged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>table</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, two columns, and ten rows. A second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Merge3 Example#1\">Private Sub DemonstrateMergeTable()\n    &#39; Create a DataSet with one table, two columns, \n    &#39; and ten rows.\n    Dim dataSet As New DataSet(&quot;dataSet&quot;)\n    Dim table As New DataTable(&quot;Items&quot;)\n\n    &#39; Add tables to the DataSet\n    dataSet.Tables.Add(table)\n\n    &#39; Add columns\n    Dim c1 As New DataColumn(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    Dim c2 As New DataColumn(&quot;Item&quot;, Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    table.Columns.Add(c1)\n    table.Columns.Add(c2)\n\n    &#39; DataColumn array to set primary key.\n    Dim keyCol(1) As DataColumn\n\n    &#39; Set primary key column.\n    keyCol(0) = c1\n    table.PrimaryKey = keyCol\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table.RowChanged, AddressOf Row_Changed\n\n    &#39; Add ten rows.\n    Dim i As Integer\n    Dim row As DataRow\n\n    For i = 0 To 9\n        row = table.NewRow()\n        row(&quot;id&quot;) = i\n        row(&quot;Item&quot;) = i\n        table.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    dataSet.AcceptChanges()\n    PrintValues(dataSet, &quot;Original values&quot;)\n\n    &#39; Create a second DataTable identical to the first.\n    Dim t2 As DataTable\n    t2 = table.Clone()\n\n    &#39; Add three rows. Note that the id column can&#39;t be the \n    &#39; same as existing rows in the DataSet table.\n    Dim newRow As DataRow\n    newRow = t2.NewRow()\n    newRow(&quot;id&quot;) = 14\n    newRow(&quot;Item&quot;) = 774\n    t2.Rows.Add(newRow)\n\n    newRow = t2.NewRow()\n    newRow(&quot;id&quot;) = 12\n    newRow(&quot;Item&quot;) = 555\n    t2.Rows.Add(newRow)\n\n    newRow = t2.NewRow()\n    newRow(&quot;id&quot;) = 13\n    newRow(&quot;Item&quot;) = 665\n    t2.Rows.Add(newRow)\n\n    &#39; Merge the table into the DataSet.\n    Console.WriteLine(&quot;Merging&quot;)\n    dataSet.Merge(t2)\n    PrintValues(dataSet, &quot;Merged With Table&quot;)\n End Sub \n     \n Private Sub Row_Changed( _\n    sender As Object, e As DataRowChangeEventArgs)\n     Console.WriteLine(&quot;Row Changed &quot; &amp; e.Action.ToString() _\n        &amp; ControlChars.Tab &amp; e.Row.ItemArray(0).ToString())\n End Sub &#39;Row_Changed\n \n Private Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     Dim row As DataRow\n     Dim column As DataColumn\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName) \n         For Each row In  table.Rows             \n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Merge3 Example#1\">    private void DemonstrateMergeTable()\n    {\n        // Create a DataSet with one table, two columns, and ten rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n\n        // Add table to the DataSet\n        dataSet.Tables.Add(table);\n\n        // Add columns\n        DataColumn c1 = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        DataColumn c2 = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        table.Columns.Add(c1);\n        table.Columns.Add(c2);\n\n        // DataColumn array to set primary key.\n        DataColumn[] keyCol= new DataColumn[1];\n\n        // Set primary key column.\n        keyCol[0]= c1;\n        table.PrimaryKey=keyCol;\n\n        // Add a RowChanged event handler for the table.\n        table.RowChanged += new \n            DataRowChangeEventHandler(Row_Changed);\n\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            DataRow row=table.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n        // Accept changes.\n        dataSet.AcceptChanges();\n\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Create a second DataTable identical to the first.\n        DataTable t2 = table.Clone();\n\n        // Add three rows. Note that the id column can&#39;te be the\n        // same as existing rows in the DataSet table.\n        DataRow newRow;\n        newRow = t2.NewRow();\n        newRow[&quot;id&quot;] = 14;\n        newRow[&quot;item&quot;] = 774;\n\n        //Note the alternative method for adding rows.\n        t2.Rows.Add(new Object[] { 12, 555 });\n        t2.Rows.Add(new Object[] { 13, 665 });\n\n        // Merge the table into the DataSet\n        Console.WriteLine(&quot;Merging&quot;);\n        dataSet.Merge(t2);\n        PrintValues(dataSet, &quot;Merged With table.&quot;);\n\n    }\n \n    private void Row_Changed(object sender, \n        DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() \n            + &quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + e.Row.ItemArray[0]);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataSet_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataSet,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema into the current <code>DataSet</code>, preserving or discarding any changes in this <code>DataSet</code> according to the given argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataSet dataSet, bool preserveChanges);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>DataSet</code> whose data and schema will be merged.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to preserve changes in the current <code>DataSet</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method. After reconciling errors, the subset data is merged into the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.GetChanges Example#1\">    private void DemonstrateMerge()\n    {\n        // Create a DataSet with one table, two columns, \n        // and three rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        idColumn.AutoIncrement=true;\n        DataColumn itemColumn = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n\n        // DataColumn array to set primary key.\n        DataColumn[] keyColumn= new DataColumn[1];\n        DataRow row;\n\n        // Create variable for temporary DataSet. \n        DataSet changesDataSet;\n\n        // Add RowChanged event handler for the table.\n        table.RowChanged+=new DataRowChangeEventHandler(\n            Row_Changed);\n        dataSet.Tables.Add(table);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n\n        // Set primary key column.\n        keyColumn[0]= idColumn;\n        table.PrimaryKey=keyColumn;\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            row=table.NewRow();\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n        // Accept changes.\n        dataSet.AcceptChanges();\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Change row values.\n        table.Rows[0][&quot;Item&quot;]= 50;\n        table.Rows[1][&quot;Item&quot;]= 111;\n\n        // Add one row.\n        row=table.NewRow();\n        row[&quot;Item&quot;]=74;\n        table.Rows.Add(row);\n\n        // Insert code for error checking. Set one row in error.\n        table.Rows[1].RowError= &quot;over 100&quot;;\n        PrintValues(dataSet, &quot;Modified and New Values&quot;);\n\n        // If the table has changes or errors, \n        // create a subset DataSet.\n        if(dataSet.HasChanges(DataRowState.Modified | \n            DataRowState.Added)&amp;&amp; dataSet.HasErrors)\n        {\n            // Use GetChanges to extract subset.\n            changesDataSet = dataSet.GetChanges(\n                DataRowState.Modified|DataRowState.Added);\n            PrintValues(changesDataSet, &quot;Subset values&quot;);\n\n            // Insert code to reconcile errors. In this case, reject changes.\n            foreach(DataTable changesTable in changesDataSet.Tables)\n            {\n                if (changesTable.HasErrors)\n                {\n                    foreach(DataRow changesRow in changesTable.Rows)\n                    {\n                        //Console.WriteLine(changesRow[&quot;Item&quot;]);\n                        if((int)changesRow[&quot;Item&quot;,DataRowVersion.Current ]&gt; 100)\n                        {\n                            changesRow.RejectChanges();\n                            changesRow.ClearErrors();\n                        }\n                    }\n                }\n            }\n            // Add a column to the changesDataSet.\n            changesDataSet.Tables[&quot;Items&quot;].Columns.Add(\n                new DataColumn(&quot;newColumn&quot;));\n            PrintValues(changesDataSet, &quot;Reconciled subset values&quot;);\n            // Merge changes back to first DataSet.\n            dataSet.Merge(changesDataSet, false, \n                System.Data.MissingSchemaAction.Add);\n        }\n        PrintValues(dataSet, &quot;Merged Values&quot;);\n    }\n \n    private void Row_Changed(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() \n            + &quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + e.Row.ItemArray[0]);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(label + &quot;<br>&quot;);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.GetChanges Example#1\">Private Sub DemonstrateMerge()\n    &#39; Create a DataSet with one table, two columns, \n    &#39; and three rows.\n    Dim dataSet As New DataSet(&quot;dataSet&quot;)\n    Dim table As New DataTable(&quot;Items&quot;)\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    idColumn.AutoIncrement = True\n    Dim itemColumn As New DataColumn(&quot;Item&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n\n    &#39; Create DataColumn array to set primary key.\n    Dim keyColumn(1) As DataColumn\n    Dim row As DataRow\n\n    &#39; Create variable for temporary DataSet. \n    Dim changesDataSet As DataSet\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table.RowChanged, AddressOf Row_Changed\n    dataSet.Tables.Add(table)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n\n    &#39; Set primary key column.\n    keyColumn(0) = idColumn\n    table.PrimaryKey = keyColumn\n\n    &#39; Add ten rows.\n    Dim i As Integer\n    For i = 0 To 9\n        row = table.NewRow()\n        row(&quot;Item&quot;) = i\n        table.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    dataSet.AcceptChanges()\n    PrintValues(dataSet, &quot;Original values&quot;)\n\n    &#39; Change row values.\n    table.Rows(0)(&quot;Item&quot;) = 50\n    table.Rows(1)(&quot;Item&quot;) = 111\n\n    &#39; Add one row.\n    row = table.NewRow()\n    row(&quot;Item&quot;) = 74\n    table.Rows.Add(row)\n\n    &#39; Insert code for error checking. Set one row in error.\n    table.Rows(1).RowError = &quot;over 100&quot;\n    PrintValues(dataSet, &quot;Modified and New Values&quot;)\n\n    &#39; If the table has changes or errors, create a subset DataSet.\n    If dataSet.HasChanges(DataRowState.Modified Or DataRowState.Added) _\n        And dataSet.HasErrors Then\n        &#39; Use GetChanges to extract subset.\n        changesDataSet = dataSet.GetChanges( _\n            DataRowState.Modified Or DataRowState.Added)\n        PrintValues(changesDataSet, &quot;Subset values&quot;)\n\n        &#39; Insert code to reconcile errors. In this case, reject changes.\n        Dim changesTable As DataTable\n        For Each changesTable In  changesDataSet.Tables\n            If changesTable.HasErrors Then\n                Dim changesRow As DataRow\n                For Each changesRow In  changesTable.Rows\n                    &#39;Console.WriteLine(changesRow[&quot;Item&quot;]);\n                    If CInt(changesRow(&quot;Item&quot;, _\n                        DataRowVersion.Current)) &gt; 100 Then\n                        changesRow.RejectChanges()\n                        changesRow.ClearErrors()\n                    End If\n                Next changesRow\n            End If\n        Next changesTable\n\n        &#39; Add a column to the changesDataSet.\n        changesDataSet.Tables(&quot;Items&quot;).Columns.Add( _\n            New DataColumn(&quot;newColumn&quot;))\n        PrintValues(changesDataSet, &quot;Reconciled subset values&quot;)\n\n        &#39; Merge changes back to first DataSet.\n        dataSet.Merge(changesDataSet, False, _\n            System.Data.MissingSchemaAction.Add)\n    End If\n    PrintValues(dataSet, &quot;Merged Values&quot;)\nEnd Sub\n        \n Private Sub Row_Changed(sender As Object, e As DataRowChangeEventArgs)\n     Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() _\n        + ControlChars.Tab + e.Row.ItemArray(0).ToString())\n End Sub\n    \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(label + ControlChars.Cr)\n     Dim table As DataTable\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; + table.TableName)\n         Dim row As DataRow\n         For Each row In  table.Rows\n             Dim column As DataColumn\n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataRow___System_Boolean_System_Data_MissingSchemaAction_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataRow[],Boolean,MissingSchemaAction)</div>        \r\n          </div>\r\n    \r\n            <p>Merges an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, preserving or discarding changes in the <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects to be merged into the <code>DataSet</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to preserve changes in the <code>DataSet</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>missingSchemaAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> To facilitate explanation of the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method, we use &quot;target&quot; to signify the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and &quot;source&quot; to name the second (parameter) <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The target <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is so named because it is the object upon which an action (the merge) occurs. The second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is called a &quot;source&quot; because the information it contains does not change, but instead is merged into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataSet_System_Boolean_System_Data_MissingSchemaAction_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataSet,Boolean,MissingSchemaAction)</div>        \r\n          </div>\r\n    \r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and its schema with the current <code>DataSet</code>, preserving or discarding changes in the current <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>DataSet</code> whose data and schema will be merged.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to preserve changes in the current <code>DataSet</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>missingSchemaAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>dataSet</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> To facilitate explanation of the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method, we use &quot;target&quot; to signify the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, and &quot;source&quot; to name the second (parameter) <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The target <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is so named because it is the object upon which an action (the merge) occurs. The second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is called a &quot;source&quot; because the information it contains does not change, but instead is merged into the current <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called with the <code>missingSchemaAction</code> set to <code>MissingSchemaAction.Add</code>, the new column is added to the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s schema.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Merge2 Example#1\">    private void DemonstrateMergeMissingSchema()\n    {\n        // Create a DataSet with one table, two columns, \n        // and three rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement=true;\n        DataColumn itemColumn = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        // DataColumn array to set primary key.\n\n        DataColumn[] keyColumn= new DataColumn[1];\n        DataRow row;\n        // Create variable for temporary DataSet. \n        DataSet changeDataSet;\n\n        // Add RowChanged event handler for the table.\n        table.RowChanged+= new DataRowChangeEventHandler(\n            Row_Changed);\n        dataSet.Tables.Add(table);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n\n        // Set primary key column.\n        keyColumn[0]= idColumn;\n        table.PrimaryKey=keyColumn;\n\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            row=table.NewRow();\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n\n        // Accept changes.\n        dataSet.AcceptChanges();\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Change row values.\n        table.Rows[0][&quot;Item&quot;]= 50;\n        table.Rows[1][&quot;Item&quot;]= 111;\n\n        // Add one row.\n        row=table.NewRow();\n        row[&quot;Item&quot;]=74;\n        table.Rows.Add(row);\n\n        // Insert code for error checking. Set one row in error.\n        table.Rows[1].RowError= &quot;over 100&quot;;\n        PrintValues(dataSet, &quot;Modified and New Values&quot;);\n        // If the table has changes or errors, create a subset DataSet.\n        if(dataSet.HasChanges(DataRowState.Modified | \n            DataRowState.Added)&amp; dataSet.HasErrors)\n        {\n            // Use GetChanges to extract subset.\n            changeDataSet = dataSet.GetChanges(\n                DataRowState.Modified|DataRowState.Added);\n            PrintValues(changeDataSet, &quot;Subset values&quot;);\n\n            // Insert code to reconcile errors. Reject the changes.\n            foreach(DataTable changeTable in changeDataSet.Tables)\n            {\n                if (changeTable.HasErrors)\n                {\n                    foreach(DataRow changeRow in changeTable.Rows)\n                    {\n                        //Console.WriteLine(changeRow[&quot;Item&quot;]);\n                        if((int)changeRow[&quot;Item&quot;, \n                            DataRowVersion.Current ]&gt; 100)\n                        {\n                            changeRow.RejectChanges();\n                            changeRow.ClearErrors();\n                        }\n                    }\n                }\n            }\n            // Add a column to the changeDataSet to change the schema.\n            changeDataSet.Tables[&quot;Items&quot;].Columns.Add(\n                new DataColumn(&quot;newColumn&quot;));\n            PrintValues(changeDataSet, &quot;Reconciled subset values&quot;);\n\n            // Add values to the rows for each column.\n            foreach(DataRow rowItem in changeDataSet.Tables[&quot;Items&quot;].Rows)\n            {\n                rowItem[&quot;newColumn&quot;] = &quot;my new schema value&quot;;\n            }\n            // Merge changes back to first DataSet.\n            dataSet.Merge(changeDataSet, false,\n                System.Data.MissingSchemaAction.Add);\n        }\n        PrintValues(dataSet, &quot;Merged Values&quot;);\n    }\n \n    private void Row_Changed(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() \n            + &quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + e.Row.ItemArray[0]);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Merge2 Example#1\">Private Sub DemonstrateMergeMissingSchema()\n    &#39; Create a DataSet with one table, two columns, \n    &#39; and three rows.\n    Dim dataSet As New DataSet(&quot;dataSet&quot;)\n    Dim table As New DataTable(&quot;Items&quot;)\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n    idColumn.AutoIncrement = True\n    Dim itemColumn As New DataColumn(&quot;Item&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n\n    &#39; DataColumn array to set primary key.\n    Dim keyColumn(1) As DataColumn\n    Dim row As DataRow\n\n    &#39; Create variable for temporary DataSet. \n    Dim changeDataSet As DataSet\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table.RowChanged, AddressOf Row_Changed\n    dataSet.Tables.Add(table)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n\n    &#39; Set primary key column.\n    keyColumn(0) = idColumn\n    table.PrimaryKey = keyColumn\n\n    &#39; Add ten rows.\n    Dim i As Integer\n    For i = 0 To 9\n        row = table.NewRow()\n        row(&quot;Item&quot;) = i\n        table.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    dataSet.AcceptChanges()\n    PrintValues(dataSet, &quot;Original values&quot;)\n\n    &#39; Change row values.\n    table.Rows(0)(&quot;Item&quot;) = 50\n    table.Rows(1)(&quot;Item&quot;) = 111\n\n    &#39; Add one row.\n    row = table.NewRow()\n    row(&quot;Item&quot;) = 74\n    table.Rows.Add(row)\n\n    &#39; Insert code for error checking. Set one row in error.\n    table.Rows(1).RowError = &quot;over 100&quot;\n    PrintValues(dataSet, &quot;Modified and New Values&quot;)\n    &#39; If the table has changes or errors, \n    &#39; create a subset DataSet.\n    If dataSet.HasChanges(DataRowState.Modified Or DataRowState.Added) _\n        And dataSet.HasErrors Then\n        &#39; Use GetChanges to extract subset.\n        changeDataSet = dataSet.GetChanges(DataRowState.Modified _\n            Or DataRowState.Added)\n        PrintValues(changeDataSet, &quot;Subset values&quot;)\n        &#39; Insert code to reconcile errors. In this case, reject changes.\n        Dim changeTable As DataTable\n        For Each changeTable In  changeDataSet.Tables\n            If changeTable.HasErrors Then\n                Dim changeRow As DataRow\n                For Each changeRow In  changeTable.Rows\n                    If CInt(changeRow(&quot;Item&quot;, _\n                        DataRowVersion.Current)) &gt; 100 Then\n                        changeRow.RejectChanges()\n                        changeRow.ClearErrors()\n                    End If\n                Next changeRow\n            End If\n        Next changeTable\n\n        &#39; Add a column to the changeDataSet to change the schema.\n        changeDataSet.Tables(&quot;Items&quot;).Columns.Add( _\n            New DataColumn(&quot;newColumn&quot;))\n        PrintValues(changeDataSet, &quot;Reconciled subset values&quot;)\n\n        &#39; Add values to the rows for each column.\n        Dim rowItem As DataRow\n        For Each rowItem In  changeDataSet.Tables(&quot;Items&quot;).Rows\n            rowItem(&quot;newColumn&quot;) = &quot;my new schema value&quot;\n        Next rowItem\n\n        &#39; Merge changes back to first DataSet.\n        dataSet.Merge(changeDataSet, False, _\n            System.Data.MissingSchemaAction.Add)\n    End If\n    PrintValues(dataSet, &quot;Merged Values&quot;)\nEnd Sub\n    \nPrivate Sub Row_Changed(sender As Object, _\n    e As DataRowChangeEventArgs)\n     Console.WriteLine(&quot;Row Changed &quot; &amp; e.Action.ToString() _\n        &amp; ControlChars.Tab &amp; e.Row.ItemArray(0).ToString())\nEnd Sub\n \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n    Console.WriteLine(ControlChars.Cr &amp; label)\n    Dim table As DataTable\n    For Each table In  dataSet.Tables\n        Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)\n        Dim row As DataRow\n        For Each row In  table.Rows\n            Dim column As DataColumn\n            For Each column In  table.Columns\n                Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n            Next column\n            Console.WriteLine()\n        Next row\n    Next table\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Merge_System_Data_DataTable_System_Boolean_System_Data_MissingSchemaAction_\">\r\n    \r\n            <a id=\"System_Data_DataSet_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataTable,Boolean,MissingSchemaAction)</div>        \r\n          </div>\r\n    \r\n            <p>Merges a specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its schema into the current <code>DataSet</code>, preserving or discarding changes in the <code>DataSet</code> and handling an incompatible schema according to the given arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>DataTable</code> whose data and schema will be merged.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>missingSchemaAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to preserve changes in the <code>DataSet</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>dataSet</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is used to merge two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the latest data from the data source.  </p>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <code>DataRowState</code> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.  </p>\n<p> During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a> is generated and the merged data is retained while the constraints are disabled. In this case, the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property is set to <code>false</code>, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_EnforceConstraints_\" data-linktype=\"relative-path\">EnforceConstraints</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one table, two columns, and ten rows. A second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created that is nearly identical to the first except that a new <code>DataColumn</code> is added to the table. Two rows are added to the second table, which is then merged into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the <code>preserveChanges</code> argument set to <code>false</code>, and the <code>missingSchemaAction</code> argument set to <code>MissingSchemaAction.Add</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.Merge4 Example#1\">    private void DemonstrateMergeTableAddSchema()\n    {\n        // Create a DataSet with one table, two columns, and ten rows.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n\n        // Add table to the DataSet\n        dataSet.Tables.Add(table);\n\n        // Create and add two columns to the DataTable\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        idColumn.AutoIncrement=true;\n        DataColumn itemColumn = new DataColumn(&quot;Item&quot;, \n            Type.GetType(&quot;System.Int32&quot;),&quot;&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n\n        // Set the primary key to the first column.\n        table.PrimaryKey = new DataColumn[1]{ idColumn };\n\n        // Add RowChanged event handler for the table.\n        table.RowChanged+= new DataRowChangeEventHandler(Row_Changed);\n\n        // Add ten rows.\n        for(int i = 0; i &lt;10;i++)\n        {\n            DataRow row=table.NewRow();\n            row[&quot;Item&quot;]= i;\n            table.Rows.Add(row);\n        }\n\n        // Accept changes.\n        dataSet.AcceptChanges();\n        PrintValues(dataSet, &quot;Original values&quot;);\n\n        // Create a second DataTable identical to the first, with\n        // one extra column using the Clone method.\n        DataTable cloneTable = table.Clone();\n        cloneTable.Columns.Add(&quot;extra&quot;, typeof(string));\n\n        // Add two rows. Note that the id column can&#39;table be the \n        // same as existing rows in the DataSet table.\n        DataRow newRow;\n        newRow=cloneTable.NewRow();\n        newRow[&quot;id&quot;]= 12;\n        newRow[&quot;Item&quot;]=555;\n        newRow[&quot;extra&quot;]= &quot;extra Column 1&quot;;\n        cloneTable.Rows.Add(newRow);\n \n        newRow=cloneTable.NewRow();\n        newRow[&quot;id&quot;]= 13;\n        newRow[&quot;Item&quot;]=665;\n        newRow[&quot;extra&quot;]= &quot;extra Column 2&quot;;\n        cloneTable.Rows.Add(newRow);\n\n        // Merge the table into the DataSet.\n        Console.WriteLine(&quot;Merging&quot;);\n        dataSet.Merge(cloneTable,false,MissingSchemaAction.Add);\n        PrintValues(dataSet, &quot;Merged With Table, Schema Added&quot;);\n    }\n \n    private void Row_Changed(object sender, \n        DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row Changed &quot; + e.Action.ToString() \n            + &quot;&nbsp;&nbsp;&nbsp;&nbsp;able&quot; + e.Row.ItemArray[0]);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.Merge4 Example#1\">Private Sub DemonstrateMergeTableAddSchema()\n    &#39; Create a DataSet with one table, two columns, \n    &#39;and ten rows.\n    Dim dataSet As New DataSet(&quot;dataSet&quot;)\n    Dim table As New DataTable(&quot;Items&quot;)\n\n    &#39; Add tables to the DataSet\n    dataSet.Tables.Add(table)\n\n    &#39; Create and add two columns to the DataTable\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    idColumn.AutoIncrement = True\n    Dim itemColumn As New DataColumn(&quot;Item&quot;, _\n        Type.GetType(&quot;System.Int32&quot;), &quot;&quot;)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n\n    &#39; DataColumn array to set primary key.\n    Dim keyCol(1) As DataColumn\n\n    &#39; Set primary key column.\n    keyCol(0) = idColumn\n    table.PrimaryKey = keyCol\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table.RowChanged, AddressOf Row_Changed\n\n    &#39; Add ten rows.\n    Dim i As Integer\n    Dim row As DataRow\n\n    For i = 0 To 9\n        row = table.NewRow()\n        row(&quot;Item&quot;) = i\n        table.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    dataSet.AcceptChanges()\n    PrintValues(dataSet, &quot;Original values&quot;)\n\n    &#39; Create a second DataTable identical to the first\n    &#39; with one extra column using the Clone method.\n    Dim cloneTable As New DataTable\n    cloneTable = table.Clone()\n\n    &#39; Add column.\n    cloneTable.Columns.Add(&quot;extra&quot;, _\n        Type.GetType(&quot;System.String&quot;))\n\n    &#39; Add two rows. Note that the id column can&#39;t be the \n    &#39; same as existing rows in the DataSet table.\n    Dim newRow As DataRow\n    newRow = cloneTable.NewRow()\n    newRow(&quot;id&quot;) = 12\n    newRow(&quot;Item&quot;) = 555\n    newRow(&quot;extra&quot;) = &quot;extra Column 1&quot;\n    cloneTable.Rows.Add(newRow)\n        \n    newRow = cloneTable.NewRow()\n    newRow(&quot;id&quot;) = 13\n    newRow(&quot;Item&quot;) = 665\n    newRow(&quot;extra&quot;) = &quot;extra Column 2&quot;\n    cloneTable.Rows.Add(newRow)\n\n    &#39; Merge the table into the DataSet.\n    Console.WriteLine(&quot;Merging&quot;)\n    dataSet.Merge(cloneTable, False, MissingSchemaAction.Add)\n    PrintValues(dataSet, &quot;Merged With Table, Schema Added&quot;)\nEnd Sub\n  \nPrivate Sub Row_Changed(sender As Object, _\n    e As DataRowChangeEventArgs)\n    Console.WriteLine(&quot;Row Changed &quot; &amp; e.Action.ToString() _\n        &amp; ControlChars.Tab &amp; e.Row.ItemArray(0).ToString())\nEnd Sub\n    \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n    Console.WriteLine(ControlChars.Cr &amp; label)\n    Dim table As DataTable\n    Dim row As DataRow\n    Dim column As DataColumn\n    For Each table In  dataSet.Tables\n        Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)\n        For Each row In  table.Rows             \n            For Each column In  table.Columns\n                Console.Write(ControlChars.Tab &amp; &quot; &quot; _\n                    &amp; row(column).ToString())\n            Next column\n            Console.WriteLine()\n        Next row\n    Next table\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_OnPropertyChanging_System_ComponentModel_PropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataSet_OnPropertyChanging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPropertyChanging(PropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the OnPropertyChanging event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertychangedeventargs\" data-linktype=\"relative-path\">PropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.propertychangedeventargs\" data-linktype=\"relative-path\">PropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_OnRemoveRelation_System_Data_DataRelation_\">\r\n    \r\n            <a id=\"System_Data_DataSet_OnRemoveRelation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemoveRelation(DataRelation)</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> object is removed from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemoveRelation (System.Data.DataRelation relation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>relation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> being removed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be overridden by subclasses to restrict tables being removed</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_OnRemoveTable_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_DataSet_OnRemoveTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemoveTable(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is removed from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemoveTable (System.Data.DataTable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> being removed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be overridden by subclasses to restrict tables from being removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a class derived from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with the OnRemoveTable method overridden.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.OnRemoveTable Example#1\">\nPublic Shared Sub DemonstrateOnRemoveTable()\n\tDim dataSet As DerivedDataSet = CreateDataSet()\n\tIf dataSet.Tables.Count &gt; 0 Then dataSet.Tables.RemoveAt(0)\nEnd Sub\n\nPublic Class DerivedDataSet\n\tInherits DataSet\n\tProtected Overrides Sub OnRemoveTable(table As DataTable)\n\t\tConsole.WriteLine( _\n            &quot;The &#39;{0}&#39; DataTable has been removed from the DataSet&quot;, _\n\t\t\ttable.TableName)\n\tEnd Sub\nEnd Class\n\nPublic Shared Function CreateDataSet() As DerivedDataSet\n\t&#39; Create a DataSet with one table containing two columns.\n\tDim derived As DerivedDataSet = New DerivedDataSet()\n\n\t&#39; Add table to DataSet.\n\tDim table As DataTable = derived.Tables.Add(&quot;Items&quot;)\n\n\t&#39; Add two columns.\n\tDim column As DataColumn = table.Columns.Add(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n\tcolumn.AutoIncrement = True\n\ttable.Columns.Add(&quot;item&quot;, Type.GetType(&quot;System.Int32&quot;))\n\n\t&#39; Set primary key.\n\ttable.PrimaryKey = New DataColumn() {table.Columns(&quot;id&quot;)}\n\n\treturn derived\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.OnRemoveTable Example#1\">\n    public static void DemonstrateOnRemoveTable()\n    {\n        DerivedDataSet dataSet = CreateDataSet();\n        if(dataSet.Tables.Count &gt; 0)\n            dataSet.Tables.RemoveAt(0);\n    }\n\n    public class DerivedDataSet: DataSet\n    {\n        protected override void OnRemoveTable(DataTable table)\n        {\n            Console.WriteLine(\n                &quot;The &#39;{0}&#39; DataTable has been removed from the DataSet&quot;, \n                table.TableName);\n        }\n    }\n\n    public static DerivedDataSet CreateDataSet()\n    {\n        // Create a DataSet with one table containing two columns.\n        DerivedDataSet derived = new DerivedDataSet();\n\n        // Add table to DataSet.\n        DataTable table = derived.Tables.Add(&quot;Items&quot;);\n\n        // Add two columns.\n        DataColumn column = table.Columns.Add(&quot;id&quot;, typeof(int));\n        column.AutoIncrement = true;\n        table.Columns.Add(&quot;item&quot;, typeof(int));\n\n        // Set primary key.\n        table.PrimaryKey = new DataColumn[] {table.Columns[&quot;id&quot;]};\n\n        return derived;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_RaisePropertyChanging_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet_RaisePropertyChanging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaisePropertyChanging(String)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a notification that the specified <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> property is about to change.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaisePropertyChanging (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property that is about to change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that derives from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema, as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, two columns, and ten rows. The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> schema and data are written to disk by invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. A second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is created and the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method is used to fill it with schema and data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXml1 Example#1\">    private void DemonstrateReadWriteXMLDocumentWithFileStream()\n    {\n        // Create a DataSet with one table and two columns.\n        DataSet originalDataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement= true;\n\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        originalDataSet.Tables.Add(table);\n        // Add ten rows.\n\n        DataRow newRow;\n        for(int i = 0; i &lt; 10; i++)\n        {\n            newRow = table.NewRow();\n            newRow[&quot;item&quot;]= &quot;item &quot; + i;\n            table.Rows.Add(newRow);\n        }\n        originalDataSet.AcceptChanges();\n\n        // Print out values of each table in the DataSet  \n        // using the function defined below.\n        PrintValues(originalDataSet, &quot;Original DataSet&quot;);\n\n        // Write the schema and data to XML file with FileStream.\n        string xmlFilename = &quot;XmlDocument.xml&quot;;\n        System.IO.FileStream streamWrite = new System.IO.FileStream\n            (xmlFilename, System.IO.FileMode.Create);\n\n        // Use WriteXml to write the XML document.\n        originalDataSet.WriteXml(streamWrite);\n\n        // Close the FileStream.\n        streamWrite.Close();\n       \n        // Dispose of the original DataSet.\n        originalDataSet.Dispose();\n        // Create a new DataSet.\n        DataSet newDataSet = new DataSet(&quot;New DataSet&quot;);\n       \n        // Read the XML document back in. \n        // Create new FileStream to read schema with.\n        System.IO.FileStream streamRead = new System.IO.FileStream\n            (xmlFilename,System.IO.FileMode.Open);\n        newDataSet.ReadXml(streamRead);\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(newDataSet,&quot;New DataSet&quot;);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXml1 Example#1\"> Private Sub DemonstrateReadWriteXMLDocumentWithFileStream()\n     &#39; Create a DataSet with one table and two columns.\n     Dim originalDataSet As New DataSet(&quot;dataSet&quot;)\n     Dim table As New DataTable(&quot;table&quot;)\n     Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n     idColumn.AutoIncrement = True\n\n     Dim itemColumn As New DataColumn(&quot;item&quot;)\n     table.Columns.Add(idColumn)\n     table.Columns.Add(itemColumn)\n     originalDataSet.Tables.Add(table)\n\n     &#39; Add ten rows.\n     Dim newRow As DataRow\n     Dim i As Integer\n     For i = 0 To 9\n         newRow = table.NewRow()\n         newRow(&quot;item&quot;) = &quot;item &quot; &amp; i.ToString()\n         table.Rows.Add(newRow)\n     Next i\n     originalDataSet.AcceptChanges()\n\n     &#39; Print out values of each table in the DataSet \n     &#39; using the function defined below.\n     PrintValues(originalDataSet, &quot;Original DataSet&quot;)\n\n     &#39; Write the schema and data to XML file with FileStream.\n     Dim xmlFilename As String = &quot;XmlDocument.xml&quot;\n     Dim streamWrite As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Create)\n\n     &#39; Use WriteXml to write the XML document.\n     originalDataSet.WriteXml(streamWrite)\n\n     &#39; Close the FileStream.\n     streamWrite.Close()\n      \n     &#39; Dispose of the original DataSet.\n     originalDataSet.Dispose()\n     &#39; Create a new DataSet.\n     Dim newDataSet As New DataSet(&quot;New DataSet&quot;)\n        \n     &#39; Read the XML document back in. \n     &#39; Create new FileStream to read schema with.\n     Dim streamRead As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Open)\n      \n     newDataSet.ReadXml(streamRead)\n     &#39; Print out values of each table in the DataSet  \n     &#39; using the function defined below.\n     PrintValues(newDataSet, &quot;New DataSet&quot;)\n End Sub\n    \n Private Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     Dim row As DataRow\n     Dim column As DataColumn\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)         \n         For Each row In  table.Rows             \n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; &amp; _\n                    row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextReader</code> from which to read the schema and data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><p> Classes that inherit from the <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> class include the <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> and <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> classes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, two columns, and ten rows. The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> schema and data are written to disk by invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. A second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is created and the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method is used to fill it with schema and data.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXml2 Example#1\"> Private Sub DemonstrateReadWriteXMLDocumentWithFileStream()\n     &#39; Create a DataSet with one table and two columns.\n     Dim originalDataSet As New DataSet(&quot;dataSet&quot;)\n     Dim table As New DataTable(&quot;table&quot;)\n     Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n     idColumn.AutoIncrement = True\n\n     Dim itemColumn As New DataColumn(&quot;item&quot;)\n     table.Columns.Add(idColumn)\n     table.Columns.Add(itemColumn)\n     originalDataSet.Tables.Add(table)\n\n     &#39; Add ten rows.\n     Dim newRow As DataRow\n     Dim i As Integer\n     For i = 0 To 9\n         newRow = table.NewRow()\n         newRow(&quot;item&quot;) = &quot;item &quot; &amp; i.ToString()\n         table.Rows.Add(newRow)\n     Next i\n     originalDataSet.AcceptChanges()\n\n     &#39; Print out values of each table in the DataSet \n     &#39; using the function defined below.\n     PrintValues(originalDataSet, &quot;Original DataSet&quot;)\n\n     &#39; Write the schema and data to XML file with FileStream.\n     Dim xmlFilename As String = &quot;XmlDocument.xml&quot;\n     Dim streamWrite As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Create)\n\n     &#39; Use WriteXml to write the XML document.\n     originalDataSet.WriteXml(streamWrite)\n\n     &#39; Close the FileStream.\n     streamWrite.Close()\n      \n     &#39; Dispose of the original DataSet.\n     originalDataSet.Dispose()\n     &#39; Create a new DataSet.\n     Dim newDataSet As New DataSet(&quot;New DataSet&quot;)\n        \n     &#39; Read the XML document back in. \n     &#39; Create new FileStream to read schema with.\n     Dim streamRead As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Open)\n      \n     newDataSet.ReadXml(streamRead)\n     &#39; Print out values of each table in the DataSet  \n     &#39; using the function defined below.\n     PrintValues(newDataSet, &quot;New DataSet&quot;)\n End Sub\n    \n Private Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     Dim row As DataRow\n     Dim column As DataColumn\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)         \n         For Each row In  table.Rows             \n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; &amp; _\n                    row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXml2 Example#1\">    private void DemonstrateReadWriteXMLDocumentWithFileStream()\n    {\n        // Create a DataSet with one table and two columns.\n        DataSet originalDataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement= true;\n\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        originalDataSet.Tables.Add(table);\n        // Add ten rows.\n\n        DataRow newRow;\n        for(int i = 0; i &lt; 10; i++)\n        {\n            newRow = table.NewRow();\n            newRow[&quot;item&quot;]= &quot;item &quot; + i;\n            table.Rows.Add(newRow);\n        }\n        originalDataSet.AcceptChanges();\n\n        // Print out values of each table in the DataSet  \n        // using the function defined below.\n        PrintValues(originalDataSet, &quot;Original DataSet&quot;);\n\n        // Write the schema and data to XML file with FileStream.\n        string xmlFilename = &quot;XmlDocument.xml&quot;;\n        System.IO.FileStream streamWrite = new System.IO.FileStream\n            (xmlFilename, System.IO.FileMode.Create);\n\n        // Use WriteXml to write the XML document.\n        originalDataSet.WriteXml(streamWrite);\n\n        // Close the FileStream.\n        streamWrite.Close();\n       \n        // Dispose of the original DataSet.\n        originalDataSet.Dispose();\n        // Create a new DataSet.\n        DataSet newDataSet = new DataSet(&quot;New DataSet&quot;);\n       \n        // Read the XML document back in. \n        // Create new FileStream to read schema with.\n        System.IO.FileStream streamRead = new System.IO.FileStream\n            (xmlFilename,System.IO.FileMode.Open);\n        newDataSet.ReadXml(streamRead);\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(newDataSet,&quot;New DataSet&quot;);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The filename (including the path) from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes a <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, two columns, and ten rows. The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> schema and data are written to disk by invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. A second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is created and the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method is used to fill it with schema and data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXml3 Example#1\">    private void DemonstrateReadWriteXMLDocumentWithStreamReader()\n    {\n        // Create a DataSet with one table and two columns.\n        DataSet OriginalDataSet = new DataSet(&quot;dataSet&quot;);\n        OriginalDataSet.Namespace= &quot;NetFrameWork&quot;;\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement= true;\n\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        OriginalDataSet.Tables.Add(table);\n\n        // Add ten rows.\n        DataRow newRow;\n        for(int i = 0; i &lt; 10; i++)\n        {\n            newRow = table.NewRow();\n            newRow[&quot;item&quot;]= &quot;item &quot; + i;\n            table.Rows.Add(newRow);\n        }\n        OriginalDataSet.AcceptChanges();\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(OriginalDataSet, &quot;Original DataSet&quot;);\n\n        // Write the schema and data to an XML file.\n        string xmlFilename = &quot;XmlDocument.xml&quot;;\n\n        // Use WriteXml to write the document.\n        OriginalDataSet.WriteXml(xmlFilename);\n\n        // Dispose of the original DataSet.\n        OriginalDataSet.Dispose();\n\n        // Create a new DataSet.\n        DataSet newDataSet = new DataSet(&quot;New DataSet&quot;);\n\n        // Read the XML document into the DataSet.\n        newDataSet.ReadXml(xmlFilename);\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(newDataSet,&quot;New DataSet&quot;);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXml3 Example#1\">Private Sub DemonstrateReadWriteXMLDocumentWithStreamReader()\n    &#39; Create a DataSet with one table and two columns.\n    Dim OriginalDataSet As New DataSet(&quot;dataSet&quot;)\n    OriginalDataSet.Namespace = &quot;NetFrameWork&quot;\n    Dim table As New DataTable(&quot;table&quot;)\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n    idColumn.AutoIncrement = True\n\n    Dim itemColumn As New DataColumn(&quot;item&quot;)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n    OriginalDataSet.Tables.Add(table)\n\n    &#39; Add ten rows.\n    Dim newRow As DataRow\n    Dim i As Integer\n    For i = 0 To 9\n        newRow = table.NewRow()\n        newRow(&quot;item&quot;) = &quot;item &quot; &amp; i.ToString()\n        table.Rows.Add(newRow)\n    Next i\n    OriginalDataSet.AcceptChanges()\n\n    &#39; Print out values of each table in the DataSet \n    &#39; using the function defined below.\n    PrintValues(OriginalDataSet, &quot;Original DataSet&quot;)\n\n    &#39; Write the schema and data to an XML file.\n    Dim xmlFilename As String = &quot;XmlDocument.xml&quot;\n\n    &#39; Use WriteXml to write the document.\n    OriginalDataSet.WriteXml(xmlFilename)\n\n    &#39; Dispose of the original DataSet.\n    OriginalDataSet.Dispose()\n\n    &#39; Create a new DataSet.\n    Dim newDataSet As New DataSet(&quot;New DataSet&quot;)\n\n    &#39; Read the XML document into the DataSet.\n    newDataSet.ReadXml(xmlFilename)\n\n    &#39; Print out values of each table in the DataSet \n    &#39; using the function defined below.\n    PrintValues(newDataSet, &quot;New DataSet&quot;)\nEnd Sub\n    \nPrivate Sub PrintValues(dataSet As DataSet, label As String)\n    Console.WriteLine(ControlChars.Cr &amp; label)\n    Dim table As DataTable\n    For Each table In  dataSet.Tables\n        Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)\n        Dim row As DataRow\n        For Each row In  table.Rows\n            Dim column As DataColumn\n            For Each column In  table.Columns\n                Console.Write(ControlChars.Tab &amp; &quot; &quot; &amp; _\n                    row(column).ToString())\n            Next column\n            Console.WriteLine()\n        Next row\n    Next table\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadXml method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes a <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling ReadXml to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><p> <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">System.Xml.XmlTextReader</a> inherits from <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with ReadXml by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, two columns, and ten rows. The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> schema and data are written to disk by invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. A second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is created and the ReadXml method is used to fill it with schema and data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXml Example#1\">    private void DemonstrateReadWriteXMLDocumentWithXMLReader()\n    {\n        // Create a DataSet with one table and two columns.\n        DataSet OriginalDataSet = new DataSet(&quot;dataSet&quot;);\n        OriginalDataSet.Namespace= &quot;NetFrameWork&quot;;\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement= true;\n\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        OriginalDataSet.Tables.Add(table);\n\n        // Add ten rows.\n        DataRow newRow;\n        for(int i = 0; i &lt; 10; i++)\n        {\n            newRow = table.NewRow();\n            newRow[&quot;item&quot;]= &quot;item &quot; + i;\n            table.Rows.Add(newRow);\n        }\n        OriginalDataSet.AcceptChanges();\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(OriginalDataSet, &quot;Original DataSet&quot;);\n\n        // Write the XML schema and data to file with FileStream.\n        string xmlFilename = &quot;XmlDocument.xml&quot;;\n\n        // Create FileStream    \n        System.IO.FileStream fsWriteXml = \n            new System.IO.FileStream\n            (xmlFilename, System.IO.FileMode.Create);\n\n        // Create an XmlTextWriter to write the file.\n        System.Xml.XmlTextWriter xmlWriter = \n            new System.Xml.XmlTextWriter\n            (fsWriteXml, System.Text.Encoding.Unicode);\n\n        // Use WriteXml to write the document.\n        OriginalDataSet.WriteXml(xmlWriter, XmlWriteMode.WriteSchema); \n\n        // Close the FileStream.\n        fsWriteXml.Close();\n       \n        // Dispose of the original DataSet.\n        OriginalDataSet.Dispose();\n\n        // Create a new DataSet.\n        DataSet newDataSet = new DataSet(&quot;New DataSet&quot;);\n       \n        // Read the XML document back in. \n        // Create new FileStream to read schema with.\n        System.IO.FileStream fsReadXml = \n            new System.IO.FileStream\n            (xmlFilename, System.IO.FileMode.Open);\n\n        // Create an XmlTextReader to read the file.\n        System.Xml.XmlTextReader xmlReader = \n            new System.Xml.XmlTextReader(fsReadXml);\n\n        // Read the XML document into the DataSet.\n        newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);\n\n        // Close the XmlTextReader\n        xmlReader.Close();\n \n        // Print out values of each table in the DataSet \n        // fusing the unction defined below.\n        PrintValues(newDataSet,&quot;New DataSet&quot;);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}({1})=&#39;{2}&#39;&quot;, column.ColumnName, column.DataType.Name, row[column]);\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXml Example#1\">Private Sub DemonstrateReadWriteXMLDocumentWithXMLReader()\n    &#39; Create a DataSet with one table and two columns.\n    Dim OriginalDataSet As New DataSet(&quot;dataSet&quot;)\n    OriginalDataSet.Namespace = &quot;NetFrameWork&quot;\n    Dim table As New DataTable(&quot;table&quot;)\n    Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n    idColumn.AutoIncrement = True\n\n    Dim itemColumn As New DataColumn(&quot;item&quot;)\n    table.Columns.Add(idColumn)\n    table.Columns.Add(itemColumn)\n    OriginalDataSet.Tables.Add(table)\n\n    &#39; Add ten rows.\n    Dim newRow As DataRow\n    Dim i As Integer\n    For i = 0 To 9\n        newRow = table.NewRow()\n        newRow(&quot;item&quot;) = &quot;item &quot; &amp; i.ToString()\n        table.Rows.Add(newRow)\n    Next i\n    OriginalDataSet.AcceptChanges()\n\n    &#39; Print out values of each table in the DataSet \n    &#39; using the function defined below.\n    PrintValues(OriginalDataSet, &quot;Original DataSet&quot;)\n\n    &#39; Write the XML schema and data to file with FileStream.\n    Dim xmlFilename As String = &quot;XmlDocument.xml&quot;\n\n    &#39; Create FileStream    \n    Dim fsWriteXml As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Create)\n\n    &#39; Create an XmlTextWriter to write the file.\n    Dim xmlWriter As New System.Xml.XmlTextWriter _\n        (fsWriteXml, System.Text.Encoding.Unicode)\n\n    &#39; Use WriteXml to write the document.\n    OriginalDataSet.WriteXml(xmlWriter, XmlWriteMode.WriteSchema)\n\n    &#39; Close the FileStream.\n    fsWriteXml.Close()\n        \n    &#39; Dispose of the original DataSet.\n    OriginalDataSet.Dispose()\n\n    &#39; Create a new DataSet.\n    Dim newDataSet As New DataSet(&quot;New DataSet&quot;)\n        \n    &#39; Read the XML document back in. \n    &#39; Create new FileStream to read schema with.\n    Dim fsReadXml As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Open)\n\n    &#39; Create an XmlTextReader to read the file.\n    Dim xmlReader As New System.Xml.XmlTextReader(fsReadXml)\n\n    &#39; Read the XML document into the DataSet.\n    newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema)\n\n    &#39; Close the XmlTextReader\n    xmlReader.Close()\n        \n    &#39; Print out values of each table in the DataSet using the \n    &#39; function defined below.\n    PrintValues(newDataSet, &quot;New DataSet&quot;)\nEnd Sub\n    \n    \n Private Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     Dim row As DataRow\n     Dim column As DataColumn\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)\n         For Each row In  table.Rows\n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot;{0}({1})=&#39;{2}&#39;&quot;, column.ColumnName, column.DataType.Name, row(column).ToString())\n\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_IO_Stream_System_Data_XmlReadMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(Stream,XmlReadMode)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> The same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use ReadXml and you set <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> to <code>Diffgram</code>, the content of the target <code>DataSet</code> and the original <code>DataSet</code> may differ because of how the diffgram is generated and processed. For more information on diffgrams, see <a href=\"../Topic/DiffGrams.md\" data-linktype=\"relative-path\">DiffGrams</a>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_IO_TextReader_System_Data_XmlReadMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(TextReader,XmlReadMode)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_String_System_Data_XmlReadMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(String,XmlReadMode)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The filename (including the path) from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes a <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXml_System_Xml_XmlReader_System_Data_XmlReadMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(XmlReader,XmlReadMode)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReadMode</code> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema. To read both data and schema, use one of the <code>ReadXML</code> overloads that includes the <code>mode</code> parameter, and set its value to <code>ReadSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataSet</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<p> If the XML Schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> includes a <code>targetNamespace</code>, data may not be read, and you may encounter exceptions when calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> to load the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with XML that contains elements with no qualifying namespace. To read unqualified elements, set <code>elementFormDefault</code> equal to &quot;qualified&quot; in your XML Schema as the following example demonstrates.  </p>\n<pre><code>&lt;xsd:schema id=&quot;MyDataSet&quot;   \n   elementFormDefault=&quot;qualified&quot;   \n   targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;   \n   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   \n   xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n&lt;/xsd:schema&gt;  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> by specifying <code>XmlReadMode.ReadSchema</code>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXmlSchema_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method to create the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> Classes that derive from the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class include <a class=\"xref\" href=\"system.io.bufferedstream\" data-linktype=\"relative-path\">BufferedStream</a>, <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>, <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>, and <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object to read an XML schema with, and invokes the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method with the object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXmlSchema1 Example#1\">    private void ReadSchemaFromFileStream(DataSet thisDataSet)\n    {\n        // Set the file path and name.\n        // Modify this for your purposes.\n        string filename=&quot;Schema.xml&quot;;\n\n        // Create the FileStream object with the file name, \n        // and set to open the file.\n        System.IO.FileStream stream = \n            new System.IO.FileStream(filename,System.IO.FileMode.Open);\n\n        // Read the schema into the DataSet.\n        thisDataSet.ReadXmlSchema(stream);\n\n        // Close the FileStream.\n        stream.Close();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXmlSchema1 Example#1\">Private Sub ReadSchemaFromFileStream(thisDataSet As DataSet)\n    &#39; Set the file path and name. Modify this for your purposes.\n    Dim filename As String = &quot;Schema.xml&quot;\n\n    &#39; Create the FileStream object with the file name, \n    &#39; and set to open the file\n    Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Open)\n\n    &#39; Read the schema into the DataSet.\n    thisDataSet.ReadXmlSchema(stream)\n\n    &#39; Close the FileStream.\n    stream.Close()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXmlSchema_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.IO.TextReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method to create the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> Classes that inherit from the <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> class include the <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> and <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> classes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> object to read a schema with, and invokes the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method with the object.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXmlSchema2 Example#1\"> Private Sub ReadSchemaFromStreamReader()\n     &#39; Create the DataSet to read the schema into.\n     Dim thisDataSet As New DataSet()\n\n     &#39; Set the file path and name. Modify this for your purposes.\n     Dim filename As String = &quot;Schema.xml&quot;\n\n     &#39; Create a StreamReader object with the file path and name.\n     Dim readStream As New System.IO.StreamReader(filename)\n\n     &#39; Invoke the ReadXmlSchema method with the StreamReader object.\n     thisDataSet.ReadXmlSchema(readStream)\n\n     &#39; Close the StreamReader\n     readStream.Close()\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXmlSchema2 Example#1\">    private void ReadSchemaFromStreamReader()\n    {\n        // Create the DataSet to read the schema into.\n        DataSet thisDataSet = new DataSet();\n\n        // Set the file path and name. Modify this for your purposes.\n        string filename=&quot;Schema.xml&quot;;\n\n        // Create a StreamReader object with the file path and name.\n        System.IO.StreamReader readStream = \n            new System.IO.StreamReader(filename);\n\n        // Invoke the ReadXmlSchema method with the StreamReader object.\n        thisDataSet.ReadXmlSchema(readStream);\n\n        // Close the StreamReader\n        readStream.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXmlSchema_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XML schema from the specified file into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name (including the path) from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method to create the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a>. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXmlSchema3 Example#1\"> private void ReadSchemaFromFile(){\n    // Create the DataSet to read the schema into.\n    DataSet thisDataSet = new DataSet();\n\n    // Set the file path and name. Modify this for your purposes.\n    string filename=&quot;Schema.xml&quot;;\n\n    // Invoke the ReadXmlSchema method with the file name.\n    thisDataSet.ReadXmlSchema(filename);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXmlSchema3 Example#1\"> Private Sub ReadSchemaFromFile()\n     &#39; Create the DataSet to read the schema into.\n     Dim thisDataSet As New DataSet()\n\n     &#39; Set the file path and name. Modify this for your purposes.\n     Dim filename As String = &quot;Schema.xml&quot;\n\n     &#39; Invoke the ReadXmlSchema method with the file name.\n     thisDataSet.ReadXmlSchema(filename)\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXmlSchema_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XML schema from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadXmlSchema method to create the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n</div>\n<p> The ReadXmlSchema method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a> class is abstract. A class that inherits from the <code>XmlReader</code> is the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">System.Xml.XmlTextReader</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the schema for your <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with ReadXmlSchema. This exception does not occur if you are using .NET Framework version 1.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">System.IO.FileStream</a> object. The <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object, created with a file path and file name, is used to create an <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">System.Xml.XmlTextReader</a> that is passed as an argument to the ReadXmlSchema method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXmlSchema Example#1\"> Private Sub ReadSchemaFromXmlTextReader()\n     &#39; Create the DataSet to read the schema into.\n     Dim thisDataSet As New DataSet()\n\n     &#39; Set the file path and name. Modify this for your purposes.\n     Dim filename As String = &quot;Schema.xml&quot;\n\n     &#39; Create a FileStream object with the file path and name.\n     Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Open)\n\n     &#39; Create a new XmlTextReader object with the FileStream.\n     Dim xmlReader As New System.Xml.XmlTextReader(stream)\n\n     &#39; Read the schema into the DataSet and close the reader.\n     thisDataSet.ReadXmlSchema(xmlReader)\n     xmlReader.Close()\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXmlSchema Example#1\">    private void ReadSchemaFromXmlTextReader()\n    {\n        // Create the DataSet to read the schema into.\n        DataSet thisDataSet = new DataSet();\n\n        // Set the file path and name. Modify this for your purposes.\n        string filename=&quot;Schema.xml&quot;;\n\n        // Create a FileStream object with the file path and name.\n        System.IO.FileStream stream = new System.IO.FileStream\n            (filename,System.IO.FileMode.Open);\n\n        // Create a new XmlTextReader object with the FileStream.\n        System.Xml.XmlTextReader xmlReader= \n            new System.Xml.XmlTextReader(stream);\n\n        // Read the schema into the DataSet and close the reader.\n        thisDataSet.ReadXmlSchema(xmlReader);\n        xmlReader.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ReadXmlSerializable_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_ReadXmlSerializable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSerializable(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Ignores attributes and returns an empty DataSet.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified XML reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_RejectChanges\">\r\n    \r\n            <a id=\"System_Data_DataSet_RejectChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RejectChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Rolls back all the changes made to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> since it was created, or since the last time <span class=\"xref\">stem.Data.DataSet.AcceptChanges*</span> was called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RejectChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Invoke the RejectChanges to call the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RejectChanges_\" data-linktype=\"relative-path\">RejectChanges</a> method on all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects contained by the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<p> <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects contained by the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can each be set into edit mode by invoking the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_BeginEdit_\" data-linktype=\"relative-path\">BeginEdit</a> method. After invoking the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_EndEdit_\" data-linktype=\"relative-path\">EndEdit</a> method, changes can be rejected by calling the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RejectChanges_\" data-linktype=\"relative-path\">RejectChanges</a> on the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to which the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects belong.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RejectChanges_\" data-linktype=\"relative-path\">RejectChanges</a> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (<code>DataRowState.Unchanged</code>).  </p>\n<p> AcceptChanges and RejectChanges only apply to <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> related changes (that is, <code>Add</code>, <code>Remove</code>, <code>Delete</code>, and <code>Modify</code>). They are not applicable to schema or structural changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a class derived from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class. The RejectChanges event is invoked from within a function.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.RejectChanges Example#1\">    private void RejectChangesInDataSet()\n    {\n        // Instantiate the derived DataSet.\n        DerivedDataSet derivedData = new DerivedDataSet();\n\n        // Insert code to change values.\n    \n        // Invoke the RejectChanges method in the derived class.\n        derivedData.RejectDataSetChanges();\n    }\n\n    public  class DerivedDataSet:System.Data.DataSet \n    {\n        public void RejectDataSetChanges()\n        {\n            // Invoke the RejectChanges method.\n            this.RejectChanges();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.RejectChanges Example#1\"> Private Sub RejectChangesInDataSet()\n     &#39; Instantiate the derived DataSet.\n     Dim derivedData As DerivedDataSet\n     derivedData = New DerivedDataSet()\n\n    &#39; Insert code to change values.\n\n    &#39; Invoke the RejectChanges method in the derived class.\n    derivedData.RejectDataSetChanges()\n End Sub\n    \n Public Class DerivedDataSet\n     Inherits System.Data.DataSet\n      \n     Public Sub RejectDataSetChanges()\n         &#39; Invoke the RejectChanges method.\n         Me.RejectChanges()\n     End Sub\n  End Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Reset\">\r\n    \r\n            <a id=\"System_Data_DataSet_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Clears all tables and removes all relations, foreign constraints, and tables from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. Subclasses should override Reset to restore a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to its original state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ShouldSerializeRelations\">\r\n    \r\n            <a id=\"System_Data_DataSet_ShouldSerializeRelations_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShouldSerializeRelations()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether <span class=\"xref\">stem.Data.DataSet.Relations*</span> property should be persisted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ShouldSerializeRelations ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the property value has been changed from its default; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You typically use this method if you are either creating a designer for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, or creating your own control incorporating the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following examples show a class derived from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class. The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Reset_\" data-linktype=\"relative-path\">Reset</a> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ShouldSerializeRelations Example#1\">public  class DerivedDataSet:System.Data.DataSet \n{\n    public void ResetDataSetRelations()\n    {\n        // Check the ShouldSerializeRelations methods \n        // before invoking Reset.\n        if(!this.ShouldSerializeRelations())\n        {\n            this.Reset();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ShouldSerializeRelations Example#1\">Public Class DerivedDataSet\n    Inherits System.Data.DataSet\n    \n    Public Sub ResetDataSetRelations()\n        &#39; Check the ShouldSerializeRelations methods \n        &#39; before invoking Reset.\n        If Not Me.ShouldSerializeRelations() Then\n            Me.Reset()\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_ShouldSerializeTables\">\r\n    \r\n            <a id=\"System_Data_DataSet_ShouldSerializeTables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShouldSerializeTables()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether <span class=\"xref\">stem.Data.DataSet.Tables*</span> property should be persisted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ShouldSerializeTables ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the property value has been changed from its default; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You typically use this method only if you are either creating a designer for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, or creating your own control incorporating the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a class derived from the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> class. The ShouldSerializeTables method is called from within functions in the derived class.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ShouldSerializeTables Example#1\">Public Class DerivedDataSet\n    Inherits System.Data.DataSet\n    \n    Public Sub ResetDataSetRelations()\n        &#39; Check the ShouldPersistTable method \n        &#39; before invoking Reset.\n        If Not Me.ShouldSerializeTables() Then\n            Me.Reset()\n        End If\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ShouldSerializeTables Example#1\">public  class DerivedDataSet:System.Data.DataSet \n{\n    public void ResetDataSetRelations()\n    {\n        // Check the ShouldPersistTable method \n        // before invoking Reset.\n        if(!this.ShouldSerializeTables())\n        {\n            this.Reset();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object used to write to a file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>mode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">System.IO.FileStream</a> object. The object is then used with the WriteXml method to write an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXml Example#1\">    private void WriteXmlToFile(DataSet thisDataSet) \n    {\n        if (thisDataSet == null) { return; }\n\n        // Create a file name to write to.\n        string filename = &quot;XmlDoc.xml&quot;;\n\n        // Create the FileStream to write with.\n        System.IO.FileStream stream = new System.IO.FileStream\n            (filename, System.IO.FileMode.Create);\n\n        // Write to the file with the WriteXml method.\n        thisDataSet.WriteXml(stream);   \n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXml Example#1\">Private Sub WriteXmlToFile(thisDataSet As DataSet)\n     If thisDataSet Is Nothing Then\n         Return\n     End If \n\n    &#39; Create a file name to write to.\n     Dim filename As String = &quot;XmlDoc.xml&quot;\n\n     &#39; Create the FileStream to write with.\n     Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Create)\n\n     &#39; Write to the file with the WriteXml method.\n     thisDataSet.WriteXml(stream)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object with which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>mode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name (including the path) to which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>mode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> with which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>mode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object used to write to a file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, set the <code>mode</code> parameter to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, set the <code>mode</code> parameter to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first creates a simple <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with one <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, two columns, and ten rows. The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> schema and data are written to disk by invoking the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. A second <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is created and the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method is used to fill it with schema and data.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.ReadXml2 Example#1\"> Private Sub DemonstrateReadWriteXMLDocumentWithFileStream()\n     &#39; Create a DataSet with one table and two columns.\n     Dim originalDataSet As New DataSet(&quot;dataSet&quot;)\n     Dim table As New DataTable(&quot;table&quot;)\n     Dim idColumn As New DataColumn(&quot;id&quot;, _\n        Type.GetType(&quot;System.Int32&quot;))\n     idColumn.AutoIncrement = True\n\n     Dim itemColumn As New DataColumn(&quot;item&quot;)\n     table.Columns.Add(idColumn)\n     table.Columns.Add(itemColumn)\n     originalDataSet.Tables.Add(table)\n\n     &#39; Add ten rows.\n     Dim newRow As DataRow\n     Dim i As Integer\n     For i = 0 To 9\n         newRow = table.NewRow()\n         newRow(&quot;item&quot;) = &quot;item &quot; &amp; i.ToString()\n         table.Rows.Add(newRow)\n     Next i\n     originalDataSet.AcceptChanges()\n\n     &#39; Print out values of each table in the DataSet \n     &#39; using the function defined below.\n     PrintValues(originalDataSet, &quot;Original DataSet&quot;)\n\n     &#39; Write the schema and data to XML file with FileStream.\n     Dim xmlFilename As String = &quot;XmlDocument.xml&quot;\n     Dim streamWrite As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Create)\n\n     &#39; Use WriteXml to write the XML document.\n     originalDataSet.WriteXml(streamWrite)\n\n     &#39; Close the FileStream.\n     streamWrite.Close()\n      \n     &#39; Dispose of the original DataSet.\n     originalDataSet.Dispose()\n     &#39; Create a new DataSet.\n     Dim newDataSet As New DataSet(&quot;New DataSet&quot;)\n        \n     &#39; Read the XML document back in. \n     &#39; Create new FileStream to read schema with.\n     Dim streamRead As New System.IO.FileStream _\n        (xmlFilename, System.IO.FileMode.Open)\n      \n     newDataSet.ReadXml(streamRead)\n     &#39; Print out values of each table in the DataSet  \n     &#39; using the function defined below.\n     PrintValues(newDataSet, &quot;New DataSet&quot;)\n End Sub\n    \n Private Sub PrintValues(dataSet As DataSet, label As String)\n     Console.WriteLine(ControlChars.Cr &amp; label)\n     Dim table As DataTable\n     Dim row As DataRow\n     Dim column As DataColumn\n     For Each table In  dataSet.Tables\n         Console.WriteLine(&quot;TableName: &quot; &amp; table.TableName)         \n         For Each row In  table.Rows             \n             For Each column In  table.Columns\n                 Console.Write(ControlChars.Tab &amp; &quot; &quot; &amp; _\n                    row(column).ToString())\n             Next column\n             Console.WriteLine()\n         Next row\n     Next table\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.ReadXml2 Example#1\">    private void DemonstrateReadWriteXMLDocumentWithFileStream()\n    {\n        // Create a DataSet with one table and two columns.\n        DataSet originalDataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;table&quot;);\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, \n            Type.GetType(&quot;System.Int32&quot;));\n        idColumn.AutoIncrement= true;\n\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;);\n        table.Columns.Add(idColumn);\n        table.Columns.Add(itemColumn);\n        originalDataSet.Tables.Add(table);\n        // Add ten rows.\n\n        DataRow newRow;\n        for(int i = 0; i &lt; 10; i++)\n        {\n            newRow = table.NewRow();\n            newRow[&quot;item&quot;]= &quot;item &quot; + i;\n            table.Rows.Add(newRow);\n        }\n        originalDataSet.AcceptChanges();\n\n        // Print out values of each table in the DataSet  \n        // using the function defined below.\n        PrintValues(originalDataSet, &quot;Original DataSet&quot;);\n\n        // Write the schema and data to XML file with FileStream.\n        string xmlFilename = &quot;XmlDocument.xml&quot;;\n        System.IO.FileStream streamWrite = new System.IO.FileStream\n            (xmlFilename, System.IO.FileMode.Create);\n\n        // Use WriteXml to write the XML document.\n        originalDataSet.WriteXml(streamWrite);\n\n        // Close the FileStream.\n        streamWrite.Close();\n       \n        // Dispose of the original DataSet.\n        originalDataSet.Dispose();\n        // Create a new DataSet.\n        DataSet newDataSet = new DataSet(&quot;New DataSet&quot;);\n       \n        // Read the XML document back in. \n        // Create new FileStream to read schema with.\n        System.IO.FileStream streamRead = new System.IO.FileStream\n            (xmlFilename,System.IO.FileMode.Open);\n        newDataSet.ReadXml(streamRead);\n\n        // Print out values of each table in the DataSet \n        // using the function defined below.\n        PrintValues(newDataSet,&quot;New DataSet&quot;);\n    }\n \n    private void PrintValues(DataSet dataSet, string label)\n    {\n        Console.WriteLine(&quot;<br>&quot; + label);\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(&quot;TableName: &quot; + table.TableName);\n            foreach(DataRow row in table.Rows)\n            {\n                foreach(DataColumn column in table.Columns)\n                {\n                    Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able &quot; + row[column] );\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_String_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name (including the path) to which to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, set the <code>mode</code> parameter to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method to write an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXml7 Example#1\">    private void WriteXmlToFile(DataSet thisDataSet) \n    {\n        if (thisDataSet == null) { return; }\n\n        // Create a file name to write to.\n        string filename = &quot;XmlDoc.xml&quot;;\n\n        // Write to the file with the WriteXml method.\n        thisDataSet.WriteXml(filename);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXml7 Example#1\"> Private Sub WriteXmlToFile(thisDataSet As DataSet)\n     If thisDataSet Is Nothing Then\n         Return\n     End If\n\n     &#39; Create a file name to write to.\n     Dim filename As String = &quot;XmlDoc.xml&quot;\n\n     &#39; Write to the file with the WriteXml method.\n     thisDataSet.WriteXml(filename)\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> with which to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, set the <code>mode</code> parameter to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataSet</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">System.IO.FileStream</a> object that is used to create a new <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">System.Xml.XmlTextWriter</a>. The <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> object is used with the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method to write an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXml6 Example#1\">    private void WriteXmlToFile(DataSet thisDataSet) \n    {\n        if (thisDataSet == null) { return; }\n\n        // Create a file name to write to.\n        string filename = &quot;XmlDoc.xml&quot;;\n\n        // Create the FileStream to write with.\n        System.IO.FileStream stream = new System.IO.FileStream\n            (filename, System.IO.FileMode.Create);\n\n        // Create an XmlTextWriter with the fileStream.\n        System.Xml.XmlTextWriter xmlWriter = \n            new System.Xml.XmlTextWriter(stream, \n            System.Text.Encoding.Unicode);\n\n        // Write to the file with the WriteXml method.\n        thisDataSet.WriteXml(xmlWriter);   \n        xmlWriter.Close();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXml6 Example#1\"> Private Sub WriteXmlToFile(thisDataSet As DataSet)\n     If thisDataSet Is Nothing Then\n         Return\n     End If\n\n     &#39; Create a file name to write to.\n     Dim filename As String = &quot;XmlDoc.xml&quot;\n\n     &#39; Create the FileStream to write with.\n     Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Create)\n\n     &#39; Create an XmlTextWriter with the fileStream.\n     Dim xmlWriter As New System.Xml.XmlTextWriter _\n        (stream, System.Text.Encoding.Unicode)\n\n     &#39; Write to the file with the WriteXml method.\n     thisDataSet.WriteXml(xmlWriter)\n     xmlWriter.Close()\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object used to write to a file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the WriteXmlSchema method to write the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the WriteXmlSchema method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Classes that derive from the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class include <a class=\"xref\" href=\"system.io.bufferedstream\" data-linktype=\"relative-path\">BufferedStream</a>, <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>, <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>, and <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object that is passed to the WriteXmlSchema method to write the schema to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXmlSchema Example#1\">Private Sub WriteSchemaWithFileStream(thisDataSet As DataSet)\n    &#39; Set the file path and name. Modify this for your purposes.\n    Dim filename As String = &quot;Schema.xml&quot;\n\n    &#39; Create the FileStream object with the file name. \n    &#39; Use FileMode.Create.\n    Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Create)\n\n    &#39; Write the schema to the file.\n    thisDataSet.WriteXmlSchema(stream)\n\n    &#39; Close the FileStream.\n    stream.Close()\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXmlSchema Example#1\">    private void WriteSchemaWithFileStream(DataSet thisDataSet)\n    {\n        // Set the file path and name. Modify this for your purposes.\n        string filename=&quot;Schema.xml&quot;;\n\n        // Create the FileStream object with the file name. \n        // Use FileMode.Create.\n        System.IO.FileStream stream = \n            new System.IO.FileStream(filename,System.IO.FileMode.Create);\n\n        // Write the schema to the file.\n        thisDataSet.WriteXmlSchema(stream);\n\n        // Close the FileStream.\n        stream.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object with which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Classes the derive from the <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">System.IO.TextWriter</a> class include the <a class=\"xref\" href=\"system.web.httpwriter\" data-linktype=\"relative-path\">System.Web.HttpWriter</a>, <a class=\"xref\" href=\"system.codedom.compiler.indentedtextwriter\" data-linktype=\"relative-path\">System.CodeDom.Compiler.IndentedTextWriter</a>, <a class=\"xref\" href=\"system.web.ui.htmltextwriter\" data-linktype=\"relative-path\">System.Web.UI.HtmlTextWriter</a>, <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">System.IO.StreamWriter</a>, and <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">System.IO.StringWriter</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">System.Text.StringBuilder</a> object to that is used to create a new <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">System.IO.StringWriter</a>. The <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> is passed to the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method, and the resulting string is printed to the console window.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXmlSchema1 Example#1\">    private void WriteSchemaWithStringWriter(DataSet thisDataSet)\n    {\n        // Create a new StringBuilder object.\n        System.Text.StringBuilder builder = new System.Text.StringBuilder();\n\n        // Create the StringWriter object with the StringBuilder object.\n        System.IO.StringWriter writer = new System.IO.StringWriter(builder);\n\n        // Write the schema into the StringWriter.\n        thisDataSet.WriteXmlSchema(writer);\n\n        // Print the string to the console window.\n        Console.WriteLine(writer.ToString());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXmlSchema1 Example#1\"> Private Sub WriteSchemaWithStringWriter(thisDataSet As DataSet)\n     &#39; Create a new StringBuilder object.\n     Dim builder As New System.Text.StringBuilder()\n\n     &#39; Create the StringWriter object with the StringBuilder object.\n     Dim writer As New System.IO.StringWriter(builder)\n\n     &#39; Write the schema into the StringWriter.\n     thisDataSet.WriteXmlSchema(writer)\n\n     &#39; Print the string to the console window.\n     Console.WriteLine(writer.ToString())\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name (including the path) to which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> is not set to <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXmlSchema3 Example#1\">    private void WriteSchemaToFile(DataSet thisDataSet)\n    {\n        // Set the file path and name. Modify this for your purposes.\n        string filename=&quot;Schema.xml&quot;;\n\n        // Write the schema to the file.\n        thisDataSet.WriteXmlSchema(filename);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXmlSchema3 Example#1\"> Private Sub WriteSchemaToFile(thisDataSet As DataSet)\n     &#39; Set the file path and name. Modify this for your purposes.\n     Dim filename As String = &quot;Schema.xml&quot;\n\n     &#39; Write the schema to the file.\n     thisDataSet.WriteXmlSchema(filename)\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> to write to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> One class that inherits from the <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">System.Xml.XmlWriter</a> class is the <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">System.Xml.XmlTextWriter</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">System.IO.FileStream</a> object with the specified path. The <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object is used to create an &lt;xref:System.Xml.XMLTextWriter?displayProperty=fullName&gt; object. The <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method is then invoked with the <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> object to write the schema to the disk.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.WriteXmlSchema2 Example#1\">    private void WriteSchemaWithXmlTextWriter(DataSet thisDataSet)\n    {\n        // Set the file path and name. Modify this for your purposes.\n        string filename=&quot;SchemaDoc.xml&quot;;\n\n        // Create a FileStream object with the file path and name.\n        System.IO.FileStream stream = new System.IO.FileStream\n            (filename,System.IO.FileMode.Create);\n\n        // Create a new XmlTextWriter object with the FileStream.\n        System.Xml.XmlTextWriter writer = \n            new System.Xml.XmlTextWriter(stream, \n            System.Text.Encoding.Unicode);\n\n        // Write the schema into the DataSet and close the reader.\n        thisDataSet.WriteXmlSchema(writer );\n        writer.Close();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.WriteXmlSchema2 Example#1\"> Private Sub WriteSchemaWithXmlTextWriter(thisDataSet As DataSet)\n     &#39; Set the file path and name. Modify this for your purposes.\n     Dim filename As String = &quot;SchemaDoc.xml&quot;\n\n     &#39; Create a FileStream object with the file path and name.\n     Dim stream As New System.IO.FileStream _\n        (filename, System.IO.FileMode.Create)\n\n     &#39; Create a new XmlTextWriter object with the FileStream.\n     Dim writer As New System.Xml.XmlTextWriter _\n        (stream, System.Text.Encoding.Unicode)\n\n     &#39; Write the schema into the DataSet and close the reader.\n     thisDataSet.WriteXmlSchema(writer)\n     writer.Close()\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_IO_Stream_System_Converter_System_Type_System_String__\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(Stream,Converter&lt;Type,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>multipleTargetConverter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate used to convert <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_IO_TextWriter_System_Converter_System_Type_System_String__\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(TextWriter,Converter&lt;Type,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>multipleTargetConverter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate used to convert <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_String_System_Converter_System_Type_System_String__\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(String,Converter&lt;Type,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>multipleTargetConverter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate used to convert <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_WriteXmlSchema_System_Xml_XmlWriter_System_Converter_System_Type_System_String__\">\r\n    \r\n            <a id=\"System_Data_DataSet_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(XmlWriter,Converter&lt;Type,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> structure as an XML schema to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> object to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>multipleTargetConverter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate used to convert <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_Initialized\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialized</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Initialized;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_IsInitialized_\" data-linktype=\"relative-path\">IsInitialized</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_MergeFailed\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MergeFailed</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a target and source <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> have the same primary key value, and <span class=\"xref\">stem.Data.DataSet.EnforceConstraints*</span> is set to true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.MergeFailedEventHandler MergeFailed;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the MergeFailed event.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataSet.MergeFailed Example#1\">\nPrivate Shared Sub DemonstrateMergeFailedEvent()\n\t&#39; Create a DataSet with one table containing two columns.\n\tDim dataSet AS DataSet = New DataSet(&quot;dataSet&quot;)\n\tDim table As DataTable = New DataTable(&quot;Items&quot;)\n\t\n\t&#39; Add table to the DataSet.\n\tdataSet.Tables.Add(table)\n\n\t&#39; Add two columns to the DataTable.\n\ttable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\ttable.Columns.Add(&quot;item&quot;, Type.GetType(&quot;System.Int32&quot;))\n\n\t&#39; Set the primary key to the first column.\n\ttable.PrimaryKey = new DataColumn() { table.Columns(&quot;id&quot;) }\n\n\t&#39; Add MergeFailed event handler for the table.\n\tAddHandler dataSet.MergeFailed, _\n        New MergeFailedEventHandler(AddressOf Merge_Failed)\n\n\t&#39; Create a second DataTable identical to the first, \n\tDim t2 As DataTable = table.Clone()\n\n\t&#39; Set the primary key of the new table to the second column.\n\t&#39; This will cause the MergeFailed event to be raised when the\n\t&#39; table is merged into the DataSet.\n\tt2.PrimaryKey = New DataColumn() { t2.Columns(&quot;item&quot;) }\n\t\n\t&#39; Merge table into the DataSet.\n\tConsole.WriteLine(&quot;Merging...&quot;)\n\tdataSet.Merge(t2, false, MissingSchemaAction.Add)\nEnd Sub\n\nPrivate Shared Sub Merge_Failed(sender As object, _\n    e As MergeFailedEventArgs)\n\tConsole.WriteLine(&quot;Merge_Failed Event: &#39;{0}&#39;&quot;, e.Conflict)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataSet.MergeFailed Example#1\">\n    private static void DemonstrateMergeFailedEvent()\n    {\n        // Create a DataSet with one table containing two columns.\n        DataSet dataSet = new DataSet(&quot;dataSet&quot;);\n        DataTable table = new DataTable(&quot;Items&quot;);\n\t\n        // Add table to the DataSet.\n        dataSet.Tables.Add(table);\n\n        // Add two columns to the DataTable.\n        table.Columns.Add(&quot;id&quot;, typeof(int));\n        table.Columns.Add(&quot;item&quot;, typeof(int));\n\n        // Set the primary key to the first column.\n        table.PrimaryKey = new DataColumn[] { table.Columns[&quot;id&quot;] };\n\n        // Add MergeFailed event handler for the table.\n        dataSet.MergeFailed += new MergeFailedEventHandler(Merge_Failed);\n\n        // Create a second DataTable identical to the first, \n        DataTable t2 = table.Clone();\n\n        // Set the primary key of the new table to the second column.\n        // This will cause the MergeFailed event to be raised when the\n        // table is merged into the DataSet.\n        t2.PrimaryKey = new DataColumn[] { t2.Columns[&quot;item&quot;] };\n\t\n        // Merge the table into the DataSet.\n        Console.WriteLine(&quot;Merging...&quot;);\n        dataSet.Merge(t2, false, MissingSchemaAction.Add);\n    }\n\n    private static void Merge_Failed(object sender, MergeFailedEventArgs e)\n    {\n        Console.WriteLine(&quot;Merge_Failed Event: &#39;{0}&#39;&quot;, e.Conflict);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_System_ComponentModel_IListSource_ContainsListCollection\">\r\n    \r\n            <a id=\"System_Data_DataSet_System_ComponentModel_IListSource_ContainsListCollection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IListSource.ContainsListCollection</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.ContainsListCollection*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.ComponentModel.IListSource.ContainsListCollection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.ContainsListCollection*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.componentmodel.ilistsource\" data-linktype=\"relative-path\">IListSource</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_System_ComponentModel_IListSource_GetList\">\r\n    \r\n            <a id=\"System_Data_DataSet_System_ComponentModel_IListSource_GetList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IListSource.GetList()</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.GetList*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IList IListSource.GetList ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.GetList*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.componentmodel.ilistsource\" data-linktype=\"relative-path\">IListSource</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_GetSchema\">\r\n    \r\n            <a id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.GetSchema()</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a></div>\r\n                  </div>\r\n                  <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.ReadXml(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataSet_System_Xml_Serialization_IXmlSerializable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.WriteXml(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataSet.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataSet.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.AcceptChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.BeginInit\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.CaseSensitive\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Clear\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Clone\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Copy\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.CreateDataReader\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.DataSetName\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.DefaultViewManager\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.DetermineSchemaSerializationMode\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.EndInit\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.EnforceConstraints\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ExtendedProperties\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetDataSetSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetSchemaSerializable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetSerializationData\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.GetXmlSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.HasChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.HasErrors\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.InferXmlSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.add_Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.remove_Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.InitializeDerivedDataSet\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IsBinarySerialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IsInitialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Load\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Locale\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Merge\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.MergeFailed\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.add_MergeFailed\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.remove_MergeFailed\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.OnPropertyChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.OnRemoveRelation\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.OnRemoveTable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.RaisePropertyChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ReadXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ReadXmlSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ReadXmlSerializable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.RejectChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Relations\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.RemotingFormat\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Reset\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.SchemaSerializationMode\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ShouldSerializeRelations\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.ShouldSerializeTables\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Site\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IListSource.ContainsListCollection\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IListSource.GetList\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IXmlSerializable.GetSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IXmlSerializable.ReadXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.IXmlSerializable.WriteXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.Tables\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.WriteXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataSet.WriteXmlSchema\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"76cdb2e7-887a-9c16-ca93-40234169d56e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an in-memory cache of data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.DataSet\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataSet.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataSet.yml","open_to_public_contributors":true,"api_name":["System.Data.DataSet","System.Data.DataSet..ctor","System.Data.DataSet.AcceptChanges","System.Data.DataSet.BeginInit","System.Data.DataSet.CaseSensitive","System.Data.DataSet.Clear","System.Data.DataSet.Clone","System.Data.DataSet.Copy","System.Data.DataSet.CreateDataReader","System.Data.DataSet.DataSetName","System.Data.DataSet.DefaultViewManager","System.Data.DataSet.DetermineSchemaSerializationMode","System.Data.DataSet.EndInit","System.Data.DataSet.EnforceConstraints","System.Data.DataSet.ExtendedProperties","System.Data.DataSet.GetChanges","System.Data.DataSet.GetDataSetSchema","System.Data.DataSet.GetObjectData","System.Data.DataSet.GetSchemaSerializable","System.Data.DataSet.GetSerializationData","System.Data.DataSet.GetXml","System.Data.DataSet.GetXmlSchema","System.Data.DataSet.HasChanges","System.Data.DataSet.HasErrors","System.Data.DataSet.InferXmlSchema","System.Data.DataSet.Initialized","System.Data.DataSet.add_Initialized","System.Data.DataSet.remove_Initialized","System.Data.DataSet.InitializeDerivedDataSet","System.Data.DataSet.IsBinarySerialized","System.Data.DataSet.IsInitialized","System.Data.DataSet.Load","System.Data.DataSet.Locale","System.Data.DataSet.Merge","System.Data.DataSet.MergeFailed","System.Data.DataSet.add_MergeFailed","System.Data.DataSet.remove_MergeFailed","System.Data.DataSet.Namespace","System.Data.DataSet.OnPropertyChanging","System.Data.DataSet.OnRemoveRelation","System.Data.DataSet.OnRemoveTable","System.Data.DataSet.Prefix","System.Data.DataSet.RaisePropertyChanging","System.Data.DataSet.ReadXml","System.Data.DataSet.ReadXmlSchema","System.Data.DataSet.ReadXmlSerializable","System.Data.DataSet.RejectChanges","System.Data.DataSet.Relations","System.Data.DataSet.RemotingFormat","System.Data.DataSet.Reset","System.Data.DataSet.SchemaSerializationMode","System.Data.DataSet.ShouldSerializeRelations","System.Data.DataSet.ShouldSerializeTables","System.Data.DataSet.Site","System.Data.DataSet.IListSource.ContainsListCollection","System.Data.DataSet.IListSource.GetList","System.Data.DataSet.IXmlSerializable.GetSchema","System.Data.DataSet.IXmlSerializable.ReadXml","System.Data.DataSet.IXmlSerializable.WriteXml","System.Data.DataSet.Tables","System.Data.DataSet.WriteXml","System.Data.DataSet.WriteXmlSchema"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.DataSet","System::Data::DataSet","System.Data.DataSet.#ctor","System::Data::DataSet::#ctor","System.Data.DataSet.AcceptChanges","System::Data::DataSet::AcceptChanges","System.Data.DataSet.BeginInit","System::Data::DataSet::BeginInit","System.Data.DataSet.CaseSensitive","System::Data::DataSet::CaseSensitive","System.Data.DataSet.Clear","System::Data::DataSet::Clear","System.Data.DataSet.Clone","System::Data::DataSet::Clone","System.Data.DataSet.Copy","System::Data::DataSet::Copy","System.Data.DataSet.CreateDataReader","System::Data::DataSet::CreateDataReader","System.Data.DataSet.DataSetName","System::Data::DataSet::DataSetName","System.Data.DataSet.DefaultViewManager","System::Data::DataSet::DefaultViewManager","System.Data.DataSet.DetermineSchemaSerializationMode","System::Data::DataSet::DetermineSchemaSerializationMode","System.Data.DataSet.EndInit","System::Data::DataSet::EndInit","System.Data.DataSet.EnforceConstraints","System::Data::DataSet::EnforceConstraints","System.Data.DataSet.ExtendedProperties","System::Data::DataSet::ExtendedProperties","System.Data.DataSet.GetChanges","System::Data::DataSet::GetChanges","System.Data.DataSet.GetDataSetSchema","System::Data::DataSet::GetDataSetSchema","System.Data.DataSet.GetObjectData","System::Data::DataSet::GetObjectData","System.Data.DataSet.GetSchemaSerializable","System::Data::DataSet::GetSchemaSerializable","System.Data.DataSet.GetSerializationData","System::Data::DataSet::GetSerializationData","System.Data.DataSet.GetXml","System::Data::DataSet::GetXml","System.Data.DataSet.GetXmlSchema","System::Data::DataSet::GetXmlSchema","System.Data.DataSet.HasChanges","System::Data::DataSet::HasChanges","System.Data.DataSet.HasErrors","System::Data::DataSet::HasErrors","System.Data.DataSet.InferXmlSchema","System::Data::DataSet::InferXmlSchema","System.Data.DataSet.Initialized","System::Data::DataSet::Initialized","System.Data.DataSet.InitializeDerivedDataSet","System::Data::DataSet::InitializeDerivedDataSet","System.Data.DataSet.IsBinarySerialized","System::Data::DataSet::IsBinarySerialized","System.Data.DataSet.IsInitialized","System::Data::DataSet::IsInitialized","System.Data.DataSet.Load","System::Data::DataSet::Load","System.Data.DataSet.Locale","System::Data::DataSet::Locale","System.Data.DataSet.Merge","System::Data::DataSet::Merge","System.Data.DataSet.MergeFailed","System::Data::DataSet::MergeFailed","System.Data.DataSet.Namespace","System::Data::DataSet::Namespace","System.Data.DataSet.OnPropertyChanging","System::Data::DataSet::OnPropertyChanging","System.Data.DataSet.OnRemoveRelation","System::Data::DataSet::OnRemoveRelation","System.Data.DataSet.OnRemoveTable","System::Data::DataSet::OnRemoveTable","System.Data.DataSet.Prefix","System::Data::DataSet::Prefix","System.Data.DataSet.RaisePropertyChanging","System::Data::DataSet::RaisePropertyChanging","System.Data.DataSet.ReadXml","System::Data::DataSet::ReadXml","System.Data.DataSet.ReadXmlSchema","System::Data::DataSet::ReadXmlSchema","System.Data.DataSet.ReadXmlSerializable","System::Data::DataSet::ReadXmlSerializable","System.Data.DataSet.RejectChanges","System::Data::DataSet::RejectChanges","System.Data.DataSet.Relations","System::Data::DataSet::Relations","System.Data.DataSet.RemotingFormat","System::Data::DataSet::RemotingFormat","System.Data.DataSet.Reset","System::Data::DataSet::Reset","System.Data.DataSet.SchemaSerializationMode","System::Data::DataSet::SchemaSerializationMode","System.Data.DataSet.ShouldSerializeRelations","System::Data::DataSet::ShouldSerializeRelations","System.Data.DataSet.ShouldSerializeTables","System::Data::DataSet::ShouldSerializeTables","System.Data.DataSet.Site","System::Data::DataSet::Site","System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection","System::Data::DataSet::System#ComponentModel#IListSource#ContainsListCollection","System.Data.DataSet.System#ComponentModel#IListSource#GetList","System::Data::DataSet::System#ComponentModel#IListSource#GetList","System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema","System::Data::DataSet::System#Xml#Serialization#IXmlSerializable#GetSchema","System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml","System::Data::DataSet::System#Xml#Serialization#IXmlSerializable#ReadXml","System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml","System::Data::DataSet::System#Xml#Serialization#IXmlSerializable#WriteXml","System.Data.DataSet.Tables","System::Data::DataSet::Tables","System.Data.DataSet.WriteXml","System::Data::DataSet::WriteXml","System.Data.DataSet.WriteXmlSchema","System::Data::DataSet::WriteXmlSchema"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"76cdb2e7-887a-9c16-ca93-40234169d56e","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data/DataSet.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataSet class | Microsoft Docs","_op_ogTitle":"DataSet class","description":"Represents an in-memory cache of data.\n","toc_asset_id":"_splitted/System.Data/toc.json","toc_rel":"_splitted/System.Data/toc.json","source_url":"","ms.assetid":"System.Data.DataSet","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.dataset","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.dataset","fileRelativePath":"System.Data.DataSet.html"},"themesRelativePathToOutputRoot":"_themes/"}