{"content":"    \r\n    <h1 id=\"System_IO_StringWriter\">\r\n      <span class=\"lang-csharp\">StringWriter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for writing information to a string. The information is stored in an underlying <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class StringWriter : System.IO.TextWriter</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">System.IO.TextWriter</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringWriter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_CoreNewLine\" data-linktype=\"relative-path\">CoreNewLine</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Flush\" data-linktype=\"relative-path\">Flush()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_FormatProvider\" data-linktype=\"relative-path\">FormatProvider</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine\" data-linktype=\"relative-path\">NewLine</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Null\" data-linktype=\"relative-path\">Null</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Synchronized_System_IO_TextWriter_\" data-linktype=\"relative-path\">Synchronized(TextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Boolean_\" data-linktype=\"relative-path\">Write(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Char___\" data-linktype=\"relative-path\">Write(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Decimal_\" data-linktype=\"relative-path\">Write(Decimal)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Double_\" data-linktype=\"relative-path\">Write(Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Int32_\" data-linktype=\"relative-path\">Write(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Int64_\" data-linktype=\"relative-path\">Write(Int64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Object_\" data-linktype=\"relative-path\">Write(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_Single_\" data-linktype=\"relative-path\">Write(Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_String_System_Object_\" data-linktype=\"relative-path\">Write(String,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_String_System_Object_System_Object_\" data-linktype=\"relative-path\">Write(String,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"relative-path\">Write(String,Object,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_String_System_Object___\" data-linktype=\"relative-path\">Write(String,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_UInt32_\" data-linktype=\"relative-path\">Write(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_System_UInt64_\" data-linktype=\"relative-path\">Write(UInt64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteAsync_System_Char___\" data-linktype=\"relative-path\">WriteAsync(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine\" data-linktype=\"relative-path\">WriteLine()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Boolean_\" data-linktype=\"relative-path\">WriteLine(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Char_\" data-linktype=\"relative-path\">WriteLine(Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Char___\" data-linktype=\"relative-path\">WriteLine(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteLine(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Decimal_\" data-linktype=\"relative-path\">WriteLine(Decimal)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Double_\" data-linktype=\"relative-path\">WriteLine(Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Int32_\" data-linktype=\"relative-path\">WriteLine(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Int64_\" data-linktype=\"relative-path\">WriteLine(Int64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Object_\" data-linktype=\"relative-path\">WriteLine(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_Single_\" data-linktype=\"relative-path\">WriteLine(Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_String_\" data-linktype=\"relative-path\">WriteLine(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_String_System_Object_\" data-linktype=\"relative-path\">WriteLine(String,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_String_System_Object_System_Object_\" data-linktype=\"relative-path\">WriteLine(String,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"relative-path\">WriteLine(String,Object,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_String_System_Object___\" data-linktype=\"relative-path\">WriteLine(String,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_UInt32_\" data-linktype=\"relative-path\">WriteLine(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_System_UInt64_\" data-linktype=\"relative-path\">WriteLine(UInt64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLineAsync\" data-linktype=\"relative-path\">WriteLineAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLineAsync_System_Char___\" data-linktype=\"relative-path\">WriteLineAsync(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>StringWriter enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_Write_System_Char_\" data-linktype=\"relative-path\">Write(Char)</a> or the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_WriteAsync_System_Char_\" data-linktype=\"relative-path\">WriteAsync(Char)</a> method, a string at a time using the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_Write_System_String_\" data-linktype=\"relative-path\">Write(String)</a> or the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_WriteAsync_System_String_\" data-linktype=\"relative-path\">WriteAsync(String)</a> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_WriteLineAsync_\" data-linktype=\"relative-path\">WriteLineAsync</a> methods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code> /<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter__ctor\" data-linktype=\"self-bookmark\">StringWriter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter__ctor_System_IFormatProvider_\" data-linktype=\"self-bookmark\">StringWriter(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class with the specified format control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter__ctor_System_Text_StringBuilder_\" data-linktype=\"self-bookmark\">StringWriter(StringBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class that writes to the specified <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter__ctor_System_Text_StringBuilder_System_IFormatProvider_\" data-linktype=\"self-bookmark\">StringWriter(StringBuilder,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class that writes to the specified <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> and has the specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Encoding\" data-linktype=\"self-bookmark\">Encoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> in which the output is written.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> and the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_FlushAsync\" data-linktype=\"self-bookmark\">FlushAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_GetStringBuilder\" data-linktype=\"self-bookmark\">GetStringBuilder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing the characters written to the current <code>StringWriter</code> so far.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Write_System_Char_\" data-linktype=\"self-bookmark\">Write(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a character to the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Write_System_String_\" data-linktype=\"self-bookmark\">Write(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a string to the current string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_Write_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a subarray of characters to the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteAsync_System_Char_\" data-linktype=\"self-bookmark\">WriteAsync(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a character to the string asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteAsync_System_String_\" data-linktype=\"self-bookmark\">WriteAsync(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a string to the current string asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteAsync(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a subarray of characters to the string asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteLineAsync_System_Char_\" data-linktype=\"self-bookmark\">WriteLineAsync(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a character followed by a line terminator asynchronously to the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteLineAsync_System_String_\" data-linktype=\"self-bookmark\">WriteLineAsync(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a string followed by a line terminator asynchronously to the current string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_StringWriter_WriteLineAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteLineAsync(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a subarray of characters followed by a line terminator asynchronously to the string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter__ctor\">\r\n    \r\n            <a id=\"System_IO_StringWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringWriter()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringWriter ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is automatically created and associated with the new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class. Since a format control is not specified for this constructor, the new instance will be initialized with <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to construct a string using the <code>StringWriter</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter1#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass StrWriter\n{\n    static void Main()\n    {\n        StringWriter strWriter  = new StringWriter();\n\n        // Use the three overloads of the Write method that are \n        // overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;);\n        strWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n        strWriter.Write(&#39;.&#39;);\n\n        // Use the underlying StringBuilder for more complex \n        // manipulations of the string.\n        strWriter.GetStringBuilder().Insert(0, &quot;Invalid &quot;);\n\n        Console.WriteLine(&quot;The following string is {0} encoded.<br>{1}&quot;, \n            strWriter.Encoding.EncodingName, strWriter.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter1#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nint main()\n{\n   StringWriter^ strWriter = gcnew StringWriter;\n   \n   // Use the three overloads of the Write method that are \n   // overridden by the StringWriter class.\n   strWriter-&gt;Write( &quot;file path characters are: &quot; );\n   strWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   strWriter-&gt;Write( Char::Parse( &quot;.&quot; ) );\n   \n   // Use the underlying StringBuilder for more complex \n   // manipulations of the string.\n   strWriter-&gt;GetStringBuilder()-&gt;Insert( 0, &quot;Invalid &quot; );\n   \n   Console::WriteLine( &quot;The following string is {0} encoded.<br>{1}&quot;, strWriter-&gt;Encoding-&gt;EncodingName, strWriter-&gt;ToString() );\n   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter1#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.IO\nImports System.Text\n\nPublic Class StrWriter\n\n    Shared Sub Main()\n\n        Dim strWriter As StringWriter = new StringWriter()\n\n        &#39; Use the three overloads of the Write method that are \n        &#39; overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;)\n        strWriter.Write( _\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length)\n        strWriter.Write(&quot;.&quot;C)\n\n        &#39; Use the underlying StringBuilder for more complex \n        &#39; manipulations of the string.\n        strWriter.GetStringBuilder().Insert(0, &quot;Invalid &quot;)\n\n        Console.WriteLine(&quot;The following string is {0} encoded.&quot; _\n            &amp; vbCrLf &amp; &quot;{1}&quot;, _\n            strWriter.Encoding.EncodingName, strWriter.ToString())\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter__ctor_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_IO_StringWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringWriter(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class with the specified format control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringWriter (IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that controls formatting.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is automatically created and associated with the new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to construct a string in a specific culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter2#1\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\nint main()\n{\n   StringWriter^ strWriter = gcnew StringWriter( gcnew CultureInfo(  &quot;ar-DZ&quot; ) );\n   strWriter-&gt;Write( DateTime::Now );\n   \n   Console::WriteLine( &quot;Current date and time using the invariant culture: {0}<br>&quot;\n   &quot;Current date and time using the Algerian culture: {1}&quot;, DateTime::Now.ToString(), strWriter-&gt;ToString() );\n   \n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.StringWriter2#1\">using System;\nusing System.Globalization;\nusing System.IO;\n\nclass StrWriter\n{\n    static void Main()\n    {\n        StringWriter strWriter = \n            new StringWriter(new CultureInfo(&quot;ar-DZ&quot;));\n\n        strWriter.Write(DateTime.Now);\n\n        Console.WriteLine(\n            &quot;Current date and time using the invariant culture: {0}<br>&quot; +\n            &quot;Current date and time using the Algerian culture: {1}&quot;, \n            DateTime.Now.ToString(), strWriter.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter2#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Globalization\nImports System.IO\n\nPublic Class StrWriter\n\n    Shared Sub Main()\n        Dim strWriter As New StringWriter(New CultureInfo(&quot;ar-DZ&quot;))\n\n        strWriter.Write(DateTime.Now)\n\n        Console.WriteLine( _\n            &quot;Current date and time using the invariant culture: {0}&quot; _\n            &amp; vbCrLf &amp; _\n            &quot;Current date and time using the Algerian culture: {1}&quot;, _\n            DateTime.Now.ToString(), strWriter.ToString())\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter__ctor_System_Text_StringBuilder_\">\r\n    \r\n            <a id=\"System_IO_StringWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringWriter(StringBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class that writes to the specified <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringWriter (System.Text.StringBuilder sb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to write to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sb</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Since a format control is not specified for this constructor, the new instance will be initialized with <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class to modify the underlying string in a closed <code>StringWriter</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter3#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass StrWriter\n{\n    static void Main()\n    {\n        StringBuilder strBuilder = \n            new StringBuilder(&quot;file path characters are: &quot;);\n        StringWriter strWriter = new StringWriter(strBuilder);\n\n        strWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n\n        strWriter.Close();\n\n        // Since the StringWriter is closed, an exception will \n        // be thrown if the Write method is called. However, \n        // the StringBuilder can still manipulate the string.\n        strBuilder.Insert(0, &quot;Invalid &quot;);\n        Console.WriteLine(strWriter.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter3#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class StrWriter\n\n    Shared Sub Main()\n        Dim strBuilder As New StringBuilder( _\n            &quot;file path characters are: &quot;)\n        Dim strWriter As New StringWriter(strBuilder)\n\n        strWriter.Write( _\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length)\n\n        strWriter.Close()\n\n        &#39; Since the StringWriter is closed, an exception will \n        &#39; be thrown if the Write method is called. However, \n        &#39; the StringBuilder can still manipulate the string.\n        strBuilder.Insert(0, &quot;Invalid &quot;)\n        Console.WriteLine(strWriter.ToString())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter3#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ strBuilder = gcnew StringBuilder( &quot;file path characters are: &quot; );\n   StringWriter^ strWriter = gcnew StringWriter( strBuilder );\n   strWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   \n   strWriter-&gt;Close();\n   \n   // Since the StringWriter is closed, an exception will \n   // be thrown if the Write method is called. However, \n   // the StringBuilder can still manipulate the string.\n   strBuilder-&gt;Insert( 0, &quot;Invalid &quot; );\n   Console::WriteLine( strWriter-&gt;ToString() );\n   \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter__ctor_System_Text_StringBuilder_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_IO_StringWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringWriter(StringBuilder,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class that writes to the specified <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> and has the specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringWriter (System.Text.StringBuilder sb, IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that controls formatting.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sb</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Encoding\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Encoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> in which the output is written.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Text.Encoding Encoding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The <code>Encoding</code> in which the output is written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <code>StringWriter</code>. This allows the XML code to consume an arbitrary <code>StringWriter</code> and generate the correct XML header.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor\" data-linktype=\"relative-path\">StringWriter()</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter1#4\">        Console.WriteLine(&quot;The following string is {0} encoded.<br>{1}&quot;, \n            strWriter.Encoding.EncodingName, strWriter.ToString());\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter1#4\">   Console::WriteLine( &quot;The following string is {0} encoded.<br>{1}&quot;, strWriter-&gt;Encoding-&gt;EncodingName, strWriter-&gt;ToString() );\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter1#4\">        Console.WriteLine(&quot;The following string is {0} encoded.&quot; _\n            &amp; vbCrLf &amp; &quot;{1}&quot;, _\n            strWriter.Encoding.EncodingName, strWriter.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Close\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> and the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For an example of creating a file and writing text to a file, see <a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a>. For an example of reading text from a file, see <a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a>. For an example of reading from and writing to a binary file, see <a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a>.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a>.  </p>\n<p> This implementation of <code>Close</code> calls the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method passing a <code>true</code> value.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <code>Close</code>. Setting <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor_System_Text_StringBuilder_\" data-linktype=\"relative-path\">StringWriter(StringBuilder)</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter3#2\">        strWriter.Close();\n\n        // Since the StringWriter is closed, an exception will \n        // be thrown if the Write method is called. However, \n        // the StringBuilder can still manipulate the string.\n        strBuilder.Insert(0, &quot;Invalid &quot;);\n        Console.WriteLine(strWriter.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter3#2\">        strWriter.Close()\n\n        &#39; Since the StringWriter is closed, an exception will \n        &#39; be thrown if the Write method is called. However, \n        &#39; the StringBuilder can still manipulate the string.\n        strBuilder.Insert(0, &quot;Invalid &quot;)\n        Console.WriteLine(strWriter.ToString())\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter3#2\">   strWriter-&gt;Close();\n   \n   // Since the StringWriter is closed, an exception will \n   // be thrown if the Write method is called. However, \n   // the StringBuilder can still manipulate the string.\n   strBuilder-&gt;Insert( 0, &quot;Invalid &quot; );\n   Console::WriteLine( strWriter-&gt;ToString() );\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> references. This method invokes the <code>Dispose</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_FlushAsync\">\r\n    \r\n            <a id=\"System_IO_StringWriter_FlushAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FlushAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task FlushAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous flush operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_GetStringBuilder\">\r\n    \r\n            <a id=\"System_IO_StringWriter_GetStringBuilder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetStringBuilder()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Text.StringBuilder GetStringBuilder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>The underlying <code>StringBuilder</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is either the <code>StringBuilder</code> that was passed to the constructor, or the <code>StringBuilder</code> that was automatically created.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor\" data-linktype=\"relative-path\">StringWriter()</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter1#3\">        // Use the underlying StringBuilder for more complex \n        // manipulations of the string.\n        strWriter.GetStringBuilder().Insert(0, &quot;Invalid &quot;);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter1#3\">   // Use the underlying StringBuilder for more complex \n   // manipulations of the string.\n   strWriter-&gt;GetStringBuilder()-&gt;Insert( 0, &quot;Invalid &quot; );\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter1#3\">        &#39; Use the underlying StringBuilder for more complex \n        &#39; manipulations of the string.\n        strWriter.GetStringBuilder().Insert(0, &quot;Invalid &quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_ToString\">\r\n    \r\n            <a id=\"System_IO_StringWriter_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing the characters written to the current <code>StringWriter</code> so far.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string containing the characters written to the current <code>StringWriter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor_System_IFormatProvider_\" data-linktype=\"relative-path\">StringWriter(IFormatProvider)</a> constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter2#2\">   Console::WriteLine( &quot;Current date and time using the invariant culture: {0}<br>&quot;\n   &quot;Current date and time using the Algerian culture: {1}&quot;, DateTime::Now.ToString(), strWriter-&gt;ToString() );\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.StringWriter2#2\">        Console.WriteLine(\n            &quot;Current date and time using the invariant culture: {0}<br>&quot; +\n            &quot;Current date and time using the Algerian culture: {1}&quot;, \n            DateTime.Now.ToString(), strWriter.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter2#2\">        Console.WriteLine( _\n            &quot;Current date and time using the invariant culture: {0}&quot; _\n            &amp; vbCrLf &amp; _\n            &quot;Current date and time using the Algerian culture: {1}&quot;, _\n            DateTime.Now.ToString(), strWriter.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Write_System_Char_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a character to the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The writer is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_\" data-linktype=\"relative-path\">Write</a>.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor\" data-linktype=\"relative-path\">StringWriter()</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter1#2\">        // Use the three overloads of the Write method that are \n        // overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;);\n        strWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n        strWriter.Write(&#39;.&#39;);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter1#2\">   // Use the three overloads of the Write method that are \n   // overridden by the StringWriter class.\n   strWriter-&gt;Write( &quot;file path characters are: &quot; );\n   strWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   strWriter-&gt;Write( Char::Parse( &quot;.&quot; ) );\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter1#2\">        &#39; Use the three overloads of the Write method that are \n        &#39; overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;)\n        strWriter.Write( _\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length)\n        strWriter.Write(&quot;.&quot;C)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Write_System_String_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a string to the current string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The writer is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_\" data-linktype=\"relative-path\">Write</a>.  </p>\n<p> If the specified string is <code>null</code>, nothing is written.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.StringReaderWriter#3\">      convertedCharacter = Convert::ToChar( intCharacter );\n      if ( convertedCharacter == &#39;.&#39; )\n      {\n         strWriter-&gt;Write(  &quot;.<br><br>&quot; );\n         \n         // Bypass the spaces between sentences.\n         strReader-&gt;Read();\n         strReader-&gt;Read();\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringReaderWriter#3\">            convertedCharacter = Convert.ToChar(intCharacter)\n            If convertedCharacter = &quot;.&quot;C Then\n                strWriter.Write(&quot;.&quot; &amp; vbCrLf &amp; vbCrLf)\n\n                &#39; Bypass the spaces between sentences.\n                strReader.Read()\n                strReader.Read()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.StringReaderWriter#3\">            convertedCharacter = Convert.ToChar(intCharacter);\n            if(convertedCharacter == &#39;.&#39;)\n            {\n                strWriter.Write(&quot;.<br><br>&quot;);\n\n                // Bypass the spaces between sentences.\n                strReader.Read();\n                strReader.Read();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_Write_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a subarray of characters to the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in the buffer at which to start reading data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>(<code>index</code> + <code>count</code>)&gt; <code>buffer</code>. <code>Length</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The writer is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_Write_\" data-linktype=\"relative-path\">Write</a>.  </p>\n<p> This method writes <code>count</code> characters of data to this <code>StringWriter</code> from <code>buffer</code>, starting at position <code>index</code>.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.io.stringwriter#System_IO_StringWriter__ctor\" data-linktype=\"relative-path\">StringWriter()</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter1#2\">        // Use the three overloads of the Write method that are \n        // overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;);\n        strWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n        strWriter.Write(&#39;.&#39;);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.StringWriter1#2\">   // Use the three overloads of the Write method that are \n   // overridden by the StringWriter class.\n   strWriter-&gt;Write( &quot;file path characters are: &quot; );\n   strWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   strWriter-&gt;Write( Char::Parse( &quot;.&quot; ) );\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter1#2\">        &#39; Use the three overloads of the Write method that are \n        &#39; overridden by the StringWriter class.\n        strWriter.Write(&quot;file path characters are: &quot;)\n        strWriter.Write( _\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length)\n        strWriter.Write(&quot;.&quot;C)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteAsync_System_Char_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a character to the string asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteAsync (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to write to the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write characters by using the WriteAsync method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#5\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                UnicodeEncoding ue = new UnicodeEncoding();\n                char[] charsToAdd = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;));\n                foreach (char c in charsToAdd)\n                {\n                    await writer.WriteAsync(c);\n                }\n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// and chars to add\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#5\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n\n            Dim ue As UnicodeEncoding = New UnicodeEncoding()\n            Dim charsToAdd() = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;))\n            For Each c As Char In charsToAdd\n                Await writer.WriteAsync(c)\n            Next\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; and chars to add\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteAsync_System_String_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a string to the current string asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteAsync (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to write. If <code>value</code> is <code>null</code>, nothing is written to the text stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write a string by using the WriteAsync method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#4\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                await writer.WriteAsync(&quot;and add characters through StringWriter&quot;);\n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// and add characters through StringWriter\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#4\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n            Await writer.WriteAsync(&quot;and add characters through StringWriter&quot;)\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; and add characters through StringWriter\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteAsync_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a subarray of characters to the string asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in the buffer at which to start reading data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> plus <code>count</code> is greater than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write characters by using the WriteAsync method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#6\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                UnicodeEncoding ue = new UnicodeEncoding();\n                char[] charsToAdd = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;));\n\n                await writer.WriteAsync(charsToAdd, 0, charsToAdd.Length);\n                \n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// and chars to add\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#6\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n\n            Dim ue As UnicodeEncoding = New UnicodeEncoding()\n            Dim charsToAdd() = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;))\n\n            Await writer.WriteAsync(charsToAdd, 0, charsToAdd.Length)\n\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; and chars to add\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteLineAsync_System_Char_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteLineAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineAsync(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a character followed by a line terminator asynchronously to the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteLineAsync (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to write to the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The line terminator is defined by the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write characters by using the WriteLineAsync method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#2\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                UnicodeEncoding ue = new UnicodeEncoding();\n                char[] charsToAdd = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;));\n                foreach (char c in charsToAdd)\n                {\n                    await writer.WriteLineAsync(c);\n                }\n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// a\n// n\n// d \n//\n// c\n// h\n// a\n// r\n// s\n// \n// t\n// o\n//\n// a\n// d\n// d\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#2\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n\n            Dim ue As UnicodeEncoding = New UnicodeEncoding()\n            Dim charsToAdd() = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;))\n            For Each c As Char In charsToAdd\n                Await writer.WriteLineAsync(c)\n            Next\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; a\n&#39; n\n&#39; d \n&#39;\n&#39; c\n&#39; h\n&#39; a\n&#39; r\n&#39; s\n&#39; \n&#39; t\n&#39; o\n&#39;\n&#39; a\n&#39; d\n&#39; d\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteLineAsync_System_String_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteLineAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineAsync(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a string followed by a line terminator asynchronously to the current string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteLineAsync (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to write. If the value is <code>null</code>, only a line terminator is written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The line terminator is defined by the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write a string by using the WriteLineAsync method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#1\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n            Await writer.WriteLineAsync(&quot;and add characters through StringWriter&quot;)\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; and add characters through StringWriter\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#1\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                await writer.WriteLineAsync(&quot;and add characters through StringWriter&quot;);\n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// and add characters through StringWriter\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_StringWriter_WriteLineAsync_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_StringWriter_WriteLineAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineAsync(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a subarray of characters followed by a line terminator asynchronously to the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in the buffer at which to start reading data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> plus <code>count</code> is greater than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The string writer is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The string writer is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The line terminator is defined by the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write characters by using the WriteLineAsync method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.StringWriter#3\">using System;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteCharacters();\n        }\n\n        static async void WriteCharacters()\n        {\n            StringBuilder stringToWrite = new StringBuilder(&quot;Characters in StringBuilder&quot;);\n            stringToWrite.AppendLine();\n\n            using (StringWriter writer = new StringWriter(stringToWrite))\n            {\n                UnicodeEncoding ue = new UnicodeEncoding();\n                char[] charsToAdd = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;));\n\n                await writer.WriteLineAsync(charsToAdd, 0, charsToAdd.Length);\n                \n                Console.WriteLine(stringToWrite.ToString());\n            }\n        }\n    }\n}\n// The example displays the following output:\n//\n// Characters in StringBuilder\n// and chars to add\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.StringWriter#3\">Imports System.IO\nImports System.Text\n\nModule Module1\n\n    Sub Main()\n        WriteCharacters()\n    End Sub\n\n    Async Sub WriteCharacters()\n        Dim stringToWrite As StringBuilder = New StringBuilder(&quot;Characters in StringBuilder&quot;)\n        stringToWrite.AppendLine()\n\n        Using writer As StringWriter = New StringWriter(stringToWrite)\n\n            Dim ue As UnicodeEncoding = New UnicodeEncoding()\n            Dim charsToAdd() = ue.GetChars(ue.GetBytes(&quot;and chars to add&quot;))\n\n            Await writer.WriteLineAsync(charsToAdd, 0, charsToAdd.Length)\n\n            Console.WriteLine(stringToWrite.ToString())\n        End Using\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39; Characters in StringBuilder\n&#39; and chars to add\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.StringWriter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.StringWriter.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.Close\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.Encoding\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.FlushAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.GetStringBuilder\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.ToString\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.Write\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.WriteAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.StringWriter.WriteLineAsync\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"66f6ae1d-7d4a-7f05-074f-3e99027776eb\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.IO\\StringWriter.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a  for writing information to a string. The information is stored in an underlying .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.StringWriter\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.StringWriter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.StringWriter.yml","open_to_public_contributors":true,"api_name":["System.IO.StringWriter","System.IO.StringWriter..ctor","System.IO.StringWriter.Close","System.IO.StringWriter.Dispose","System.IO.StringWriter.Encoding","System.IO.StringWriter.FlushAsync","System.IO.StringWriter.GetStringBuilder","System.IO.StringWriter.ToString","System.IO.StringWriter.Write","System.IO.StringWriter.WriteAsync","System.IO.StringWriter.WriteLineAsync"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.StringWriter","System::IO::StringWriter","System.IO.StringWriter.#ctor","System::IO::StringWriter::#ctor","System.IO.StringWriter.Close","System::IO::StringWriter::Close","System.IO.StringWriter.Dispose","System::IO::StringWriter::Dispose","System.IO.StringWriter.Encoding","System::IO::StringWriter::Encoding","System.IO.StringWriter.FlushAsync","System::IO::StringWriter::FlushAsync","System.IO.StringWriter.GetStringBuilder","System::IO::StringWriter::GetStringBuilder","System.IO.StringWriter.ToString","System::IO::StringWriter::ToString","System.IO.StringWriter.Write","System::IO::StringWriter::Write","System.IO.StringWriter.WriteAsync","System::IO::StringWriter::WriteAsync","System.IO.StringWriter.WriteLineAsync","System::IO::StringWriter::WriteLineAsync"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"66f6ae1d-7d4a-7f05-074f-3e99027776eb","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.IO\\StringWriter.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/StringWriter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringWriter class | Microsoft Docs","_op_ogTitle":"StringWriter class","description":"Implements a  for writing information to a string. The information is stored in an underlying .\n","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.StringWriter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.stringwriter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.stringwriter","fileRelativePath":"System.IO.StringWriter.html"},"themesRelativePathToOutputRoot":"_themes/"}