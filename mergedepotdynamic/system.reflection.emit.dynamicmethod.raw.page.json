{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_DynamicMethod\">\r\n      <span class=\"lang-csharp\">DynamicMethod</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class DynamicMethod : System.Reflection.MethodInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">System.Reflection.MethodInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DynamicMethod</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_ContainsGenericParameters\" data-linktype=\"relative-path\">ContainsGenericParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetCurrentMethod\" data-linktype=\"relative-path\">GetCurrentMethod()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody\" data-linktype=\"relative-path\">GetMethodBody()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_System_Object_System_Object___\" data-linktype=\"relative-path\">Invoke(Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAssembly\" data-linktype=\"relative-path\">IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsConstructor\" data-linktype=\"relative-path\">IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamily\" data-linktype=\"relative-path\">IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFinal\" data-linktype=\"relative-path\">IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethod\" data-linktype=\"relative-path\">IsGenericMethod</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethodDefinition\" data-linktype=\"relative-path\">IsGenericMethodDefinition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsHideBySig\" data-linktype=\"relative-path\">IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPrivate\" data-linktype=\"relative-path\">IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsStatic\" data-linktype=\"relative-path\">IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsVirtual\" data-linktype=\"relative-path\">IsVirtual</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodImplementationFlags\" data-linktype=\"relative-path\">MethodImplementationFlags</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Equality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Equality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Inequality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Inequality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetType\" data-linktype=\"relative-path\">_MethodBase.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAbstract\" data-linktype=\"relative-path\">_MethodBase.IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAssembly\" data-linktype=\"relative-path\">_MethodBase.IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsConstructor\" data-linktype=\"relative-path\">_MethodBase.IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamily\" data-linktype=\"relative-path\">_MethodBase.IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFinal\" data-linktype=\"relative-path\">_MethodBase.IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsHideBySig\" data-linktype=\"relative-path\">_MethodBase.IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPrivate\" data-linktype=\"relative-path\">_MethodBase.IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPublic\" data-linktype=\"relative-path\">_MethodBase.IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsSpecialName\" data-linktype=\"relative-path\">_MethodBase.IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsStatic\" data-linktype=\"relative-path\">_MethodBase.IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsVirtual\" data-linktype=\"relative-path\">_MethodBase.IsVirtual</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments\" data-linktype=\"relative-path\">GetGenericArguments()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericMethodDefinition\" data-linktype=\"relative-path\">GetGenericMethodDefinition()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_System_Type___\" data-linktype=\"relative-path\">MakeGenericMethod(Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_op_Equality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">op_Equality(MethodInfo,MethodInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_op_Inequality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">op_Inequality(MethodInfo,MethodInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetType\" data-linktype=\"relative-path\">_MethodInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MethodInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can use the DynamicMethod class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the DynamicMethod object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.  </p>\n<p> A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.  </p>\n<ul>\n<li><p>If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler&#39;s visibility checks, if it has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see <a href=\"../Topic/Walkthrough:%20Emitting%20Code%20in%20Partial%20Trust%20Scenarios.md\" data-linktype=\"relative-path\">Walkthrough: Emitting Code in Partial Trust Scenarios</a>.  </p>\n</li>\n<li><p>If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all <code>internal</code> (<code>Friend</code> in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> flag can be satisfied by the call stack that includes your code. If the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag is included in the grant, the dynamic method can skip the JIT compiler&#39;s visibility checks and access the private data of all types declared in the module or in any other module in any assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.  </p>\n</div>\n</li>\n<li><p>If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with both the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> and <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> flags.  </p>\n<p>The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> flag is granted.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Without <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a></td>\n<td>With <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a></td>\n</tr>\n<tr>\n<td>Without skipping JIT visibility checks</td>\n<td>Public members of public types in any assembly.</td>\n<td>Public members of public types in any assembly.</td>\n</tr>\n<tr>\n<td>Skipping JIT visibility checks, with restrictions</td>\n<td>Public members of public types in any assembly.</td>\n<td>All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> Prior to the .NET Framework 2.0 Service Pack 1, emitting code required <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the .NET Framework a library can be used with Internet permissions only if it has the <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> attribute and also executes an <a class=\"xref\" href=\"system.security.permissionset#System_Security_PermissionSet_Assert_\" data-linktype=\"relative-path\">Assert</a> for <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a>. Such libraries require careful security review because coding errors could result in security holes. The .NET Framework 2.0 SP1 allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a>, which simplifies the task of writing a secure library. To use this feature, your application should target the  .NET Framework 3.5  or later.  </p>\n</div>\n<p> The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Associated with module</td>\n<td>Associated with type</td>\n</tr>\n<tr>\n<td>Without skipping JIT visibility checks</td>\n<td>Public and internal members of public, internal, and private types in the module.<br><br> Public members of public types in any assembly.</td>\n<td>All members of the associated type. Public and internal members of all the other types in the module.<br><br> Public members of public types in any assembly.</td>\n</tr>\n<tr>\n<td>Skipping JIT visibility checks</td>\n<td>All members of all types in any assembly.</td>\n<td>All members of all types in any assembly.</td>\n</tr>\n</tbody>\n</table>\n<p> A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.  </p>\n<p> Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.  </p>\n<p> Although dynamic methods are <code>static</code> methods (<code>Shared</code> methods in Visual Basic), the relaxed rules for delegate binding introduced in the .NET Framework 2.0 allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_System_Object_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> calls are the same in both cases.  </p>\n</div>\n<h2 id=\"verification\">Verification</h2>\n<p> The following list summarizes the conditions under which dynamic methods can contain unverifiable code. (For example, a dynamic method is unverifiable if its <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_InitLocals_\" data-linktype=\"relative-path\">InitLocals</a> property is set to <code>false</code>.)  </p>\n<ul>\n<li><p>A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.  </p>\n</li>\n<li><p>If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand. The demand succeeds only if the dynamic method is executed by fully trusted code. See <a href=\"../Topic/Security-Transparent%20Code,%20Level%201.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 1</a>.  </p>\n</li>\n<li><p>If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand. See <a href=\"../Topic/Security-Transparent%20Code,%20Level%202.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 2</a>.  </p>\n</li>\n<li><p>An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.  </p>\n<p>The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method, a <a class=\"xref\" href=\"system.security.verificationexception\" data-linktype=\"relative-path\">VerificationException</a> is thrown. If you invoke the dynamic method by using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method, a <a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a> is thrown with an inner <a class=\"xref\" href=\"system.security.verificationexception\" data-linktype=\"relative-path\">VerificationException</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Boolean_\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[],Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Reflection_Module_\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[],Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Type_\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[],Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Reflection_Module_System_Boolean_\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[],Module,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">DynamicMethod(String,Type,Type[],Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Reflection_Module_System_Boolean_\" data-linktype=\"self-bookmark\">DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes specified when the dynamic method was created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_CallingConvention\" data-linktype=\"self-bookmark\">CallingConvention</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the calling convention specified when the dynamic method was created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that declares the method, which is always <code>null</code> for dynamic methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_InitLocals\" data-linktype=\"self-bookmark\">InitLocals</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the local variables in the method are zero-initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_IsSecurityCritical\" data-linktype=\"self-bookmark\">IsSecurityCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_IsSecuritySafeCritical\" data-linktype=\"self-bookmark\">IsSecuritySafeCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_IsSecurityTransparent\" data-linktype=\"self-bookmark\">IsSecurityTransparent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_MethodHandle\" data-linktype=\"self-bookmark\">MethodHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for dynamic methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the module with which the dynamic method is logically associated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the class that was used in reflection to obtain the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_ReturnParameter\" data-linktype=\"self-bookmark\">ReturnParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the return parameter of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_ReturnType\" data-linktype=\"self-bookmark\">ReturnType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of return value for the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_ReturnTypeCustomAttributes\" data-linktype=\"self-bookmark\">ReturnTypeCustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes of the return type for the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_\" data-linktype=\"self-bookmark\">CreateDelegate(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the dynamic method and creates a delegate that can be used to execute it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_System_Object_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_DefineParameter_System_Int32_System_Reflection_ParameterAttributes_System_String_\" data-linktype=\"self-bookmark\">DefineParameter(Int32,ParameterAttributes,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a parameter of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetBaseDefinition\" data-linktype=\"self-bookmark\">GetBaseDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the base implementation for the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the custom attributes of the specified type that have been applied to the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetDynamicILInfo\" data-linktype=\"self-bookmark\">GetDynamicILInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetILGenerator\" data-linktype=\"self-bookmark\">GetILGenerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetILGenerator_System_Int32_\" data-linktype=\"self-bookmark\">GetILGenerator(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetMethodImplementationFlags\" data-linktype=\"self-bookmark\">GetMethodImplementationFlags()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the implementation flags for the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_GetParameters\" data-linktype=\"self-bookmark\">GetParameters()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the parameters of the dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_Invoke_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified custom attribute type is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicMethod_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the signature of the method, represented as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  </p>\n<p> This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are <code>private</code>, <code>protected</code>, or <code>internal</code> (<code>Friend</code> in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the [DynamicMethod(String, Type, Type&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt; constructor.  </p>\n<p> When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  </p>\n<p> This constructor specifies the method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, and the calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This constructor was introduced in the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[],Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>restrictedSkipVisibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  </p>\n<p> Anonymously hosted dynamic methods do not have automatic access to any types or members that are <code>private</code>, <code>protected</code>, or <code>internal</code> (<code>Friend</code> in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.  </p>\n<p> Specify <code>true</code> for <code>restrictedSkipVisibility</code> if your dynamic method has to access types or members that are <code>private</code>, <code>protected</code>, or <code>internal</code>. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:  </p>\n<ul>\n<li><p>The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.  </p>\n</li>\n<li><p>The call stack that emits the dynamic method is granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If the permission has not been granted, a security exception is thrown when <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.  </p>\n</div>\n<p>For example, a dynamic method that is created with <code>restrictedSkipVisibility</code> set to <code>true</code> can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a .NET Framework assembly, because such assemblies are fully trusted.  </p>\n<p>If <code>restrictedSkipVisibility</code> is <code>false</code>, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are <code>private</code>, <code>protected</code>, or <code>internal</code>.  </p>\n<p>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  </p>\n<p>This constructor specifies the method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, and the calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This constructor was introduced in the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[],Module)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> representing the module with which the dynamic method is to be logically associated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is a module that provides anonymous hosting for dynamic methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor specifies method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>, and does not skip just-in-time (JIT) visibility checks.  </p>\n<p> The dynamic method created with this constructor has access to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the types contained in module <code>m</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>m</code> is a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the [Invoke(Object, BindingFlags, Binder, Object&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt; method.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.ctor1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Test\n{\n    // Declare a delegate that will be used to execute the completed\n    // dynamic method. \n    private delegate int HelloInvoker(string msg, int ret);\n\n    public static void Main()\n    {\n        // Create an array that specifies the types of the parameters\n        // of the dynamic method. This method has a string parameter\n        // and an int parameter.\n        Type[] helloArgs = {typeof(string), typeof(int)};\n\n        // Create a dynamic method with the name &quot;Hello&quot;, a return type\n        // of int, and two parameters whose types are specified by the\n        // array helloArgs. Create the method in the module that\n        // defines the Test class.\n        DynamicMethod hello = new DynamicMethod(&quot;Hello&quot;, \n            typeof(int), \n            helloArgs, \n            typeof(Test).Module);\n\n        // Create an array that specifies the parameter types of the\n        // overload of Console.WriteLine to be used in Hello.\n        Type[] writeStringArgs = {typeof(string)};\n        // Get the overload of Console.WriteLine that has one\n        // String parameter.\n        MethodInfo writeString = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n        // Get an ILGenerator and emit a body for the dynamic method.\n        ILGenerator il = hello.GetILGenerator();\n        // Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0);\n        // Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, null);\n        // The Hello method returns the value of the second argument;\n        // to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1);\n        il.Emit(OpCodes.Ret);\n\n        // Create a delegate that represents the dynamic method. This\n        // action completes the method, and any further attempts to\n        // change the method will cause an exception.\n        HelloInvoker hi = \n            (HelloInvoker) hello.CreateDelegate(typeof(HelloInvoker));\n\n        // Use the delegate to execute the dynamic method. Save and\n        // print the return value.\n        int retval = hi(&quot;\\r<br>Hello, World!&quot;, 42);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n            retval);\n\n        // Do it again, with different arguments.\n        retval = hi(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n            retval);\n        \n        // Create an array of arguments to use with the Invoke method.\n        object[] invokeArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n        // Invoke the dynamic method using the arguments. This is much\n        // slower than using the delegate, because you must create an\n        // array to contain the arguments, and ValueType arguments\n        // must be boxed.\n        object objRet = hello.Invoke(null, invokeArgs);\n        Console.WriteLine(&quot;hello.Invoke returned {0}&quot;, objRet);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.ctor1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Test\n    &#39; Declare a delegate that will be used to execute the completed\n    &#39; dynamic method. \n    Private Delegate Function HelloInvoker(ByVal msg As String, _\n        ByVal ret As Integer) As Integer\n\n    Public Shared Sub Main()\n        &#39; Create an array that specifies the types of the parameters\n        &#39; of the dynamic method. This method has a String parameter\n        &#39; and an Integer parameter.\n        Dim helloArgs() As Type = {GetType(String), GetType(Integer)}\n\n        &#39; Create a dynamic method with the name &quot;Hello&quot;, a return type\n        &#39; of Integer, and two parameters whose types are specified by\n        &#39; the array helloArgs. Create the method in the module that\n        &#39; defines the Test class.\n        Dim hello As New DynamicMethod(&quot;Hello&quot;, _\n            GetType(Integer), _\n            helloArgs, _\n            GetType(Test).Module)\n\n        &#39; Create an array that specifies the parameter types of the\n        &#39; overload of Console.WriteLine to be used in Hello.\n        Dim writeStringArgs() As Type = {GetType(String)}\n        &#39; Get the overload of Console.WriteLine that has one\n        &#39; String parameter.\n        Dim writeString As MethodInfo = GetType(Console). _\n            GetMethod(&quot;WriteLine&quot;, writeStringArgs) \n\n        &#39; Get an ILGenerator and emit a body for the dynamic method.\n        Dim il As ILGenerator = hello.GetILGenerator()\n        &#39; Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0)\n        &#39; Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, Nothing)\n        &#39; The Hello method returns the value of the second argument;\n        &#39; to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1)\n        il.Emit(OpCodes.Ret)\n\n        &#39; Create a delegate that represents the dynamic method. This\n        &#39; action completes the method, and any further attempts to\n        &#39; change the method will cause an exception.\n\tDim hi As HelloInvoker = _\n            hello.CreateDelegate(GetType(HelloInvoker))\n\n        &#39; Use the delegate to execute the dynamic method. Save and\n        &#39; print the return value.\n        Dim retval As Integer = hi(vbCrLf &amp; &quot;Hello, World!&quot;, 42)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hello, World!&quot;&quot;, 42) returned &quot; _\n            &amp; retval)\n\n        &#39; Do it again, with different arguments.\n        retval = hi(vbCrLf &amp; &quot;Hi, Mom!&quot;, 5280)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hi, Mom!&quot;&quot;, 5280) returned &quot; _\n            &amp; retval)\n\n        &#39; Create an array of arguments to use with the Invoke method.\n        Dim invokeArgs() As Object = {vbCrLf &amp; &quot;Hello, World!&quot;, 42}\n        &#39; Invoke the dynamic method using the arguments. This is much\n        &#39; slower than using the delegate, because you must create an\n        &#39; array to contain the arguments, and ValueType arguments\n        &#39; must be boxed. Note that this overload of Invoke is \n        &#39; inherited from MethodBase, and simply calls the more \n        &#39; complete overload of Invoke.\n        Dim objRet As Object = hello.Invoke(Nothing, invokeArgs)\n        Console.WriteLine(&quot;hello.Invoke returned &quot; &amp; objRet)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Hello, World!\n&#39;Executing delegate hi(&quot;Hello, World!&quot;, 42) returned 42\n&#39;\n&#39;Hi, Mom!\n&#39;Executing delegate hi(&quot;Hi, Mom!&quot;, 5280) returned 5280\n&#39;\n&#39;Hello, World!\n&#39;hello.Invoke returned 42\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.ctor1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Test\n{   \n};\n\n// Declare a delegate that will be used to execute the completed\n// dynamic method.\ndelegate int HelloInvoker(String^ msg, int ret);\n\nint main()\n{\n    // Create an array that specifies the types of the parameters\n    // of the dynamic method. This method has a string parameter\n    // and an int parameter.\n    array&lt;Type^&gt;^ helloArgs = {String::typeid, int::typeid};\n\n    // Create a dynamic method with the name &quot;Hello&quot;, a return type\n    // of int, and two parameters whose types are specified by the\n    // array helloArgs. Create the method in the module that\n    // defines the Test class.\n    DynamicMethod^ hello = gcnew DynamicMethod(&quot;Hello&quot;, \n        int::typeid,\n        helloArgs,\n        Test::typeid-&gt;Module);\n\n    // Create an array that specifies the parameter types of the\n    // overload of Console.WriteLine to be used in Hello.\n    array&lt;Type^&gt;^ writeStringArgs = {String::typeid};\n    // Get the overload of Console.WriteLine that has one\n    // String parameter.\n    MethodInfo^ writeString =\n        Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n    // Get an ILGenerator and emit a body for the dynamic method.\n    ILGenerator^ ilgen = hello-&gt;GetILGenerator();\n    // Load the first argument, which is a string, onto the stack.\n    ilgen-&gt;Emit(OpCodes::Ldarg_0);\n    // Call the overload of Console.WriteLine that prints a string.\n    ilgen-&gt;EmitCall(OpCodes::Call, writeString, nullptr);\n    // The Hello method returns the value of the second argument;\n    // to do this, load the onto the stack and return.\n    ilgen-&gt;Emit(OpCodes::Ldarg_1);\n    ilgen-&gt;Emit(OpCodes::Ret);\n\n    // Create a delegate that represents the dynamic method. This\n    // action completes the method, and any further attempts to\n    // change the method will cause an exception.\n    HelloInvoker^ helloDelegate =\n        (HelloInvoker^) hello-&gt;CreateDelegate(HelloInvoker::typeid);\n\n    // Use the delegate to execute the dynamic method. Save and\n    // print the return value.\n    int returnValue = helloDelegate(&quot;\\r<br>Hello, World!&quot;, 42);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n        returnValue);\n\n    // Do it again, with different arguments.\n    returnValue = helloDelegate(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n        returnValue);\n\n    // Create an array of arguments to use with the Invoke method.\n    array&lt;Object^&gt;^ delegateArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n    // Invoke the dynamic method using the arguments. This is much\n    // slower than using the delegate, because you must create an\n    // array to contain the arguments, and ValueType arguments\n    // must be boxed.\n    Object^ returnValueObject = hello-&gt;Invoke(nullptr, delegateArgs);\n    Console::WriteLine(&quot;hello.Invoke returned {0}&quot;, returnValueObject);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[],Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>owner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is <code>null</code>, or is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method created with this constructor has access to all members of the type <code>owner</code>, and to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the other types in the module that contains <code>owner</code>.  </p>\n<p> This constructor specifies method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>, and does not skip just-in-time (JIT) visibility checks.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>owner</code> is in a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> that is logically associated with a type. This association gives it access to the private members of that type.  </p>\n<p> The code example defines a class named <code>Example</code> with a private field, a class named <code>DerivedFromxample</code> that derives from the first class, a delegate type named <code>UseLikeStatic</code> that returns <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and has parameters of type <code>Example</code> and <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and a delegate type named <code>UseLikeInstance</code> that returns <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and has one parameter of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> The example code then creates a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> that changes the private field of an instance of <code>Example</code> and returns the previous value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In general, changing the internal fields of classes is not good object-oriented coding practice.  </p>\n</div>\n<p> The example code creates an instance of <code>Example</code> and then creates two delegates. The first is of type <code>UseLikeStatic</code>, which has the same parameters as the dynamic method. The second is of type <code>UseLikeInstance</code>, which lacks the first parameter (of type <code>Example</code>). This delegate is created using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_System_Object_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object)</a> method overload; the second parameter of that method overload is an instance of <code>Example</code>, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of <code>Example</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This is an example of the relaxed rules for delegate binding introduced in the .NET Framework 2.0, along with new overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method. For more information, see the <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a> class.  </p>\n</div>\n<p> The <code>UseLikeStatic</code> delegate is invoked, passing in the instance of <code>Example</code> that is bound to the <code>UseLikeInstance</code> delegate. Then the <code>UseLikeInstance</code> delegate is invoked, so that both delegates act on the same instance of <code>Example</code>. The changes in the values of the internal field are displayed after each call. Finally, a <code>UseLikeInstance</code> delegate is bound to an instance of <code>DerivedFromxample</code>, and the delegate calls are repeated.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.ClosedOver#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// These classes are for demonstration purposes.\n//\npublic class Example\n{\n    private int id = 0;\n    public Example(int id)\n    {\n        this.id = id;\n    }\n    public int ID { get { return id; }}\n}\n\npublic class DerivedFromExample : Example\n{\n    public DerivedFromExample(int id) : base(id) {} \n}\n\n// Two delegates are declared: UseLikeInstance treats the dynamic\n// method as if it were an instance method, and UseLikeStatic\n// treats the dynamic method in the ordinary fashion.\n// \npublic delegate int UseLikeInstance(int newID);\npublic delegate int UseLikeStatic(Example ex, int newID);\n\npublic class Demo\n{\n    public static void Main()\n    {\n        // This dynamic method changes the private id field. It has\n        // no name; it returns the old id value (return type int);\n        // it takes two parameters, an instance of Example and \n        // an int that is the new value of id; and it is declared \n        // with Example as the owner type, so it can access all \n        // members, public and private.\n        //\n        DynamicMethod changeID = new DynamicMethod(\n            &quot;&quot;,\n            typeof(int),\n            new Type[] { typeof(Example), typeof(int) },\n            typeof(Example)\n        );\n\n        // Get a FieldInfo for the private field &#39;id&#39;.\n        FieldInfo fid = typeof(Example).GetField(\n            &quot;id&quot;,\n            BindingFlags.NonPublic | BindingFlags.Instance\n        );\n    \n        ILGenerator ilg = changeID.GetILGenerator();\n\n        // Push the current value of the id field onto the \n        // evaluation stack. It&#39;s an instance field, so load the\n        // instance of Example before accessing the field.\n        ilg.Emit(OpCodes.Ldarg_0);\n        ilg.Emit(OpCodes.Ldfld, fid);\n\n        // Load the instance of Example again, load the new value \n        // of id, and store the new field value. \n        ilg.Emit(OpCodes.Ldarg_0);\n        ilg.Emit(OpCodes.Ldarg_1);\n        ilg.Emit(OpCodes.Stfld, fid);\n\n        // The original value of the id field is now the only \n        // thing on the stack, so return from the call.\n        ilg.Emit(OpCodes.Ret);\n\n\n        // Create a delegate that uses changeID in the ordinary\n        // way, as a static method that takes an instance of\n        // Example and an int.\n        //\n        UseLikeStatic uls = \n            (UseLikeStatic) changeID.CreateDelegate(\n                typeof(UseLikeStatic)\n            );\n\n        // Create an instance of Example with an id of 42.\n        //\n        Example ex = new Example(42);\n\n        // Create a delegate that is bound to the instance of \n        // of Example. This is possible because the first \n        // parameter of changeID is of type Example. The \n        // delegate has all the parameters of changeID except\n        // the first.\n        UseLikeInstance uli = \n            (UseLikeInstance) changeID.CreateDelegate(\n                typeof(UseLikeInstance),\n                ex\n            );\n\n        // First, change the value of id by calling changeID as\n        // a static method, passing in the instance of Example.\n        //\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uls(ex, 1492)\n        );\n\n        // Change the value of id again using the delegate bound\n        // to the instance of Example.\n        //\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uli(2700)\n        );\n\n        Console.WriteLine(&quot;Final value of id: {0}&quot;, ex.ID);\n\n\n        // Now repeat the process with a class that derives\n        // from Example.\n        //\n        DerivedFromExample dfex = new DerivedFromExample(71);\n\n        uli = (UseLikeInstance) changeID.CreateDelegate(\n                typeof(UseLikeInstance),\n                dfex\n            );\n\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uls(dfex, 73)\n        );\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uli(79)\n        );\n        Console.WriteLine(&quot;Final value of id: {0}&quot;, dfex.ID);\n    }\n}\n\n/* This code example produces the following output:\n\nChange the value of id; previous value: 42\nChange the value of id; previous value: 1492\nFinal value of id: 2700\nChange the value of id; previous value: 71\nChange the value of id; previous value: 73\nFinal value of id: 79\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.ClosedOver#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\n&#39; These classes are for demonstration purposes.\n&#39;\nPublic Class Example\n    Private _id As Integer = 0\n    \n    Public Sub New(ByVal newId As Integer) \n        _id = newId    \n    End Sub\n    \n    Public ReadOnly Property ID() As Integer \n        Get\n            Return _id\n        End Get\n    End Property \nEnd Class\n\nPublic Class DerivedFromExample\n    Inherits Example\n    \n    Public Sub New(ByVal newId As Integer) \n        MyBase.New(newId)\n    End Sub\nEnd Class\n \n&#39; Two delegates are declared: UseLikeInstance treats the dynamic\n&#39; method as if it were an instance method, and UseLikeStatic\n&#39; treats the dynamic method in the ordinary fashion.\n&#39; \nPublic Delegate Function UseLikeInstance(ByVal newID As Integer) _\n    As Integer \nPublic Delegate Function UseLikeStatic(ByVal ex As Example, _\n    ByVal newID As Integer) As Integer \n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n        &#39; This dynamic method changes the private _id field. It \n        &#39; has no name; it returns the old _id value (return type \n        &#39; Integer); it takes two parameters, an instance of Example \n        &#39; and an Integer that is the new value of _id; and it is \n        &#39; declared with Example as the owner type, so it can \n        &#39; access all members, public and private.\n        &#39;\n        Dim changeID As New DynamicMethod( _\n            &quot;&quot;, _\n            GetType(Integer), _\n            New Type() {GetType(Example), GetType(Integer)}, _\n            GetType(Example) _\n        )\n        \n        &#39; Get a FieldInfo for the private field &#39;_id&#39;.\n        Dim fid As FieldInfo = GetType(Example).GetField( _\n            &quot;_id&quot;, _\n            BindingFlags.NonPublic Or BindingFlags.Instance _\n        )\n        \n        Dim ilg As ILGenerator = changeID.GetILGenerator()\n        \n        &#39; Push the current value of the id field onto the \n        &#39; evaluation stack. It&#39;s an instance field, so load the\n        &#39; instance of Example before accessing the field.\n        ilg.Emit(OpCodes.Ldarg_0)\n        ilg.Emit(OpCodes.Ldfld, fid)\n        \n        &#39; Load the instance of Example again, load the new value \n        &#39; of id, and store the new field value. \n        ilg.Emit(OpCodes.Ldarg_0)\n        ilg.Emit(OpCodes.Ldarg_1)\n        ilg.Emit(OpCodes.Stfld, fid)\n        \n        &#39; The original value of the id field is now the only \n        &#39; thing on the stack, so return from the call.\n        ilg.Emit(OpCodes.Ret)\n        \n        \n        &#39; Create a delegate that uses changeID in the ordinary\n        &#39; way, as a static method that takes an instance of\n        &#39; Example and an Integer.\n        &#39;\n        Dim uls As UseLikeStatic = CType( _\n            changeID.CreateDelegate(GetType(UseLikeStatic)), _\n            UseLikeStatic _\n        )\n        \n        &#39; Create an instance of Example with an id of 42.\n        &#39;\n        Dim ex As New Example(42)\n        \n        &#39; Create a delegate that is bound to the instance of \n        &#39; of Example. This is possible because the first \n        &#39; parameter of changeID is of type Example. The \n        &#39; delegate has all the parameters of changeID except\n        &#39; the first.\n        Dim uli As UseLikeInstance = CType( _\n            changeID.CreateDelegate( _\n                GetType(UseLikeInstance), _\n                ex), _\n            UseLikeInstance _\n        )\n        \n        &#39; First, change the value of _id by calling changeID as\n        &#39; a static method, passing in the instance of Example.\n        &#39;\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uls(ex, 1492) _\n        )\n        \n        &#39; Change the value of _id again using the delegate \n        &#39; bound to the instance of Example.\n        &#39;\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uli(2700) _\n        )\n        \n        Console.WriteLine(&quot;Final value of _id: {0}&quot;, ex.ID)\n    \n\n        &#39; Now repeat the process with a class that derives\n        &#39; from Example.\n        &#39;\n        Dim dfex As New DerivedFromExample(71)\n\n        uli = CType( _\n            changeID.CreateDelegate( _\n                GetType(UseLikeInstance), _\n                dfex), _\n            UseLikeInstance _\n        )\n\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uls(dfex, 73) _\n        )\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uli(79) _\n        )\n        Console.WriteLine(&quot;Final value of _id: {0}&quot;, dfex.ID)\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Change the value of _id; previous value: 42\n&#39;Change the value of _id; previous value: 1492\n&#39;Final value of _id: 2700\n&#39;Change the value of _id; previous value: 71\n&#39;Change the value of _id; previous value: 73\n&#39;Final value of _id: 79&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Reflection_Module_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[],Module,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> representing the module with which the dynamic method is to be logically associated.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipVisibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is a module that provides anonymous hosting for dynamic methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor specifies method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, and calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>.  </p>\n<p> The dynamic method created with this constructor has access to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the types in contained module <code>m</code>. Skipping the JIT compiler&#39;s visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>m</code> is a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Type_System_Type___System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,Type,Type[],Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>owner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipVisibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>returnType</code> is <code>null</code>, or is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method created with this constructor has access to all members of the type <code>owner</code>, and to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the other types in the module that contains <code>owner</code>. Skipping the JIT compiler&#39;s visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  </p>\n<p> This constructor specifies method attributes <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">System.Reflection.MethodAttributes</a>, and calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>owner</code> is in a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Reflection_Module_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> values that specifies the attributes of the dynamic method. The only combination allowed is <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the dynamic method. Must be <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipVisibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is a module that provides anonymous hosting for dynamic methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>m</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>attributes</code> is a combination of flags other than <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.  </p>\n<p> -or-  </p>\n<p> <code>callingConvention</code> is not <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.  </p>\n<p> -or-  </p>\n<p> <code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method created with this constructor has access to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the public and internal types contained in module <code>m</code>.  </p>\n<p> Skipping the JIT compiler&#39;s visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>m</code> is a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod__ctor_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic method. This can be a zero-length string, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> values that specifies the attributes of the dynamic method. The only combination allowed is <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the dynamic method. Must be <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that specifies the return type of the dynamic method, or <code>null</code> if the method has no return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects specifying the types of the parameters of the dynamic method, or <code>null</code> if the method has no parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>owner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipVisibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element of <code>parameterTypes</code> is <code>null</code> or <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>owner</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>attributes</code> is a combination of flags other than <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.  </p>\n<p> -or-  </p>\n<p> <code>callingConvention</code> is not <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.  </p>\n<p> -or-  </p>\n<p> <code>returnType</code> is a type for which <span class=\"xref\">stem.Type.IsByRef*</span> returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The dynamic method is global to the module that contains the type <code>owner</code>. It has access to all members of the type <code>owner</code>.  </p>\n<p> The dynamic method created with this constructor has access to all members of the type <code>owner</code>, and to public and <code>internal</code> (<code>Friend</code> in Visual Basic) members of all the types contained in the module that contains <code>owner</code>. Skipping the JIT compiler&#39;s visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For backward compatibility, this constructor demands <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag if the following conditions are both true: <code>owner</code> is in a module other than the calling module, and the demand for <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag has failed. If the demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> succeeds, the operation is allowed.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes specified when the dynamic method was created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> values representing the attributes for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently, the method attributes for a dynamic method are always <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the method attributes of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#21\">        // Display MethodAttributes for the dynamic method, set when \n        // the dynamic method was created.\n        Console.WriteLine(&quot;\\r<br>Method Attributes: {0}&quot;, hello.Attributes);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#21\">    // Display MethodAttributes for the dynamic method, set when \n    // the dynamic method was created.\n    Console::WriteLine(&quot;\\r<br>Method Attributes: {0}&quot;, hello-&gt;Attributes);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#21\">        &#39; Display MethodAttributes for the dynamic method, set when \n        &#39; the dynamic method was created.\n        Console.WriteLine(vbCrLf &amp; &quot;Method Attributes: {0}&quot;, _\n            hello.Attributes)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_CallingConvention\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_CallingConvention_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CallingConvention</div>        \r\n          </div>\r\n    \r\n            <p>Gets the calling convention specified when the dynamic method was created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.CallingConventions CallingConvention { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a> values that indicates the calling convention of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently, the calling convention for a dynamic method is always <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the calling convention of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#22\">        // Display the calling convention of the dynamic method, set when the \n        // dynamic method was created.\n        Console.WriteLine(&quot;\\r<br>Calling convention: {0}&quot;, hello.CallingConvention);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#22\">    // Display the calling convention of the dynamic method, set when the \n    // dynamic method was created.\n    Console::WriteLine(&quot;\\r<br>Calling convention: {0}&quot;, hello-&gt;CallingConvention);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#22\">        &#39; Display the calling convention of the dynamic method, set when the \n        &#39; dynamic method was created.\n        Console.WriteLine(vbCrLf &amp; &quot;Calling convention: {0}&quot;, _ \n            hello.CallingConvention)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that declares the method, which is always <code>null</code> for dynamic methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Always <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property always returns <code>null</code> for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the declaring type of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#23\">        // Display the declaring type, which is always null for dynamic\n        // methods.\n        if (hello.DeclaringType == null)\n        {\n            Console.WriteLine(&quot;\\r<br>DeclaringType is always null for dynamic methods.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;DeclaringType: {0}&quot;, hello.DeclaringType);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#23\">    // Display the declaring type, which is always null for dynamic\n    // methods.\n    if (hello-&gt;DeclaringType == nullptr)\n    {\n        Console::WriteLine(&quot;\\r<br>DeclaringType is always null for dynamic methods.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;DeclaringType: {0}&quot;, hello-&gt;DeclaringType);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#23\">        &#39; Display the declaring type, which is always Nothing for dynamic\n        &#39; methods.\n        If hello.DeclaringType Is Nothing Then\n            Console.WriteLine(vbCrLf &amp; &quot;DeclaringType is always Nothing for dynamic methods.&quot;)\n        Else\n            Console.WriteLine(&quot;DeclaringType: {0}&quot;, hello.DeclaringType)\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_InitLocals\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_InitLocals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitLocals</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the local variables in the method are zero-initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool InitLocals { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the local variables in the method are zero-initialized; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this property is set to <code>true</code>, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to <code>false</code>, local variables are not initialized and the generated code is unverifiable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the InitLocals property of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#24\">        // Display the default value for InitLocals.\n        if (hello.InitLocals)\n        {\n            Console.Write(&quot;\\r<br>This method contains verifiable code.&quot;);\n        }\n        else\n        {\n            Console.Write(&quot;\\r<br>This method contains unverifiable code.&quot;);\n        }\n        Console.WriteLine(&quot; (InitLocals = {0})&quot;, hello.InitLocals);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#24\">    // Display the default value for InitLocals.\n    if (hello-&gt;InitLocals)\n    {\n        Console::Write(&quot;\\r<br>This method contains verifiable code.&quot;);\n    }\n    else\n    {\n        Console::Write(&quot;\\r<br>This method contains unverifiable code.&quot;);\n    }\n    Console::WriteLine(&quot; (InitLocals = {0})&quot;, hello-&gt;InitLocals);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#24\">        &#39; Display the default value for InitLocals.\n        If hello.InitLocals Then\n            Console.Write(vbCrLf &amp; &quot;This method contains verifiable code.&quot;)\n        Else\n            Console.Write(vbCrLf &amp; &quot;This method contains unverifiable code.&quot;)\n        End If\n        Console.WriteLine(&quot; (InitLocals = {0})&quot;, hello.InitLocals)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_IsSecurityCritical\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_IsSecurityCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecurityCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current dynamic method is security-critical or security-safe-critical; <code>false</code> if it is transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method doesn&#39;t have a method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsSecurityCritical, <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  </p>\n<ul>\n<li><p>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  </p>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Assembly annotation</th>\n<th>Level 1 transparency</th>\n<th>Level 2 transparency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fully transparent</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Fully critical</td>\n<td>Critical</td>\n<td>Critical</td>\n</tr>\n<tr>\n<td>Mixed transparency</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Security-agnostic</td>\n<td>Safe-critical</td>\n<td>Critical</td>\n</tr>\n</tbody>\n</table>\n<p> For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see <a href=\"../Topic/Security-Transparent%20Code,%20Level%201.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 1</a> and <a href=\"../Topic/Security-Transparent%20Code,%20Level%202.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 2</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the dynamic method is called.  </p>\n</div>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly&#39;s annotations.  </p>\n<p>For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_IsSecuritySafeCritical\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_IsSecuritySafeCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecuritySafeCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecuritySafeCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the dynamic method is security-safe-critical at the current trust level; <code>false</code> if it is security-critical or transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method doesn&#39;t have a method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, IsSecuritySafeCritical, and <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  </p>\n<ul>\n<li><p>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  </p>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Assembly annotation</th>\n<th>Level 1 transparency</th>\n<th>Level 2 transparency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fully transparent</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Fully critical</td>\n<td>Critical</td>\n<td>Critical</td>\n</tr>\n<tr>\n<td>Mixed transparency</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Security-agnostic</td>\n<td>Safe-critical</td>\n<td>Critical</td>\n</tr>\n</tbody>\n</table>\n<p> For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see <a href=\"../Topic/Security-Transparent%20Code,%20Level%201.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 1</a> and <a href=\"../Topic/Security-Transparent%20Code,%20Level%202.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 2</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the dynamic method is called.  </p>\n</div>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly&#39;s annotations.  </p>\n<p>For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_IsSecurityTransparent\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_IsSecurityTransparent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityTransparent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecurityTransparent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the dynamic method is security-transparent at the current trust level; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method doesn&#39;t have a method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and IsSecurityTransparent properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  </p>\n<ul>\n<li><p>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  </p>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Assembly annotation</th>\n<th>Level 1 transparency</th>\n<th>Level 2 transparency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fully transparent</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Fully critical</td>\n<td>Critical</td>\n<td>Critical</td>\n</tr>\n<tr>\n<td>Mixed transparency</td>\n<td>Transparent</td>\n<td>Transparent</td>\n</tr>\n<tr>\n<td>Security-agnostic</td>\n<td>Safe-critical</td>\n<td>Critical</td>\n</tr>\n</tbody>\n</table>\n<p> For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see <a href=\"../Topic/Security-Transparent%20Code,%20Level%201.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 1</a> and <a href=\"../Topic/Security-Transparent%20Code,%20Level%202.md\" data-linktype=\"relative-path\">Security-Transparent Code, Level 2</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the dynamic method is called.  </p>\n</div>\n</li>\n<li><p>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly&#39;s annotations.  </p>\n<p>For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_MethodHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_MethodHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodHandle</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for dynamic methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeMethodHandle MethodHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a></div>\r\n                  </div>\r\n                  <p>Not supported for dynamic methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Not allowed for dynamic methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Gets the module with which the dynamic method is logically associated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> with which the current dynamic method is associated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the Module property of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#26\">        // Display the module specified when the dynamic method was created.\n        Console.WriteLine(&quot;\\r<br>Module: {0}&quot;, hello.Module);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#26\">    // Display the module specified when the dynamic method was created.\n    Console::WriteLine(&quot;\\r<br>Module: {0}&quot;, hello-&gt;Module);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#26\">        &#39; Display the module specified when the dynamic method was created.\n        Console.WriteLine(vbCrLf &amp; &quot;Module: {0}&quot;, hello.Module)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The simple name of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> It is not necessary to name dynamic methods.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the name of a dynamic method. This code example is part of a larger example provided for  the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#27\">        // Display the name specified when the dynamic method was created.\n        // Note that the name can be blank.\n        Console.WriteLine(&quot;\\r<br>Name: {0}&quot;, hello.Name);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#27\">    // Display the name specified when the dynamic method was created.\n    // Note that the name can be blank.\n    Console::WriteLine(&quot;\\r<br>Name: {0}&quot;, hello-&gt;Name);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#27\">        &#39; Display the name specified when the dynamic method was created.\n        &#39; Note that the name can be blank.\n        Console.WriteLine(vbCrLf &amp; &quot;Name: {0}&quot;, hello.Name)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the class that was used in reflection to obtain the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Always <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property always returns <code>null</code> for dynamic methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the reflected type of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#28\">        // For dynamic methods, the reflected type is always null.\n        if (hello.ReflectedType == null)\n        {\n            Console.WriteLine(&quot;\\r<br>ReflectedType is null.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;\\r<br>ReflectedType: {0}&quot;, hello.ReflectedType);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#28\">    // For dynamic methods, the reflected type is always null.\n    if (hello-&gt;ReflectedType == nullptr)\n    {\n        Console::WriteLine(&quot;\\r<br>ReflectedType is null.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;\\r<br>ReflectedType: {0}&quot;, hello-&gt;ReflectedType);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#28\">        &#39; For dynamic methods, the reflected type is always Nothing.\n        If hello.ReflectedType Is Nothing Then\n            Console.WriteLine(vbCrLf &amp; &quot;ReflectedType is Nothing.&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;ReflectedType: {0}&quot;, _\n                hello.ReflectedType)\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_ReturnParameter\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_ReturnParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets the return parameter of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ParameterInfo ReturnParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </div>\r\n                  <p>Always <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property always returns <code>null</code> for dynamic methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_ReturnType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_ReturnType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of return value for the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReturnType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the type of the return value of the current method; <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> if the method has no return type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>null</code> was specified for the return type when the dynamic method was created, this property returns <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">System.Void</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the return type of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#30\">        // If the method has no return type, ReturnType is System.Void.\n        Console.WriteLine(&quot;\\r<br>Return type: {0}&quot;, hello.ReturnType);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#30\">    // If the method has no return type, ReturnType is System.Void.\n    Console::WriteLine(&quot;\\r<br>Return type: {0}&quot;, hello-&gt;ReturnType);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#30\">        &#39; If the method has no return type, ReturnType is System.Void.\n        Console.WriteLine(vbCrLf &amp; &quot;Return type: {0}&quot;, hello.ReturnType)           \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_ReturnTypeCustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_ReturnTypeCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnTypeCustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes of the return type for the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> representing the custom attributes of the return type for the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <a class=\"xref\" href=\"system.reflection.icustomattributeprovider#System_Reflection_ICustomAttributeProvider_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is always empty.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to display the custom attributes of the return type of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#31\">        // ReturnTypeCustomAttributes returns an ICustomeAttributeProvider\n        // that can be used to enumerate the custom attributes of the\n        // return value. At present, there is no way to set such custom\n        // attributes, so the list is empty.\n        if (hello.ReturnType == typeof(void))\n        {\n            Console.WriteLine(&quot;The method has no return type.&quot;);\n        }\n        else\n        {\n            ICustomAttributeProvider caProvider = hello.ReturnTypeCustomAttributes;\n            object[] returnAttributes = caProvider.GetCustomAttributes(true);\n            if (returnAttributes.Length == 0)\n            {\n                Console.WriteLine(&quot;\\r<br>The return type has no custom attributes.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;\\r<br>The return type has the following custom attributes:&quot;);\n                foreach( object attr in returnAttributes )\n                {\n                    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, attr.ToString());\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#31\">    // ReturnTypeCustomAttributes returns an ICustomeAttributeProvider\n    // that can be used to enumerate the custom attributes of the\n    // return value. At present, there is no way to set such custom\n    // attributes, so the list is empty.\n    if (hello-&gt;ReturnType == Void::typeid)\n    {\n        Console::WriteLine(&quot;The method has no return type.&quot;);\n    }\n    else\n    {\n        ICustomAttributeProvider^ caProvider = hello-&gt;ReturnTypeCustomAttributes;\n        array&lt;Object^&gt;^ returnAttributes = caProvider-&gt;GetCustomAttributes(true);\n        if (returnAttributes-&gt;Length == 0)\n        {\n            Console::WriteLine(&quot;\\r<br>The return type has no custom attributes.&quot;);\n        }\n        else\n        {\n            Console::WriteLine(&quot;\\r<br>The return type has the following custom attributes:&quot;);\n            for each (Object^ attr in returnAttributes)\n            {\n                Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, attr-&gt;ToString());\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#31\">        &#39; ReturnTypeCustomAttributes returns an ICustomeAttributeProvider\n        &#39; that can be used to enumerate the custom attributes of the\n        &#39; return value. At present, there is no way to set such custom\n        &#39; attributes, so the list is empty.\n        If hello.ReturnType Is GetType(System.Void) Then\n            Console.WriteLine(&quot;The method has no return type.&quot;)\n        Else\n            Dim caProvider As ICustomAttributeProvider = _\n                hello.ReturnTypeCustomAttributes\n            Dim returnAttributes() As Object = _\n                caProvider.GetCustomAttributes(True)\n            If returnAttributes.Length = 0 Then\n                Console.WriteLine(vbCrLf _\n                    &amp; &quot;The return type has no custom attributes.&quot;)\n            Else\n                Console.WriteLine(vbCrLf _\n                    &amp; &quot;The return type has the following custom attributes:&quot;)\n                For Each attr As Object In returnAttributes\n                    Console.WriteLine(vbTab &amp; attr.ToString())\n                Next attr\n            End If\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the dynamic method and creates a delegate that can be used to execute it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override sealed Delegate CreateDelegate (Type delegateType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate type whose signature matches that of the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type, which can be used to execute the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method has no method body.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>delegateType</code> has the wrong number of parameters or the wrong parameter types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the CreateDelegate method or the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  </p>\n<p> To create a method body for a dynamic method when you have your own MSIL generator, call the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetDynamicILInfo_\" data-linktype=\"relative-path\">GetDynamicILInfo</a> method to obtain a <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. If you do not have your own MSIL generator, call the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetILGenerator_\" data-linktype=\"relative-path\">GetILGenerator</a> method to obtain an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object that can be used to generate the method body.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.ctor1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Test\n{\n    // Declare a delegate that will be used to execute the completed\n    // dynamic method. \n    private delegate int HelloInvoker(string msg, int ret);\n\n    public static void Main()\n    {\n        // Create an array that specifies the types of the parameters\n        // of the dynamic method. This method has a string parameter\n        // and an int parameter.\n        Type[] helloArgs = {typeof(string), typeof(int)};\n\n        // Create a dynamic method with the name &quot;Hello&quot;, a return type\n        // of int, and two parameters whose types are specified by the\n        // array helloArgs. Create the method in the module that\n        // defines the Test class.\n        DynamicMethod hello = new DynamicMethod(&quot;Hello&quot;, \n            typeof(int), \n            helloArgs, \n            typeof(Test).Module);\n\n        // Create an array that specifies the parameter types of the\n        // overload of Console.WriteLine to be used in Hello.\n        Type[] writeStringArgs = {typeof(string)};\n        // Get the overload of Console.WriteLine that has one\n        // String parameter.\n        MethodInfo writeString = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n        // Get an ILGenerator and emit a body for the dynamic method.\n        ILGenerator il = hello.GetILGenerator();\n        // Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0);\n        // Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, null);\n        // The Hello method returns the value of the second argument;\n        // to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1);\n        il.Emit(OpCodes.Ret);\n\n        // Create a delegate that represents the dynamic method. This\n        // action completes the method, and any further attempts to\n        // change the method will cause an exception.\n        HelloInvoker hi = \n            (HelloInvoker) hello.CreateDelegate(typeof(HelloInvoker));\n\n        // Use the delegate to execute the dynamic method. Save and\n        // print the return value.\n        int retval = hi(&quot;\\r<br>Hello, World!&quot;, 42);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n            retval);\n\n        // Do it again, with different arguments.\n        retval = hi(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n            retval);\n        \n        // Create an array of arguments to use with the Invoke method.\n        object[] invokeArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n        // Invoke the dynamic method using the arguments. This is much\n        // slower than using the delegate, because you must create an\n        // array to contain the arguments, and ValueType arguments\n        // must be boxed.\n        object objRet = hello.Invoke(null, invokeArgs);\n        Console.WriteLine(&quot;hello.Invoke returned {0}&quot;, objRet);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.ctor1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Test\n    &#39; Declare a delegate that will be used to execute the completed\n    &#39; dynamic method. \n    Private Delegate Function HelloInvoker(ByVal msg As String, _\n        ByVal ret As Integer) As Integer\n\n    Public Shared Sub Main()\n        &#39; Create an array that specifies the types of the parameters\n        &#39; of the dynamic method. This method has a String parameter\n        &#39; and an Integer parameter.\n        Dim helloArgs() As Type = {GetType(String), GetType(Integer)}\n\n        &#39; Create a dynamic method with the name &quot;Hello&quot;, a return type\n        &#39; of Integer, and two parameters whose types are specified by\n        &#39; the array helloArgs. Create the method in the module that\n        &#39; defines the Test class.\n        Dim hello As New DynamicMethod(&quot;Hello&quot;, _\n            GetType(Integer), _\n            helloArgs, _\n            GetType(Test).Module)\n\n        &#39; Create an array that specifies the parameter types of the\n        &#39; overload of Console.WriteLine to be used in Hello.\n        Dim writeStringArgs() As Type = {GetType(String)}\n        &#39; Get the overload of Console.WriteLine that has one\n        &#39; String parameter.\n        Dim writeString As MethodInfo = GetType(Console). _\n            GetMethod(&quot;WriteLine&quot;, writeStringArgs) \n\n        &#39; Get an ILGenerator and emit a body for the dynamic method.\n        Dim il As ILGenerator = hello.GetILGenerator()\n        &#39; Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0)\n        &#39; Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, Nothing)\n        &#39; The Hello method returns the value of the second argument;\n        &#39; to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1)\n        il.Emit(OpCodes.Ret)\n\n        &#39; Create a delegate that represents the dynamic method. This\n        &#39; action completes the method, and any further attempts to\n        &#39; change the method will cause an exception.\n\tDim hi As HelloInvoker = _\n            hello.CreateDelegate(GetType(HelloInvoker))\n\n        &#39; Use the delegate to execute the dynamic method. Save and\n        &#39; print the return value.\n        Dim retval As Integer = hi(vbCrLf &amp; &quot;Hello, World!&quot;, 42)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hello, World!&quot;&quot;, 42) returned &quot; _\n            &amp; retval)\n\n        &#39; Do it again, with different arguments.\n        retval = hi(vbCrLf &amp; &quot;Hi, Mom!&quot;, 5280)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hi, Mom!&quot;&quot;, 5280) returned &quot; _\n            &amp; retval)\n\n        &#39; Create an array of arguments to use with the Invoke method.\n        Dim invokeArgs() As Object = {vbCrLf &amp; &quot;Hello, World!&quot;, 42}\n        &#39; Invoke the dynamic method using the arguments. This is much\n        &#39; slower than using the delegate, because you must create an\n        &#39; array to contain the arguments, and ValueType arguments\n        &#39; must be boxed. Note that this overload of Invoke is \n        &#39; inherited from MethodBase, and simply calls the more \n        &#39; complete overload of Invoke.\n        Dim objRet As Object = hello.Invoke(Nothing, invokeArgs)\n        Console.WriteLine(&quot;hello.Invoke returned &quot; &amp; objRet)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Hello, World!\n&#39;Executing delegate hi(&quot;Hello, World!&quot;, 42) returned 42\n&#39;\n&#39;Hi, Mom!\n&#39;Executing delegate hi(&quot;Hi, Mom!&quot;, 5280) returned 5280\n&#39;\n&#39;Hello, World!\n&#39;hello.Invoke returned 42\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.ctor1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Test\n{   \n};\n\n// Declare a delegate that will be used to execute the completed\n// dynamic method.\ndelegate int HelloInvoker(String^ msg, int ret);\n\nint main()\n{\n    // Create an array that specifies the types of the parameters\n    // of the dynamic method. This method has a string parameter\n    // and an int parameter.\n    array&lt;Type^&gt;^ helloArgs = {String::typeid, int::typeid};\n\n    // Create a dynamic method with the name &quot;Hello&quot;, a return type\n    // of int, and two parameters whose types are specified by the\n    // array helloArgs. Create the method in the module that\n    // defines the Test class.\n    DynamicMethod^ hello = gcnew DynamicMethod(&quot;Hello&quot;, \n        int::typeid,\n        helloArgs,\n        Test::typeid-&gt;Module);\n\n    // Create an array that specifies the parameter types of the\n    // overload of Console.WriteLine to be used in Hello.\n    array&lt;Type^&gt;^ writeStringArgs = {String::typeid};\n    // Get the overload of Console.WriteLine that has one\n    // String parameter.\n    MethodInfo^ writeString =\n        Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n    // Get an ILGenerator and emit a body for the dynamic method.\n    ILGenerator^ ilgen = hello-&gt;GetILGenerator();\n    // Load the first argument, which is a string, onto the stack.\n    ilgen-&gt;Emit(OpCodes::Ldarg_0);\n    // Call the overload of Console.WriteLine that prints a string.\n    ilgen-&gt;EmitCall(OpCodes::Call, writeString, nullptr);\n    // The Hello method returns the value of the second argument;\n    // to do this, load the onto the stack and return.\n    ilgen-&gt;Emit(OpCodes::Ldarg_1);\n    ilgen-&gt;Emit(OpCodes::Ret);\n\n    // Create a delegate that represents the dynamic method. This\n    // action completes the method, and any further attempts to\n    // change the method will cause an exception.\n    HelloInvoker^ helloDelegate =\n        (HelloInvoker^) hello-&gt;CreateDelegate(HelloInvoker::typeid);\n\n    // Use the delegate to execute the dynamic method. Save and\n    // print the return value.\n    int returnValue = helloDelegate(&quot;\\r<br>Hello, World!&quot;, 42);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n        returnValue);\n\n    // Do it again, with different arguments.\n    returnValue = helloDelegate(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n        returnValue);\n\n    // Create an array of arguments to use with the Invoke method.\n    array&lt;Object^&gt;^ delegateArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n    // Invoke the dynamic method using the arguments. This is much\n    // slower than using the delegate, because you must create an\n    // array to contain the arguments, and ValueType arguments\n    // must be boxed.\n    Object^ returnValueObject = hello-&gt;Invoke(nullptr, delegateArgs);\n    Console::WriteLine(&quot;hello.Invoke returned {0}&quot;, returnValueObject);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override sealed Delegate CreateDelegate (Type delegateType, object target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate type whose signature matches that of the dynamic method, minus the first parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method has no method body.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  </p>\n<p> -or-  </p>\n<p> <code>delegateType</code> has the wrong number of parameters or the wrong parameter types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is <code>target</code>.  </p>\n<p> This method overload requires <code>target</code> to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of <code>delegateType</code> has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, then <code>delegateType</code> has the parameters <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>; <code>target</code> is of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> Calling the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method or the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  </p>\n<p> To create a method body for a dynamic method when you have your own MSIL generator, call the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetDynamicILInfo_\" data-linktype=\"relative-path\">GetDynamicILInfo</a> method to obtain a <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. If you do not have your own MSIL generator, call the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetILGenerator_\" data-linktype=\"relative-path\">GetILGenerator</a> method to obtain an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object that can be used to generate the method body.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates delegate that binds a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> to an instance of a type, so that the method acts on the same instance each time it is invoked.  </p>\n<p> The code example defines a class named <code>Example</code> with a private field, a class named <code>DerivedFromxample</code> that derives from the first class, a delegate type named <code>UseLikeStatic</code> that returns <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and has parameters of type <code>Example</code> and <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and a delegate type named <code>UseLikeInstance</code> that returns <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and has one parameter of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> The example code then creates a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> that changes the private field of an instance of <code>Example</code> and returns the previous value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In general, changing the internal fields of classes is not good object-oriented coding practice.  </p>\n</div>\n<p> The example code creates an instance of <code>Example</code> and then creates two delegates. The first is of type <code>UseLikeStatic</code>, which has the same parameters as the dynamic method. The second is of type <code>UseLikeInstance</code>, which lacks the first parameter (of type <code>Example</code>). This delegate is created using the CreateDelegate method overload; the second parameter of that method overload is an instance of <code>Example</code>, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of <code>Example</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This is an example of the relaxed rules for delegate binding introduced in the .NET Framework 2.0, along with new overloads of the <a class=\"xref\" href=\"system.delegate#System_Delegate_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method. For more information, see the <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a> class.  </p>\n</div>\n<p> The <code>UseLikeStatic</code> delegate is invoked, passing in the instance of <code>Example</code> that is bound to the <code>UseLikeInstance</code> delegate. Then the <code>UseLikeInstance</code> delegate is invoked, so that both delegates act on the same instance of <code>Example</code>. The changes in the values of the internal field are displayed after each call. Finally, a <code>UseLikeInstance</code> delegate is bound to an instance of <code>DerivedFromxample</code>, and the delegate calls are repeated.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.ClosedOver#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// These classes are for demonstration purposes.\n//\npublic class Example\n{\n    private int id = 0;\n    public Example(int id)\n    {\n        this.id = id;\n    }\n    public int ID { get { return id; }}\n}\n\npublic class DerivedFromExample : Example\n{\n    public DerivedFromExample(int id) : base(id) {} \n}\n\n// Two delegates are declared: UseLikeInstance treats the dynamic\n// method as if it were an instance method, and UseLikeStatic\n// treats the dynamic method in the ordinary fashion.\n// \npublic delegate int UseLikeInstance(int newID);\npublic delegate int UseLikeStatic(Example ex, int newID);\n\npublic class Demo\n{\n    public static void Main()\n    {\n        // This dynamic method changes the private id field. It has\n        // no name; it returns the old id value (return type int);\n        // it takes two parameters, an instance of Example and \n        // an int that is the new value of id; and it is declared \n        // with Example as the owner type, so it can access all \n        // members, public and private.\n        //\n        DynamicMethod changeID = new DynamicMethod(\n            &quot;&quot;,\n            typeof(int),\n            new Type[] { typeof(Example), typeof(int) },\n            typeof(Example)\n        );\n\n        // Get a FieldInfo for the private field &#39;id&#39;.\n        FieldInfo fid = typeof(Example).GetField(\n            &quot;id&quot;,\n            BindingFlags.NonPublic | BindingFlags.Instance\n        );\n    \n        ILGenerator ilg = changeID.GetILGenerator();\n\n        // Push the current value of the id field onto the \n        // evaluation stack. It&#39;s an instance field, so load the\n        // instance of Example before accessing the field.\n        ilg.Emit(OpCodes.Ldarg_0);\n        ilg.Emit(OpCodes.Ldfld, fid);\n\n        // Load the instance of Example again, load the new value \n        // of id, and store the new field value. \n        ilg.Emit(OpCodes.Ldarg_0);\n        ilg.Emit(OpCodes.Ldarg_1);\n        ilg.Emit(OpCodes.Stfld, fid);\n\n        // The original value of the id field is now the only \n        // thing on the stack, so return from the call.\n        ilg.Emit(OpCodes.Ret);\n\n\n        // Create a delegate that uses changeID in the ordinary\n        // way, as a static method that takes an instance of\n        // Example and an int.\n        //\n        UseLikeStatic uls = \n            (UseLikeStatic) changeID.CreateDelegate(\n                typeof(UseLikeStatic)\n            );\n\n        // Create an instance of Example with an id of 42.\n        //\n        Example ex = new Example(42);\n\n        // Create a delegate that is bound to the instance of \n        // of Example. This is possible because the first \n        // parameter of changeID is of type Example. The \n        // delegate has all the parameters of changeID except\n        // the first.\n        UseLikeInstance uli = \n            (UseLikeInstance) changeID.CreateDelegate(\n                typeof(UseLikeInstance),\n                ex\n            );\n\n        // First, change the value of id by calling changeID as\n        // a static method, passing in the instance of Example.\n        //\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uls(ex, 1492)\n        );\n\n        // Change the value of id again using the delegate bound\n        // to the instance of Example.\n        //\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uli(2700)\n        );\n\n        Console.WriteLine(&quot;Final value of id: {0}&quot;, ex.ID);\n\n\n        // Now repeat the process with a class that derives\n        // from Example.\n        //\n        DerivedFromExample dfex = new DerivedFromExample(71);\n\n        uli = (UseLikeInstance) changeID.CreateDelegate(\n                typeof(UseLikeInstance),\n                dfex\n            );\n\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uls(dfex, 73)\n        );\n        Console.WriteLine(\n            &quot;Change the value of id; previous value: {0}&quot;,\n            uli(79)\n        );\n        Console.WriteLine(&quot;Final value of id: {0}&quot;, dfex.ID);\n    }\n}\n\n/* This code example produces the following output:\n\nChange the value of id; previous value: 42\nChange the value of id; previous value: 1492\nFinal value of id: 2700\nChange the value of id; previous value: 71\nChange the value of id; previous value: 73\nFinal value of id: 79\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.ClosedOver#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\n&#39; These classes are for demonstration purposes.\n&#39;\nPublic Class Example\n    Private _id As Integer = 0\n    \n    Public Sub New(ByVal newId As Integer) \n        _id = newId    \n    End Sub\n    \n    Public ReadOnly Property ID() As Integer \n        Get\n            Return _id\n        End Get\n    End Property \nEnd Class\n\nPublic Class DerivedFromExample\n    Inherits Example\n    \n    Public Sub New(ByVal newId As Integer) \n        MyBase.New(newId)\n    End Sub\nEnd Class\n \n&#39; Two delegates are declared: UseLikeInstance treats the dynamic\n&#39; method as if it were an instance method, and UseLikeStatic\n&#39; treats the dynamic method in the ordinary fashion.\n&#39; \nPublic Delegate Function UseLikeInstance(ByVal newID As Integer) _\n    As Integer \nPublic Delegate Function UseLikeStatic(ByVal ex As Example, _\n    ByVal newID As Integer) As Integer \n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n        &#39; This dynamic method changes the private _id field. It \n        &#39; has no name; it returns the old _id value (return type \n        &#39; Integer); it takes two parameters, an instance of Example \n        &#39; and an Integer that is the new value of _id; and it is \n        &#39; declared with Example as the owner type, so it can \n        &#39; access all members, public and private.\n        &#39;\n        Dim changeID As New DynamicMethod( _\n            &quot;&quot;, _\n            GetType(Integer), _\n            New Type() {GetType(Example), GetType(Integer)}, _\n            GetType(Example) _\n        )\n        \n        &#39; Get a FieldInfo for the private field &#39;_id&#39;.\n        Dim fid As FieldInfo = GetType(Example).GetField( _\n            &quot;_id&quot;, _\n            BindingFlags.NonPublic Or BindingFlags.Instance _\n        )\n        \n        Dim ilg As ILGenerator = changeID.GetILGenerator()\n        \n        &#39; Push the current value of the id field onto the \n        &#39; evaluation stack. It&#39;s an instance field, so load the\n        &#39; instance of Example before accessing the field.\n        ilg.Emit(OpCodes.Ldarg_0)\n        ilg.Emit(OpCodes.Ldfld, fid)\n        \n        &#39; Load the instance of Example again, load the new value \n        &#39; of id, and store the new field value. \n        ilg.Emit(OpCodes.Ldarg_0)\n        ilg.Emit(OpCodes.Ldarg_1)\n        ilg.Emit(OpCodes.Stfld, fid)\n        \n        &#39; The original value of the id field is now the only \n        &#39; thing on the stack, so return from the call.\n        ilg.Emit(OpCodes.Ret)\n        \n        \n        &#39; Create a delegate that uses changeID in the ordinary\n        &#39; way, as a static method that takes an instance of\n        &#39; Example and an Integer.\n        &#39;\n        Dim uls As UseLikeStatic = CType( _\n            changeID.CreateDelegate(GetType(UseLikeStatic)), _\n            UseLikeStatic _\n        )\n        \n        &#39; Create an instance of Example with an id of 42.\n        &#39;\n        Dim ex As New Example(42)\n        \n        &#39; Create a delegate that is bound to the instance of \n        &#39; of Example. This is possible because the first \n        &#39; parameter of changeID is of type Example. The \n        &#39; delegate has all the parameters of changeID except\n        &#39; the first.\n        Dim uli As UseLikeInstance = CType( _\n            changeID.CreateDelegate( _\n                GetType(UseLikeInstance), _\n                ex), _\n            UseLikeInstance _\n        )\n        \n        &#39; First, change the value of _id by calling changeID as\n        &#39; a static method, passing in the instance of Example.\n        &#39;\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uls(ex, 1492) _\n        )\n        \n        &#39; Change the value of _id again using the delegate \n        &#39; bound to the instance of Example.\n        &#39;\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uli(2700) _\n        )\n        \n        Console.WriteLine(&quot;Final value of _id: {0}&quot;, ex.ID)\n    \n\n        &#39; Now repeat the process with a class that derives\n        &#39; from Example.\n        &#39;\n        Dim dfex As New DerivedFromExample(71)\n\n        uli = CType( _\n            changeID.CreateDelegate( _\n                GetType(UseLikeInstance), _\n                dfex), _\n            UseLikeInstance _\n        )\n\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uls(dfex, 73) _\n        )\n        Console.WriteLine( _\n            &quot;Change the value of _id; previous value: {0}&quot;, _\n            uli(79) _\n        )\n        Console.WriteLine(&quot;Final value of _id: {0}&quot;, dfex.ID)\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Change the value of _id; previous value: 42\n&#39;Change the value of _id; previous value: 1492\n&#39;Final value of _id: 2700\n&#39;Change the value of _id; previous value: 71\n&#39;Change the value of _id; previous value: 73\n&#39;Final value of _id: 79&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_DefineParameter_System_Int32_System_Reflection_ParameterAttributes_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_DefineParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineParameter(Int32,ParameterAttributes,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a parameter of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>position</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">ParameterAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">ParameterAttributes</a> values that specifies the attributes of the parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the parameter. The name can be a zero-length string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.parameterbuilder\" data-linktype=\"relative-path\">ParameterBuilder</a></div>\r\n                  </div>\r\n                  <p>Always returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The method has no parameters.  </p>\n<p> -or-  </p>\n<p> <code>position</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>position</code> is greater than the number of the method&#39;s parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>position</code> is 0, the DefineParameter method refers to the return value. Setting parameter information has no effect on the return value.  </p>\n<p> If the dynamic method has already been completed, by calling the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> or <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method, the DefineParameter method has no effect. No exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to define parameter information for a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#33\">        // Add parameter information to the dynamic method. (This is not\n        // necessary, but can be useful for debugging.) For each parameter,\n        // identified by position, supply the parameter attributes and a \n        // parameter name.\n        hello.DefineParameter(1, ParameterAttributes.In, &quot;message&quot;);\n        hello.DefineParameter(2, ParameterAttributes.In, &quot;valueToReturn&quot;);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#33\">    // Add parameter information to the dynamic method. (This is not\n    // necessary, but can be useful for debugging.) For each parameter,\n    // identified by position, supply the parameter attributes and a \n    // parameter name.\n    hello-&gt;DefineParameter(1, ParameterAttributes::In, &quot;message&quot;);\n    hello-&gt;DefineParameter(2, ParameterAttributes::In, &quot;valueToReturn&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#33\">        &#39; Add parameter information to the dynamic method. (This is not\n        &#39; necessary, but can be useful for debugging.) For each parameter,\n        &#39; identified by position, supply the parameter attributes and a \n        &#39; parameter name.\n        hello.DefineParameter(1, ParameterAttributes.In, &quot;message&quot;)\n        hello.DefineParameter(2, ParameterAttributes.In, &quot;valueToReturn&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetBaseDefinition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetBaseDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBaseDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the base implementation for the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo GetBaseDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">System.Reflection.MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The base implementation of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method always returns the current <code>DynamicMethod</code> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search the method&#39;s inheritance chain to find the custom attributes; <code>false</code> to check only the current method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of objects representing all the custom attributes of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For dynamic methods, specifying <code>true</code> for <code>inherit</code> has no effect, because the method is not declared in a type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Custom attributes are not currently supported on dynamic methods. The only attribute returned is <a class=\"xref\" href=\"system.runtime.compilerservices.methodimplattribute\" data-linktype=\"relative-path\">MethodImplAttribute</a>; you can get the method implementation flags more easily using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the custom attributes of the specified type that have been applied to the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the type of custom attribute to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search the method&#39;s inheritance chain to find the custom attributes; <code>false</code> to check only the current method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of objects representing the attributes of the method that are of type <code>attributeType</code> or derive from type <code>attributeType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For dynamic methods, specifying <code>true</code> for <code>inherit</code> has no effect, because the method is not declared in a type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Custom attributes are not currently supported on dynamic methods. The only attribute returned is <a class=\"xref\" href=\"system.runtime.compilerservices.methodimplattribute\" data-linktype=\"relative-path\">MethodImplAttribute</a>; you can get the method implementation flags more easily using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetDynamicILInfo\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetDynamicILInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDynamicILInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> class is provided to support unmanaged code generation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetILGenerator\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetILGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILGenerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ILGenerator GetILGenerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a dynamic method has been completed, by calling the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> or <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method, any further attempt to add MSIL is ignored. No exception is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the &quot;Verification&quot; section in Remarks for <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.ctor1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Test\n{\n    // Declare a delegate that will be used to execute the completed\n    // dynamic method. \n    private delegate int HelloInvoker(string msg, int ret);\n\n    public static void Main()\n    {\n        // Create an array that specifies the types of the parameters\n        // of the dynamic method. This method has a string parameter\n        // and an int parameter.\n        Type[] helloArgs = {typeof(string), typeof(int)};\n\n        // Create a dynamic method with the name &quot;Hello&quot;, a return type\n        // of int, and two parameters whose types are specified by the\n        // array helloArgs. Create the method in the module that\n        // defines the Test class.\n        DynamicMethod hello = new DynamicMethod(&quot;Hello&quot;, \n            typeof(int), \n            helloArgs, \n            typeof(Test).Module);\n\n        // Create an array that specifies the parameter types of the\n        // overload of Console.WriteLine to be used in Hello.\n        Type[] writeStringArgs = {typeof(string)};\n        // Get the overload of Console.WriteLine that has one\n        // String parameter.\n        MethodInfo writeString = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n        // Get an ILGenerator and emit a body for the dynamic method.\n        ILGenerator il = hello.GetILGenerator();\n        // Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0);\n        // Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, null);\n        // The Hello method returns the value of the second argument;\n        // to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1);\n        il.Emit(OpCodes.Ret);\n\n        // Create a delegate that represents the dynamic method. This\n        // action completes the method, and any further attempts to\n        // change the method will cause an exception.\n        HelloInvoker hi = \n            (HelloInvoker) hello.CreateDelegate(typeof(HelloInvoker));\n\n        // Use the delegate to execute the dynamic method. Save and\n        // print the return value.\n        int retval = hi(&quot;\\r<br>Hello, World!&quot;, 42);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n            retval);\n\n        // Do it again, with different arguments.\n        retval = hi(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n        Console.WriteLine(&quot;Executing delegate hi(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n            retval);\n        \n        // Create an array of arguments to use with the Invoke method.\n        object[] invokeArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n        // Invoke the dynamic method using the arguments. This is much\n        // slower than using the delegate, because you must create an\n        // array to contain the arguments, and ValueType arguments\n        // must be boxed.\n        object objRet = hello.Invoke(null, invokeArgs);\n        Console.WriteLine(&quot;hello.Invoke returned {0}&quot;, objRet);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.ctor1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Test\n    &#39; Declare a delegate that will be used to execute the completed\n    &#39; dynamic method. \n    Private Delegate Function HelloInvoker(ByVal msg As String, _\n        ByVal ret As Integer) As Integer\n\n    Public Shared Sub Main()\n        &#39; Create an array that specifies the types of the parameters\n        &#39; of the dynamic method. This method has a String parameter\n        &#39; and an Integer parameter.\n        Dim helloArgs() As Type = {GetType(String), GetType(Integer)}\n\n        &#39; Create a dynamic method with the name &quot;Hello&quot;, a return type\n        &#39; of Integer, and two parameters whose types are specified by\n        &#39; the array helloArgs. Create the method in the module that\n        &#39; defines the Test class.\n        Dim hello As New DynamicMethod(&quot;Hello&quot;, _\n            GetType(Integer), _\n            helloArgs, _\n            GetType(Test).Module)\n\n        &#39; Create an array that specifies the parameter types of the\n        &#39; overload of Console.WriteLine to be used in Hello.\n        Dim writeStringArgs() As Type = {GetType(String)}\n        &#39; Get the overload of Console.WriteLine that has one\n        &#39; String parameter.\n        Dim writeString As MethodInfo = GetType(Console). _\n            GetMethod(&quot;WriteLine&quot;, writeStringArgs) \n\n        &#39; Get an ILGenerator and emit a body for the dynamic method.\n        Dim il As ILGenerator = hello.GetILGenerator()\n        &#39; Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0)\n        &#39; Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, Nothing)\n        &#39; The Hello method returns the value of the second argument;\n        &#39; to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1)\n        il.Emit(OpCodes.Ret)\n\n        &#39; Create a delegate that represents the dynamic method. This\n        &#39; action completes the method, and any further attempts to\n        &#39; change the method will cause an exception.\n\tDim hi As HelloInvoker = _\n            hello.CreateDelegate(GetType(HelloInvoker))\n\n        &#39; Use the delegate to execute the dynamic method. Save and\n        &#39; print the return value.\n        Dim retval As Integer = hi(vbCrLf &amp; &quot;Hello, World!&quot;, 42)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hello, World!&quot;&quot;, 42) returned &quot; _\n            &amp; retval)\n\n        &#39; Do it again, with different arguments.\n        retval = hi(vbCrLf &amp; &quot;Hi, Mom!&quot;, 5280)\n        Console.WriteLine(&quot;Executing delegate hi(&quot;&quot;Hi, Mom!&quot;&quot;, 5280) returned &quot; _\n            &amp; retval)\n\n        &#39; Create an array of arguments to use with the Invoke method.\n        Dim invokeArgs() As Object = {vbCrLf &amp; &quot;Hello, World!&quot;, 42}\n        &#39; Invoke the dynamic method using the arguments. This is much\n        &#39; slower than using the delegate, because you must create an\n        &#39; array to contain the arguments, and ValueType arguments\n        &#39; must be boxed. Note that this overload of Invoke is \n        &#39; inherited from MethodBase, and simply calls the more \n        &#39; complete overload of Invoke.\n        Dim objRet As Object = hello.Invoke(Nothing, invokeArgs)\n        Console.WriteLine(&quot;hello.Invoke returned &quot; &amp; objRet)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Hello, World!\n&#39;Executing delegate hi(&quot;Hello, World!&quot;, 42) returned 42\n&#39;\n&#39;Hi, Mom!\n&#39;Executing delegate hi(&quot;Hi, Mom!&quot;, 5280) returned 5280\n&#39;\n&#39;Hello, World!\n&#39;hello.Invoke returned 42\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.ctor1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Test\n{   \n};\n\n// Declare a delegate that will be used to execute the completed\n// dynamic method.\ndelegate int HelloInvoker(String^ msg, int ret);\n\nint main()\n{\n    // Create an array that specifies the types of the parameters\n    // of the dynamic method. This method has a string parameter\n    // and an int parameter.\n    array&lt;Type^&gt;^ helloArgs = {String::typeid, int::typeid};\n\n    // Create a dynamic method with the name &quot;Hello&quot;, a return type\n    // of int, and two parameters whose types are specified by the\n    // array helloArgs. Create the method in the module that\n    // defines the Test class.\n    DynamicMethod^ hello = gcnew DynamicMethod(&quot;Hello&quot;, \n        int::typeid,\n        helloArgs,\n        Test::typeid-&gt;Module);\n\n    // Create an array that specifies the parameter types of the\n    // overload of Console.WriteLine to be used in Hello.\n    array&lt;Type^&gt;^ writeStringArgs = {String::typeid};\n    // Get the overload of Console.WriteLine that has one\n    // String parameter.\n    MethodInfo^ writeString =\n        Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, writeStringArgs);\n\n    // Get an ILGenerator and emit a body for the dynamic method.\n    ILGenerator^ ilgen = hello-&gt;GetILGenerator();\n    // Load the first argument, which is a string, onto the stack.\n    ilgen-&gt;Emit(OpCodes::Ldarg_0);\n    // Call the overload of Console.WriteLine that prints a string.\n    ilgen-&gt;EmitCall(OpCodes::Call, writeString, nullptr);\n    // The Hello method returns the value of the second argument;\n    // to do this, load the onto the stack and return.\n    ilgen-&gt;Emit(OpCodes::Ldarg_1);\n    ilgen-&gt;Emit(OpCodes::Ret);\n\n    // Create a delegate that represents the dynamic method. This\n    // action completes the method, and any further attempts to\n    // change the method will cause an exception.\n    HelloInvoker^ helloDelegate =\n        (HelloInvoker^) hello-&gt;CreateDelegate(HelloInvoker::typeid);\n\n    // Use the delegate to execute the dynamic method. Save and\n    // print the return value.\n    int returnValue = helloDelegate(&quot;\\r<br>Hello, World!&quot;, 42);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hello, World!\\&quot;, 42) returned {0}&quot;,\n        returnValue);\n\n    // Do it again, with different arguments.\n    returnValue = helloDelegate(&quot;\\r<br>Hi, Mom!&quot;, 5280);\n    Console::WriteLine(&quot;helloDelegate(\\&quot;Hi, Mom!\\&quot;, 5280) returned {0}&quot;,\n        returnValue);\n\n    // Create an array of arguments to use with the Invoke method.\n    array&lt;Object^&gt;^ delegateArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n    // Invoke the dynamic method using the arguments. This is much\n    // slower than using the delegate, because you must create an\n    // array to contain the arguments, and ValueType arguments\n    // must be boxed.\n    Object^ returnValueObject = hello-&gt;Invoke(nullptr, delegateArgs);\n    Console::WriteLine(&quot;hello.Invoke returned {0}&quot;, returnValueObject);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetILGenerator_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetILGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILGenerator(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the MSIL stream, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object for the method, with the specified MSIL stream size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a dynamic method has been completed, by calling the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> or <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method, any further attempt to add MSIL is ignored. No exception is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the &quot;Verification&quot; section in Remarks for <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates this method overload. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#2\">        // Create an array that specifies the parameter types of the\n        // overload of Console.WriteLine to be used in Hello.\n        Type[] writeStringArgs = {typeof(string)};\n        // Get the overload of Console.WriteLine that has one\n        // String parameter.\n        MethodInfo writeString = typeof(Console).GetMethod(&quot;WriteLine&quot;, \n            writeStringArgs);\n\n        // Get an ILGenerator and emit a body for the dynamic method,\n        // using a stream size larger than the IL that will be\n        // emitted.\n        ILGenerator il = hello.GetILGenerator(256);\n        // Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0);\n        // Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, null);\n        // The Hello method returns the value of the second argument;\n        // to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1);\n        il.Emit(OpCodes.Ret);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#2\">    // Create an array that specifies the parameter types of the\n    // overload of Console::WriteLine to be used in Hello.\n    array&lt;Type^&gt;^ writeStringArgs = { String::typeid };\n    // Get the overload of Console::WriteLine that has one\n    // String parameter.\n    MethodInfo^ writeString = Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n        writeStringArgs);\n\n    // Get an ILGenerator and emit a body for the dynamic method,\n    // using a stream size larger than the IL that will be\n    // emitted.\n    ILGenerator^ il = hello-&gt;GetILGenerator(256);\n    // Load the first argument, which is a string, onto the stack.\n    il-&gt;Emit(OpCodes::Ldarg_0);\n    // Call the overload of Console::WriteLine that prints a string.\n    il-&gt;EmitCall(OpCodes::Call, writeString, nullptr);\n    // The Hello method returns the value of the second argument;\n    // to do this, load the onto the stack and return.\n    il-&gt;Emit(OpCodes::Ldarg_1);\n    il-&gt;Emit(OpCodes::Ret);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#2\">        &#39; Create an array that specifies the parameter types of the\n        &#39; overload of Console.WriteLine to be used in Hello.\n        Dim writeStringArgs() As Type = {GetType(String)}\n        &#39; Get the overload of Console.WriteLine that has one\n        &#39; String parameter.\n        Dim writeString As MethodInfo = GetType(Console). _\n            GetMethod(&quot;WriteLine&quot;, writeStringArgs) \n\n        &#39; Get an ILGenerator and emit a body for the dynamic method,\n        &#39; using a stream size larger than the IL that will be\n        &#39; emitted.\n        Dim il As ILGenerator = hello.GetILGenerator(256)\n        &#39; Load the first argument, which is a string, onto the stack.\n        il.Emit(OpCodes.Ldarg_0)\n        &#39; Call the overload of Console.WriteLine that prints a string.\n        il.EmitCall(OpCodes.Call, writeString, Nothing)\n        &#39; The Hello method returns the value of the second argument;\n        &#39; to do this, load the onto the stack and return.\n        il.Emit(OpCodes.Ldarg_1)\n        il.Emit(OpCodes.Ret)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetMethodImplementationFlags\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetMethodImplementationFlags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImplementationFlags()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the implementation flags for the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a> values representing the implementation flags for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently, method implementation attributes for dynamic methods are always <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a> and <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_GetParameters\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_GetParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetParameters()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the parameters of the dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ParameterInfo[] GetParameters ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects that represent the parameters of the dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects returned by this method are for information only. Use the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_DefineParameter_\" data-linktype=\"relative-path\">DefineParameter</a> method to set or change the characteristics of the parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the parameters of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#34\">        // Display parameter information.\n        ParameterInfo[] parameters = hello.GetParameters();\n        Console.WriteLine(&quot;\\r<br>Parameters: name, type, ParameterAttributes&quot;);\n        foreach( ParameterInfo p in parameters )\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}, {1}, {2}&quot;, \n                p.Name, p.ParameterType, p.Attributes);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#34\">    // Display parameter information.\n    array&lt;ParameterInfo^&gt;^ parameters = hello-&gt;GetParameters();\n    Console::WriteLine(&quot;\\r<br>Parameters: name, type, ParameterAttributes&quot;);\n    for each (ParameterInfo^ p in parameters)\n    {\n        Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}, {1}, {2}&quot;, \n            p-&gt;Name, p-&gt;ParameterType, p-&gt;Attributes);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#34\">        &#39; Display parameter information.\n        Dim parameters() As ParameterInfo = hello.GetParameters()\n        Console.WriteLine(vbCrLf &amp; &quot;Parameters: name, type, ParameterAttributes&quot;)\n        For Each p As ParameterInfo In parameters\n            Console.WriteLine(vbTab &amp; &quot;{0}, {1}, {2}&quot;, _ \n                p.Name, p.ParameterType, p.Attributes)\n        Next p\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_Invoke_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored for dynamic methods, because they are static. Specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is <code>null</code>, the default binder is used. For more details, see <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> used to govern the coercion of types. If this is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used. For example, this information is needed to correctly convert a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents 1000 to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value, because 1000 is represented differently by different cultures.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> containing the return value of the invoked method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a> calling convention is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>parameters</code> does not match the number of parameters in the dynamic method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type of one or more elements of <code>parameters</code> does not match the type of the corresponding parameter of the dynamic method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <code>skipVisibility</code> set to <code>false</code>, but the dynamic method accesses members that are not <code>public</code> or <code>internal</code> (<code>Friend</code> in Visual Basic).  </p>\n<p> -or-  </p>\n<p> The dynamic method is anonymously hosted and was constructed with <code>skipVisibility</code> set to <code>false</code>, but it accesses members that are not <code>public</code>.  </p>\n<p> -or-  </p>\n<p> The dynamic method contains unverifiable code. See the &quot;Verification&quot; section in Remarks for <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.  </p>\n<p> Executing a dynamic method with a delegate created by the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method is more efficient than executing it with the Invoke method.  </p>\n<p> Calling the Invoke method or the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  </p>\n<p> All dynamic methods are static, so the <code>obj</code> parameter is always ignored. To treat a dynamic method as if it were an instance method, use the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_System_Type_System_Object_\" data-linktype=\"relative-path\">CreateDelegate(Type,Object)</a> overload that takes an object instance.  </p>\n<p> If the dynamic method has no parameters, the value of <code>parameters</code> should be <code>null</code>. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method overload is called by the [Invoke(Object, Object&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt; method overload inherited from the <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> class, so the preceding remarks apply to both overloads.  </p>\n</div>\n<p> This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method. For example, no demands are made for anonymously hosted dynamic methods that are created with the <code>restrictedSkipVisibility</code> parameter set to <code>false</code>. On the other hand, if you create a method with <code>restrictedSkipVisibility</code> set to <code>true</code> so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Prior to the .NET Framework 2.0 Service Pack 1, this method required <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> flag.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example invokes a dynamic method with exact binding, using the US-English culture. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#4\">        Console.WriteLine(&quot;\\r<br>Use the Invoke method to execute the dynamic method:&quot;);\n        // Create an array of arguments to use with the Invoke method.\n        object[] invokeArgs = {&quot;\\r<br>Hello, World!&quot;, 42};\n        // Invoke the dynamic method using the arguments. This is much\n        // slower than using the delegate, because you must create an\n        // array to contain the arguments, and value-type arguments\n        // must be boxed.\n        object objRet = hello.Invoke(null, BindingFlags.ExactBinding, null, invokeArgs, new CultureInfo(&quot;en-us&quot;));\n        Console.WriteLine(&quot;hello.Invoke returned: &quot; + objRet);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#4\">    Console::WriteLine(&quot;\\r<br>Use the Invoke method to execute the dynamic method:&quot;);\n    // Create an array of arguments to use with the Invoke method.\n    array&lt;Object^&gt;^ invokeArgs = { &quot;\\r<br>Hello, World!&quot;, 42 };\n    // Invoke the dynamic method using the arguments. This is much\n    // slower than using the delegate, because you must create an\n    // array to contain the arguments, and value-type arguments\n    // must be boxed.\n    Object^ objRet = hello-&gt;Invoke(nullptr, BindingFlags::ExactBinding, nullptr, invokeArgs, gcnew CultureInfo(&quot;en-us&quot;));\n    Console::WriteLine(&quot;hello.Invoke returned: &quot; + objRet);\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#4\">        Console.WriteLine(vbCrLf &amp; &quot;Use the Invoke method to execute the dynamic method:&quot;)\n        &#39; Create an array of arguments to use with the Invoke method.\n        Dim invokeArgs() As Object = {vbCrLf &amp; &quot;Hello, World!&quot;, 42}\n        &#39; Invoke the dynamic method using the arguments. This is much\n        &#39; slower than using the delegate, because you must create an\n        &#39; array to contain the arguments, and value-type arguments\n        &#39; must be boxed.\n        Dim objRet As Object = hello.Invoke(Nothing, _\n            BindingFlags.ExactBinding, Nothing, invokeArgs, _\n            New CultureInfo(&quot;en-us&quot;))\n        Console.WriteLine(&quot;hello.Invoke returned: {0}&quot;, objRet)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified custom attribute type is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the type of custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search the method&#39;s inheritance chain to find the custom attributes; <code>false</code> to check only the current method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified custom attribute type is defined; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For dynamic methods, specifying <code>true</code> for <code>inherit</code> has no effect. Dynamic methods have no inheritance chain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Custom attributes are not currently supported on dynamic methods.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicMethod_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicMethod_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the signature of the method, represented as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the method signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The signature includes only types and the method name, if any. Parameter names are not included.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the ToString method of a dynamic method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Reflection.DynamicMethod.All#32\">        Console.WriteLine(&quot;\\r<br>ToString: {0}&quot;, hello.ToString());\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection.DynamicMethod.All#32\">    Console::WriteLine(&quot;\\r<br>ToString: {0}&quot;, hello-&gt;ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"Reflection.DynamicMethod.All#32\">        Console.WriteLine(vbCrLf &amp; &quot;ToString: &quot; &amp; hello.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.DynamicMethod.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.DynamicMethod.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.CallingConvention\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.CreateDelegate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.DefineParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetBaseDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetILGenerator\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.GetParameters\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.InitLocals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.IsSecurityCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.IsSecurityTransparent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.MethodHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.ReturnParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.ReturnType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicMethod.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"06edcb51-05bb-b272-10e6-4a9684bb45a8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.DynamicMethod\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.DynamicMethod.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.DynamicMethod.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.DynamicMethod","System.Reflection.Emit.DynamicMethod..ctor","System.Reflection.Emit.DynamicMethod.Attributes","System.Reflection.Emit.DynamicMethod.CallingConvention","System.Reflection.Emit.DynamicMethod.CreateDelegate","System.Reflection.Emit.DynamicMethod.DeclaringType","System.Reflection.Emit.DynamicMethod.DefineParameter","System.Reflection.Emit.DynamicMethod.GetBaseDefinition","System.Reflection.Emit.DynamicMethod.GetCustomAttributes","System.Reflection.Emit.DynamicMethod.GetDynamicILInfo","System.Reflection.Emit.DynamicMethod.GetILGenerator","System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags","System.Reflection.Emit.DynamicMethod.GetParameters","System.Reflection.Emit.DynamicMethod.InitLocals","System.Reflection.Emit.DynamicMethod.Invoke","System.Reflection.Emit.DynamicMethod.IsDefined","System.Reflection.Emit.DynamicMethod.IsSecurityCritical","System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical","System.Reflection.Emit.DynamicMethod.IsSecurityTransparent","System.Reflection.Emit.DynamicMethod.MethodHandle","System.Reflection.Emit.DynamicMethod.Module","System.Reflection.Emit.DynamicMethod.Name","System.Reflection.Emit.DynamicMethod.ReflectedType","System.Reflection.Emit.DynamicMethod.ReturnParameter","System.Reflection.Emit.DynamicMethod.ReturnType","System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes","System.Reflection.Emit.DynamicMethod.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.DynamicMethod","System::Reflection::Emit::DynamicMethod","System.Reflection.Emit.DynamicMethod.#ctor","System::Reflection::Emit::DynamicMethod::#ctor","System.Reflection.Emit.DynamicMethod.Attributes","System::Reflection::Emit::DynamicMethod::Attributes","System.Reflection.Emit.DynamicMethod.CallingConvention","System::Reflection::Emit::DynamicMethod::CallingConvention","System.Reflection.Emit.DynamicMethod.CreateDelegate","System::Reflection::Emit::DynamicMethod::CreateDelegate","System.Reflection.Emit.DynamicMethod.DeclaringType","System::Reflection::Emit::DynamicMethod::DeclaringType","System.Reflection.Emit.DynamicMethod.DefineParameter","System::Reflection::Emit::DynamicMethod::DefineParameter","System.Reflection.Emit.DynamicMethod.GetBaseDefinition","System::Reflection::Emit::DynamicMethod::GetBaseDefinition","System.Reflection.Emit.DynamicMethod.GetCustomAttributes","System::Reflection::Emit::DynamicMethod::GetCustomAttributes","System.Reflection.Emit.DynamicMethod.GetDynamicILInfo","System::Reflection::Emit::DynamicMethod::GetDynamicILInfo","System.Reflection.Emit.DynamicMethod.GetILGenerator","System::Reflection::Emit::DynamicMethod::GetILGenerator","System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags","System::Reflection::Emit::DynamicMethod::GetMethodImplementationFlags","System.Reflection.Emit.DynamicMethod.GetParameters","System::Reflection::Emit::DynamicMethod::GetParameters","System.Reflection.Emit.DynamicMethod.InitLocals","System::Reflection::Emit::DynamicMethod::InitLocals","System.Reflection.Emit.DynamicMethod.Invoke","System::Reflection::Emit::DynamicMethod::Invoke","System.Reflection.Emit.DynamicMethod.IsDefined","System::Reflection::Emit::DynamicMethod::IsDefined","System.Reflection.Emit.DynamicMethod.IsSecurityCritical","System::Reflection::Emit::DynamicMethod::IsSecurityCritical","System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical","System::Reflection::Emit::DynamicMethod::IsSecuritySafeCritical","System.Reflection.Emit.DynamicMethod.IsSecurityTransparent","System::Reflection::Emit::DynamicMethod::IsSecurityTransparent","System.Reflection.Emit.DynamicMethod.MethodHandle","System::Reflection::Emit::DynamicMethod::MethodHandle","System.Reflection.Emit.DynamicMethod.Module","System::Reflection::Emit::DynamicMethod::Module","System.Reflection.Emit.DynamicMethod.Name","System::Reflection::Emit::DynamicMethod::Name","System.Reflection.Emit.DynamicMethod.ReflectedType","System::Reflection::Emit::DynamicMethod::ReflectedType","System.Reflection.Emit.DynamicMethod.ReturnParameter","System::Reflection::Emit::DynamicMethod::ReturnParameter","System.Reflection.Emit.DynamicMethod.ReturnType","System::Reflection::Emit::DynamicMethod::ReturnType","System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes","System::Reflection::Emit::DynamicMethod::ReturnTypeCustomAttributes","System.Reflection.Emit.DynamicMethod.ToString","System::Reflection::Emit::DynamicMethod::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"06edcb51-05bb-b272-10e6-4a9684bb45a8","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/DynamicMethod.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DynamicMethod class | Microsoft Docs","_op_ogTitle":"DynamicMethod class","description":"Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.DynamicMethod","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.dynamicmethod","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.dynamicmethod","fileRelativePath":"System.Reflection.Emit.DynamicMethod.html"},"themesRelativePathToOutputRoot":"_themes/"}