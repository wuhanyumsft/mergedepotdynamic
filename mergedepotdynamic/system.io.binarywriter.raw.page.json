{"content":"    \r\n    <h1 id=\"System_IO_BinaryWriter\">\r\n      <span class=\"lang-csharp\">BinaryWriter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class BinaryWriter : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BinaryWriter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The BinaryWriter class provides methods that simplify writing primitive data types to a stream. For example, you can use the <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Write_\" data-linktype=\"relative-path\">Write</a> method to write a Boolean value to the stream as a one-byte value. The class includes write methods that support different data types.  </p>\n<p> When you create a new instance of the BinaryWriter class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the BinaryWriter object. If you do not specify an encoding type, UTF-8 is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> A derived class can override the methods of this class to give unique character encodings.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter__ctor\" data-linktype=\"self-bookmark\">BinaryWriter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class that writes to a stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">BinaryWriter(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and using UTF-8 encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter__ctor_System_IO_Stream_System_Text_Encoding_\" data-linktype=\"self-bookmark\">BinaryWriter(Stream,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and character encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\" data-linktype=\"self-bookmark\">BinaryWriter(Stream,Encoding,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Null\" data-linktype=\"self-bookmark\">Null</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> with no backing store.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_OutStream\" data-linktype=\"self-bookmark\">OutStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Holds the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_BaseStream\" data-linktype=\"self-bookmark\">BaseStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the underlying stream of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> and the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Seek_System_Int32_System_IO_SeekOrigin_\" data-linktype=\"self-bookmark\">Seek(Int32,SeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the position within the current stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Boolean_\" data-linktype=\"self-bookmark\">Write(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a one-byte <code>Boolean</code> value to the current stream, with 0 representing <code>false</code> and 1 representing <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Byte_\" data-linktype=\"self-bookmark\">Write(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes an unsigned byte to the current stream and advances the stream position by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Byte___\" data-linktype=\"self-bookmark\">Write(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a byte array to the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Char_\" data-linktype=\"self-bookmark\">Write(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific characters being written to the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Char___\" data-linktype=\"self-bookmark\">Write(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a character array to the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific characters being written to the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Decimal_\" data-linktype=\"self-bookmark\">Write(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Double_\" data-linktype=\"self-bookmark\">Write(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Int16_\" data-linktype=\"self-bookmark\">Write(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Int32_\" data-linktype=\"self-bookmark\">Write(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Int64_\" data-linktype=\"self-bookmark\">Write(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_SByte_\" data-linktype=\"self-bookmark\">Write(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a signed byte to the current stream and advances the stream position by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Single_\" data-linktype=\"self-bookmark\">Write(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_String_\" data-linktype=\"self-bookmark\">Write(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a length-prefixed string to this stream in the current encoding of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_UInt16_\" data-linktype=\"self-bookmark\">Write(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_UInt32_\" data-linktype=\"self-bookmark\">Write(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_UInt64_\" data-linktype=\"self-bookmark\">Write(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a region of a byte array to the current stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <code>Encoding</code> used and perhaps the specific characters being written to the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryWriter_Write7BitEncodedInt_System_Int32_\" data-linktype=\"self-bookmark\">Write7BitEncodedInt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 32-bit integer in a compressed format.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter__ctor\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryWriter()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class that writes to a stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected BinaryWriter ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryWriter(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and using UTF-8 encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryWriter (System.IO.Stream output);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>output</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The output stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing or is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>output</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter__ctor_System_IO_Stream_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryWriter(Stream,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and character encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>output</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The output stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing or is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>output</code> or <code>encoding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryWriter(Stream,Encoding,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>output</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The output stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>leaveOpen</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to leave the stream open after the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> object is disposed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing or is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>output</code> or <code>encoding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Null\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Null</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> with no backing store.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.IO.BinaryWriter Null;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_OutStream\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutStream</div>        \r\n          </div>\r\n    \r\n            <p>Holds the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.IO.Stream OutStream;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_BaseStream\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_BaseStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseStream</div>        \r\n          </div>\r\n    \r\n            <p>Gets the underlying stream of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.Stream BaseStream { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The underlying stream associated with the <code>BinaryWriter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write <code>Double</code> data to memory by using the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> and <code>BinaryWriter</code> classes on top of the <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> class. <code>MemoryStream</code> only reads and writes <code>Byte</code> data.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;double&gt;^dataArray = gcnew array&lt;double&gt;(arrayLength);\n   Random^ randomGenerator = gcnew Random;\n   for ( i = 0; i &lt; arrayLength; i++ )\n   {\n      dataArray[ i ] = 100.1 * randomGenerator-&gt;NextDouble();\n\n   }\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   try\n   {\n      \n      // Write data to the stream.\n      Console::WriteLine( &quot;Writing data to the stream.&quot; );\n      i = 0;\n      for ( i = 0; i &lt; arrayLength; i++ )\n      {\n         binWriter-&gt;Write( dataArray[ i ] );\n\n      }\n      \n      // Create a reader using the stream from the writer.\n      BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n      \n      // Return to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      try\n      {\n         \n         // Read and verify the data.\n         i = 0;\n         Console::WriteLine( &quot;Verifying the written data.&quot; );\n         for ( i = 0; i &lt; arrayLength; i++ )\n         {\n            if ( binReader-&gt;ReadDouble() != dataArray[ i ] )\n            {\n               Console::WriteLine( &quot;Error writing data.&quot; );\n               break;\n            }\n\n         }\n         Console::WriteLine( &quot;The data was written and verified.&quot; );\n      }\n      catch ( EndOfStreamException^ e ) \n      {\n         Console::WriteLine( &quot;Error writing data: {0}.&quot;, e-&gt;GetType()-&gt;Name );\n      }\n\n   }\n   finally\n   {\n      binWriter-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i;\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        Random randomGenerator = new Random();\n        double[] dataArray = new double[arrayLength];\n        for(i = 0; i &lt; arrayLength; i++)\n        {\n            dataArray[i] = 100.1 * randomGenerator.NextDouble();\n        }\n\n        using(BinaryWriter binWriter = \n            new BinaryWriter(new MemoryStream()))\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;);\n            for(i = 0; i &lt; arrayLength; i++)\n            {\n                binWriter.Write(dataArray[i]);\n            }\n\n            // Create a reader using the stream from the writer.\n            using(BinaryReader binReader = \n                new BinaryReader(binWriter.BaseStream))\n            {\n                try\n                {\n                    // Return to the beginning of the stream.\n                    binReader.BaseStream.Position = 0;\n\n                    // Read and verify the data.\n                    Console.WriteLine(&quot;Verifying the written data.&quot;);\n                    for(i = 0; i &lt; arrayLength; i++)\n                    {\n                        if(binReader.ReadDouble() != dataArray[i])\n                        {\n                            Console.WriteLine(&quot;Error writing data.&quot;);\n                            break;\n                        }\n                    }\n                    Console.WriteLine(&quot;The data was written &quot; +\n                        &quot;and verified.&quot;);\n                }\n                catch(EndOfStreamException e)\n                {\n                    Console.WriteLine(&quot;Error writing data: {0}.&quot;,\n                        e.GetType().Name);\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer\n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Double\n        Dim randomGenerator As New Random()\n        For i = 0 To upperBound\n            dataArray(i) = 100.1 * randomGenerator.NextDouble()\n        Next i\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Try\n\n            &#39; Write data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;)\n            \n            For i = 0 To upperBound\n                binWriter.Write(dataArray(i))\n            Next i\n\n            &#39; Create a reader using the stream from the writer.\n            Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n            &#39; Return to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data.\n            Try\n                Console.WriteLine(&quot;Verifying the written data.&quot;)\n                For i = 0 To upperBound\n                    If binReader.ReadDouble() &lt;&gt; dataArray(i) Then\n                        Console.WriteLine(&quot;Error writing data.&quot;)\n                        Exit For\n                    End If\n                Next i\n                Console.WriteLine(&quot;The data was written and verified.&quot;)\n            Catch ex As EndOfStreamException\n                Console.WriteLine(&quot;Error writing data: {0}.&quot;, _\n                    ex.GetType().Name)\n            End Try\n        Finally\n            binWriter.Close()\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Close\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> and the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of <code>Close</code> calls the <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method passing a <code>true</code> value.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Flush_\" data-linktype=\"relative-path\">Flush</a> or <code>Close</code>. Setting <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Dispose\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Flush\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All derived classes should override <code>Flush</code> to ensure that all buffered data is sent to the stream.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <code>Flush</code> or <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Close_\" data-linktype=\"relative-path\">Close</a>. Setting <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Seek_System_Int32_System_IO_SeekOrigin_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(Int32,SeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the position within the current stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long Seek (int offset, System.IO.SeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte offset relative to <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A field of <a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a> indicating the reference point from which the new position is to be obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The position with the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The file pointer was moved to an invalid location.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a> value is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes a series of byte values to a file. The example uses Seek to move to various locations in the file, and then writes marker bytes by using the <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Write_\" data-linktype=\"relative-path\">Write</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#5\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class BinReadWrite\n{\n    public static void Main()\n    {\n        string testfile = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;estfile.bin&quot;;\n\n        // create a test file using BinaryWriter\n        FileStream fs = File.Create(testfile);\n        UTF8Encoding utf8 = new UTF8Encoding();\n\n        BinaryWriter bw = new BinaryWriter(fs, utf8);\n        // write a series of bytes to the file, each time incrementing\n        // the value from 0 - 127\n        int pos;\n\n        for (pos = 0; pos &lt; 128; pos++)\n        {\n            bw.Write((byte)pos);\n        }\n\n        // reset the stream position for the next write pass\n        bw.Seek(0, SeekOrigin.Begin);\n        // write marks in file with the value of 255 going forward\n        for (pos = 0; pos &lt; 120; pos += 8)\n        {\n            bw.Seek(7, SeekOrigin.Current);\n            bw.Write((byte)255);\n        }\n\n        // reset the stream position for the next write pass\n        bw.Seek(0, SeekOrigin.End);\n        // write marks in file with the value of 254 going backward\n        for (pos = 128; pos &gt; 6; pos -= 6)\n        {\n            bw.Seek(-6, SeekOrigin.Current);\n            bw.Write((byte)254);\n            bw.Seek(-1, SeekOrigin.Current);\n        }\n\n        // now dump the contents of the file using the original file stream\n        fs.Seek(0, SeekOrigin.Begin);\n        byte[] rawbytes = new byte[fs.Length];\n        fs.Read(rawbytes, 0, (int)fs.Length);\n\n        int i = 0;\n        foreach (byte b in rawbytes)\n        {\n             switch (b)\n             {\n                 case 254:\n                 {\n                     Console.Write(&quot;-%- &quot;);\n                 }\n                 break;\n\n                 case 255:\n                 {\n                     Console.Write(&quot;-*- &quot;);\n                 }\n                 break;\n\n                 default:\n                 {\n                     Console.Write(&quot;{0:d3} &quot;, b);\n                 }\n                 break;\n             }\n             i++;\n             if (i == 16)\n             {\n                 Console.WriteLine();\n                 i = 0;\n             }\n        }\n        fs.Close();\n    }\n}\n\n//The output from the program is this:\n//\n// 000 001 -%- 003 004 005 006 -*- -%- 009 010 011 012 013 -%- -*-\n// 016 017 018 019 -%- 021 022 -*- 024 025 -%- 027 028 029 030 -*-\n// -%- 033 034 035 036 037 -%- -*- 040 041 042 043 -%- 045 046 -*-\n// 048 049 -%- 051 052 053 054 -*- -%- 057 058 059 060 061 -%- -*-\n// 064 065 066 067 -%- 069 070 -*- 072 073 -%- 075 076 077 078 -*-\n// -%- 081 082 083 084 085 -%- -*- 088 089 090 091 -%- 093 094 -*-\n// 096 097 -%- 099 100 101 102 -*- -%- 105 106 107 108 109 -%- -*-\n// 112 113 114 115 -%- 117 118 -*- 120 121 -%- 123 124 125 126 127\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter#5\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\npublic ref class BinReadWrite\n{\npublic:\n    static void Main()\n    {\n        String^ testfile = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\&nbsp;&nbsp;&nbsp;&nbsp;estfile.bin&quot;;\n\n        // create a test file using BinaryWriter\n        FileStream^ fs = File::Create(testfile);\n        UTF8Encoding^ utf8 = gcnew UTF8Encoding();\n\n        BinaryWriter^ bw = gcnew BinaryWriter(fs, utf8);\n        // write a series of bytes to the file, each time incrementing\n        // the value from 0 - 127\n        int pos;\n\n        for (pos = 0; pos &lt; 128; pos++)\n        {\n            bw-&gt;Write((Byte)pos);\n        }\n\n        // reset the stream position for the next write pass\n        bw-&gt;Seek(0, SeekOrigin::Begin);\n        // write marks in file with the value of 255 going forward\n        for (pos = 0; pos &lt; 120; pos += 8)\n        {\n            bw-&gt;Seek(7, SeekOrigin::Current);\n            bw-&gt;Write((Byte)255);\n        }\n\n        // reset the stream position for the next write pass\n        bw-&gt;Seek(0, SeekOrigin::End);\n        // write marks in file with the value of 254 going backward\n        for (pos = 128; pos &gt; 6; pos -= 6)\n        {\n            bw-&gt;Seek(-6, SeekOrigin::Current);\n            bw-&gt;Write((Byte)254);\n            bw-&gt;Seek(-1, SeekOrigin::Current);\n        }\n\n        // now dump the contents of the file using the original file stream\n        fs-&gt;Seek(0, SeekOrigin::Begin);\n        array&lt;Byte&gt;^ rawbytes = gcnew array&lt;Byte&gt;(fs-&gt;Length);\n        fs-&gt;Read(rawbytes, 0, (int)fs-&gt;Length);\n\n        int i = 0;\n        for each (Byte b in rawbytes)\n        {\n             switch (b)\n             {\n                 case 254:\n                 {\n                     Console::Write(&quot;-%- &quot;);\n                 }\n                 break;\n\n                 case 255:\n                 {\n                     Console::Write(&quot;-*- &quot;);\n                 }\n                 break;\n\n                 default:\n                 {\n                     Console::Write(&quot;{0:d3} &quot;, b);\n                 }\n                 break;\n             }\n             i++;\n             if (i == 16)\n             {\n                 Console::WriteLine();\n                 i = 0;\n             }\n        }\n        fs-&gt;Close();\n    }\n};\n\nint main()\n{\n    BinReadWrite::Main();\n}\n\n//The output from the program is this:\n//\n// 000 001 -%- 003 004 005 006 -*- -%- 009 010 011 012 013 -%- -*-\n// 016 017 018 019 -%- 021 022 -*- 024 025 -%- 027 028 029 030 -*-\n// -%- 033 034 035 036 037 -%- -*- 040 041 042 043 -%- 045 046 -*-\n// 048 049 -%- 051 052 053 054 -*- -%- 057 058 059 060 061 -%- -*-\n// 064 065 066 067 -%- 069 070 -*- 072 073 -%- 075 076 077 078 -*-\n// -%- 081 082 083 084 085 -%- -*- 088 089 090 091 -%- 093 094 -*-\n// 096 097 -%- 099 100 101 102 -*- -%- 105 106 107 108 109 -%- -*-\n// 112 113 114 115 -%- 117 118 -*- 120 121 -%- 123 124 125 126 127\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#5\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class BinReadWrite\n    Public Shared Sub Main()\n        Dim testfile As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;estfile.bin&quot;\n\n        &#39; create a test file using BinaryWriter\n        Dim fs As FileStream = File.Create(testfile)\n        Dim utf8 As New UTF8Encoding()\n\n        Dim bw As New BinaryWriter(fs, utf8)\n        &#39; write a series of bytes to the file, each time incrementing\n        &#39; the value from 0 - 127\n        Dim pos As Integer\n\n        For pos = 0 to 127\n            bw.Write(CType(pos, Byte))\n        Next pos\n\n        &#39; reset the stream position for the next write pass\n        bw.Seek(0, SeekOrigin.Begin)\n        &#39; write marks in file with the value of 255 going forward\n        For pos = 0 To 119 Step 8\n            bw.Seek(7, SeekOrigin.Current)\n            bw.Write(CType(255, Byte))\n        Next pos\n\n        &#39; reset the stream position for the next write pass\n        bw.Seek(0, SeekOrigin.End)\n        &#39; write marks in file with the value of 254 going backward\n        For pos = 128 To 7 Step -6\n            bw.Seek(-6, SeekOrigin.Current)\n            bw.Write(CType(254, Byte))\n            bw.Seek(-1, SeekOrigin.Current)\n        Next pos\n\n        &#39; now dump the contents of the file using the original file stream\n        fs.Seek(0, SeekOrigin.Begin)\n        Console.WriteLine(&quot;Length: {0:d}&quot;, fs.Length)\n        Dim rawbytes(fs.Length) As Byte\n        fs.Read(rawbytes, 0, fs.Length)\n        Console.WriteLine(&quot;Length: {0:d}&quot;, rawbytes.Length)\n\n        Dim i As Integer = 0\n        For Each b As Byte In rawbytes\n             Select b\n                 Case 254\n                     Console.Write(&quot;-%- &quot;)\n\n                 Case 255\n                     Console.Write(&quot;-*- &quot;)\n\n                 Case Else\n                     Console.Write(&quot;{0:d3} &quot;, b)\n             End Select\n             i = i + 1\n             If i = 16 Then\n                 Console.WriteLine()\n                 i = 0\n             End If\n        Next b\n        fs.Close()\n    End Sub\nEnd Class\n\n&#39; The output from the program is this:\n&#39;\n&#39; 000 001 -%- 003 004 005 006 -*- -%- 009 010 011 012 013 -%- -*-\n&#39; 016 017 018 019 -%- 021 022 -*- 024 025 -%- 027 028 029 030 -*-\n&#39; -%- 033 034 035 036 037 -%- -*- 040 041 042 043 -%- 045 046 -*-\n&#39; 048 049 -%- 051 052 053 054 -*- -%- 057 058 059 060 061 -%- -*-\n&#39; 064 065 066 067 -%- 069 070 -*- 072 073 -%- 075 076 077 078 -*-\n&#39; -%- 081 082 083 084 085 -%- -*- 088 089 090 091 -%- 093 094 -*-\n&#39; 096 097 -%- 099 100 101 102 -*- -%- 105 106 107 108 109 -%- -*-\n&#39; 112 113 114 115 -%- 117 118 -*- 120 121 -%- 123 124 125 126 127\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a one-byte <code>Boolean</code> value to the current stream, with 0 representing <code>false</code> and 1 representing <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Boolean</code> value to write (0 or 1).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Byte_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes an unsigned byte to the current stream and advances the stream position by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unsigned byte to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because of data formatting conflicts, using this method with the following encodings is not recommended:  </p>\n<ul>\n<li><p>UTF-7  </p>\n</li>\n<li><p>ISO-2022-JP  </p>\n</li>\n<li><p>ISCII  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i = 0;\n   \n   // Create random data to write to the stream.\n   array&lt;Byte&gt;^writeArray = gcnew array&lt;Byte&gt;(1000);\n   (gcnew Random)-&gt;NextBytes( writeArray );\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n   try\n   {\n      \n      // Write the data to the stream.\n      Console::WriteLine( &quot;Writing the data.&quot; );\n      for ( i = 0; i &lt; writeArray-&gt;Length; i++ )\n      {\n         binWriter-&gt;Write( writeArray[ i ] );\n\n      }\n      \n      // Set the stream position to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      \n      // Read and verify the data from the stream.\n      for ( i = 0; i &lt; writeArray-&gt;Length; i++ )\n      {\n         if ( binReader-&gt;ReadByte() != writeArray[ i ] )\n         {\n            Console::WriteLine( &quot;Error writing the data.&quot; );\n            return  -1;\n         }\n\n      }\n      Console::WriteLine( &quot;The data was written and verified.&quot; );\n   }\n   // Catch the EndOfStreamException and write an error message.\n   catch ( EndOfStreamException^ e ) \n   {\n      Console::WriteLine( &quot;Error writing the data.<br>{0}&quot;, e-&gt;GetType()-&gt;Name );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i = 0;\n\n        // Create random data to write to the stream.\n        byte[] writeArray = new byte[1000];\n        new Random().NextBytes(writeArray);\n\n        BinaryWriter binWriter = new BinaryWriter(new MemoryStream());\n        BinaryReader binReader = \n            new BinaryReader(binWriter.BaseStream);\n\n        try\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing the data.&quot;);\n            for(i = 0; i &lt; writeArray.Length; i++)\n            {\n                binWriter.Write(writeArray[i]);\n            }\n\n            // Set the stream position to the beginning of the stream.\n            binReader.BaseStream.Position = 0;\n\n            // Read and verify the data from the stream.\n            for(i = 0; i &lt; writeArray.Length; i++)\n            {\n                if(binReader.ReadByte() != writeArray[i])\n                {\n                    Console.WriteLine(&quot;Error writing the data.&quot;);\n                    return;\n                }\n            }\n            Console.WriteLine(&quot;The data was written and verified.&quot;);\n        }\n\n        // Catch the EndOfStreamException and write an error message.\n        catch(EndOfStreamException e)\n        {\n            Console.WriteLine(&quot;Error writing the data.<br>{0}&quot;,\n                e.GetType().Name);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer = 0\n\n        &#39; Create random data to write to the stream.\n        Dim writeArray(1000) As Byte\n        Dim randomGenerator As New Random()\n        randomGenerator.NextBytes(writeArray)\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n        Try\n        \n            &#39; Write the data to the stream.\n            Console.WriteLine(&quot;Writing the data.&quot;)\n            For i = 0 To writeArray.Length - 1\n                binWriter.Write(writeArray(i))\n            Next i\n\n            &#39; Set the stream position to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data from the stream.\n            For i = 0 To writeArray.Length - 1\n                If binReader.ReadByte() &lt;&gt; writeArray(i) Then\n                    Console.WriteLine(&quot;Error writing the data.&quot;)\n                    Return\n                End If\n            Next i\n            Console.WriteLine(&quot;The data was written and verified.&quot;)\n\n        &#39; Catch the EndOfStreamException and write an error message.\n        Catch ex As EndOfStreamException\n            Console.WriteLine(&quot;Error writing the data: {0}&quot;, _\n                ex.GetType().Name)\n        End Try\n    \n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Byte___\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes a byte array to the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (byte[] buffer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing the data to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;Byte&gt;^dataArray = gcnew array&lt;Byte&gt;(arrayLength);\n   (gcnew Random)-&gt;NextBytes( dataArray );\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   \n   // Write the data to the stream.\n   Console::WriteLine(  &quot;Writing the data.&quot; );\n   binWriter-&gt;Write( dataArray );\n   \n   // Create the reader using the stream from the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n   \n   // Set the stream position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read and verify the data.\n   array&lt;Byte&gt;^verifyArray = binReader-&gt;ReadBytes( arrayLength );\n   if ( verifyArray-&gt;Length != arrayLength )\n   {\n      Console::WriteLine( &quot;Error writing the data.&quot; );\n      return  -1;\n   }\n\n   for ( int i = 0; i &lt; arrayLength; i++ )\n   {\n      if ( verifyArray[ i ] != dataArray[ i ] )\n      {\n         Console::WriteLine( &quot;Error writing the data.&quot; );\n         return  -1;\n      }\n\n   }\n   Console::WriteLine( &quot;The data was written and verified.&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Byte\n        Dim randomGenerator As New Random\n        randomGenerator.NextBytes(dataArray)\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n\n        &#39; Write the data to the stream.\n        Console.WriteLine(&quot;Writing the data.&quot;)\n        binWriter.Write(dataArray)\n\n        &#39; Create the reader using the stream from the writer.\n        Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n        &#39; Set the stream position to the beginning of the stream.\n        binReader.BaseStream.Position = 0\n\n        &#39; Read and verify the data.\n        Dim verifyArray() As Byte = _\n            binReader.ReadBytes(dataArray.Length)\n        If verifyArray.Length &lt;&gt; dataArray.Length Then\n            Console.WriteLine(&quot;Error writing the data.&quot;)\n            Return\n        End If\n        For i As Integer = 0 To upperBound\n            If verifyArray(i) &lt;&gt; dataArray(i) Then\n                Console.WriteLine(&quot;Error writing the data.&quot;)\n                Return\n            End If\n        Next i\n        Console.WriteLine(&quot;The data was written and verified.&quot;)\n    \n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        byte[] dataArray = new byte[arrayLength];\n        new Random().NextBytes(dataArray);\n\n        BinaryWriter binWriter = new BinaryWriter(new MemoryStream());\n\n        // Write the data to the stream.\n        Console.WriteLine(&quot;Writing the data.&quot;);\n        binWriter.Write(dataArray);\n\n        // Create the reader using the stream from the writer.\n        BinaryReader binReader = \n            new BinaryReader(binWriter.BaseStream);\n\n        // Set Position to the beginning of the stream.\n        binReader.BaseStream.Position = 0;\n\n        // Read and verify the data.\n        byte[] verifyArray = binReader.ReadBytes(arrayLength);\n        if(verifyArray.Length != arrayLength)\n        {\n            Console.WriteLine(&quot;Error writing the data.&quot;);\n            return;\n        }\n        for(int i = 0; i &lt; arrayLength; i++)\n        {\n            if(verifyArray[i] != dataArray[i])\n            {\n                Console.WriteLine(&quot;Error writing the data.&quot;);\n                return;\n            }\n        }\n        Console.WriteLine(&quot;The data was written and verified.&quot;);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Char_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific characters being written to the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (char ch);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ch</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The non-surrogate, Unicode character to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ch</code> is a single surrogate character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because of data formatting conflicts, using this method with the following encodings is not recommended:  </p>\n<ul>\n<li><p>UTF-7  </p>\n</li>\n<li><p>ISO-2022-JP  </p>\n</li>\n<li><p>ISCII  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.  </p>\n<p>Unicode surrogate characters must be written out as pairs together in the same call, not individually. If you require support for surrogate pairs in your application, consider using a character array and the <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Write_\" data-linktype=\"relative-path\">Write</a> method overload.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write data using memory as a backing store.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i = 0;\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        for(i = 0; i &lt; invalidPathChars.Length; i++)\n        {\n            binWriter.Write(invalidPathChars[i]);\n        }\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        char[] memoryData = \n            new char[memStream.Length - memStream.Position];\n        for(i = 0; i &lt; memoryData.Length; i++)\n        {\n            memoryData[i] = binReader.ReadChar();\n        }\n        Console.WriteLine(memoryData);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer = 0\n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        For i = 0 To invalidPathChars.Length - 1\n            binWriter.Write(invalidPathChars(i))\n        Next i\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Dim memoryData( _\n            CInt(memStream.Length - memStream.Position) - 1) As Char\n        For i = 0 To memoryData.Length - 1\n            memoryData(i) = binReader.ReadChar()\n        Next i\n        Console.WriteLine(memoryData)\n    \n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   for ( i = 0; i &lt; invalidPathChars-&gt;Length; i++ )\n   {\n      binWriter-&gt;Write( invalidPathChars[ i ] );\n\n   }\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   array&lt;Char&gt;^memoryData = gcnew array&lt;Char&gt;(memStream-&gt;Length - memStream-&gt;Position);\n   for ( i = 0; i &lt; memoryData-&gt;Length; i++ )\n   {\n      memoryData[ i ] = binReader-&gt;ReadChar();\n\n   }\n   Console::WriteLine( memoryData );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Char___\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes a character array to the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific characters being written to the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (char[] chars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array containing the data to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write data using memory as a backing store.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   binWriter-&gt;Write( Path::InvalidPathChars );\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   Console::WriteLine( binReader-&gt;ReadChars( (int)(memStream-&gt;Length - memStream-&gt;Position) ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        binWriter.Write(Path.InvalidPathChars)\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Console.WriteLine(binReader.ReadChars( _\n            CInt(memStream.Length - memStream.Position)))\n    \n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        binWriter.Write(Path.InvalidPathChars);\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        Console.WriteLine(binReader.ReadChars(\n            (int)(memStream.Length - memStream.Position)));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Decimal_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Double_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The eight-byte floating-point value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write <code>Double</code> data to memory by using the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> and <code>BinaryWriter</code> classes on top of the <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> class. <code>MemoryStream</code> only reads and writes <code>Byte</code> data.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;double&gt;^dataArray = gcnew array&lt;double&gt;(arrayLength);\n   Random^ randomGenerator = gcnew Random;\n   for ( i = 0; i &lt; arrayLength; i++ )\n   {\n      dataArray[ i ] = 100.1 * randomGenerator-&gt;NextDouble();\n\n   }\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   try\n   {\n      \n      // Write data to the stream.\n      Console::WriteLine( &quot;Writing data to the stream.&quot; );\n      i = 0;\n      for ( i = 0; i &lt; arrayLength; i++ )\n      {\n         binWriter-&gt;Write( dataArray[ i ] );\n\n      }\n      \n      // Create a reader using the stream from the writer.\n      BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n      \n      // Return to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      try\n      {\n         \n         // Read and verify the data.\n         i = 0;\n         Console::WriteLine( &quot;Verifying the written data.&quot; );\n         for ( i = 0; i &lt; arrayLength; i++ )\n         {\n            if ( binReader-&gt;ReadDouble() != dataArray[ i ] )\n            {\n               Console::WriteLine( &quot;Error writing data.&quot; );\n               break;\n            }\n\n         }\n         Console::WriteLine( &quot;The data was written and verified.&quot; );\n      }\n      catch ( EndOfStreamException^ e ) \n      {\n         Console::WriteLine( &quot;Error writing data: {0}.&quot;, e-&gt;GetType()-&gt;Name );\n      }\n\n   }\n   finally\n   {\n      binWriter-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i;\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        Random randomGenerator = new Random();\n        double[] dataArray = new double[arrayLength];\n        for(i = 0; i &lt; arrayLength; i++)\n        {\n            dataArray[i] = 100.1 * randomGenerator.NextDouble();\n        }\n\n        using(BinaryWriter binWriter = \n            new BinaryWriter(new MemoryStream()))\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;);\n            for(i = 0; i &lt; arrayLength; i++)\n            {\n                binWriter.Write(dataArray[i]);\n            }\n\n            // Create a reader using the stream from the writer.\n            using(BinaryReader binReader = \n                new BinaryReader(binWriter.BaseStream))\n            {\n                try\n                {\n                    // Return to the beginning of the stream.\n                    binReader.BaseStream.Position = 0;\n\n                    // Read and verify the data.\n                    Console.WriteLine(&quot;Verifying the written data.&quot;);\n                    for(i = 0; i &lt; arrayLength; i++)\n                    {\n                        if(binReader.ReadDouble() != dataArray[i])\n                        {\n                            Console.WriteLine(&quot;Error writing data.&quot;);\n                            break;\n                        }\n                    }\n                    Console.WriteLine(&quot;The data was written &quot; +\n                        &quot;and verified.&quot;);\n                }\n                catch(EndOfStreamException e)\n                {\n                    Console.WriteLine(&quot;Error writing data: {0}.&quot;,\n                        e.GetType().Name);\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer\n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Double\n        Dim randomGenerator As New Random()\n        For i = 0 To upperBound\n            dataArray(i) = 100.1 * randomGenerator.NextDouble()\n        Next i\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Try\n\n            &#39; Write data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;)\n            \n            For i = 0 To upperBound\n                binWriter.Write(dataArray(i))\n            Next i\n\n            &#39; Create a reader using the stream from the writer.\n            Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n            &#39; Return to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data.\n            Try\n                Console.WriteLine(&quot;Verifying the written data.&quot;)\n                For i = 0 To upperBound\n                    If binReader.ReadDouble() &lt;&gt; dataArray(i) Then\n                        Console.WriteLine(&quot;Error writing data.&quot;)\n                        Exit For\n                    End If\n                Next i\n                Console.WriteLine(&quot;The data was written and verified.&quot;)\n            Catch ex As EndOfStreamException\n                Console.WriteLine(&quot;Error writing data: {0}.&quot;, _\n                    ex.GetType().Name)\n            End Try\n        Finally\n            binWriter.Close()\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Int16_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The two-byte signed integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> The following table lists examples of other typical or related I/O tasks.  </p>\n<table>\n<thead>\n<tr>\n<th>To do this...</th>\n<th>See the example in this topic...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Write to a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Write%20Text%20to%20a%20File.md\" data-linktype=\"relative-path\">How to: Write Text to a File</a></td>\n</tr>\n<tr>\n<td>Read from a text file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20Text%20from%20a%20File.md\" data-linktype=\"relative-path\">How to: Read Text from a File</a></td>\n</tr>\n<tr>\n<td>Append text to a file.</td>\n<td><a href=\"../Topic/How%20to:%20Open%20and%20Append%20to%20a%20Log%20File.md\" data-linktype=\"relative-path\">How to: Open and Append to a Log File</a><br><br> <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendText_\" data-linktype=\"relative-path\">AppendText</a><br><br> <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_AppendText_\" data-linktype=\"relative-path\">AppendText</a></td>\n</tr>\n<tr>\n<td>Get the size of a file.</td>\n<td><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></td>\n</tr>\n<tr>\n<td>Get the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_GetAttributes_\" data-linktype=\"relative-path\">GetAttributes</a></td>\n</tr>\n<tr>\n<td>Set the attributes of a file.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_SetAttributes_\" data-linktype=\"relative-path\">SetAttributes</a></td>\n</tr>\n<tr>\n<td>Determine if a file exists.</td>\n<td><a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a></td>\n</tr>\n<tr>\n<td>Read from a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n<tr>\n<td>Write to a binary file.</td>\n<td><a href=\"../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md\" data-linktype=\"relative-path\">How to: Read and Write to a Newly Created Data File</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The four-byte signed integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Int64_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The eight-byte signed integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_SByte_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a signed byte to the current stream and advances the stream position by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signed byte to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Single_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The four-byte floating-point value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_String_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a length-prefixed string to this stream in the current encoding of the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> instance&#39;s current encoding to the stream. This value is written as an unsigned integer. This method then writes that many bytes to the stream.  </p>\n<p> For example, the string â€œAâ€ has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_UInt16_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The two-byte unsigned integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_UInt32_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The four-byte unsigned integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_UInt64_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The eight-byte unsigned integer to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>BinaryWriter</code> stores this data type in little endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a region of a byte array to the current stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing the data to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting point in <code>buffer</code> at which to begin writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWBytes2#1\">using System;\nusing System.IO;\n\nnamespace BinaryRW\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int arrayLength = 1000;\n            byte[] dataArray = new byte[arrayLength];\n            byte[] verifyArray = new byte[arrayLength];\n\n            new Random().NextBytes(dataArray);\n\n            using (BinaryWriter binWriter = new BinaryWriter(new MemoryStream()))\n            {\n                Console.WriteLine(&quot;Writing the data.&quot;);\n                binWriter.Write(dataArray, 0, arrayLength);\n\n                using (BinaryReader binReader = new BinaryReader(binWriter.BaseStream))\n                {\n                    binReader.BaseStream.Position = 0;\n                    \n                    if (binReader.Read(verifyArray, 0, arrayLength) != arrayLength)\n                    {\n                        Console.WriteLine(&quot;Error writing the data.&quot;);\n                        return;\n                    }\n                }\n            }\n\n            for (int i = 0; i &lt; arrayLength; i++)\n            {\n                if (verifyArray[i] != dataArray[i])\n                {\n                    Console.WriteLine(&quot;Error writing the data.&quot;);\n                    return;\n                }\n            }\n\n            Console.WriteLine(&quot;The data was written and verified.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWBytes2#1\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Const upperBound As Integer = 1000\n        Dim dataArray(upperBound) As Byte\n        Dim verifyArray(upperBound) As Byte\n\n        Dim randomGenerator As New Random\n        randomGenerator.NextBytes(dataArray)\n\n        Using binWriter As New BinaryWriter(New MemoryStream())\n            Console.WriteLine(&quot;Writing the data.&quot;)\n            binWriter.Write(dataArray, 0, dataArray.Length)\n\n            Using binReader As New BinaryReader(binWriter.BaseStream)\n                binReader.BaseStream.Position = 0\n\n                If binReader.Read(verifyArray, 0, dataArray.Length) &lt;&gt; dataArray.Length Then\n                    Console.WriteLine(&quot;Error writing the data.&quot;)\n                    Return\n                End If\n            End Using\n        End Using\n\n        For i As Integer = 0 To upperBound\n            If verifyArray(i) &lt;&gt; dataArray(i) Then\n                Console.WriteLine(&quot;Error writing the data.&quot;)\n                Return\n            End If\n        Next i\n\n        Console.WriteLine(&quot;The data was written and verified.&quot;)\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <code>Encoding</code> used and perhaps the specific characters being written to the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Write (char[] chars, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array containing the data to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting point in <code>chars</code> from which to begin writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write data using memory as a backing store.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        binWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        int arraySize = (int)(memStream.Length - memStream.Position);\n        char[] memoryData = new char[arraySize];\n        binReader.Read(memoryData, 0, arraySize);\n        Console.WriteLine(memoryData);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   binWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   int arraySize = (int)(memStream-&gt;Length - memStream-&gt;Position);\n   array&lt;Char&gt;^memoryData = gcnew array&lt;Char&gt;(arraySize);\n   binReader-&gt;Read( memoryData, 0, arraySize );\n   Console::WriteLine( memoryData );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        binWriter.Write(Path.InvalidPathChars, 0, _\n            Path.InvalidPathChars.Length)\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Dim upperBound As Integer = _\n            CInt(memStream.Length - memStream.Position) - 1\n        Dim memoryData(upperBound) As Char\n        binReader.Read(memoryData, 0, upperBound)\n        Console.WriteLine(memoryData)\n    \n\tEnd Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryWriter_Write7BitEncodedInt_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryWriter_Write7BitEncodedInt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write7BitEncodedInt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 32-bit integer in a compressed format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void Write7BitEncodedInt (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit integer to be written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The integer of the <code>value</code> parameter is written out seven bits at a time, starting with the seven least-significant bits. The high bit of a byte indicates whether there are more bytes to be written after this one.  </p>\n<p> If <code>value</code> will fit in seven bits, it takes only one byte of space. If <code>value</code> will not fit in seven bits, the high bit is set on the first byte and written out. <code>value</code> is then shifted by seven bits and the next byte is written. This process is repeated until the entire integer has been written.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.BinaryWriter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.BinaryWriter.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.BaseStream\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Close\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Flush\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Null\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.OutStream\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Seek\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Write\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryWriter.Write7BitEncodedInt\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4bdc68d1-bdf0-1ecc-9699-f8b9ce62bf50\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\BinaryWriter.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Writes primitive types in binary to a stream and supports writing strings in a specific encoding.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.BinaryWriter\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.BinaryWriter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.BinaryWriter.yml","open_to_public_contributors":true,"api_name":["System.IO.BinaryWriter","System.IO.BinaryWriter..ctor","System.IO.BinaryWriter.BaseStream","System.IO.BinaryWriter.Close","System.IO.BinaryWriter.Dispose","System.IO.BinaryWriter.Flush","System.IO.BinaryWriter.Null","System.IO.BinaryWriter.OutStream","System.IO.BinaryWriter.Seek","System.IO.BinaryWriter.Write","System.IO.BinaryWriter.Write7BitEncodedInt"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.BinaryWriter","System::IO::BinaryWriter","System.IO.BinaryWriter.#ctor","System::IO::BinaryWriter::#ctor","System.IO.BinaryWriter.BaseStream","System::IO::BinaryWriter::BaseStream","System.IO.BinaryWriter.Close","System::IO::BinaryWriter::Close","System.IO.BinaryWriter.Dispose","System::IO::BinaryWriter::Dispose","System.IO.BinaryWriter.Flush","System::IO::BinaryWriter::Flush","System.IO.BinaryWriter.Null","System::IO::BinaryWriter::Null","System.IO.BinaryWriter.OutStream","System::IO::BinaryWriter::OutStream","System.IO.BinaryWriter.Seek","System::IO::BinaryWriter::Seek","System.IO.BinaryWriter.Write","System::IO::BinaryWriter::Write","System.IO.BinaryWriter.Write7BitEncodedInt","System::IO::BinaryWriter::Write7BitEncodedInt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4bdc68d1-bdf0-1ecc-9699-f8b9ce62bf50","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\BinaryWriter.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/BinaryWriter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BinaryWriter class | Microsoft Docs","_op_ogTitle":"BinaryWriter class","description":"Writes primitive types in binary to a stream and supports writing strings in a specific encoding.\n","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.BinaryWriter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.binarywriter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.binarywriter","fileRelativePath":"System.IO.BinaryWriter.html"},"themesRelativePathToOutputRoot":"_themes/"}