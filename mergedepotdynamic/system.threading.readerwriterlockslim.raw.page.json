{"content":"    \r\n    <h1 id=\"System_Threading_ReaderWriterLockSlim\">\r\n      <span class=\"lang-csharp\">ReaderWriterLockSlim</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class ReaderWriterLockSlim : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ReaderWriterLockSlim</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use ReaderWriterLockSlim to protect a resource that is read by multiple threads and written to by one thread at a time. ReaderWriterLockSlim allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ReaderWriterLockSlim is similar to <a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a>, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlimavoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than <a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a>. ReaderWriterLockSlim is recommended for all new development.  </p>\n</div>\n<p> By default, new instances of ReaderWriterLockSlim are created with the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a> flag and do not allow recursion. This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks. To simplify migration from existing projects that use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> or <a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a>, you can use the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a> flag to create instances of ReaderWriterLockSlim that allow recursion.  </p>\n<p> A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode. (In the rest of this topic, &quot;upgradeable read mode&quot; is referred to as &quot;upgradeable mode&quot;, and the phrase &quot;enter <code>x</code> mode&quot; is used in preference to the longer phrase &quot;enter the lock in <code>x</code> mode&quot;.)  </p>\n<p> Regardless of recursion policy, only one thread can be in write mode at any time. When a thread is in write mode, no other thread can enter the lock in any mode. Only one thread can be in upgradeable mode at any time. Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> ReaderWriterLockSlim has managed thread affinity; that is, each <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> object must make its own method calls to enter and exit lock modes. No thread can change the mode of another thread.  </p>\n<p> If a ReaderWriterLockSlim does not allow recursion, a thread that tries to enter the lock can block for several reasons:  </p>\n<ul>\n<li><p>A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Blocking new readers when writers are queued is a lock fairness policy that favors writers. The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios. Future versions of the .NET Framework may introduce new fairness policies.  </p>\n</div>\n</li>\n<li><p>A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.  </p>\n</li>\n<li><p>A thread that tries to enter write mode blocks if there is a thread in any of the three modes.  </p>\n</li>\n</ul>\n<h2 id=\"upgrading-and-downgrading-locks\">Upgrading and Downgrading Locks</h2>\n<p> Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met. A thread that has entered a ReaderWriterLockSlim in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterWriteLock_\" data-linktype=\"relative-path\">EnterWriteLock</a> or <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_\" data-linktype=\"relative-path\">TryEnterWriteLock</a> methods. Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks. For example, if two threads in read mode both try to enter write mode, they will deadlock. Upgradeable mode is designed to avoid such deadlocks.  </p>\n</div>\n<p> If there are other threads in read mode, the thread that is upgrading blocks. While the thread is blocked, other threads that try to enter read mode are blocked. When all threads have exited from read mode, the blocked upgradeable thread enters write mode. If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.  </p>\n<p> When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode. The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode. Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.  </p>\n</div>\n<p> A thread in upgradeable mode can downgrade to read mode by first calling the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterReadLock_\" data-linktype=\"relative-path\">EnterReadLock</a> method and then calling the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_ExitUpgradeableReadLock_\" data-linktype=\"relative-path\">ExitUpgradeableReadLock</a> method. This downgrade pattern is allowed for all lock recursion policies, even <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a>.  </p>\n<p> After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.  </p>\n<h2 id=\"entering-the-lock-recursively\">Entering the Lock Recursively</h2>\n<p> You can create a ReaderWriterLockSlim that supports recursive lock entry by using the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim__ctor_System_Threading_LockRecursionPolicy_\" data-linktype=\"relative-path\">ReaderWriterLockSlim(LockRecursionPolicy)</a> constructor that specifies lock policy, and specifying <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.  </p>\n</div>\n<p> For a ReaderWriterLockSlim that allows recursion, the following can be said about the modes a thread can enter:  </p>\n<ul>\n<li><p>A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode. If it tries to do this, a <a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a> is thrown. Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed. As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.  </p>\n</li>\n<li><p>A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively. However, an attempt to enter write mode blocks if there are other threads in read mode.  </p>\n</li>\n<li><p>A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.  </p>\n</li>\n<li><p>A thread that has not entered the lock can enter any mode. This attempt can block for the same reasons as an attempt to enter a non-recursive lock.  </p>\n<p>A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode. If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a> is thrown.  </p>\n</li>\n</ul>\n<h2 id=\"lock-states\">Lock States</h2>\n<p> You may find it useful to think of the lock in terms of its states. A ReaderWriterLockSlim can be in one of four states: not entered, read, upgrade, and write.  </p>\n<ul>\n<li><p>Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).  </p>\n</li>\n<li><p>Read: In this state, one or more threads have entered the lock for read access to the protected resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A thread can enter the lock in read mode by using the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterReadLock_\" data-linktype=\"relative-path\">EnterReadLock</a> or <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterReadLock_\" data-linktype=\"relative-path\">TryEnterReadLock</a> methods, or by downgrading from upgradeable mode.  </p>\n</div>\n</li>\n<li><p>Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access. No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.  </p>\n</li>\n<li><p>Write: In this state, one thread has entered the lock for write access to the protected resource. That thread has exclusive possession of the lock. Any other thread that tries to enter the lock for any reason is blocked.  </p>\n<p>The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread <code>t</code> takes the action described in the leftmost column. At the time it takes the action, <code>t</code> has no mode. (The special case where <code>t</code> is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock. The cells describe what happens to the thread, and show changes to the lock state in parentheses.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Not entered (N)</th>\n<th>Read (R)</th>\n<th>Upgrade (U)</th>\n<th>Write (W)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>t</code> enters read mode</td>\n<td><code>t</code> enters (R).</td>\n<td><code>t</code> blocks if threads are waiting for write mode; otherwise, <code>t</code> enters.</td>\n<td><code>t</code> blocks if threads are waiting for write mode; otherwise, <code>t</code> enters.<sup>1</sup></td>\n<td><code>t</code> blocks.</td>\n</tr>\n<tr>\n<td><code>t</code> enters upgradeable mode</td>\n<td><code>t</code> enters (U).</td>\n<td><code>t</code> blocks if threads are waiting for write mode or upgrade mode; otherwise, <code>t</code> enters (U).</td>\n<td><code>t</code> blocks.</td>\n<td><code>t</code> blocks.</td>\n</tr>\n<tr>\n<td><code>t</code> enters write mode</td>\n<td><code>t</code> enters (W).</td>\n<td><code>t</code> blocks.</td>\n<td><code>t</code> blocks.<sup>2</sup></td>\n<td><code>t</code> blocks.</td>\n</tr>\n</tbody>\n</table>\n<p> <sup>1</sup> If <code>t</code> starts out in upgradeable mode, it enters read mode. This action never blocks. The lock state does not change. (The thread can then complete a downgrade to read mode by exiting upgradeable mode.)  </p>\n<p> <sup>2</sup> If <code>t</code> starts out in upgradeable mode, it blocks if there are threads in read mode. Otherwise it upgrades to write mode. The lock state changes to Write (W). If <code>t</code> blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.  </p>\n<p> When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:  </p>\n<ul>\n<li><p>First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).  </p>\n</li>\n<li><p>Failing that, a thread that is waiting for write mode.  </p>\n</li>\n<li><p>Failing that, a thread that is waiting for upgradeable mode.  </p>\n</li>\n<li><p>Failing that, all threads that are waiting for read mode.  </p>\n<p>The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change. In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim__ctor\" data-linktype=\"self-bookmark\">ReaderWriterLockSlim()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class with default property values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim__ctor_System_Threading_LockRecursionPolicy_\" data-linktype=\"self-bookmark\">ReaderWriterLockSlim(LockRecursionPolicy)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class, specifying the lock recursion policy.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_CurrentReadCount\" data-linktype=\"self-bookmark\">CurrentReadCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of unique threads that have entered the lock in read mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_IsReadLockHeld\" data-linktype=\"self-bookmark\">IsReadLockHeld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current thread has entered the lock in read mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_IsUpgradeableReadLockHeld\" data-linktype=\"self-bookmark\">IsUpgradeableReadLockHeld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_IsWriteLockHeld\" data-linktype=\"self-bookmark\">IsWriteLockHeld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current thread has entered the lock in write mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_RecursionPolicy\" data-linktype=\"self-bookmark\">RecursionPolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates the recursion policy for the current <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_RecursiveReadCount\" data-linktype=\"self-bookmark\">RecursiveReadCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_RecursiveUpgradeCount\" data-linktype=\"self-bookmark\">RecursiveUpgradeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_RecursiveWriteCount\" data-linktype=\"self-bookmark\">RecursiveWriteCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_WaitingReadCount\" data-linktype=\"self-bookmark\">WaitingReadCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of threads that are waiting to enter the lock in read mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_WaitingUpgradeCount\" data-linktype=\"self-bookmark\">WaitingUpgradeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_WaitingWriteCount\" data-linktype=\"self-bookmark\">WaitingWriteCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of threads that are waiting to enter the lock in write mode.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_EnterReadLock\" data-linktype=\"self-bookmark\">EnterReadLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in read mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_EnterUpgradeableReadLock\" data-linktype=\"self-bookmark\">EnterUpgradeableReadLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in upgradeable mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_EnterWriteLock\" data-linktype=\"self-bookmark\">EnterWriteLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in write mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_ExitReadLock\" data-linktype=\"self-bookmark\">ExitReadLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_ExitUpgradeableReadLock\" data-linktype=\"self-bookmark\">ExitUpgradeableReadLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_ExitWriteLock\" data-linktype=\"self-bookmark\">ExitWriteLock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterReadLock_System_Int32_\" data-linktype=\"self-bookmark\">TryEnterReadLock(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in read mode, with an optional integer time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterReadLock_System_TimeSpan_\" data-linktype=\"self-bookmark\">TryEnterReadLock(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in read mode, with an optional time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_System_Int32_\" data-linktype=\"self-bookmark\">TryEnterUpgradeableReadLock(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in upgradeable mode, with an optional time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_System_TimeSpan_\" data-linktype=\"self-bookmark\">TryEnterUpgradeableReadLock(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in upgradeable mode, with an optional time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_System_Int32_\" data-linktype=\"self-bookmark\">TryEnterWriteLock(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in write mode, with an optional time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_System_TimeSpan_\" data-linktype=\"self-bookmark\">TryEnterWriteLock(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to enter the lock in write mode, with an optional time-out.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim__ctor\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReaderWriterLockSlim()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class with default property values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ReaderWriterLockSlim ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> that is initialized with this constructor does not allow recursion. That is, the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_RecursionPolicy_\" data-linktype=\"relative-path\">RecursionPolicy</a> property returns <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a>.  </p>\n<p> For more information about recursion policy and its effects, see the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> enumeration and the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a simple synchronized cache that holds strings with integer keys. An instance of <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> is used to synchronize access to the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> that serves as the inner cache. The parameterless constructor is used to create the lock.  </p>\n<p> The example includes simple methods to add to the cache, delete from the cache, and read from the cache. To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.  </p>\n<p> To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value. If the value is unchanged, the method returns a status indicating no change. It no value is found for the key, the key/value pair is inserted. If the value has changed, it is updated. Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.  </p>\n<p> The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.  </p>\n<p> The example uses the default constructor to create the lock, so recursion is not allowed. Programming the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> is simpler and less prone to error when the lock does not allow recursion.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#11\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#12\">public class SynchronizedCache \n{\n    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n\n    public int Count\n    { get { return innerCache.Count; } }\n\n    public string Read(int key)\n    {\n        cacheLock.EnterReadLock();\n        try\n        {\n            return innerCache[key];\n        }\n        finally\n        {\n            cacheLock.ExitReadLock();\n        }\n    }\n\n    public void Add(int key, string value)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Add(key, value);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n\n    public bool AddWithTimeout(int key, string value, int timeout)\n    {\n        if (cacheLock.TryEnterWriteLock(timeout))\n        {\n            try\n            {\n                innerCache.Add(key, value);\n            }\n            finally\n            {\n                cacheLock.ExitWriteLock();\n            }\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public AddOrUpdateStatus AddOrUpdate(int key, string value)\n    {\n        cacheLock.EnterUpgradeableReadLock();\n        try\n        {\n            string result = null;\n            if (innerCache.TryGetValue(key, out result))\n            {\n                if (result == value)\n                {\n                    return AddOrUpdateStatus.Unchanged;\n                }\n                else\n                {\n                    cacheLock.EnterWriteLock();\n                    try\n                    {\n                        innerCache[key] = value;\n                    }\n                    finally\n                    {\n                        cacheLock.ExitWriteLock();\n                    }\n                    return AddOrUpdateStatus.Updated;\n                }\n            }\n            else\n            {\n                cacheLock.EnterWriteLock();\n                try\n                {\n                    innerCache.Add(key, value);\n                }\n                finally\n                {\n                    cacheLock.ExitWriteLock();\n                }\n                return AddOrUpdateStatus.Added;\n            }\n        }\n        finally\n        {\n            cacheLock.ExitUpgradeableReadLock();\n        }\n    }\n\n    public void Delete(int key)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Remove(key);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n\n    public enum AddOrUpdateStatus\n    {\n        Added,\n        Updated,\n        Unchanged\n    };\n\n    ~SynchronizedCache()\n    {\n       if (cacheLock != null) cacheLock.Dispose();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#12\">Public Class SynchronizedCache\n    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n\n    Public ReadOnly Property Count As Integer\n       Get\n          Return innerCache.Count\n       End Get\n    End Property\n    \n    Public Function Read(ByVal key As Integer) As String\n        cacheLock.EnterReadLock()\n        Try\n            Return innerCache(key)\n        Finally\n            cacheLock.ExitReadLock()\n        End Try\n    End Function\n\n    Public Sub Add(ByVal key As Integer, ByVal value As String)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Add(key, value)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n\n    Public Function AddWithTimeout(ByVal key As Integer, ByVal value As String, _\n                                   ByVal timeout As Integer) As Boolean\n        If cacheLock.TryEnterWriteLock(timeout) Then\n            Try\n                innerCache.Add(key, value)\n            Finally\n                cacheLock.ExitWriteLock()\n            End Try\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function AddOrUpdate(ByVal key As Integer, _\n                                ByVal value As String) As AddOrUpdateStatus\n        cacheLock.EnterUpgradeableReadLock()\n        Try\n            Dim result As String = Nothing\n            If innerCache.TryGetValue(key, result) Then\n                If result = value Then\n                    Return AddOrUpdateStatus.Unchanged\n                Else\n                    cacheLock.EnterWriteLock()\n                    Try\n                        innerCache.Item(key) = value\n                    Finally\n                        cacheLock.ExitWriteLock()\n                    End Try\n                    Return AddOrUpdateStatus.Updated\n                End If\n            Else\n                cacheLock.EnterWriteLock()\n                Try\n                    innerCache.Add(key, value)\n                Finally\n                    cacheLock.ExitWriteLock()\n                End Try\n                Return AddOrUpdateStatus.Added\n            End If\n        Finally\n            cacheLock.ExitUpgradeableReadLock()\n        End Try\n    End Function\n\n    Public Sub Delete(ByVal key As Integer)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Remove(key)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n\n    Public Enum AddOrUpdateStatus\n        Added\n        Updated\n        Unchanged\n    End Enum\n\n    Protected Overrides Sub Finalize()\n       If cacheLock IsNot Nothing Then cacheLock.Dispose()\n    End Sub\nEnd Class\n</code></pre><p> The following code then uses the <code>SynchronizedCache</code> object to store a dictionary of vegetable names. It creates three tasks. The first writes the names of vegetables stored in an array to a <code>SynchronizedCache</code> instance. The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order. The final task searches for the string &quot;cucumber&quot; and, when it finds it, calls the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterUpgradeableReadLock_\" data-linktype=\"relative-path\">EnterUpgradeableReadLock</a> method  to substitute the string &quot;green bean&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#11\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#13\">public class Example\n{\n   public static void Main()\n   {\n      var sc = new SynchronizedCache();\n      var tasks = new List&lt;Task&gt;();\n      int itemsWritten = 0;\n\n      // Execute a writer.\n      tasks.Add(Task.Run( () =&gt; { String[] vegetables = { &quot;broccoli&quot;, &quot;cauliflower&quot;,\n                                                          &quot;carrot&quot;, &quot;sorrel&quot;, &quot;baby turnip&quot;,\n                                                          &quot;beet&quot;, &quot;brussel sprout&quot;,\n                                                          &quot;cabbage&quot;, &quot;plantain&quot;,\n                                                          &quot;spinach&quot;, &quot;grape leaves&quot;,\n                                                          &quot;lime leaves&quot;, &quot;corn&quot;,\n                                                          &quot;radish&quot;, &quot;cucumber&quot;,\n                                                          &quot;raddichio&quot;, &quot;lima beans&quot; };\n                                  for (int ctr = 1; ctr &lt;= vegetables.Length; ctr++)\n                                     sc.Add(ctr, vegetables[ctr - 1]);\n\n                                  itemsWritten = vegetables.Length;\n                                  Console.WriteLine(&quot;Task {0} wrote {1} items<br>&quot;,\n                                                    Task.CurrentId, itemsWritten);\n                                } ));\n      // Execute two readers, one to read from first to last and the second from last to first.\n      for (int ctr = 0; ctr &lt;= 1; ctr++) {\n         bool desc = Convert.ToBoolean(ctr);\n         tasks.Add(Task.Run( () =&gt; { int start, last, step;\n                                     int items;\n                                     do {\n                                        String output = String.Empty;\n                                        items = sc.Count;\n                                        if (! desc) {\n                                           start = 1;\n                                           step = 1;\n                                           last = items;\n                                        }\n                                        else {\n                                           start = items;\n                                           step = -1;\n                                           last = 1;\n                                        }\n\n                                        for (int index = start; desc ? index &gt;= last : index &lt;= last; index += step)\n                                           output += String.Format(&quot;[{0}] &quot;, sc.Read(index));\n\n                                        Console.WriteLine(&quot;Task {0} read {1} items: {2}<br>&quot;,\n                                                          Task.CurrentId, items, output);\n                                     } while (items &lt; itemsWritten | itemsWritten == 0);\n                             } ));\n      }\n      // Execute a red/update task.\n      tasks.Add(Task.Run( () =&gt; { Thread.Sleep(100);\n                                  for (int ctr = 1; ctr &lt;= sc.Count; ctr++) {\n                                     String value = sc.Read(ctr);\n                                     if (value == &quot;cucumber&quot;)\n                                        if (sc.AddOrUpdate(ctr, &quot;green bean&quot;) != SynchronizedCache.AddOrUpdateStatus.Unchanged)\n                                           Console.WriteLine(&quot;Changed &#39;cucumber&#39; to &#39;green bean&#39;&quot;);\n                                  }\n                                } ));\n\n      // Wait for all three tasks to complete.\n      Task.WaitAll(tasks.ToArray());\n\n      // Display the final contents of the cache.\n      Console.WriteLine();\n      Console.WriteLine(&quot;Values in synchronized cache: &quot;);\n      for (int ctr = 1; ctr &lt;= sc.Count; ctr++)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, sc.Read(ctr));\n\n   }\n}\n// The example displays the following output:\n//    Task 1 read 0 items:\n//\n//    Task 3 wrote 17 items\n//\n//\n//    Task 1 read 17 items: [broccoli] [cauliflower] [carrot] [sorrel] [baby turnip] [\n//    beet] [brussel sprout] [cabbage] [plantain] [spinach] [grape leaves] [lime leave\n//    s] [corn] [radish] [cucumber] [raddichio] [lima beans]\n//\n//    Task 2 read 0 items:\n//\n//    Task 2 read 17 items: [lima beans] [raddichio] [cucumber] [radish] [corn] [lime\n//    leaves] [grape leaves] [spinach] [plantain] [cabbage] [brussel sprout] [beet] [b\n//    aby turnip] [sorrel] [carrot] [cauliflower] [broccoli]\n//\n//    Changed &#39;cucumber&#39; to &#39;green bean&#39;\n//\n//    Values in synchronized cache:\n//       1: broccoli\n//       2: cauliflower\n//       3: carrot\n//       4: sorrel\n//       5: baby turnip\n//       6: beet\n//       7: brussel sprout\n//       8: cabbage\n//       9: plantain\n//       10: spinach\n//       11: grape leaves\n//       12: lime leaves\n//       13: corn\n//       14: radish\n//       15: green bean\n//       16: raddichio\n//       17: lima beans\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#13\">Public Module Example\n   Public Sub Main()\n      Dim sc As New SynchronizedCache()\n      Dim tasks As New List(Of Task)\n      Dim itemsWritten As Integer\n      \n      &#39; Execute a writer.\n      tasks.Add(Task.Run( Sub()\n                             Dim vegetables() As String = { &quot;broccoli&quot;, &quot;cauliflower&quot;,\n                                                            &quot;carrot&quot;, &quot;sorrel&quot;, &quot;baby turnip&quot;,\n                                                            &quot;beet&quot;, &quot;brussel sprout&quot;,\n                                                            &quot;cabbage&quot;, &quot;plantain&quot;,\n                                                            &quot;spinach&quot;, &quot;grape leaves&quot;,\n                                                            &quot;lime leaves&quot;, &quot;corn&quot;,\n                                                            &quot;radish&quot;, &quot;cucumber&quot;,\n                                                            &quot;raddichio&quot;, &quot;lima beans&quot; }\n                             For ctr As Integer = 1 to vegetables.Length\n                                sc.Add(ctr, vegetables(ctr - 1))\n                             Next\n                             itemsWritten = vegetables.Length\n                             Console.WriteLine(&quot;Task {0} wrote {1} items{2}&quot;,\n                                               Task.CurrentId, itemsWritten, vbCrLf)\n                          End Sub))\n      &#39; Execute two readers, one to read from first to last and the second from last to first.\n      For ctr As Integer = 0 To 1\n         Dim flag As Integer = ctr\n         tasks.Add(Task.Run( Sub()\n                                Dim start, last, stp As Integer\n                                Dim items As Integer\n                                Do\n                                   Dim output As String = String.Empty\n                                   items = sc.Count\n                                   If flag = 0 Then\n                                      start = 1 : stp = 1 : last = items\n                                   Else\n                                      start = items : stp = -1 : last = 1\n                                   End If\n                                   For index As Integer = start To last Step stp\n                                      output += String.Format(&quot;[{0}] &quot;, sc.Read(index))\n                                   Next\n                                   Console.WriteLine(&quot;Task {0} read {1} items: {2}{3}&quot;,\n                                                           Task.CurrentId, items, output,\n                                                           vbCrLf)\n                                Loop While items &lt; itemsWritten Or itemsWritten = 0\n                             End Sub))\n      Next\n      &#39; Execute a red/update task.\n      tasks.Add(Task.Run( Sub()\n                             For ctr As Integer = 1 To sc.Count\n                                Dim value As String = sc.Read(ctr)\n                                If value = &quot;cucumber&quot; Then\n                                   If sc.AddOrUpdate(ctr, &quot;green bean&quot;) &lt;&gt; SynchronizedCache.AddOrUpdateStatus.Unchanged Then\n                                      Console.WriteLine(&quot;Changed &#39;cucumber&#39; to &#39;green bean&#39;&quot;)\n                                   End If\n                                End If\n                             Next\n                          End Sub ))\n\n      &#39; Wait for all three tasks to complete.\n      Task.WaitAll(tasks.ToArray())\n\n      &#39; Display the final contents of the cache.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Values in synchronized cache: &quot;)\n      For ctr As Integer = 1 To sc.Count\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, sc.Read(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Task 1 read 0 items:\n&#39;\n&#39;    Task 3 wrote 17 items\n&#39;\n&#39;    Task 1 read 17 items: [broccoli] [cauliflower] [carrot] [sorrel] [baby turnip] [\n&#39;    beet] [brussel sprout] [cabbage] [plantain] [spinach] [grape leaves] [lime leave\n&#39;    s] [corn] [radish] [cucumber] [raddichio] [lima beans]\n&#39;\n&#39;    Task 2 read 0 items:\n&#39;\n&#39;    Task 2 read 17 items: [lima beans] [raddichio] [cucumber] [radish] [corn] [lime\n&#39;    leaves] [grape leaves] [spinach] [plantain] [cabbage] [brussel sprout] [beet] [b\n&#39;    aby turnip] [sorrel] [carrot] [cauliflower] [broccoli]\n&#39;\n&#39;    Changed &#39;cucumber&#39; to &#39;green bean&#39;\n&#39;\n&#39;    Values in synchronized cache:\n&#39;       1: broccoli\n&#39;       2: cauliflower\n&#39;       3: carrot\n&#39;       4: sorrel\n&#39;       5: baby turnip\n&#39;       6: beet\n&#39;       7: brussel sprout\n&#39;       8: cabbage\n&#39;       9: plantain\n&#39;       10: spinach\n&#39;       11: grape leaves\n&#39;       12: lime leaves\n&#39;       13: corn\n&#39;       14: radish\n&#39;       15: green bean\n&#39;       16: raddichio\n&#39;       17: lima beans\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim__ctor_System_Threading_LockRecursionPolicy_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReaderWriterLockSlim(LockRecursionPolicy)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class, specifying the lock recursion policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>recursionPolicy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the lock recursion policy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Recursion policy determines the restrictions on threads that enter the lock more than once. For example, if a lock was created with <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a> and a thread has entered the lock in read mode, <a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a> is thrown if the thread tries to reenter the lock in read mode. Similarly, if a thread has entered the lock in write mode, <a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a> is thrown if the thread tries to reenter the lock in any mode.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.  </p>\n</div>\n<p> Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.  </p>\n<p> For more information about recursion policy and its effects, see the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> enumeration and the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two exception scenarios, one that depends on the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> setting and one that does not.  </p>\n<p> In the first scenario, the thread enters read mode and then tries to enter read mode recursively. If the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> is created by using the default constructor, which sets recursion policy to <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a>, an exception is thrown. If <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a> is used to create the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a>, no exception is thrown.  </p>\n<p> In the second scenario, the thread enters read mode and then tries to enter write mode. <a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a> is thrown regardless of the lock recursion policy.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.LockRecursionPolicy#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.LockRecursionPolicy#11\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.LockRecursionPolicy#12\">public class SynchronizedCache \n{\n    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n\n    public int Count\n    { get { return innerCache.Count; } }\n\n    public string Read(int key)\n    {\n        cacheLock.EnterReadLock();\n        try\n        {\n            return innerCache[key];\n        }\n        finally\n        {\n            cacheLock.ExitReadLock();\n        }\n    }\n\n    public void Add(int key, string value)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Add(key, value);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n\n    public bool AddWithTimeout(int key, string value, int timeout)\n    {\n        if (cacheLock.TryEnterWriteLock(timeout))\n        {\n            try\n            {\n                innerCache.Add(key, value);\n            }\n            finally\n            {\n                cacheLock.ExitWriteLock();\n            }\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public AddOrUpdateStatus AddOrUpdate(int key, string value)\n    {\n        cacheLock.EnterUpgradeableReadLock();\n        try\n        {\n            string result = null;\n            if (innerCache.TryGetValue(key, out result))\n            {\n                if (result == value)\n                {\n                    return AddOrUpdateStatus.Unchanged;\n                }\n                else\n                {\n                    cacheLock.EnterWriteLock();\n                    try\n                    {\n                        innerCache[key] = value;\n                    }\n                    finally\n                    {\n                        cacheLock.ExitWriteLock();\n                    }\n                    return AddOrUpdateStatus.Updated;\n                }\n            }\n            else\n            {\n                cacheLock.EnterWriteLock();\n                try\n                {\n                    innerCache.Add(key, value);\n                }\n                finally\n                {\n                    cacheLock.ExitWriteLock();\n                }\n                return AddOrUpdateStatus.Added;\n            }\n        }\n        finally\n        {\n            cacheLock.ExitUpgradeableReadLock();\n        }\n    }\n\n    public void Delete(int key)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Remove(key);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n\n    public enum AddOrUpdateStatus\n    {\n        Added,\n        Updated,\n        Unchanged\n    };\n\n    ~SynchronizedCache()\n    {\n       if (cacheLock != null) cacheLock.Dispose();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.LockRecursionPolicy#12\">Public Class SynchronizedCache\n    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n\n    Public ReadOnly Property Count As Integer\n       Get\n          Return innerCache.Count\n       End Get\n    End Property\n    \n    Public Function Read(ByVal key As Integer) As String\n        cacheLock.EnterReadLock()\n        Try\n            Return innerCache(key)\n        Finally\n            cacheLock.ExitReadLock()\n        End Try\n    End Function\n\n    Public Sub Add(ByVal key As Integer, ByVal value As String)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Add(key, value)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n\n    Public Function AddWithTimeout(ByVal key As Integer, ByVal value As String, _\n                                   ByVal timeout As Integer) As Boolean\n        If cacheLock.TryEnterWriteLock(timeout) Then\n            Try\n                innerCache.Add(key, value)\n            Finally\n                cacheLock.ExitWriteLock()\n            End Try\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function AddOrUpdate(ByVal key As Integer, _\n                                ByVal value As String) As AddOrUpdateStatus\n        cacheLock.EnterUpgradeableReadLock()\n        Try\n            Dim result As String = Nothing\n            If innerCache.TryGetValue(key, result) Then\n                If result = value Then\n                    Return AddOrUpdateStatus.Unchanged\n                Else\n                    cacheLock.EnterWriteLock()\n                    Try\n                        innerCache.Item(key) = value\n                    Finally\n                        cacheLock.ExitWriteLock()\n                    End Try\n                    Return AddOrUpdateStatus.Updated\n                End If\n            Else\n                cacheLock.EnterWriteLock()\n                Try\n                    innerCache.Add(key, value)\n                Finally\n                    cacheLock.ExitWriteLock()\n                End Try\n                Return AddOrUpdateStatus.Added\n            End If\n        Finally\n            cacheLock.ExitUpgradeableReadLock()\n        End Try\n    End Function\n\n    Public Sub Delete(ByVal key As Integer)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Remove(key)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n\n    Public Enum AddOrUpdateStatus\n        Added\n        Updated\n        Unchanged\n    End Enum\n\n    Protected Overrides Sub Finalize()\n       If cacheLock IsNot Nothing Then cacheLock.Dispose()\n    End Sub\nEnd Class\n</code></pre><p> The following code then uses the <code>SynchronizedCache</code> object to store a dictionary of vegetable names. It creates three tasks. The first writes the names of vegetables stored in an array to a <code>SynchronizedCache</code> instance. The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order. The final task searches for the string &quot;cucumber&quot; and, when it finds it, calls the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterUpgradeableReadLock_\" data-linktype=\"relative-path\">EnterUpgradeableReadLock</a> method  to substitute the string &quot;green bean&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.LockRecursionPolicy#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.LockRecursionPolicy#11\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.LockRecursionPolicy#13\">public class Example\n{\n   public static void Main()\n   {\n      var sc = new SynchronizedCache();\n      var tasks = new List&lt;Task&gt;();\n      int itemsWritten = 0;\n\n      // Execute a writer.\n      tasks.Add(Task.Run( () =&gt; { String[] vegetables = { &quot;broccoli&quot;, &quot;cauliflower&quot;,\n                                                          &quot;carrot&quot;, &quot;sorrel&quot;, &quot;baby turnip&quot;,\n                                                          &quot;beet&quot;, &quot;brussel sprout&quot;,\n                                                          &quot;cabbage&quot;, &quot;plantain&quot;,\n                                                          &quot;spinach&quot;, &quot;grape leaves&quot;,\n                                                          &quot;lime leaves&quot;, &quot;corn&quot;,\n                                                          &quot;radish&quot;, &quot;cucumber&quot;,\n                                                          &quot;raddichio&quot;, &quot;lima beans&quot; };\n                                  for (int ctr = 1; ctr &lt;= vegetables.Length; ctr++)\n                                     sc.Add(ctr, vegetables[ctr - 1]);\n\n                                  itemsWritten = vegetables.Length;\n                                  Console.WriteLine(&quot;Task {0} wrote {1} items<br>&quot;,\n                                                    Task.CurrentId, itemsWritten);\n                                } ));\n      // Execute two readers, one to read from first to last and the second from last to first.\n      for (int ctr = 0; ctr &lt;= 1; ctr++) {\n         bool desc = Convert.ToBoolean(ctr);\n         tasks.Add(Task.Run( () =&gt; { int start, last, step;\n                                     int items;\n                                     do {\n                                        String output = String.Empty;\n                                        items = sc.Count;\n                                        if (! desc) {\n                                           start = 1;\n                                           step = 1;\n                                           last = items;\n                                        }\n                                        else {\n                                           start = items;\n                                           step = -1;\n                                           last = 1;\n                                        }\n\n                                        for (int index = start; desc ? index &gt;= last : index &lt;= last; index += step)\n                                           output += String.Format(&quot;[{0}] &quot;, sc.Read(index));\n\n                                        Console.WriteLine(&quot;Task {0} read {1} items: {2}<br>&quot;,\n                                                          Task.CurrentId, items, output);\n                                     } while (items &lt; itemsWritten | itemsWritten == 0);\n                             } ));\n      }\n      // Execute a red/update task.\n      tasks.Add(Task.Run( () =&gt; { Thread.Sleep(100);\n                                  for (int ctr = 1; ctr &lt;= sc.Count; ctr++) {\n                                     String value = sc.Read(ctr);\n                                     if (value == &quot;cucumber&quot;)\n                                        if (sc.AddOrUpdate(ctr, &quot;green bean&quot;) != SynchronizedCache.AddOrUpdateStatus.Unchanged)\n                                           Console.WriteLine(&quot;Changed &#39;cucumber&#39; to &#39;green bean&#39;&quot;);\n                                  }\n                                } ));\n\n      // Wait for all three tasks to complete.\n      Task.WaitAll(tasks.ToArray());\n\n      // Display the final contents of the cache.\n      Console.WriteLine();\n      Console.WriteLine(&quot;Values in synchronized cache: &quot;);\n      for (int ctr = 1; ctr &lt;= sc.Count; ctr++)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, sc.Read(ctr));\n\n   }\n}\n// The example displays the following output:\n//    Task 1 read 0 items:\n//\n//    Task 3 wrote 17 items\n//\n//\n//    Task 1 read 17 items: [broccoli] [cauliflower] [carrot] [sorrel] [baby turnip] [\n//    beet] [brussel sprout] [cabbage] [plantain] [spinach] [grape leaves] [lime leave\n//    s] [corn] [radish] [cucumber] [raddichio] [lima beans]\n//\n//    Task 2 read 0 items:\n//\n//    Task 2 read 17 items: [lima beans] [raddichio] [cucumber] [radish] [corn] [lime\n//    leaves] [grape leaves] [spinach] [plantain] [cabbage] [brussel sprout] [beet] [b\n//    aby turnip] [sorrel] [carrot] [cauliflower] [broccoli]\n//\n//    Changed &#39;cucumber&#39; to &#39;green bean&#39;\n//\n//    Values in synchronized cache:\n//       1: broccoli\n//       2: cauliflower\n//       3: carrot\n//       4: sorrel\n//       5: baby turnip\n//       6: beet\n//       7: brussel sprout\n//       8: cabbage\n//       9: plantain\n//       10: spinach\n//       11: grape leaves\n//       12: lime leaves\n//       13: corn\n//       14: radish\n//       15: green bean\n//       16: raddichio\n//       17: lima beans\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.LockRecursionPolicy#13\">Public Module Example\n   Public Sub Main()\n      Dim sc As New SynchronizedCache()\n      Dim tasks As New List(Of Task)\n      Dim itemsWritten As Integer\n      \n      &#39; Execute a writer.\n      tasks.Add(Task.Run( Sub()\n                             Dim vegetables() As String = { &quot;broccoli&quot;, &quot;cauliflower&quot;,\n                                                            &quot;carrot&quot;, &quot;sorrel&quot;, &quot;baby turnip&quot;,\n                                                            &quot;beet&quot;, &quot;brussel sprout&quot;,\n                                                            &quot;cabbage&quot;, &quot;plantain&quot;,\n                                                            &quot;spinach&quot;, &quot;grape leaves&quot;,\n                                                            &quot;lime leaves&quot;, &quot;corn&quot;,\n                                                            &quot;radish&quot;, &quot;cucumber&quot;,\n                                                            &quot;raddichio&quot;, &quot;lima beans&quot; }\n                             For ctr As Integer = 1 to vegetables.Length\n                                sc.Add(ctr, vegetables(ctr - 1))\n                             Next\n                             itemsWritten = vegetables.Length\n                             Console.WriteLine(&quot;Task {0} wrote {1} items{2}&quot;,\n                                               Task.CurrentId, itemsWritten, vbCrLf)\n                          End Sub))\n      &#39; Execute two readers, one to read from first to last and the second from last to first.\n      For ctr As Integer = 0 To 1\n         Dim flag As Integer = ctr\n         tasks.Add(Task.Run( Sub()\n                                Dim start, last, stp As Integer\n                                Dim items As Integer\n                                Do\n                                   Dim output As String = String.Empty\n                                   items = sc.Count\n                                   If flag = 0 Then\n                                      start = 1 : stp = 1 : last = items\n                                   Else\n                                      start = items : stp = -1 : last = 1\n                                   End If\n                                   For index As Integer = start To last Step stp\n                                      output += String.Format(&quot;[{0}] &quot;, sc.Read(index))\n                                   Next\n                                   Console.WriteLine(&quot;Task {0} read {1} items: {2}{3}&quot;,\n                                                           Task.CurrentId, items, output,\n                                                           vbCrLf)\n                                Loop While items &lt; itemsWritten Or itemsWritten = 0\n                             End Sub))\n      Next\n      &#39; Execute a red/update task.\n      tasks.Add(Task.Run( Sub()\n                             For ctr As Integer = 1 To sc.Count\n                                Dim value As String = sc.Read(ctr)\n                                If value = &quot;cucumber&quot; Then\n                                   If sc.AddOrUpdate(ctr, &quot;green bean&quot;) &lt;&gt; SynchronizedCache.AddOrUpdateStatus.Unchanged Then\n                                      Console.WriteLine(&quot;Changed &#39;cucumber&#39; to &#39;green bean&#39;&quot;)\n                                   End If\n                                End If\n                             Next\n                          End Sub ))\n\n      &#39; Wait for all three tasks to complete.\n      Task.WaitAll(tasks.ToArray())\n\n      &#39; Display the final contents of the cache.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Values in synchronized cache: &quot;)\n      For ctr As Integer = 1 To sc.Count\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, sc.Read(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Task 1 read 0 items:\n&#39;\n&#39;    Task 3 wrote 17 items\n&#39;\n&#39;    Task 1 read 17 items: [broccoli] [cauliflower] [carrot] [sorrel] [baby turnip] [\n&#39;    beet] [brussel sprout] [cabbage] [plantain] [spinach] [grape leaves] [lime leave\n&#39;    s] [corn] [radish] [cucumber] [raddichio] [lima beans]\n&#39;\n&#39;    Task 2 read 0 items:\n&#39;\n&#39;    Task 2 read 17 items: [lima beans] [raddichio] [cucumber] [radish] [corn] [lime\n&#39;    leaves] [grape leaves] [spinach] [plantain] [cabbage] [brussel sprout] [beet] [b\n&#39;    aby turnip] [sorrel] [carrot] [cauliflower] [broccoli]\n&#39;\n&#39;    Changed &#39;cucumber&#39; to &#39;green bean&#39;\n&#39;\n&#39;    Values in synchronized cache:\n&#39;       1: broccoli\n&#39;       2: cauliflower\n&#39;       3: carrot\n&#39;       4: sorrel\n&#39;       5: baby turnip\n&#39;       6: beet\n&#39;       7: brussel sprout\n&#39;       8: cabbage\n&#39;       9: plantain\n&#39;       10: spinach\n&#39;       11: grape leaves\n&#39;       12: lime leaves\n&#39;       13: corn\n&#39;       14: radish\n&#39;       15: green bean\n&#39;       16: raddichio\n&#39;       17: lima beans\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_CurrentReadCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_CurrentReadCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentReadCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of unique threads that have entered the lock in read mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CurrentReadCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of unique threads that have entered the lock in read mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.  </p>\n<p> Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the CurrentReadCount property to generate an event log entry if the number of threads in read mode exceeds a threshold.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#2\">           if (!EventLog.SourceExists(&quot;MySource&quot;))\n           {\n               EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyPerformanceLog&quot;);\n           }\n           EventLog performanceLog = new EventLog();\n           performanceLog.Source = &quot;MySource&quot;;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#2\">           If Not EventLog.SourceExists(&quot;MySource&quot;) Then\n               EventLog.CreateEventSource(&quot;MySource&quot;, &quot;MyPerformanceLog&quot;)\n           End If\n           Dim performanceLog As New EventLog()\n           performanceLog.Source = &quot;MySource&quot;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#11\">           int readCt = rwLock.CurrentReadCount;\n           if (readCt &gt; READ_THRESHOLD)\n           {\n               performanceLog.WriteEntry(String.Format(\n                   &quot;{0} reader threads; exceeds recommended maximum.&quot;, readCt));\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#11\">           Dim readCt As Integer = rwLock.CurrentReadCount\n           If readCt &gt; READ_THRESHOLD Then\n               performanceLog.WriteEntry(String.Format( _\n                   &quot;{0} reader threads; exceeds recommended maximum.&quot;, readCt))\n           End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_IsReadLockHeld\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_IsReadLockHeld_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadLockHeld</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current thread has entered the lock in read mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadLockHeld { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread has entered read mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is intended for use in asserts or for other debugging purposes. Do not use it to control the flow of program execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the IsReadLockHeld property to generate an assert if the current thread has entered read mode unexpectedly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#21\">           Debug.Assert(!rwLock.IsReadLockHeld,\n               String.Format(&quot;Thread {0} already held the read lock when MyFunction began executing.&quot;,\n                             Thread.CurrentThread.ManagedThreadId));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#21\">           Debug.Assert(Not rwLock.IsReadLockHeld, _\n               String.Format(&quot;Thread {0} already held the read lock when MyFunction began executing.&quot;, _\n                             Thread.CurrentThread.ManagedThreadId))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_IsUpgradeableReadLockHeld\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_IsUpgradeableReadLockHeld_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUpgradeableReadLockHeld</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUpgradeableReadLockHeld { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread has entered upgradeable mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is intended for use in asserts or for other debugging purposes. Do not use it to control the flow of program execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the IsUpgradeableReadLockHeld property to generate an assert if the current thread has entered upgradeable mode unexpectedly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#22\">           Debug.Assert(!rwLock.IsUpgradeableReadLockHeld,\n               String.Format(&quot;Thread {0} has entered the upgradeable read lock while MyFunction is still executing.&quot;,\n                             Thread.CurrentThread.ManagedThreadId));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#22\">           Debug.Assert(Not rwLock.IsUpgradeableReadLockHeld, _\n               String.Format(&quot;Thread {0} has entered the upgradeable read lock while MyFunction is still executing.&quot;, _\n                             Thread.CurrentThread.ManagedThreadId))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_IsWriteLockHeld\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_IsWriteLockHeld_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsWriteLockHeld</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current thread has entered the lock in write mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsWriteLockHeld { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread has entered write mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is intended for use in asserts or for other debugging purposes. Do not use it to control the flow of program execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the IsWriteLockHeld property to generate an assert if the current thread has entered write mode unexpectedly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#23\">           Debug.Assert(!rwLock.IsWriteLockHeld, \n               String.Format(&quot;Thread {0} is still holding the write lock after MyFunction has finished.&quot;, \n                             Thread.CurrentThread.ManagedThreadId));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#23\">           Debug.Assert(Not rwLock.IsWriteLockHeld, _\n               String.Format(&quot;Thread {0} is still holding the write lock after MyFunction has finished.&quot;, _\n                             Thread.CurrentThread.ManagedThreadId))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_RecursionPolicy\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_RecursionPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecursionPolicy</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates the recursion policy for the current <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.LockRecursionPolicy RecursionPolicy { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a></div>\r\n                  </div>\r\n                  <p>One of the enumeration values that specifies the lock recursion policy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Recursion policy determines the restrictions on threads that enter the lock more than once. For example, if a lock was created with <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">System.Threading.LockRecursionPolicy</a> and a thread has entered the lock in read mode, <a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a> is thrown if the thread tries to reenter the lock in read mode.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.  </p>\n</div>\n<p> Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.  </p>\n<p> For more information about recursion policy and its effects, see the <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> enumeration and the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_RecursiveReadCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_RecursiveReadCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecursiveReadCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RecursiveReadCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or <em>n</em> if the thread has entered the lock recursively <em>n</em> - 1 times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_RecursiveUpgradeCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_RecursiveUpgradeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecursiveUpgradeCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RecursiveUpgradeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or <em>n</em> if the thread has entered upgradeable mode recursively <em>n</em> - 1 times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_RecursiveWriteCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_RecursiveWriteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecursiveWriteCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RecursiveWriteCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or <em>n</em> if the thread has entered write mode recursively <em>n</em> - 1 times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_WaitingReadCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_WaitingReadCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitingReadCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of threads that are waiting to enter the lock in read mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int WaitingReadCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of threads that are waiting to enter read mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the WaitingReadCount property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#31\">           int waitingReadCt = rwLock.WaitingReadCount;\n           if (waitingReadCt &gt; READ_THRESHOLD)\n           {\n               performanceLog.WriteEntry(String.Format(\n                   &quot;{0} blocked reader threads; exceeds recommended maximum.&quot;, \n                   waitingReadCt));\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#31\">           Dim waitingReadCt As Integer = rwLock.WaitingReadCount\n           If waitingReadCt &gt; READ_THRESHOLD Then\n               performanceLog.WriteEntry(String.Format( _\n                   &quot;{0} blocked reader threads; exceeds recommended maximum.&quot;, _\n                   waitingReadCt))\n           End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_WaitingUpgradeCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_WaitingUpgradeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitingUpgradeCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int WaitingUpgradeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of threads that are waiting to enter upgradeable mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the WaitingUpgradeCount property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#33\">           int waitingUpgradeableReadCt = rwLock.WaitingUpgradeCount;\n           if (waitingUpgradeableReadCt &gt; UPGRADEABLEREAD_THRESHOLD)\n           {\n               performanceLog.WriteEntry(String.Format(\n                   &quot;{0} blocked upgradeable reader threads; exceeds recommended maximum.&quot;, \n                   waitingUpgradeableReadCt));\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#33\">           Dim waitingUpgradeableReadCt As Integer = rwLock.WaitingUpgradeCount\n           If waitingUpgradeableReadCt &gt; UPGRADEABLEREAD_THRESHOLD Then\n               performanceLog.WriteEntry(String.Format( _\n                   &quot;{0} blocked upgradeable reader threads; exceeds recommended maximum.&quot;, _\n                   waitingUpgradeableReadCt))\n           End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_WaitingWriteCount\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_WaitingWriteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitingWriteCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of threads that are waiting to enter the lock in write mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int WaitingWriteCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of threads that are waiting to enter write mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm. The results can change as soon as they have been calculated. Therefore, it is not safe to make decisions based on this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the WaitingWriteCount property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        using (ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim()) {\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#1\">        Using rwLock As New ReaderWriterLockSlim()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Aux#32\">           int waitingWriteCt = rwLock.WaitingWriteCount;\n           if (waitingWriteCt &gt; WRITE_THRESHOLD)\n           {\n               performanceLog.WriteEntry(String.Format(\n                   &quot;{0} blocked writer threads; exceeds recommended maximum.&quot;, \n                   waitingWriteCt));\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Aux#32\">           Dim waitingWriteCt As Integer = rwLock.WaitingWriteCount\n           If waitingWriteCt &gt; WRITE_THRESHOLD Then\n               performanceLog.WriteEntry(String.Format( _\n                   &quot;{0} blocked writer threads; exceeds recommended maximum.&quot;, _\n                   waitingWriteCt))\n           End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_Dispose\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Threading.ReaderWriterLockSlim.WaitingReadCount*</span> is greater than zero.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.WaitingUpgradeCount*</span> is greater than zero.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.WaitingWriteCount*</span> is greater than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call Dispose when you are finished using the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a>. The Dispose method leaves the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> in an unusable state. After calling Dispose, you must release all references to the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> was occupying. For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call Dispose before you release your last reference to the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_EnterReadLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_EnterReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterReadLock()</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in read mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnterReadLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The current thread cannot acquire the write lock when it holds the read lock.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a>, and the current thread has attempted to acquire the read lock when it already holds the read lock.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a>, and the current thread has attempted to acquire the read lock when it already holds the write lock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. This limit is so large that applications should never encounter this exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the calling thread enters the lock, and therefore might never return. Use the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterReadLock_\" data-linktype=\"relative-path\">TryEnterReadLock</a> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.  </p>\n<p> Multiple threads can enter read mode at the same time.  </p>\n<p> If one or more threads are waiting to enter write mode, a thread that calls the EnterReadLock method blocks until those threads have either timed out or entered write mode and then exited from it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.  </p>\n</div>\n<p> At most one thread can be in upgradeable mode while other threads are in read mode. If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the EnterReadLock method enter read mode immediately and do not block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the EnterReadLock method to enter the lock in read mode. The method shown in the example retrieves the value associated with a key. If the key is not found, the exception thrown by the inner <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> is allowed to terminate the method. A <code>finally</code> block is used to execute the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_ExitReadLock_\" data-linktype=\"relative-path\">ExitReadLock</a> method, ensuring that the caller exits read mode.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#3\">    Public Function Read(ByVal key As Integer) As String\n        cacheLock.EnterReadLock()\n        Try\n            Return innerCache(key)\n        Finally\n            cacheLock.ExitReadLock()\n        End Try\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#3\">    public string Read(int key)\n    {\n        cacheLock.EnterReadLock();\n        try\n        {\n            return innerCache[key];\n        }\n        finally\n        {\n            cacheLock.ExitReadLock();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_EnterUpgradeableReadLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_EnterUpgradeableReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterUpgradeableReadLock()</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in upgradeable mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnterUpgradeableReadLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock in any mode.  </p>\n<p> -or-  </p>\n<p> The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the calling thread enters the lock, and therefore might never return. Use the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_\" data-linktype=\"relative-path\">TryEnterUpgradeableReadLock</a> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.  </p>\n<p> Use upgradeable mode when a thread usually accesses the resource that is protected by the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> in read mode, but may need to enter write mode if certain conditions are met. A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.  </p>\n<p> Only one thread can enter upgradeable mode at any given time. If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.  </p>\n<p> If one or more threads are waiting to enter write mode, a thread that calls the EnterUpgradeableReadLock method blocks until those threads have either timed out or entered write mode and then exited from it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the EnterUpgradeableReadLock method to enter the lock in upgradeable mode. A <code>finally</code> block is used to execute the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_ExitUpgradeableReadLock_\" data-linktype=\"relative-path\">ExitUpgradeableReadLock</a> method, ensuring that the caller exits upgradeable mode.  </p>\n<p> The method shown in the example retrieves the value associated with a key and compares it with a new value. If the value is unchanged, the method returns a status indicating no change. It no value is found for the key, the key/value pair is inserted. If the value has changed, it is updated. Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.  </p>\n<p> The example uses the default constructor to create the lock, so recursion is not allowed. Programming the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> is simpler and less prone to error when the lock does not allow recursion.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#6\">    Public Function AddOrUpdate(ByVal key As Integer, _\n                                ByVal value As String) As AddOrUpdateStatus\n        cacheLock.EnterUpgradeableReadLock()\n        Try\n            Dim result As String = Nothing\n            If innerCache.TryGetValue(key, result) Then\n                If result = value Then\n                    Return AddOrUpdateStatus.Unchanged\n                Else\n                    cacheLock.EnterWriteLock()\n                    Try\n                        innerCache.Item(key) = value\n                    Finally\n                        cacheLock.ExitWriteLock()\n                    End Try\n                    Return AddOrUpdateStatus.Updated\n                End If\n            Else\n                cacheLock.EnterWriteLock()\n                Try\n                    innerCache.Add(key, value)\n                Finally\n                    cacheLock.ExitWriteLock()\n                End Try\n                Return AddOrUpdateStatus.Added\n            End If\n        Finally\n            cacheLock.ExitUpgradeableReadLock()\n        End Try\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#6\">    public AddOrUpdateStatus AddOrUpdate(int key, string value)\n    {\n        cacheLock.EnterUpgradeableReadLock();\n        try\n        {\n            string result = null;\n            if (innerCache.TryGetValue(key, out result))\n            {\n                if (result == value)\n                {\n                    return AddOrUpdateStatus.Unchanged;\n                }\n                else\n                {\n                    cacheLock.EnterWriteLock();\n                    try\n                    {\n                        innerCache[key] = value;\n                    }\n                    finally\n                    {\n                        cacheLock.ExitWriteLock();\n                    }\n                    return AddOrUpdateStatus.Updated;\n                }\n            }\n            else\n            {\n                cacheLock.EnterWriteLock();\n                try\n                {\n                    innerCache.Add(key, value);\n                }\n                finally\n                {\n                    cacheLock.ExitWriteLock();\n                }\n                return AddOrUpdateStatus.Added;\n            }\n        }\n        finally\n        {\n            cacheLock.ExitUpgradeableReadLock();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#10\">    Public Enum AddOrUpdateStatus\n        Added\n        Updated\n        Unchanged\n    End Enum\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#10\">    public enum AddOrUpdateStatus\n    {\n        Added,\n        Updated,\n        Unchanged\n    };\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_EnterWriteLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_EnterWriteLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterWriteLock()</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in write mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnterWriteLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock in any mode.  </p>\n<p> -or-  </p>\n<p> The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the calling thread enters the lock, and therefore might never return. Use the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_\" data-linktype=\"relative-path\">TryEnterWriteLock</a> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.  </p>\n<p> If other threads have entered the lock in read mode, a thread that calls the EnterWriteLock method blocks until those threads have exited read mode. When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the EnterWriteLock method to enter the lock in write mode. The method shown in the example adds a new key/value pair to the synchronized cache. If the key is already in the cache, the exception thrown by the inner <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> is allowed to terminate the method. A <code>finally</code> block is used to execute the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_ExitWriteLock_\" data-linktype=\"relative-path\">ExitWriteLock</a> method, ensuring that the caller exits write mode.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#4\">    Public Sub Add(ByVal key As Integer, ByVal value As String)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Add(key, value)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#4\">    public void Add(int key, string value)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Add(key, value);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_ExitReadLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_ExitReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitReadLock()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExitReadLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The current thread has not entered the lock in read mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not sensitive to recursion order. For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter. If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.  </p>\n<p> Exiting the lock might signal other waiting threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <code>finally</code> block to execute the ExitReadLock method, ensuring that the caller exits read mode. The method shown in the example retrieves the value associated with a key. If the key is not found, the exception thrown by the inner <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> is allowed to terminate the method. The <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterReadLock_\" data-linktype=\"relative-path\">EnterReadLock</a> method is used to enter read mode.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#3\">    Public Function Read(ByVal key As Integer) As String\n        cacheLock.EnterReadLock()\n        Try\n            Return innerCache(key)\n        Finally\n            cacheLock.ExitReadLock()\n        End Try\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#3\">    public string Read(int key)\n    {\n        cacheLock.EnterReadLock();\n        try\n        {\n            return innerCache[key];\n        }\n        finally\n        {\n            cacheLock.ExitReadLock();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_ExitUpgradeableReadLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_ExitUpgradeableReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitUpgradeableReadLock()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExitUpgradeableReadLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The current thread has not entered the lock in upgradeable mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not sensitive to recursion order. For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter. If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.  </p>\n<p> Exiting the lock might signal other waiting threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <code>finally</code> block to execute the ExitUpgradeableReadLock method, ensuring that the caller exits upgradeable mode.  </p>\n<p> The method shown in the example retrieves the value associated with a key and compares it with a new value. If the value is unchanged, the method returns a status indicating no change. It no value is found for the key, the key/value pair is inserted. If the value has changed, it is updated. Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.  </p>\n<p> The example uses the default constructor to create the lock, so recursion is not allowed. Programming the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> is simpler and less prone to error when the lock does not allow recursion.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#6\">    Public Function AddOrUpdate(ByVal key As Integer, _\n                                ByVal value As String) As AddOrUpdateStatus\n        cacheLock.EnterUpgradeableReadLock()\n        Try\n            Dim result As String = Nothing\n            If innerCache.TryGetValue(key, result) Then\n                If result = value Then\n                    Return AddOrUpdateStatus.Unchanged\n                Else\n                    cacheLock.EnterWriteLock()\n                    Try\n                        innerCache.Item(key) = value\n                    Finally\n                        cacheLock.ExitWriteLock()\n                    End Try\n                    Return AddOrUpdateStatus.Updated\n                End If\n            Else\n                cacheLock.EnterWriteLock()\n                Try\n                    innerCache.Add(key, value)\n                Finally\n                    cacheLock.ExitWriteLock()\n                End Try\n                Return AddOrUpdateStatus.Added\n            End If\n        Finally\n            cacheLock.ExitUpgradeableReadLock()\n        End Try\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#6\">    public AddOrUpdateStatus AddOrUpdate(int key, string value)\n    {\n        cacheLock.EnterUpgradeableReadLock();\n        try\n        {\n            string result = null;\n            if (innerCache.TryGetValue(key, out result))\n            {\n                if (result == value)\n                {\n                    return AddOrUpdateStatus.Unchanged;\n                }\n                else\n                {\n                    cacheLock.EnterWriteLock();\n                    try\n                    {\n                        innerCache[key] = value;\n                    }\n                    finally\n                    {\n                        cacheLock.ExitWriteLock();\n                    }\n                    return AddOrUpdateStatus.Updated;\n                }\n            }\n            else\n            {\n                cacheLock.EnterWriteLock();\n                try\n                {\n                    innerCache.Add(key, value);\n                }\n                finally\n                {\n                    cacheLock.ExitWriteLock();\n                }\n                return AddOrUpdateStatus.Added;\n            }\n        }\n        finally\n        {\n            cacheLock.ExitUpgradeableReadLock();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#10\">    Public Enum AddOrUpdateStatus\n        Added\n        Updated\n        Unchanged\n    End Enum\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#10\">    public enum AddOrUpdateStatus\n    {\n        Added,\n        Updated,\n        Unchanged\n    };\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_ExitWriteLock\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_ExitWriteLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitWriteLock()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExitWriteLock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The current thread has not entered the lock in write mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not sensitive to recursion order. For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter. If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.  </p>\n<p> Exiting the lock might signal other waiting threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <code>finally</code> block to execute the ExitWriteLock method, ensuring that the caller exits write mode. The method shown in the example adds a new key/value pair to the synchronized cache. If the key is already in the cache, the exception thrown by the inner <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> is allowed to terminate the method. The <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_EnterWriteLock_\" data-linktype=\"relative-path\">EnterWriteLock</a> method is used to enter the lock in write mode.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#4\">    Public Sub Add(ByVal key As Integer, ByVal value As String)\n        cacheLock.EnterWriteLock()\n        Try\n            innerCache.Add(key, value)\n        Finally\n            cacheLock.ExitWriteLock()\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#4\">    public void Add(int key, string value)\n    {\n        cacheLock.EnterWriteLock();\n        try\n        {\n            innerCache.Add(key, value);\n        }\n        finally\n        {\n            cacheLock.ExitWriteLock();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterReadLock_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterReadLock(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in read mode, with an optional integer time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterReadLock (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or -1 (<a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered read mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>millisecondsTimeout</code> is negative, but it is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1), which is the only negative value allowed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>millisecondsTimeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> Multiple threads can enter read mode at the same time.  </p>\n<p> If one or more threads are waiting to enter write mode, a thread that calls the TryEnterReadLock method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread&#39;s own time-out interval expires.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.  </p>\n</div>\n<p> One thread can be in upgradeable mode while other threads are in read mode. If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the TryEnterReadLock method enter read mode immediately and do not block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterReadLock_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterReadLock(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in read mode, with an optional time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterReadLock (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval to wait, or -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered read mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>timeout</code> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  </p>\n<p> -or-  </p>\n<p> The value of <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>timeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> Multiple threads can enter the lock in read mode at the same time.  </p>\n<p> If one or more threads are queued to enter write mode, a thread that calls the TryEnterReadLock method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread&#39;s own time-out interval expires.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.  </p>\n</div>\n<p> One thread can be in upgradeable mode while other threads are in read mode. If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the TryEnterReadLock method enter read mode immediately and do not block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterUpgradeableReadLock(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in upgradeable mode, with an optional time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or -1 (<a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered upgradeable mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>millisecondsTimeout</code> is negative, but it is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1), which is the only negative value allowed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>millisecondsTimeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> Use upgradeable mode when a thread usually accesses the resource that is protected by the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> in read mode, but may need to enter write mode if certain conditions are met. A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.  </p>\n<p> Only one thread can enter a lock in upgradeable mode at any given time. If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.  </p>\n<p> If one or more threads are waiting to enter write mode, a thread that calls the TryEnterUpgradeableReadLock method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread&#39;s own time-out interval expires.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterUpgradeableReadLock(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in upgradeable mode, with an optional time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterUpgradeableReadLock (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval to wait, or -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered upgradeable mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>timeout</code> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  </p>\n<p> -or-  </p>\n<p> The value of <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>timeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> Use upgradeable mode when a thread usually accesses the resource protected by the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> in read mode, but may need to enter write mode if certain conditions are met. A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.  </p>\n<p> Only one thread can enter a lock in upgradeable mode at any given time. If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.  </p>\n<p> If one or more threads are waiting to enter write mode, a thread that calls the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterUpgradeableReadLock_\" data-linktype=\"relative-path\">TryEnterUpgradeableReadLock</a> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread&#39;s own time-out interval expires.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterWriteLock(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in write mode, with an optional time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterWriteLock (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or -1 (<a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered write mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>millisecondsTimeout</code> is negative, but it is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1), which is the only negative value allowed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>millisecondsTimeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> If other threads have entered the lock in read mode, a thread that calls the TryEnterWriteLock method blocks until those threads have exited read mode or until the time-out interval has elapsed. While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the TryEnterWriteLock method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache. If the specified time-out interval elapses before the thread enters the lock, the method returns <code>false</code>. The method returns <code>true</code> if the key/value pair is added.  </p>\n<p> If the key is already in the cache, the exception thrown by the inner <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> is allowed to terminate the method. A <code>finally</code> block is used to execute the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_ExitWriteLock_\" data-linktype=\"relative-path\">ExitWriteLock</a> method, ensuring that the caller exits the lock.  </p>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    Private cacheLock As New ReaderWriterLockSlim()\n    Private innerCache As New Dictionary(Of Integer, String)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#2\">    private ReaderWriterLockSlim cacheLock = new ReaderWriterLockSlim();\n    private Dictionary&lt;int, string&gt; innerCache = new Dictionary&lt;int, string&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#5\">    Public Function AddWithTimeout(ByVal key As Integer, ByVal value As String, _\n                                   ByVal timeout As Integer) As Boolean\n        If cacheLock.TryEnterWriteLock(timeout) Then\n            Try\n                innerCache.Add(key, value)\n            Finally\n                cacheLock.ExitWriteLock()\n            End Try\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ReaderWriterLockSlim_Shadow#5\">    public bool AddWithTimeout(int key, string value, int timeout)\n    {\n        if (cacheLock.TryEnterWriteLock(timeout))\n        {\n            try\n            {\n                innerCache.Add(key, value);\n            }\n            finally\n            {\n                cacheLock.ExitWriteLock();\n            }\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnterWriteLock(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to enter the lock in write mode, with an optional time-out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryEnterWriteLock (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval to wait, or -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling thread entered write mode, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.ReaderWriterLockSlim.RecursionPolicy*</span> property is <a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a> and the current thread has already entered the lock.  </p>\n<p> -or-  </p>\n<p> The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.  </p>\n<p> -or-  </p>\n<p> The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>timeout</code> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  </p>\n<p> -or-  </p>\n<p> The value of <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a> object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>timeout</code> is 0 (zero), this method checks the lock state and returns <code>false</code> immediately if the desired state is unavailable.  </p>\n<p> If other threads have entered the lock in read mode, a thread that calls the <a class=\"xref\" href=\"system.threading.readerwriterlockslim#System_Threading_ReaderWriterLockSlim_TryEnterWriteLock_\" data-linktype=\"relative-path\">TryEnterWriteLock</a> method blocks until those threads have exited read mode or until the time-out interval has elapsed. While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.ReaderWriterLockSlim.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.CurrentReadCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.EnterReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.EnterWriteLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.ExitReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.ExitWriteLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.IsReadLockHeld\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.IsWriteLockHeld\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.RecursionPolicy\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.RecursiveReadCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.RecursiveWriteCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.TryEnterReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.TryEnterWriteLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.WaitingReadCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.ReaderWriterLockSlim.WaitingWriteCount\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"5d81bb9f-3bb5-5c74-c8e8-9d0040bf42f1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.ReaderWriterLockSlim\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.ReaderWriterLockSlim.yml","open_to_public_contributors":true,"api_name":["System.Threading.ReaderWriterLockSlim","System.Threading.ReaderWriterLockSlim..ctor","System.Threading.ReaderWriterLockSlim.CurrentReadCount","System.Threading.ReaderWriterLockSlim.Dispose","System.Threading.ReaderWriterLockSlim.EnterReadLock","System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.EnterWriteLock","System.Threading.ReaderWriterLockSlim.ExitReadLock","System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.ExitWriteLock","System.Threading.ReaderWriterLockSlim.IsReadLockHeld","System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld","System.Threading.ReaderWriterLockSlim.IsWriteLockHeld","System.Threading.ReaderWriterLockSlim.RecursionPolicy","System.Threading.ReaderWriterLockSlim.RecursiveReadCount","System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount","System.Threading.ReaderWriterLockSlim.RecursiveWriteCount","System.Threading.ReaderWriterLockSlim.TryEnterReadLock","System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.TryEnterWriteLock","System.Threading.ReaderWriterLockSlim.WaitingReadCount","System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount","System.Threading.ReaderWriterLockSlim.WaitingWriteCount"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.ReaderWriterLockSlim","System::Threading::ReaderWriterLockSlim","System.Threading.ReaderWriterLockSlim.#ctor","System::Threading::ReaderWriterLockSlim::#ctor","System.Threading.ReaderWriterLockSlim.CurrentReadCount","System::Threading::ReaderWriterLockSlim::CurrentReadCount","System.Threading.ReaderWriterLockSlim.Dispose","System::Threading::ReaderWriterLockSlim::Dispose","System.Threading.ReaderWriterLockSlim.EnterReadLock","System::Threading::ReaderWriterLockSlim::EnterReadLock","System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock","System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.EnterWriteLock","System::Threading::ReaderWriterLockSlim::EnterWriteLock","System.Threading.ReaderWriterLockSlim.ExitReadLock","System::Threading::ReaderWriterLockSlim::ExitReadLock","System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock","System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.ExitWriteLock","System::Threading::ReaderWriterLockSlim::ExitWriteLock","System.Threading.ReaderWriterLockSlim.IsReadLockHeld","System::Threading::ReaderWriterLockSlim::IsReadLockHeld","System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld","System::Threading::ReaderWriterLockSlim::IsUpgradeableReadLockHeld","System.Threading.ReaderWriterLockSlim.IsWriteLockHeld","System::Threading::ReaderWriterLockSlim::IsWriteLockHeld","System.Threading.ReaderWriterLockSlim.RecursionPolicy","System::Threading::ReaderWriterLockSlim::RecursionPolicy","System.Threading.ReaderWriterLockSlim.RecursiveReadCount","System::Threading::ReaderWriterLockSlim::RecursiveReadCount","System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount","System::Threading::ReaderWriterLockSlim::RecursiveUpgradeCount","System.Threading.ReaderWriterLockSlim.RecursiveWriteCount","System::Threading::ReaderWriterLockSlim::RecursiveWriteCount","System.Threading.ReaderWriterLockSlim.TryEnterReadLock","System::Threading::ReaderWriterLockSlim::TryEnterReadLock","System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock","System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock","System.Threading.ReaderWriterLockSlim.TryEnterWriteLock","System::Threading::ReaderWriterLockSlim::TryEnterWriteLock","System.Threading.ReaderWriterLockSlim.WaitingReadCount","System::Threading::ReaderWriterLockSlim::WaitingReadCount","System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount","System::Threading::ReaderWriterLockSlim::WaitingUpgradeCount","System.Threading.ReaderWriterLockSlim.WaitingWriteCount","System::Threading::ReaderWriterLockSlim::WaitingWriteCount"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"5d81bb9f-3bb5-5c74-c8e8-9d0040bf42f1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/ReaderWriterLockSlim.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ReaderWriterLockSlim class | Microsoft Docs","_op_ogTitle":"ReaderWriterLockSlim class","description":"Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.ReaderWriterLockSlim","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.readerwriterlockslim","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.readerwriterlockslim","fileRelativePath":"System.Threading.ReaderWriterLockSlim.html"},"themesRelativePathToOutputRoot":"_themes/"}