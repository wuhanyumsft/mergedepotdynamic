{"content":"    \r\n    <h1 id=\"System_ComponentModel_AsyncOperationManager\">\r\n      <span class=\"lang-csharp\">AsyncOperationManager</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class AsyncOperationManager</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AsyncOperationManager</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>If your class needs to provide asynchronous behavior according to the <a href=\"../Topic/Event-based%20Asynchronous%20Pattern%20Overview.md\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern Overview</a>, you will encounter a number of concurrency management issues. Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, ASP.NET applications, console applications, and so on). The AsyncOperationManager provides a convenient way to create a class that runs properly under all application models supported by the .NET Framework.  </p>\n<p> The AsyncOperationManager class has one method, <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a>, which returns an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> that can be used to track the duration of a particular asynchronous task. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.  </p>\n<p> For more information about implementing asynchronous classes, see <a href=\"../Topic/Implementing%20the%20Event-based%20Asynchronous%20Pattern.md\" data-linktype=\"relative-path\">Implementing the Event-based Asynchronous Pattern</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperationManager_SynchronizationContext\" data-linktype=\"self-bookmark\">SynchronizationContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the synchronization context for the asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperationManager_CreateOperation_System_Object_\" data-linktype=\"self-bookmark\">CreateOperation(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> for tracking the duration of a particular asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperationManager_SynchronizationContext\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperationManager_SynchronizationContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SynchronizationContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the synchronization context for the asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a></div>\r\n                  </div>\r\n                  <p>The synchronization context for the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation is the free-threaded implementation.  </p>\n<p> A thread should set the SynchronizationContext property to <code>null</code> to release the free-threaded factory when it is done, or else its factory will never be disposed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperationManager_CreateOperation_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperationManager_CreateOperation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateOperation(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> for tracking the duration of a particular asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userSuppliedState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> that you can use to track the duration of an asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateOperation method returns an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> will correctly marshal these calls to the appropriate thread or context for the application model.  </p>\n<p> If you implement a class that supports the Event-based Asynchronous Pattern, your class should call CreateOperation each time your <em>MethodName</em><code>Async</code> method is called. The client application that makes calls to the method can use the <code>userSuppliedState</code> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Client code must provide a unique value for the <code>userSuppliedState</code> parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">System.ArgumentException</a> if one is detected.  </p>\n</div>\n<p> Your code should track every <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> returned by CreateOperation and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation. This tracking can be as simple as passing the <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> as a parameter among delegates. In more sophisticated designs, your class can maintain a collection of <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> objects, adding objects when tasks are started and removing them when tasks are completed or canceled. This approach allows you to check for unique <code>userSuppliedState</code> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.  </p>\n<p> For more information about implementing asynchronous classes, see <a href=\"../Topic/Implementing%20the%20Event-based%20Asynchronous%20Pattern.md\" data-linktype=\"relative-path\">Implementing the Event-based Asynchronous Pattern</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the CreateOperation method to create an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperation</a> for tracking the duration of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#3\">    &#39; This method starts an asynchronous calculation. \n    &#39; First, it checks the supplied task ID for uniqueness.\n    &#39; If taskId is unique, it creates a new WorkerEventHandler \n    &#39; and calls its BeginInvoke method to start the calculation.\n    Public Overridable Sub CalculatePrimeAsync( _\n        ByVal numberToTest As Integer, _\n        ByVal taskId As Object)\n\n        &#39; Create an AsyncOperation for taskId.\n        Dim asyncOp As AsyncOperation = _\n            AsyncOperationManager.CreateOperation(taskId)\n\n        &#39; Multiple threads will access the task dictionary,\n        &#39; so it must be locked to serialize access.\n        SyncLock userStateToLifetime.SyncRoot\n            If userStateToLifetime.Contains(taskId) Then\n                Throw New ArgumentException( _\n                    &quot;Task ID parameter must be unique&quot;, _\n                    &quot;taskId&quot;)\n            End If\n\n            userStateToLifetime(taskId) = asyncOp\n        End SyncLock\n\n        &#39; Start the asynchronous operation.\n        Dim workerDelegate As New WorkerEventHandler( _\n            AddressOf CalculateWorker)\n\n        workerDelegate.BeginInvoke( _\n            numberToTest, _\n            asyncOp, _\n            Nothing, _\n            Nothing)\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#3\">        // This method starts an asynchronous calculation. \n        // First, it checks the supplied task ID for uniqueness.\n        // If taskId is unique, it creates a new WorkerEventHandler \n        // and calls its BeginInvoke method to start the calculation.\n        public virtual void CalculatePrimeAsync(\n            int numberToTest,\n            object taskId)\n        {\n            // Create an AsyncOperation for taskId.\n            AsyncOperation asyncOp =\n                AsyncOperationManager.CreateOperation(taskId);\n\n            // Multiple threads will access the task dictionary,\n            // so it must be locked to serialize access.\n            lock (userStateToLifetime.SyncRoot)\n            {\n                if (userStateToLifetime.Contains(taskId))\n                {\n                    throw new ArgumentException(\n                        &quot;Task ID parameter must be unique&quot;, \n                        &quot;taskId&quot;);\n                }\n\n                userStateToLifetime[taskId] = asyncOp;\n            }\n\n            // Start the asynchronous operation.\n            WorkerEventHandler workerDelegate = new WorkerEventHandler(CalculateWorker);\n            workerDelegate.BeginInvoke(\n                numberToTest,\n                asyncOp,\n                null,\n                null);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncOperationManager.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncOperationManager.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperationManager\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperationManager.CreateOperation\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperationManager.SynchronizationContext\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bcf7e234-20d6-0372-751a-e6b6d61e8ba2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ComponentModel/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.AsyncOperationManager\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncOperationManager.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncOperationManager.yml","open_to_public_contributors":true,"api_name":["System.ComponentModel.AsyncOperationManager","System.ComponentModel.AsyncOperationManager.CreateOperation","System.ComponentModel.AsyncOperationManager.SynchronizationContext"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.AsyncOperationManager","System::ComponentModel::AsyncOperationManager","System.ComponentModel.AsyncOperationManager.CreateOperation","System::ComponentModel::AsyncOperationManager::CreateOperation","System.ComponentModel.AsyncOperationManager.SynchronizationContext","System::ComponentModel::AsyncOperationManager::SynchronizationContext"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bcf7e234-20d6-0372-751a-e6b6d61e8ba2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ComponentModel/AsyncOperationManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncOperationManager class | Microsoft Docs","_op_ogTitle":"AsyncOperationManager class","description":"Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.AsyncOperationManager","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asyncoperationmanager","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asyncoperationmanager","fileRelativePath":"System.ComponentModel.AsyncOperationManager.html"},"themesRelativePathToOutputRoot":"_themes/"}