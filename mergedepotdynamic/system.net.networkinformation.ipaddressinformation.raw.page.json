{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_IPAddressInformation\">\r\n      <span class=\"lang-csharp\">IPAddressInformation</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a network interface address.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class IPAddressInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IPAddressInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You do not create instances of this class; instances are returned by methods in the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a> class.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPAddressInformation__ctor\" data-linktype=\"self-bookmark\">IPAddressInformation()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipaddressinformation\" data-linktype=\"relative-path\">IPAddressInformation</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPAddressInformation_Address\" data-linktype=\"self-bookmark\">Address</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Internet Protocol (IP) address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPAddressInformation_IsDnsEligible\" data-linktype=\"self-bookmark\">IsDnsEligible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the Internet Protocol (IP) address is valid to appear in a Domain Name System (DNS) server database.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPAddressInformation_IsTransient\" data-linktype=\"self-bookmark\">IsTransient</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the Internet Protocol (IP) address is transient (a cluster address).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPAddressInformation__ctor\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPAddressInformation__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPAddressInformation()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipaddressinformation\" data-linktype=\"relative-path\">IPAddressInformation</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected IPAddressInformation ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor can be called only by classes that derive from <a class=\"xref\" href=\"system.net.networkinformation.ipaddressinformation\" data-linktype=\"relative-path\">IPAddressInformation</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPAddressInformation_Address\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPAddressInformation_Address_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Address</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Internet Protocol (IP) address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.IPAddress Address { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance that contains the IP address of an interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IP address uniquely identifies the interface on the network.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the multicast addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#44\">        public static void DisplayMulticastAddresses()\n        {\n            int count = 0;\n            \n            Console.WriteLine(&quot;Multicast Addresses&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                MulticastIPAddressInformationCollection multiCast = adapterProperties.MulticastAddresses;\n                if (multiCast.Count &gt; 0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddressInformation multi in multiCast)\n                    {\n                        Console.WriteLine(&quot;  Multicast Address ....................... : {0} {1} {2}&quot;, \n                            multi.Address,\n                            multi.IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                            multi.IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot;\n                        );\n                        count++;\n                    }\n                    Console.WriteLine();\n                }\n            }\n            if (count == 0)\n            {\n                Console.WriteLine(&quot;  No multicast addressses were found.&quot;);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#44\">    Public Shared Sub DisplayMulticastAddresses() \n        Dim count as Integer = 0\n        \n        Console.WriteLine(&quot;Multicast Addresses&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim multiCast As MulticastIPAddressInformationCollection = adapterProperties.MulticastAddresses\n            If multiCast.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim multi As IPAddressInformation\n                For Each multi In  multiCast\n                    Console.WriteLine(&quot;  Multicast Address ....................... : {0} {1} {2}&quot;, multi.Address, IIf(multi.IsTransient, &quot;Transient&quot;, &quot;&quot;), IIf(multi.IsDnsEligible, &quot;DNS Eligible&quot;, &quot;&quot;))\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                    count += 1\n                Next multi\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n        if count = 0 then\n            Console.WriteLine(&quot;  No multicast addresses were found.&quot;)\n            Console.WriteLine()\n        End if\n    \n    End Sub &#39;DisplayMulticastAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#44\">void DisplayMulticastAddresses()\n{\n   int count = 0;\n   \n   Console::WriteLine( &quot;Multicast Addresses&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum15 = adapters-&gt;GetEnumerator();\n   while ( myEnum15-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum15-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      MulticastIPAddressInformationCollection ^ multiCast = adapterProperties-&gt;MulticastAddresses;\n      if ( multiCast-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         System::Collections::IEnumerator^ myEnum16 = multiCast-&gt;GetEnumerator();\n         while ( myEnum16-&gt;MoveNext() )\n         {\n            MulticastIPAddressInformation ^ multi = safe_cast&lt;MulticastIPAddressInformation ^&gt;(myEnum16-&gt;Current);\n            Console::WriteLine( &quot;  Multicast Address ....................... : {0} {1} {2}&quot;, \n               multi-&gt;Address, multi-&gt;IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n               multi-&gt;IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot; );\n            count++;   \n         }\n         Console::WriteLine();\n      }\n   }\n    if (count == 0)\n    {\n        Console::WriteLine(&quot;  No multicast addresses were found.&quot;);\n        Console::WriteLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPAddressInformation_IsDnsEligible\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPAddressInformation_IsDnsEligible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDnsEligible</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the Internet Protocol (IP) address is valid to appear in a Domain Name System (DNS) server database.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsDnsEligible { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the address can appear in a DNS database; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Addresses in the range 169.254.0.0 to 169.254.255.255 are not DNS eligible. These addresses are reserved for Automatic Private IP Addressing (APIPA).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the anycast addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#43\">        public static void DisplayAnycastAddresses()\n        {\n            int count = 0;\n            \n            Console.WriteLine(&quot;Anycast Addresses&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                IPAddressInformationCollection anyCast = adapterProperties.AnycastAddresses;\n                if (anyCast.Count &gt;0)\n                {\n                    \n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddressInformation any in anyCast)\n                    {\n                        Console.WriteLine(&quot;  Anycast Address .......................... : {0} {1} {2}&quot;, \n                            any.Address,\n                            any.IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                            any.IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot;\n                        );\n                        count++;\n                    }\n                    Console.WriteLine();\n                }\n            }\n            if (count == 0)\n            {\n                Console.WriteLine(&quot;  No anycast addressses were found.&quot;);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#43\">    Public Shared Sub DisplayAnycastAddresses() \n        Dim count as Integer = 0\n        \n        Console.WriteLine(&quot;Anycast Addresses&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim anyCast As IPAddressInformationCollection = adapterProperties.AnycastAddresses\n            If anyCast.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim any As IPAddressInformation\n                For Each any In  anyCast\n                    Console.WriteLine(&quot;  Anycast Address .......................... : {0} {1} {2}&quot;, any.Address, IIf(any.IsTransient, &quot;Transient&quot;, &quot;&quot;), IIf(any.IsDnsEligible, &quot;DNS Eligible&quot;, &quot;&quot;))\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                    count += 1\n                Next any\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n        if count = 0 then\n            Console.WriteLine(&quot;  No anycast addresses were found.&quot;)\n            Console.WriteLine()\n        End if\n    End Sub &#39;DisplayAnycastAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#43\">void DisplayAnycastAddresses()\n{\n    int count = 0;\n            \n    Console::WriteLine( &quot;Anycast Addresses&quot; );\n    array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n    System::Collections::IEnumerator^ myEnum13 = adapters-&gt;GetEnumerator();\n    while ( myEnum13-&gt;MoveNext() )\n    {\n        NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum13-&gt;Current);\n        IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n        IPAddressInformationCollection ^ anyCast = adapterProperties-&gt;AnycastAddresses;\n        if ( anyCast-&gt;Count &gt; 0 )\n        {\n            Console::WriteLine( adapter-&gt;Description );\n            System::Collections::IEnumerator^ myEnum14 = anyCast-&gt;GetEnumerator();\n            while ( myEnum14-&gt;MoveNext() )\n            {\n                IPAddressInformation ^ any = safe_cast&lt;IPAddressInformation ^&gt;(myEnum14-&gt;Current);\n                Console::WriteLine( &quot;  Anycast Address .......................... : {0} {1} {2}&quot;, \n                    any-&gt;Address, any-&gt;IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                    any-&gt;IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot; );\n                count++;\n            } \n            Console::WriteLine();\n        }\n    }\n    if (count == 0)\n    {\n        Console::WriteLine(&quot;  No anycast addresses were found.&quot;);\n        Console::WriteLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPAddressInformation_IsTransient\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPAddressInformation_IsTransient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTransient</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the Internet Protocol (IP) address is transient (a cluster address).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsTransient { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the address is transient; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A transient address is assigned to a cluster and should not be used by most applications.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPAddressInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPAddressInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPAddressInformation\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPAddressInformation..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPAddressInformation.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPAddressInformation.IsTransient\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3a5c92ae-5a46-0ab4-37d9-a3d144e94f68\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a network interface address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.IPAddressInformation\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPAddressInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPAddressInformation.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.IPAddressInformation","System.Net.NetworkInformation.IPAddressInformation..ctor","System.Net.NetworkInformation.IPAddressInformation.Address","System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible","System.Net.NetworkInformation.IPAddressInformation.IsTransient"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.IPAddressInformation","System::Net::NetworkInformation::IPAddressInformation","System.Net.NetworkInformation.IPAddressInformation.#ctor","System::Net::NetworkInformation::IPAddressInformation::#ctor","System.Net.NetworkInformation.IPAddressInformation.Address","System::Net::NetworkInformation::IPAddressInformation::Address","System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible","System::Net::NetworkInformation::IPAddressInformation::IsDnsEligible","System.Net.NetworkInformation.IPAddressInformation.IsTransient","System::Net::NetworkInformation::IPAddressInformation::IsTransient"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3a5c92ae-5a46-0ab4-37d9-a3d144e94f68","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/IPAddressInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPAddressInformation class | Microsoft Docs","_op_ogTitle":"IPAddressInformation class","description":"Provides information about a network interface address.\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.IPAddressInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipaddressinformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipaddressinformation","fileRelativePath":"System.Net.NetworkInformation.IPAddressInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}