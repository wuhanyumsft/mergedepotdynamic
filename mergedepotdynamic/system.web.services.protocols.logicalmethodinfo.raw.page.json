{"content":"    \r\n    <h1 id=\"System_Web_Services_Protocols_LogicalMethodInfo\">\r\n      <span class=\"lang-csharp\">LogicalMethodInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class LogicalMethodInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">LogicalMethodInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>LogicalMethodInfo is used primarily by a SOAP extension to interrogate the details of the XML Web service method with which the SOAP extension is configured to run. Depending on how the SOAP extension is configured, it can find out details about the XML Web service method in the <a class=\"xref\" href=\"system.web.services.protocols.soapextension#System_Web_Services_Protocols_SoapExtension_GetInitializer_\" data-linktype=\"relative-path\">GetInitializer</a> method of <a class=\"xref\" href=\"system.web.services.protocols.soapextension\" data-linktype=\"relative-path\">SoapExtension</a> that takes a LogicalMethodInfo. The LogicalMethodInfo provides details such as the XML Web service method&#39;s parameters by accessing the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo#System_Web_Services_Protocols_LogicalMethodInfo_Parameters_\" data-linktype=\"relative-path\">Parameters</a> property and any custom attributes applied to the XML Web service method using the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo#System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> property.  </p>\n<p> For more details on SOAP extensions see the <a class=\"xref\" href=\"system.web.services.protocols.soapextension\" data-linktype=\"relative-path\">SoapExtension</a> class or <a href=\"http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95\" data-linktype=\"external\">&#91;&lt;topic://cpconAlteringSOAPMessageUsingSOAPExtensions&gt;&#93;</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo__ctor_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">LogicalMethodInfo(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> class with the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> passed in.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_AsyncCallbackParameter\" data-linktype=\"self-bookmark\">AsyncCallbackParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parameter information for the <code>AsyncCallback</code> parameter of a Begin method in an asynchronous invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_AsyncResultParameter\" data-linktype=\"self-bookmark\">AsyncResultParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the return value of a <code>Begin</code> asynchronous method invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_AsyncStateParameter\" data-linktype=\"self-bookmark\">AsyncStateParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parameter information for the <code>AsyncState</code> parameter of a <code>Begin</code> method in an asynchronous invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_BeginMethodInfo\" data-linktype=\"self-bookmark\">BeginMethodInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes and metadata for a <code>Begin</code> method in an asynchronous invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_CustomAttributeProvider\" data-linktype=\"self-bookmark\">CustomAttributeProvider</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes applied to the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the class that declares the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_EndMethodInfo\" data-linktype=\"self-bookmark\">EndMethodInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes and metadata for an <code>End</code> method of an asynchronous invocation to a method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_InParameters\" data-linktype=\"self-bookmark\">InParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parameters passed into the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_IsAsync\" data-linktype=\"self-bookmark\">IsAsync</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> is invoked asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_IsVoid\" data-linktype=\"self-bookmark\">IsVoid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the return type for the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> is <code>void</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_MethodInfo\" data-linktype=\"self-bookmark\">MethodInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes and metadata for a synchronous method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the method represented by this <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_OutParameters\" data-linktype=\"self-bookmark\">OutParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the out parameters for the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_Parameters\" data-linktype=\"self-bookmark\">Parameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parameters for the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_ReturnType\" data-linktype=\"self-bookmark\">ReturnType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the return type of this method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_ReturnTypeCustomAttributeProvider\" data-linktype=\"self-bookmark\">ReturnTypeCustomAttributeProvider</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes for the return type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_BeginInvoke_System_Object_System_Object___System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginInvoke(Object,Object[],AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous invocation of the method represented by this <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_Create_System_Reflection_MethodInfo___\" data-linktype=\"self-bookmark\">Create(MethodInfo[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Given an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that can contain information about both asynchronous and synchronous methods, creates an array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_Create_System_Reflection_MethodInfo___System_Web_Services_Protocols_LogicalMethodTypes_\" data-linktype=\"self-bookmark\">Create(MethodInfo[],LogicalMethodTypes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Given an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>, where the returned array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> can be restricted to only asynchronous or synchronous methods, creates an array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_EndInvoke_System_Object_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndInvoke(Object,IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous invocation of the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttribute_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttribute(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first custom attribute applied to the type, if any custom attributes are applied to the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttributes_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the custom attributes applied to the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_Invoke_System_Object_System_Object___\" data-linktype=\"self-bookmark\">Invoke(Object,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_IsBeginMethod_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">IsBeginMethod(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the method passed in represents a <code>Begin</code> method of an asynchronous invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_IsEndMethod_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">IsEndMethod(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the method passed in represents an <code>End</code> method of an asynchronous invocation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Services_Protocols_LogicalMethodInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo__ctor_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LogicalMethodInfo(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> class with the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> passed in.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public LogicalMethodInfo (System.Reflection.MethodInfo methodInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to initialize the properties of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> common to the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Reflection.MethodBase.IsStatic*</span> property of the <code>methodInfo</code> parameter is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.MethodBase.GetParameters*</span> method of the <code>methodInfo</code> parameter does not contain all the parameters required by the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncCallbackParameter\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncCallbackParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncCallbackParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parameter information for the <code>AsyncCallback</code> parameter of a Begin method in an asynchronous invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo AsyncCallbackParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> representing the <code>AsyncCallback</code> parameter of a <code>Begin</code> asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous design pattern in the common language runtime involves calling a <code>Begin</code> method to start the asynchronous method invocation and an <code>End</code> method to complete the invocation. The <code>Begin</code> method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the parameter for the delegate with a parameter name of <code>AsyncCallback</code>.  </p>\n<p> For more information on invoking XML Web services asynchronously, see <a href=\"http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0\" data-linktype=\"external\">&#91;&lt;topic://cpconInvokingWebServicesAsynchronously&gt;&#93;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncResultParameter\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncResultParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncResultParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets the return value of a <code>Begin</code> asynchronous method invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo AsyncResultParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> representing the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned from a <code>Begin</code> asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous design pattern in the common language runtime involves calling a <code>Begin</code> method to start the asynchronous method invocation and an <code>End</code> method to complete the invocation. The <code>Begin</code> method typically returns immediately with an object implementing the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> interface, which can then be passed to the <code>End</code> method at a later time to complete the asynchronous method invocation. The returned object implementing the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> interface is represented by this property.  </p>\n<p> For more information on invoking XML Web services asynchronously, see <a href=\"http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0\" data-linktype=\"external\">&#91;&lt;topic://cpconInvokingWebServicesAsynchronously&gt;&#93;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncStateParameter\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_AsyncStateParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncStateParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parameter information for the <code>AsyncState</code> parameter of a <code>Begin</code> method in an asynchronous invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo AsyncStateParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> representing the <code>AsyncState</code> parameter of a <code>Begin</code> method in an asynchronous invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous design pattern in the common language runtime involves calling a <code>Begin</code> method to start the asynchronous method invocation and an <code>End</code> method to complete the invocation. The <code>Begin</code> method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the state information that needs to be passed into the delegate.  </p>\n<p> For more information on invoking XML Web services asynchronously, see <a href=\"http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0\" data-linktype=\"external\">&#91;&lt;topic://cpconInvokingWebServicesAsynchronously&gt;&#93;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_BeginMethodInfo\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_BeginMethodInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginMethodInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes and metadata for a <code>Begin</code> method in an asynchronous invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo BeginMethodInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the attributes and metadata for a <code>Begin</code> asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_CustomAttributeProvider\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_CustomAttributeProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributeProvider</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes applied to the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ICustomAttributeProvider CustomAttributeProvider { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> representing the custom attributes for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::Method|AttributeTargets::ReturnValue,\nAllowMultiple=true)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\npublic ref class MyService\n{\npublic:\n\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [returnvalue:MyAttribute(&quot;This is the return sample attribute&quot;)]\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n\n   // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray, LogicalMethodTypes::Sync ))[ 0 ];\n\n   // Display the method for which the attributes are being displayed.\n   Console::WriteLine( &quot;<br>Displaying the attributes for the method : {0}<br>&quot;, myLogicalMethodInfo-&gt;MethodInfo );\n\n   // Displaying a custom attribute of type &#39;MyAttribute&#39;\n   Console::WriteLine( &quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot; );\n   Object^ attribute = myLogicalMethodInfo-&gt;GetCustomAttribute( MyAttribute::typeid );\n   Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attribute))-&gt;Name );\n\n   // Display all custom attribute of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   array&lt;Object^&gt;^attributes = myLogicalMethodInfo-&gt;GetCustomAttributes( MyAttribute::typeid );\n   for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n      Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n\n   // Display all return attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   ICustomAttributeProvider^ myCustomAttributeProvider = myLogicalMethodInfo-&gt;ReturnTypeCustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n\n   // Display all the custom attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   myCustomAttributeProvider = myLogicalMethodInfo-&gt;CustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.ReturnValue, AllowMultiple=true)]\npublic class MyAttribute : Attribute\n{\n   private string myName;\n   public MyAttribute(string name)\n   {\n      myName = name;\n   }\n   public string Name \n   {\n      get \n      {\n         return myName;\n      }\n   }\n}\n\npublic class MyService \n{\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [return: MyAttribute(&quot;This is the return sample attribute&quot;)]\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\npublic class LogicalMethodInfo_GetCustomAttribute\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}, \n                                   LogicalMethodTypes.Sync))[0];\n      // Display the method for which the attributes are being displayed.\n      Console.WriteLine(&quot;<br>Displaying the attributes for the method : {0}<br>&quot;,\n                           myLogicalMethodInfo.MethodInfo);\n\n      // Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(&quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot;);\n      object attribute = myLogicalMethodInfo.GetCustomAttribute(typeof(MyAttribute));\n      Console.WriteLine(((MyAttribute)attribute).Name);\n\n      // Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      object[] attributes = myLogicalMethodInfo.GetCustomAttributes(typeof(MyAttribute));\n      for(int i = 0; i &lt; attributes.Length; i++)\n         Console.WriteLine(((MyAttribute)attributes[i]).Name);\n\n      // Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      ICustomAttributeProvider myCustomAttributeProvider = \n                  myLogicalMethodInfo.ReturnTypeCustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n\n      // Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports MicroSoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Method Or AttributeTargets.ReturnValue, AllowMultiple := True)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n\n   Private myName As String\n   \n   Public Sub New(name As String)\n      myName = name\n   End Sub &#39;New\n   \n   Public ReadOnly Property Name() As String\n      Get\n         Return myName\n      End Get\n   End Property\nEnd Class &#39;MyAttribute\n\nPublic Class MyService\n   \n&lt;MyAttribute(&quot;This is the first sample attribute&quot;), MyAttribute(&quot;This is the second sample attribute&quot;)&gt;  _\n   Public Function Add(xValue As Integer, yValue As Integer)  _\n                 As&lt;MyAttribute(&quot;This is the return sample attribute&quot;)&gt; Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\n\nPublic Class LogicalMethodInfo_GetCustomAttribute\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      &#39; Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                 LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo}, LogicalMethodTypes.Sync)(0)\n      &#39; Display the method for which the attributes are being displayed.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying the attributes for the method : {0}&quot; + _\n                 ControlChars.NewLine, myLogicalMethodInfo.MethodInfo.ToString())\n      \n      &#39; Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying attribute of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attribute As Object = myLogicalMethodInfo.GetCustomAttribute(GetType(MyAttribute))\n      Console.WriteLine(CType(attribute, MyAttribute).Name)\n      \n      &#39; Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attributes As Object() = myLogicalMethodInfo.GetCustomAttributes(GetType(MyAttribute))\n      Dim i As Integer\n      For i = 0 To attributes.Length - 1\n         Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n      Next i \n      &#39; Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all return attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim myCustomAttributeProvider As ICustomAttributeProvider = _\n                 myLogicalMethodInfo.ReturnTypeCustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i \n      End If &#39; Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_GetCustomAttribute\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_DeclaringType\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the class that declares the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> for the class declaring the method represented by the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DeclaringType property retrieves a reference to a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> for the type that declares this member. A member of a class (or interface) is either declared or inherited from a base class (or interface). The returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> might not be the same as the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the class implementing the XML Web service (if that class derives from a base class and the method represented by this class is declared in that base class then the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> returned is the base class).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_EndMethodInfo\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_EndMethodInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndMethodInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes and metadata for an <code>End</code> method of an asynchronous invocation to a method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo EndMethodInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the attributes and metadata for an <code>End</code> asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_InParameters\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_InParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parameters passed into the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo[] InParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> containing the parameters passed into the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use an instance of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> to obtain information about the parameter&#39;s data type, default value, and so on.  </p>\n<p> InParameters returns an array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects representing the parameters passed into a method, in order.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create1#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService\n{\n   public void MyMethod(int inParameter, out int outParameter)\n   {\n      outParameter = inParameter;\n   }\n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;MyMethod&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}))[0];\n\n      Console.WriteLine(&quot;<br>Printing parameters for the method : {0}&quot;,\n                           myLogicalMethodInfo.Name);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The in parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.InParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The out parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.OutParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      if(myLogicalMethodInfo.IsVoid)\n         Console.WriteLine(&quot;<br>The return type is void&quot;);\n      else\n         Console.WriteLine(&quot;<br>The return type is {0}&quot;,\n                                 myLogicalMethodInfo.ReturnType);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create1#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   void MyMethod( int inParameter, [Out]interior_ptr&lt;int&gt; outParameter )\n   {\n       *outParameter = inParameter;\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray ))[ 0 ];\n   Console::WriteLine( &quot;<br>Printing parameters for the method : {0}&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The in parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;InParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The out parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;OutParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   if ( myLogicalMethodInfo-&gt;IsVoid )\n      Console::WriteLine( &quot;<br>The return type is void&quot; );\n   else\n      Console::WriteLine( &quot;<br>The return type is {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create1#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Sub MyMethod(inParameter As Integer, ByRef outParameter As Integer)\n      outParameter = inParameter\n   End Sub &#39;MyMethod\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;MyMethod&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                             LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo})(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;Printing parameters for the method : {0}&quot;, myLogicalMethodInfo.Name)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The parameters of the method {0} are :&quot; + _\n                                           ControlChars.Newline, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine _\n         (ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine _\n          (ControlChars.Newline + &quot;The in parameters of the method {0} are :&quot; + _\n                                               ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.InParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                   myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine(ControlChars.Newline + &quot;The out parameters of the method {0} are :&quot; + _\n                                                    ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.OutParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                     myParameters(i).ParameterType.toString())\n      Next i\n      \n      If myLogicalMethodInfo.IsVoid Then\n         Console.WriteLine(ControlChars.Newline + &quot;The return type is void&quot;)\n      Else\n         Console.WriteLine _\n             (ControlChars.Newline + &quot;The return type is {0}&quot;, myLogicalMethodInfo.ReturnType)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsAsync\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAsync</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> is invoked asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsAsync { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the method is invoked asynchronously; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsVoid\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsVoid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsVoid</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the return type for the method represented by the instance of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> is <code>void</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsVoid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the return type is void; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create1#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService\n{\n   public void MyMethod(int inParameter, out int outParameter)\n   {\n      outParameter = inParameter;\n   }\n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;MyMethod&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}))[0];\n\n      Console.WriteLine(&quot;<br>Printing parameters for the method : {0}&quot;,\n                           myLogicalMethodInfo.Name);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The in parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.InParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The out parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.OutParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      if(myLogicalMethodInfo.IsVoid)\n         Console.WriteLine(&quot;<br>The return type is void&quot;);\n      else\n         Console.WriteLine(&quot;<br>The return type is {0}&quot;,\n                                 myLogicalMethodInfo.ReturnType);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create1#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   void MyMethod( int inParameter, [Out]interior_ptr&lt;int&gt; outParameter )\n   {\n       *outParameter = inParameter;\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray ))[ 0 ];\n   Console::WriteLine( &quot;<br>Printing parameters for the method : {0}&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The in parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;InParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The out parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;OutParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   if ( myLogicalMethodInfo-&gt;IsVoid )\n      Console::WriteLine( &quot;<br>The return type is void&quot; );\n   else\n      Console::WriteLine( &quot;<br>The return type is {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create1#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Sub MyMethod(inParameter As Integer, ByRef outParameter As Integer)\n      outParameter = inParameter\n   End Sub &#39;MyMethod\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;MyMethod&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                             LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo})(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;Printing parameters for the method : {0}&quot;, myLogicalMethodInfo.Name)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The parameters of the method {0} are :&quot; + _\n                                           ControlChars.Newline, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine _\n         (ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine _\n          (ControlChars.Newline + &quot;The in parameters of the method {0} are :&quot; + _\n                                               ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.InParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                   myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine(ControlChars.Newline + &quot;The out parameters of the method {0} are :&quot; + _\n                                                    ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.OutParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                     myParameters(i).ParameterType.toString())\n      Next i\n      \n      If myLogicalMethodInfo.IsVoid Then\n         Console.WriteLine(ControlChars.Newline + &quot;The return type is void&quot;)\n      Else\n         Console.WriteLine _\n             (ControlChars.Newline + &quot;The return type is {0}&quot;, myLogicalMethodInfo.ReturnType)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_MethodInfo\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_MethodInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes and metadata for a synchronous method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo MethodInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the attributes and metadata for a method. If <span class=\"xref\">stem.Web.Services.Protocols.LogicalMethodInfo.IsAsync*</span> is <code>true</code>, then the value of this property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_GetCustomAttribute#3\">   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n\n   // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray, LogicalMethodTypes::Sync ))[ 0 ];\n\n   // Display the method for which the attributes are being displayed.\n   Console::WriteLine( &quot;<br>Displaying the attributes for the method : {0}<br>&quot;, myLogicalMethodInfo-&gt;MethodInfo );\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_GetCustomAttribute#3\">      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}, \n                                   LogicalMethodTypes.Sync))[0];\n      // Display the method for which the attributes are being displayed.\n      Console.WriteLine(&quot;<br>Displaying the attributes for the method : {0}<br>&quot;,\n                           myLogicalMethodInfo.MethodInfo);\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_GetCustomAttribute#3\">      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      &#39; Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                 LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo}, LogicalMethodTypes.Sync)(0)\n      &#39; Display the method for which the attributes are being displayed.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying the attributes for the method : {0}&quot; + _\n                 ControlChars.NewLine, myLogicalMethodInfo.MethodInfo.ToString())\n      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_Name\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the method represented by this <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the method represented by this <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create1#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService\n{\n   public void MyMethod(int inParameter, out int outParameter)\n   {\n      outParameter = inParameter;\n   }\n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;MyMethod&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}))[0];\n\n      Console.WriteLine(&quot;<br>Printing parameters for the method : {0}&quot;,\n                           myLogicalMethodInfo.Name);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The in parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.InParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The out parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.OutParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      if(myLogicalMethodInfo.IsVoid)\n         Console.WriteLine(&quot;<br>The return type is void&quot;);\n      else\n         Console.WriteLine(&quot;<br>The return type is {0}&quot;,\n                                 myLogicalMethodInfo.ReturnType);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create1#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   void MyMethod( int inParameter, [Out]interior_ptr&lt;int&gt; outParameter )\n   {\n       *outParameter = inParameter;\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray ))[ 0 ];\n   Console::WriteLine( &quot;<br>Printing parameters for the method : {0}&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The in parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;InParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The out parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;OutParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   if ( myLogicalMethodInfo-&gt;IsVoid )\n      Console::WriteLine( &quot;<br>The return type is void&quot; );\n   else\n      Console::WriteLine( &quot;<br>The return type is {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create1#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Sub MyMethod(inParameter As Integer, ByRef outParameter As Integer)\n      outParameter = inParameter\n   End Sub &#39;MyMethod\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;MyMethod&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                             LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo})(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;Printing parameters for the method : {0}&quot;, myLogicalMethodInfo.Name)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The parameters of the method {0} are :&quot; + _\n                                           ControlChars.Newline, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine _\n         (ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine _\n          (ControlChars.Newline + &quot;The in parameters of the method {0} are :&quot; + _\n                                               ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.InParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                   myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine(ControlChars.Newline + &quot;The out parameters of the method {0} are :&quot; + _\n                                                    ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.OutParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                     myParameters(i).ParameterType.toString())\n      Next i\n      \n      If myLogicalMethodInfo.IsVoid Then\n         Console.WriteLine(ControlChars.Newline + &quot;The return type is void&quot;)\n      Else\n         Console.WriteLine _\n             (ControlChars.Newline + &quot;The return type is {0}&quot;, myLogicalMethodInfo.ReturnType)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_OutParameters\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_OutParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the out parameters for the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo[] OutParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> representing the out parameters for the method, in order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> to obtain information about the parameter&#39;s data type, default value, and so on.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create1#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService\n{\n   public void MyMethod(int inParameter, out int outParameter)\n   {\n      outParameter = inParameter;\n   }\n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;MyMethod&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}))[0];\n\n      Console.WriteLine(&quot;<br>Printing parameters for the method : {0}&quot;,\n                           myLogicalMethodInfo.Name);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The in parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.InParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The out parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.OutParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      if(myLogicalMethodInfo.IsVoid)\n         Console.WriteLine(&quot;<br>The return type is void&quot;);\n      else\n         Console.WriteLine(&quot;<br>The return type is {0}&quot;,\n                                 myLogicalMethodInfo.ReturnType);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create1#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   void MyMethod( int inParameter, [Out]interior_ptr&lt;int&gt; outParameter )\n   {\n       *outParameter = inParameter;\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray ))[ 0 ];\n   Console::WriteLine( &quot;<br>Printing parameters for the method : {0}&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The in parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;InParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The out parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;OutParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   if ( myLogicalMethodInfo-&gt;IsVoid )\n      Console::WriteLine( &quot;<br>The return type is void&quot; );\n   else\n      Console::WriteLine( &quot;<br>The return type is {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create1#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Sub MyMethod(inParameter As Integer, ByRef outParameter As Integer)\n      outParameter = inParameter\n   End Sub &#39;MyMethod\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;MyMethod&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                             LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo})(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;Printing parameters for the method : {0}&quot;, myLogicalMethodInfo.Name)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The parameters of the method {0} are :&quot; + _\n                                           ControlChars.Newline, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine _\n         (ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine _\n          (ControlChars.Newline + &quot;The in parameters of the method {0} are :&quot; + _\n                                               ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.InParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                   myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine(ControlChars.Newline + &quot;The out parameters of the method {0} are :&quot; + _\n                                                    ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.OutParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                     myParameters(i).ParameterType.toString())\n      Next i\n      \n      If myLogicalMethodInfo.IsVoid Then\n         Console.WriteLine(ControlChars.Newline + &quot;The return type is void&quot;)\n      Else\n         Console.WriteLine _\n             (ControlChars.Newline + &quot;The return type is {0}&quot;, myLogicalMethodInfo.ReturnType)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_Parameters\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_Parameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parameters for the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ParameterInfo[] Parameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> representing the parameters for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> to obtain information about the parameter&#39;s data type, default value, and so on.  </p>\n<p> Parameters returns an array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects representing the parameters passed into a method, in order.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_ReturnType\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_ReturnType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the return type of this method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type ReturnType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> returned by this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_ReturnTypeCustomAttributeProvider\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_ReturnTypeCustomAttributeProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnTypeCustomAttributeProvider</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes for the return type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> representing the custom attributes for the return type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::Method|AttributeTargets::ReturnValue,\nAllowMultiple=true)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\npublic ref class MyService\n{\npublic:\n\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [returnvalue:MyAttribute(&quot;This is the return sample attribute&quot;)]\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n\n   // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray, LogicalMethodTypes::Sync ))[ 0 ];\n\n   // Display the method for which the attributes are being displayed.\n   Console::WriteLine( &quot;<br>Displaying the attributes for the method : {0}<br>&quot;, myLogicalMethodInfo-&gt;MethodInfo );\n\n   // Displaying a custom attribute of type &#39;MyAttribute&#39;\n   Console::WriteLine( &quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot; );\n   Object^ attribute = myLogicalMethodInfo-&gt;GetCustomAttribute( MyAttribute::typeid );\n   Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attribute))-&gt;Name );\n\n   // Display all custom attribute of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   array&lt;Object^&gt;^attributes = myLogicalMethodInfo-&gt;GetCustomAttributes( MyAttribute::typeid );\n   for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n      Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n\n   // Display all return attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   ICustomAttributeProvider^ myCustomAttributeProvider = myLogicalMethodInfo-&gt;ReturnTypeCustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n\n   // Display all the custom attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   myCustomAttributeProvider = myLogicalMethodInfo-&gt;CustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.ReturnValue, AllowMultiple=true)]\npublic class MyAttribute : Attribute\n{\n   private string myName;\n   public MyAttribute(string name)\n   {\n      myName = name;\n   }\n   public string Name \n   {\n      get \n      {\n         return myName;\n      }\n   }\n}\n\npublic class MyService \n{\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [return: MyAttribute(&quot;This is the return sample attribute&quot;)]\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\npublic class LogicalMethodInfo_GetCustomAttribute\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}, \n                                   LogicalMethodTypes.Sync))[0];\n      // Display the method for which the attributes are being displayed.\n      Console.WriteLine(&quot;<br>Displaying the attributes for the method : {0}<br>&quot;,\n                           myLogicalMethodInfo.MethodInfo);\n\n      // Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(&quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot;);\n      object attribute = myLogicalMethodInfo.GetCustomAttribute(typeof(MyAttribute));\n      Console.WriteLine(((MyAttribute)attribute).Name);\n\n      // Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      object[] attributes = myLogicalMethodInfo.GetCustomAttributes(typeof(MyAttribute));\n      for(int i = 0; i &lt; attributes.Length; i++)\n         Console.WriteLine(((MyAttribute)attributes[i]).Name);\n\n      // Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      ICustomAttributeProvider myCustomAttributeProvider = \n                  myLogicalMethodInfo.ReturnTypeCustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n\n      // Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports MicroSoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Method Or AttributeTargets.ReturnValue, AllowMultiple := True)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n\n   Private myName As String\n   \n   Public Sub New(name As String)\n      myName = name\n   End Sub &#39;New\n   \n   Public ReadOnly Property Name() As String\n      Get\n         Return myName\n      End Get\n   End Property\nEnd Class &#39;MyAttribute\n\nPublic Class MyService\n   \n&lt;MyAttribute(&quot;This is the first sample attribute&quot;), MyAttribute(&quot;This is the second sample attribute&quot;)&gt;  _\n   Public Function Add(xValue As Integer, yValue As Integer)  _\n                 As&lt;MyAttribute(&quot;This is the return sample attribute&quot;)&gt; Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\n\nPublic Class LogicalMethodInfo_GetCustomAttribute\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      &#39; Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                 LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo}, LogicalMethodTypes.Sync)(0)\n      &#39; Display the method for which the attributes are being displayed.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying the attributes for the method : {0}&quot; + _\n                 ControlChars.NewLine, myLogicalMethodInfo.MethodInfo.ToString())\n      \n      &#39; Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying attribute of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attribute As Object = myLogicalMethodInfo.GetCustomAttribute(GetType(MyAttribute))\n      Console.WriteLine(CType(attribute, MyAttribute).Name)\n      \n      &#39; Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attributes As Object() = myLogicalMethodInfo.GetCustomAttributes(GetType(MyAttribute))\n      Dim i As Integer\n      For i = 0 To attributes.Length - 1\n         Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n      Next i \n      &#39; Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all return attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim myCustomAttributeProvider As ICustomAttributeProvider = _\n                 myLogicalMethodInfo.ReturnTypeCustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i \n      End If &#39; Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_GetCustomAttribute\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_BeginInvoke_System_Object_System_Object___System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(Object,Object[],AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous invocation of the method represented by this <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (object target, object[] values, AsyncCallback callback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> on which to invoke the method on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, <code>values</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate to call when the asynchronous invoke is complete. If <code>callback</code> is <code>null</code>, the delegate is not called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>State information that is passed on to the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> which is passed to <span class=\"xref\">stem.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*</span> to obtain the return values from the remote method call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameteris <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number, type, and order of parameters in <code>values</code> do not match the signature of the invoked method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to invoke the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_BeginInvoke#1\">   public static void Main()\n   {\n      // Get the type information.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n      // utility for the Math Web service. This class can also be found in \n      // the SoapHttpClientProtocol class example. \n      Type myType = typeof(MyMath.MyMath);\n\n      // Get the method info.\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n\n      // Create an instance of the LogicalMethodInfo class.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myBeginMethod,myEndMethod},\n         LogicalMethodTypes.Async))[0];\n\n      // Get an instance of the proxy class.\n      MyMath.MyMath myMathService = new MyMath.MyMath();\n\n      // Call the MyEndIntimationMethod method to intimate the end of \n      // the asynchronous call.\n      AsyncCallback myAsyncCallback = new AsyncCallback(MyEndIntimationMethod);\n\n      // Begin to invoke the Add method.\n      IAsyncResult myAsyncResult = myLogicalMethodInfo.BeginInvoke(\n         myMathService,new object[]{10,10},myAsyncCallback,null);\n      \n      // Wait until invoke is complete.\n      myAsyncResult.AsyncWaitHandle.WaitOne();\n      \n      // Get the result.\n      object[] myReturnValue;\n      myReturnValue = myLogicalMethodInfo.EndInvoke(myMathService,myAsyncResult);\n      \n      Console.WriteLine(&quot;Sum of 10 and 10 is &quot; + myReturnValue[0]);\n   }\n   \n   // This method will be called at the end of the asynchronous call.\n   static void MyEndIntimationMethod(IAsyncResult Result)\n   {\n      Console.WriteLine(&quot;Asynchronous call on Add method finished.&quot;);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_BeginInvoke#1\">   Public Shared Sub Main()\n\n      &#39; Get the type information.\n      &#39; Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      &#39; utility for the Math Web Service. This class can also be found in\n      &#39; the SoapHttpClientProtocol class example. \n      Dim myType As Type = GetType(MyMath.MyMath)\n\n      &#39; Get the method info.\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n\n      &#39; Create an instance of the LogicalMethodInfo class.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n         LogicalMethodInfo.Create(New MethodInfo() {myBeginMethod, myEndMethod}, _\n         LogicalMethodTypes.Async)(0)\n\n      &#39; Get an instance of the proxy class.\n      Dim myMathService As New MyMath.MyMath()\n\n      &#39; Call the MyEndIntimationMethod method to intimate the end of \n      &#39; the asynchronous call.\n      Dim myAsyncCallback As New AsyncCallback(AddressOf MyEndIntimationMethod)\n\n      &#39; Beging to invoke the Add method.\n      Dim myAsyncResult As IAsyncResult = _\n         myLogicalMethodInfo.BeginInvoke( _\n         myMathService, New Object() {10, 10}, myAsyncCallback, Nothing)\n\n      &#39; Wait until invoke is complete.\n      myAsyncResult.AsyncWaitHandle.WaitOne()\n\n      &#39; Get the result.\n      Dim myReturnValue() As Object\n      myReturnValue = myLogicalMethodInfo.EndInvoke(myMathService, myAsyncResult)\n\n      Console.WriteLine((&quot;Sum of 10 and 10 is &quot; &amp; myReturnValue(0)))\n   End Sub\n\n   &#39; This method will be called at the end of asynchronous call.\n   Shared Sub MyEndIntimationMethod(ByVal Result As IAsyncResult)\n      Console.WriteLine(&quot;Asynchronous call on method &#39;Add&#39; finished.&quot;)\n   End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_BeginInvoke#1\">public:\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   static void main()\n   {\n      // Get the type information.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n      // utility for the Math Web service. This class can also be found in\n      // the SoapHttpClientProtocol class example.\n      Type^ myType = MyMath::MyMath::typeid;\n\n      // Get the method info.\n      MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n      MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n\n      // Create an instance of the LogicalMethodInfo class.\n      array&lt;MethodInfo^&gt;^ temp0 = { myBeginMethod, myEndMethod };\n      LogicalMethodInfo^ myLogicalMethodInfo =\n         ( LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async ) )[ 0 ];\n\n      // Get an instance of the proxy class.\n      MyMath::MyMath^ myMathService = gcnew MyMath::MyMath;\n\n      // Call the MyEndIntimationMethod method to intimate the end of\n      // the asynchronous call.\n      AsyncCallback^ myAsyncCallback = gcnew AsyncCallback( MyEndIntimationMethod );\n\n      // Begin to invoke the Add method.\n      array&lt;Object^&gt;^ temp1 = { 10, 10 };\n      IAsyncResult^ myAsyncResult = myLogicalMethodInfo-&gt;BeginInvoke(\n         myMathService, temp1, myAsyncCallback, nullptr );\n\n      // Wait until invoke is complete.\n      myAsyncResult-&gt;AsyncWaitHandle-&gt;WaitOne();\n\n      // Get the result.\n      array&lt;Object^&gt;^ myReturnValue;\n      myReturnValue = myLogicalMethodInfo-&gt;EndInvoke( myMathService, myAsyncResult );\n\n      Console::WriteLine( &quot;Sum of 10 and 10 is {0}&quot;, myReturnValue[ 0 ] );\n   }\n\n   // This method will be called at the end of the asynchronous call.\n   static void MyEndIntimationMethod( IAsyncResult^ /*Result*/ )\n   {\n      Console::WriteLine( &quot;Asynchronous call on Add method finished.&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_Create_System_Reflection_MethodInfo___\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(MethodInfo[])</div>        \r\n          </div>\r\n    \r\n            <p>Given an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that can contain information about both asynchronous and synchronous methods, creates an array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfos</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the asynchronous and synchronous methods for which to create <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>, representing the methods within <code>methodInfos</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A <code>Begin</code> asynchronous method is included in <code>methodInfos</code> without a corresponding <code>End</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create1#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService\n{\n   public void MyMethod(int inParameter, out int outParameter)\n   {\n      outParameter = inParameter;\n   }\n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;MyMethod&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}))[0];\n\n      Console.WriteLine(&quot;<br>Printing parameters for the method : {0}&quot;,\n                           myLogicalMethodInfo.Name);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The in parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.InParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The out parameters of the method {0} are :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      myParameters = myLogicalMethodInfo.OutParameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n            &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      if(myLogicalMethodInfo.IsVoid)\n         Console.WriteLine(&quot;<br>The return type is void&quot;);\n      else\n         Console.WriteLine(&quot;<br>The return type is {0}&quot;,\n                                 myLogicalMethodInfo.ReturnType);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create1#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   void MyMethod( int inParameter, [Out]interior_ptr&lt;int&gt; outParameter )\n   {\n       *outParameter = inParameter;\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray ))[ 0 ];\n   Console::WriteLine( &quot;<br>Printing parameters for the method : {0}&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The in parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;InParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   Console::WriteLine( &quot;<br>The out parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   myParameters = myLogicalMethodInfo-&gt;OutParameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( String::Concat( &quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot;, myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n\n   }\n   if ( myLogicalMethodInfo-&gt;IsVoid )\n      Console::WriteLine( &quot;<br>The return type is void&quot; );\n   else\n      Console::WriteLine( &quot;<br>The return type is {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create1#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Sub MyMethod(inParameter As Integer, ByRef outParameter As Integer)\n      outParameter = inParameter\n   End Sub &#39;MyMethod\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;MyMethod&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                             LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo})(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;Printing parameters for the method : {0}&quot;, myLogicalMethodInfo.Name)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The parameters of the method {0} are :&quot; + _\n                                           ControlChars.Newline, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine _\n         (ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine _\n          (ControlChars.Newline + &quot;The in parameters of the method {0} are :&quot; + _\n                                               ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.InParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                   myParameters(i).ParameterType.toString())\n      Next i\n      \n      Console.WriteLine(ControlChars.Newline + &quot;The out parameters of the method {0} are :&quot; + _\n                                                    ControlChars.Newline, myLogicalMethodInfo.Name)\n      myParameters = myLogicalMethodInfo.OutParameters\n\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                     myParameters(i).ParameterType.toString())\n      Next i\n      \n      If myLogicalMethodInfo.IsVoid Then\n         Console.WriteLine(ControlChars.Newline + &quot;The return type is void&quot;)\n      Else\n         Console.WriteLine _\n             (ControlChars.Newline + &quot;The return type is {0}&quot;, myLogicalMethodInfo.ReturnType)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_Create_System_Reflection_MethodInfo___System_Web_Services_Protocols_LogicalMethodTypes_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(MethodInfo[],LogicalMethodTypes)</div>        \r\n          </div>\r\n    \r\n            <p>Given an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>, where the returned array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> can be restricted to only asynchronous or synchronous methods, creates an array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos, System.Web.Services.Protocols.LogicalMethodTypes types);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfos</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the asynchronous and synchronous methods for which to create <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a> objects.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.services.protocols.logicalmethodtypes\" data-linktype=\"relative-path\">LogicalMethodTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodtypes\" data-linktype=\"relative-path\">LogicalMethodTypes</a> values. Determines whether just asynchronous or synchronous methods or both are included in the returned array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>, representing the methods within <code>methodInfos</code>, filtered by the value of <code>types</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A <code>Begin</code> asynchronous method is included in <code>methodInfos</code> without a corresponding <code>End</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Create2#1\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\npublic class MyService : SoapHttpClientProtocol\n{\n   public IAsyncResult BeginAdd(int xValue, int yValue,\n                                AsyncCallback callback,\n                                object asyncState)\n   {\n      return this.BeginInvoke(&quot;Add&quot;, new object[] {xValue,yValue}, callback, asyncState);\n   }\n\n   public int EndAdd(System.IAsyncResult asyncResult) \n   {\n      object[] results = this.EndInvoke(asyncResult);\n      return ((int)(results[0]));\n   } \n}\n\npublic class LogicalMethodInfo_Create\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] { myBeginMethod,\n                                                      myEndMethod },\n                                   LogicalMethodTypes.Async))[0];\n\n      Console.WriteLine(&quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;,\n                           myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncCallbackParameter.Name +\n                              &quot; : &quot; + myLogicalMethodInfo.AsyncCallbackParameter.ParameterType);\n\n            Console.WriteLine(&quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncStateParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncStateParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.AsyncResultParameter.Name +\n         &quot; : &quot; + myLogicalMethodInfo.AsyncResultParameter.ParameterType);\n\n      Console.WriteLine(&quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.BeginMethodInfo);\n\n      Console.WriteLine(&quot;<br>The end method of the asynchronous method {0} is :<br>&quot;,\n         myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.EndMethodInfo);\n\n      if(myLogicalMethodInfo.IsAsync)\n         Console.WriteLine(&quot;<br>{0} is asynchronous&quot;, myLogicalMethodInfo.Name);\n      else\n         Console.WriteLine(&quot;<br>{0} is synchronous&quot;, myLogicalMethodInfo.Name);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Create2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Web.Services.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService: public SoapHttpClientProtocol\n{\npublic:\n   IAsyncResult^ BeginAdd( int xValue, int yValue, AsyncCallback^ callback, Object^ asyncState )\n   {\n      array&lt;Object^&gt;^temp0 = {xValue,yValue};\n      return this-&gt;BeginInvoke( &quot;Add&quot;, temp0, callback, asyncState );\n   }\n\n   int EndAdd( System::IAsyncResult^ asyncResult )\n   {\n      array&lt;Object^&gt;^results = this-&gt;EndInvoke( asyncResult );\n      return  *dynamic_cast&lt;int^&gt;(results[ 0 ]);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   array&lt;MethodInfo^&gt;^temp0 = {myBeginMethod,myEndMethod};\n   LogicalMethodInfo^ myLogicalMethodInfo = LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async )[ 0 ];\n   Console::WriteLine( &quot;<br>The asynchronous callback parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncCallbackParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous state parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncStateParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The asynchronous result parameter of method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0} : {1}&quot;, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;Name, myLogicalMethodInfo-&gt;AsyncResultParameter-&gt;ParameterType );\n   Console::WriteLine( &quot;<br>The begin method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;BeginMethodInfo );\n   Console::WriteLine( &quot;<br>The end method of the asynchronous method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;EndMethodInfo );\n   if ( myLogicalMethodInfo-&gt;IsAsync )\n      Console::WriteLine( &quot;<br> {0} is asynchronous&quot;, myLogicalMethodInfo-&gt;Name );\n   else\n      Console::WriteLine( &quot;<br> {0} is synchronous&quot;, myLogicalMethodInfo-&gt;Name );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Create2#1\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   Inherits SoapHttpClientProtocol\n   \n   Public Function BeginAdd _\n       (xValue As Integer, yValue As Integer, callback As AsyncCallback, asyncState As Object) _\n                                                                                    As IAsyncResult\n      Return Me.BeginInvoke(&quot;Add&quot;, New Object() {xValue, yValue}, callback, asyncState)\n   End Function &#39;BeginAdd\n   \n   Public Function EndAdd(asyncResult As System.IAsyncResult) As Integer\n      Dim results As Object() = Me.EndInvoke(asyncResult)\n      Return CInt(results(0))\n   End Function &#39;EndAdd\nEnd Class &#39;MyService\n\nPublic Class LogicalMethodInfo_Create\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n          LogicalMethodInfo.Create(New MethodInfo() _\n                          {myBeginMethod, myEndMethod}, LogicalMethodTypes.Async)(0)\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous callback parameter of method {0} is :&quot; + _ \n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n        (ControlChars.Tab + myLogicalMethodInfo.AsyncCallbackParameter.Name + &quot; : &quot; + _\n                    myLogicalMethodInfo.AsyncCallbackParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The asynchronous state parameter of method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncStateParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncStateParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The asynchronous result parameter of method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine _\n       (ControlChars.Tab + myLogicalMethodInfo.AsyncResultParameter.Name + &quot; : &quot; + _\n                               myLogicalMethodInfo.AsyncResultParameter.ParameterType.ToString())\n      \n      Console.WriteLine _\n        (ControlChars.Newline + &quot;The begin method of the asynchronous method {0} is :&quot; + _\n                                             ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.BeginMethodInfo.ToString())\n      \n      Console.WriteLine _\n       (ControlChars.Newline + &quot;The end method of the asynchronous method {0} is :&quot; + _\n                                                     ControlChars.Newline, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.EndMethodInfo.ToString())\n      \n      If myLogicalMethodInfo.IsAsync Then\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is asynchronous&quot;, myLogicalMethodInfo.Name)\n      Else\n         Console.WriteLine(ControlChars.Newline + &quot;{0} is synchronous&quot;, myLogicalMethodInfo.Name)\n      End If \n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Create\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_EndInvoke_System_Object_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_EndInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInvoke(Object,IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous invocation of the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object[] EndInvoke (object target, IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> on which to invoke the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned from <span class=\"xref\">stem.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of objects containing the return value and any by-reference or out parameters of the derived class method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to invoke the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The invoked method throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_BeginInvoke#2\">   public static void Main()\n   {\n      // Get the type information.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n      // utility for the Math Web service. This class can also be found in \n      // the SoapHttpClientProtocol class example. \n      Type myType = typeof(MyMath.MyMath);\n\n      // Get the method info.\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n\n      // Create an instance of the LogicalMethodInfo class.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myBeginMethod,myEndMethod},\n         LogicalMethodTypes.Async))[0];\n\n      // Get an instance of the proxy class.\n      MyMath.MyMath myMathService = new MyMath.MyMath();\n\n      // Call the MyEndIntimationMethod method to intimate the end of \n      // the asynchronous call.\n      AsyncCallback myAsyncCallback = new AsyncCallback(MyEndIntimationMethod);\n\n      // Begin to invoke the Add method.\n      IAsyncResult myAsyncResult = myLogicalMethodInfo.BeginInvoke(\n         myMathService,new object[]{10,10},myAsyncCallback,null);\n      \n      // Wait until invoke is complete.\n      myAsyncResult.AsyncWaitHandle.WaitOne();\n      \n      // Get the result.\n      object[] myReturnValue;\n      myReturnValue = myLogicalMethodInfo.EndInvoke(myMathService,myAsyncResult);\n      \n      Console.WriteLine(&quot;Sum of 10 and 10 is &quot; + myReturnValue[0]);\n   }\n   \n   // This method will be called at the end of the asynchronous call.\n   static void MyEndIntimationMethod(IAsyncResult Result)\n   {\n      Console.WriteLine(&quot;Asynchronous call on Add method finished.&quot;);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_BeginInvoke#2\">   Public Shared Sub Main()\n\n      &#39; Get the type information.\n      &#39; Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      &#39; utility for the Math Web Service. This class can also be found in\n      &#39; the SoapHttpClientProtocol class example. \n      Dim myType As Type = GetType(MyMath.MyMath)\n\n      &#39; Get the method info.\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n\n      &#39; Create an instance of the LogicalMethodInfo class.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n         LogicalMethodInfo.Create(New MethodInfo() {myBeginMethod, myEndMethod}, _\n         LogicalMethodTypes.Async)(0)\n\n      &#39; Get an instance of the proxy class.\n      Dim myMathService As New MyMath.MyMath()\n\n      &#39; Call the MyEndIntimationMethod method to intimate the end of \n      &#39; the asynchronous call.\n      Dim myAsyncCallback As New AsyncCallback(AddressOf MyEndIntimationMethod)\n\n      &#39; Beging to invoke the Add method.\n      Dim myAsyncResult As IAsyncResult = _\n         myLogicalMethodInfo.BeginInvoke( _\n         myMathService, New Object() {10, 10}, myAsyncCallback, Nothing)\n\n      &#39; Wait until invoke is complete.\n      myAsyncResult.AsyncWaitHandle.WaitOne()\n\n      &#39; Get the result.\n      Dim myReturnValue() As Object\n      myReturnValue = myLogicalMethodInfo.EndInvoke(myMathService, myAsyncResult)\n\n      Console.WriteLine((&quot;Sum of 10 and 10 is &quot; &amp; myReturnValue(0)))\n   End Sub\n\n   &#39; This method will be called at the end of asynchronous call.\n   Shared Sub MyEndIntimationMethod(ByVal Result As IAsyncResult)\n      Console.WriteLine(&quot;Asynchronous call on method &#39;Add&#39; finished.&quot;)\n   End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_BeginInvoke#2\">public:\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   static void main()\n   {\n      // Get the type information.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n      // utility for the Math Web service. This class can also be found in\n      // the SoapHttpClientProtocol class example.\n      Type^ myType = MyMath::MyMath::typeid;\n\n      // Get the method info.\n      MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n      MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n\n      // Create an instance of the LogicalMethodInfo class.\n      array&lt;MethodInfo^&gt;^ temp0 = { myBeginMethod, myEndMethod };\n      LogicalMethodInfo^ myLogicalMethodInfo =\n         ( LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async ) )[ 0 ];\n\n      // Get an instance of the proxy class.\n      MyMath::MyMath^ myMathService = gcnew MyMath::MyMath;\n\n      // Call the MyEndIntimationMethod method to intimate the end of\n      // the asynchronous call.\n      AsyncCallback^ myAsyncCallback = gcnew AsyncCallback( MyEndIntimationMethod );\n\n      // Begin to invoke the Add method.\n      array&lt;Object^&gt;^ temp1 = { 10, 10 };\n      IAsyncResult^ myAsyncResult = myLogicalMethodInfo-&gt;BeginInvoke(\n         myMathService, temp1, myAsyncCallback, nullptr );\n\n      // Wait until invoke is complete.\n      myAsyncResult-&gt;AsyncWaitHandle-&gt;WaitOne();\n\n      // Get the result.\n      array&lt;Object^&gt;^ myReturnValue;\n      myReturnValue = myLogicalMethodInfo-&gt;EndInvoke( myMathService, myAsyncResult );\n\n      Console::WriteLine( &quot;Sum of 10 and 10 is {0}&quot;, myReturnValue[ 0 ] );\n   }\n\n   // This method will be called at the end of the asynchronous call.\n   static void MyEndIntimationMethod( IAsyncResult^ /*Result*/ )\n   {\n      Console::WriteLine( &quot;Asynchronous call on Add method finished.&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttribute_System_Type_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first custom attribute applied to the type, if any custom attributes are applied to the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetCustomAttribute (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to which the custom attributes are applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> containing the first custom attribute applied to the <code>type</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The custom attribute type can not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::Method|AttributeTargets::ReturnValue,\nAllowMultiple=true)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\npublic ref class MyService\n{\npublic:\n\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [returnvalue:MyAttribute(&quot;This is the return sample attribute&quot;)]\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n\n   // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray, LogicalMethodTypes::Sync ))[ 0 ];\n\n   // Display the method for which the attributes are being displayed.\n   Console::WriteLine( &quot;<br>Displaying the attributes for the method : {0}<br>&quot;, myLogicalMethodInfo-&gt;MethodInfo );\n\n   // Displaying a custom attribute of type &#39;MyAttribute&#39;\n   Console::WriteLine( &quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot; );\n   Object^ attribute = myLogicalMethodInfo-&gt;GetCustomAttribute( MyAttribute::typeid );\n   Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attribute))-&gt;Name );\n\n   // Display all custom attribute of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   array&lt;Object^&gt;^attributes = myLogicalMethodInfo-&gt;GetCustomAttributes( MyAttribute::typeid );\n   for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n      Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n\n   // Display all return attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   ICustomAttributeProvider^ myCustomAttributeProvider = myLogicalMethodInfo-&gt;ReturnTypeCustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n\n   // Display all the custom attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   myCustomAttributeProvider = myLogicalMethodInfo-&gt;CustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.ReturnValue, AllowMultiple=true)]\npublic class MyAttribute : Attribute\n{\n   private string myName;\n   public MyAttribute(string name)\n   {\n      myName = name;\n   }\n   public string Name \n   {\n      get \n      {\n         return myName;\n      }\n   }\n}\n\npublic class MyService \n{\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [return: MyAttribute(&quot;This is the return sample attribute&quot;)]\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\npublic class LogicalMethodInfo_GetCustomAttribute\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}, \n                                   LogicalMethodTypes.Sync))[0];\n      // Display the method for which the attributes are being displayed.\n      Console.WriteLine(&quot;<br>Displaying the attributes for the method : {0}<br>&quot;,\n                           myLogicalMethodInfo.MethodInfo);\n\n      // Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(&quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot;);\n      object attribute = myLogicalMethodInfo.GetCustomAttribute(typeof(MyAttribute));\n      Console.WriteLine(((MyAttribute)attribute).Name);\n\n      // Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      object[] attributes = myLogicalMethodInfo.GetCustomAttributes(typeof(MyAttribute));\n      for(int i = 0; i &lt; attributes.Length; i++)\n         Console.WriteLine(((MyAttribute)attributes[i]).Name);\n\n      // Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      ICustomAttributeProvider myCustomAttributeProvider = \n                  myLogicalMethodInfo.ReturnTypeCustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n\n      // Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports MicroSoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Method Or AttributeTargets.ReturnValue, AllowMultiple := True)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n\n   Private myName As String\n   \n   Public Sub New(name As String)\n      myName = name\n   End Sub &#39;New\n   \n   Public ReadOnly Property Name() As String\n      Get\n         Return myName\n      End Get\n   End Property\nEnd Class &#39;MyAttribute\n\nPublic Class MyService\n   \n&lt;MyAttribute(&quot;This is the first sample attribute&quot;), MyAttribute(&quot;This is the second sample attribute&quot;)&gt;  _\n   Public Function Add(xValue As Integer, yValue As Integer)  _\n                 As&lt;MyAttribute(&quot;This is the return sample attribute&quot;)&gt; Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\n\nPublic Class LogicalMethodInfo_GetCustomAttribute\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      &#39; Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                 LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo}, LogicalMethodTypes.Sync)(0)\n      &#39; Display the method for which the attributes are being displayed.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying the attributes for the method : {0}&quot; + _\n                 ControlChars.NewLine, myLogicalMethodInfo.MethodInfo.ToString())\n      \n      &#39; Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying attribute of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attribute As Object = myLogicalMethodInfo.GetCustomAttribute(GetType(MyAttribute))\n      Console.WriteLine(CType(attribute, MyAttribute).Name)\n      \n      &#39; Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attributes As Object() = myLogicalMethodInfo.GetCustomAttributes(GetType(MyAttribute))\n      Dim i As Integer\n      For i = 0 To attributes.Length - 1\n         Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n      Next i \n      &#39; Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all return attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim myCustomAttributeProvider As ICustomAttributeProvider = _\n                 myLogicalMethodInfo.ReturnTypeCustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i \n      End If &#39; Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_GetCustomAttribute\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttributes_System_Type_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the custom attributes applied to the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object[] GetCustomAttributes (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to which the custom attributes are applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> containing the custom attributes applied to <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The custom attribute type can not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::Method|AttributeTargets::ReturnValue,\nAllowMultiple=true)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\npublic ref class MyService\n{\npublic:\n\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [returnvalue:MyAttribute(&quot;This is the return sample attribute&quot;)]\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n\n   // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n   array&lt;MethodInfo^&gt;^temparray = {myMethodInfo};\n   LogicalMethodInfo^ myLogicalMethodInfo = (LogicalMethodInfo::Create( temparray, LogicalMethodTypes::Sync ))[ 0 ];\n\n   // Display the method for which the attributes are being displayed.\n   Console::WriteLine( &quot;<br>Displaying the attributes for the method : {0}<br>&quot;, myLogicalMethodInfo-&gt;MethodInfo );\n\n   // Displaying a custom attribute of type &#39;MyAttribute&#39;\n   Console::WriteLine( &quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot; );\n   Object^ attribute = myLogicalMethodInfo-&gt;GetCustomAttribute( MyAttribute::typeid );\n   Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attribute))-&gt;Name );\n\n   // Display all custom attribute of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   array&lt;Object^&gt;^attributes = myLogicalMethodInfo-&gt;GetCustomAttributes( MyAttribute::typeid );\n   for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n      Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n\n   // Display all return attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   ICustomAttributeProvider^ myCustomAttributeProvider = myLogicalMethodInfo-&gt;ReturnTypeCustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n\n   // Display all the custom attributes of type &#39;MyAttribute&#39;.\n   Console::WriteLine( &quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot; );\n   myCustomAttributeProvider = myLogicalMethodInfo-&gt;CustomAttributeProvider;\n   if ( myCustomAttributeProvider-&gt;IsDefined( MyAttribute::typeid, true ) )\n   {\n      attributes = myCustomAttributeProvider-&gt;GetCustomAttributes( true );\n      for ( int i = 0; i &lt; attributes-&gt;Length; i++ )\n         if ( attributes[ i ]-&gt;GetType()-&gt;Equals( MyAttribute::typeid ) )\n                  Console::WriteLine( (dynamic_cast&lt;MyAttribute^&gt;(attributes[ i ]))-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">using System;\nusing System.Reflection;\nusing System.Web.Services.Protocols;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.ReturnValue, AllowMultiple=true)]\npublic class MyAttribute : Attribute\n{\n   private string myName;\n   public MyAttribute(string name)\n   {\n      myName = name;\n   }\n   public string Name \n   {\n      get \n      {\n         return myName;\n      }\n   }\n}\n\npublic class MyService \n{\n   [MyAttribute(&quot;This is the first sample attribute&quot;)]\n   [MyAttribute(&quot;This is the second sample attribute&quot;)]\n   [return: MyAttribute(&quot;This is the return sample attribute&quot;)]\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\npublic class LogicalMethodInfo_GetCustomAttribute\n{\n   public static void Main()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      // Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      LogicalMethodInfo myLogicalMethodInfo = \n         (LogicalMethodInfo.Create(new MethodInfo[] {myMethodInfo}, \n                                   LogicalMethodTypes.Sync))[0];\n      // Display the method for which the attributes are being displayed.\n      Console.WriteLine(&quot;<br>Displaying the attributes for the method : {0}<br>&quot;,\n                           myLogicalMethodInfo.MethodInfo);\n\n      // Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(&quot;<br>Displaying attribute of type &#39;MyAttribute&#39;<br>&quot;);\n      object attribute = myLogicalMethodInfo.GetCustomAttribute(typeof(MyAttribute));\n      Console.WriteLine(((MyAttribute)attribute).Name);\n\n      // Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      object[] attributes = myLogicalMethodInfo.GetCustomAttributes(typeof(MyAttribute));\n      for(int i = 0; i &lt; attributes.Length; i++)\n         Console.WriteLine(((MyAttribute)attributes[i]).Name);\n\n      // Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all return attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      ICustomAttributeProvider myCustomAttributeProvider = \n                  myLogicalMethodInfo.ReturnTypeCustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n\n      // Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(&quot;<br>Displaying all attributes of type &#39;MyAttribute&#39;<br>&quot;);\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider;\n      if(myCustomAttributeProvider.IsDefined(typeof(MyAttribute), true))\n      {\n         attributes = myCustomAttributeProvider.GetCustomAttributes(true);\n         for(int i = 0; i &lt; attributes.Length; i++)\n            if(attributes[i].GetType().Equals(typeof(MyAttribute)))\n               Console.WriteLine(((MyAttribute)attributes[i]).Name);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_GetCustomAttribute#4\">Imports System\nImports System.Reflection\nImports System.Web.Services.Protocols\nImports MicroSoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Method Or AttributeTargets.ReturnValue, AllowMultiple := True)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n\n   Private myName As String\n   \n   Public Sub New(name As String)\n      myName = name\n   End Sub &#39;New\n   \n   Public ReadOnly Property Name() As String\n      Get\n         Return myName\n      End Get\n   End Property\nEnd Class &#39;MyAttribute\n\nPublic Class MyService\n   \n&lt;MyAttribute(&quot;This is the first sample attribute&quot;), MyAttribute(&quot;This is the second sample attribute&quot;)&gt;  _\n   Public Function Add(xValue As Integer, yValue As Integer)  _\n                 As&lt;MyAttribute(&quot;This is the return sample attribute&quot;)&gt; Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\n\nPublic Class LogicalMethodInfo_GetCustomAttribute\n   \n   Public Shared Sub Main()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      &#39; Create a synchronous &#39;LogicalMethodInfo&#39; instance.\n      Dim myLogicalMethodInfo As LogicalMethodInfo = _\n                 LogicalMethodInfo.Create(New MethodInfo() {myMethodInfo}, LogicalMethodTypes.Sync)(0)\n      &#39; Display the method for which the attributes are being displayed.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying the attributes for the method : {0}&quot; + _\n                 ControlChars.NewLine, myLogicalMethodInfo.MethodInfo.ToString())\n      \n      &#39; Displaying a custom attribute of type &#39;MyAttribute&#39;\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying attribute of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attribute As Object = myLogicalMethodInfo.GetCustomAttribute(GetType(MyAttribute))\n      Console.WriteLine(CType(attribute, MyAttribute).Name)\n      \n      &#39; Display all custom attribute of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim attributes As Object() = myLogicalMethodInfo.GetCustomAttributes(GetType(MyAttribute))\n      Dim i As Integer\n      For i = 0 To attributes.Length - 1\n         Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n      Next i \n      &#39; Display all return attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all return attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      Dim myCustomAttributeProvider As ICustomAttributeProvider = _\n                 myLogicalMethodInfo.ReturnTypeCustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i \n      End If &#39; Display all the custom attributes of type &#39;MyAttribute&#39;.\n      Console.WriteLine(ControlChars.NewLine + &quot;Displaying all attributes of type &#39;MyAttribute&#39;&quot; + _\n                 ControlChars.NewLine)\n      myCustomAttributeProvider = myLogicalMethodInfo.CustomAttributeProvider\n      If myCustomAttributeProvider.IsDefined(GetType(MyAttribute), True) Then\n         attributes = myCustomAttributeProvider.GetCustomAttributes(True)\n\n         For i = 0 To attributes.Length - 1\n            If attributes(i).GetType().Equals(GetType(MyAttribute)) Then\n               Console.WriteLine(CType(attributes(i), MyAttribute).Name)\n            End If\n         Next i\n      End If\n   End Sub &#39;Main \nEnd Class &#39;LogicalMethodInfo_GetCustomAttribute\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_Invoke_System_Object_System_Object___\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Object,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the method represented by the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object[] Invoke (object target, object[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to invoke the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, the <code>values</code> parameter should be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> representing the return value and out parameters of the invoked method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number, type, and order of parameters in the <code>values</code> parameter do not match the signature of the invoked method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to invoke the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The invoked method throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsBeginMethod_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsBeginMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsBeginMethod(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the method passed in represents a <code>Begin</code> method of an asynchronous invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsBeginMethod (System.Reflection.MethodInfo methodInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that might be a <code>Begin</code> method of an asynchronous invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>methodInfo</code> parameter is a <code>Begin</code> method of an asynchronous invocation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_IsBeginMethod#1\">   // Get the type for the proxy class MyMath Web service.\n   // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n   // utility for the Math Web service. This class can also be found in\n   // the SoapHttpClientProtocol class example.\n   Type^ myType = MyMath::MyMath::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   MethodInfo^ myMethod = myType-&gt;GetMethod( &quot;Add&quot; );\n   Console::WriteLine( &quot;Is &#39;BeginAdd&#39; a Begin Method : {0}&quot;, LogicalMethodInfo::IsBeginMethod( myBeginMethod ) );\n   Console::WriteLine( &quot;Is &#39;Add&#39; a Begin Method : {0}&quot;, LogicalMethodInfo::IsBeginMethod( myMethod ) );\n   Console::WriteLine( &quot;Is &#39;EndAdd&#39; an End Method : {0}&quot;, LogicalMethodInfo::IsEndMethod( myEndMethod ) );\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_IsBeginMethod#1\">      \n      // Get the type for the proxy class MyMath Web service.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      // utility for the Math Web service. This class can also be found in \n      // the SoapHttpClientProtocol class example. \n      Type myType = typeof(MyMath.MyMath);\n\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      MethodInfo myMethod = myType.GetMethod(&quot;Add&quot;);\n      \n      Console.WriteLine(&quot;Is &#39;BeginAdd&#39; a Begin Method : &quot; + \n         LogicalMethodInfo.IsBeginMethod(myBeginMethod).ToString()); \n      Console.WriteLine(&quot;Is &#39;Add&#39; a Begin Method : &quot; + \n         LogicalMethodInfo.IsBeginMethod(myMethod).ToString()); \n      Console.WriteLine(&quot;Is &#39;EndAdd&#39; an End Method : &quot; + \n         LogicalMethodInfo.IsEndMethod(myEndMethod).ToString()); \n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_IsBeginMethod#1\">\n      &#39; Get the type for the proxy class MyMath Web service.\n      &#39; Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      &#39; utility for the Math Web service. This class can also be found in \n      &#39; the SoapHttpClientProtocol Class example. \n      Dim myType As Type = GetType(MyMath.MyMath)\n\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myMethod As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n\n      Console.WriteLine((&quot;Is &#39;BeginAdd&#39; a Begin Method : &quot; &amp; _\n         LogicalMethodInfo.IsBeginMethod(myBeginMethod).ToString()))\n      Console.WriteLine((&quot;Is &#39;Add&#39; a Begin Method : &quot; &amp; _\n         LogicalMethodInfo.IsBeginMethod(myMethod).ToString()))\n      Console.WriteLine((&quot;Is &#39;EndAdd&#39; an End Method : &quot; &amp; _\n         LogicalMethodInfo.IsEndMethod(myEndMethod).ToString()))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsEndMethod_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_IsEndMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEndMethod(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the method passed in represents an <code>End</code> method of an asynchronous invocation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsEndMethod (System.Reflection.MethodInfo methodInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that might be an <code>End</code> method of an asynchronous invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>methodInfo</code> parameter is an <code>End</code> method of an asynchronous invocation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_IsBeginMethod#2\">   // Get the type for the proxy class MyMath Web service.\n   // Note: The MyMath class is a proxy class generated by the Wsdl.exe\n   // utility for the Math Web service. This class can also be found in\n   // the SoapHttpClientProtocol class example.\n   Type^ myType = MyMath::MyMath::typeid;\n   MethodInfo^ myBeginMethod = myType-&gt;GetMethod( &quot;BeginAdd&quot; );\n   MethodInfo^ myEndMethod = myType-&gt;GetMethod( &quot;EndAdd&quot; );\n   MethodInfo^ myMethod = myType-&gt;GetMethod( &quot;Add&quot; );\n   Console::WriteLine( &quot;Is &#39;BeginAdd&#39; a Begin Method : {0}&quot;, LogicalMethodInfo::IsBeginMethod( myBeginMethod ) );\n   Console::WriteLine( &quot;Is &#39;Add&#39; a Begin Method : {0}&quot;, LogicalMethodInfo::IsBeginMethod( myMethod ) );\n   Console::WriteLine( &quot;Is &#39;EndAdd&#39; an End Method : {0}&quot;, LogicalMethodInfo::IsEndMethod( myEndMethod ) );\n</code></pre><pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_IsBeginMethod#2\">      \n      // Get the type for the proxy class MyMath Web service.\n      // Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      // utility for the Math Web service. This class can also be found in \n      // the SoapHttpClientProtocol class example. \n      Type myType = typeof(MyMath.MyMath);\n\n      MethodInfo myBeginMethod = myType.GetMethod(&quot;BeginAdd&quot;);\n      MethodInfo myEndMethod = myType.GetMethod(&quot;EndAdd&quot;);\n      MethodInfo myMethod = myType.GetMethod(&quot;Add&quot;);\n      \n      Console.WriteLine(&quot;Is &#39;BeginAdd&#39; a Begin Method : &quot; + \n         LogicalMethodInfo.IsBeginMethod(myBeginMethod).ToString()); \n      Console.WriteLine(&quot;Is &#39;Add&#39; a Begin Method : &quot; + \n         LogicalMethodInfo.IsBeginMethod(myMethod).ToString()); \n      Console.WriteLine(&quot;Is &#39;EndAdd&#39; an End Method : &quot; + \n         LogicalMethodInfo.IsEndMethod(myEndMethod).ToString()); \n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_IsBeginMethod#2\">\n      &#39; Get the type for the proxy class MyMath Web service.\n      &#39; Note: The MyMath class is a proxy class generated by the Wsdl.exe \n      &#39; utility for the Math Web service. This class can also be found in \n      &#39; the SoapHttpClientProtocol Class example. \n      Dim myType As Type = GetType(MyMath.MyMath)\n\n      Dim myBeginMethod As MethodInfo = myType.GetMethod(&quot;BeginAdd&quot;)\n      Dim myEndMethod As MethodInfo = myType.GetMethod(&quot;EndAdd&quot;)\n      Dim myMethod As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n\n      Console.WriteLine((&quot;Is &#39;BeginAdd&#39; a Begin Method : &quot; &amp; _\n         LogicalMethodInfo.IsBeginMethod(myBeginMethod).ToString()))\n      Console.WriteLine((&quot;Is &#39;Add&#39; a Begin Method : &quot; &amp; _\n         LogicalMethodInfo.IsBeginMethod(myMethod).ToString()))\n      Console.WriteLine((&quot;Is &#39;EndAdd&#39; an End Method : &quot; &amp; _\n         LogicalMethodInfo.IsEndMethod(myEndMethod).ToString()))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Services_Protocols_LogicalMethodInfo_ToString\">\r\n    \r\n            <a id=\"System_Web_Services_Protocols_LogicalMethodInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents the current <a class=\"xref\" href=\"system.web.services.protocols.logicalmethodinfo\" data-linktype=\"relative-path\">LogicalMethodInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"LogicalMethodInfo_Constructor#1\">using System;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web.Services.Protocols;\n\npublic class MyService \n{\n   public int Add(int xValue, int yValue)\n   {\n      return (xValue + yValue);\n   }\n}\n\nclass LogicalMethodInfo_Constructor\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   static void Run()\n   {\n      Type myType = typeof(MyService);\n      MethodInfo myMethodInfo = myType.GetMethod(&quot;Add&quot;);\n      LogicalMethodInfo myLogicalMethodInfo = \n                  new LogicalMethodInfo(myMethodInfo);\n\n      Console.WriteLine(&quot;<br>Printing properties of method : {0}<br>&quot;,\n                              myLogicalMethodInfo.ToString());\n\n      Console.WriteLine(&quot;<br>The declaring type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.DeclaringType);\n\n      Console.WriteLine(&quot;<br>The parameters of the method {0} are :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      ParameterInfo[] myParameters = myLogicalMethodInfo.Parameters;\n      for(int i = 0; i &lt; myParameters.Length; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myParameters[i].Name +\n                                 &quot; : &quot; + myParameters[i].ParameterType);\n      }\n\n      Console.WriteLine(&quot;<br>The return type of the method {0} is :<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + myLogicalMethodInfo.ReturnType);\n\n      MyService service = new MyService();\n      Console.WriteLine(&quot;<br>Invoking the method {0}<br>&quot;,\n                              myLogicalMethodInfo.Name);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;,\n                              myLogicalMethodInfo.Invoke(service, \n                                                   new object[] {10, 10}));\n\n   }\n   \n   static void Main()\n   {\n      Run();\n   }  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LogicalMethodInfo_Constructor#1\">#using &lt;System.Web.Services.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Web::Services::Protocols;\n\npublic ref class MyService\n{\npublic:\n   int Add( int xValue, int yValue )\n   {\n      return (xValue + yValue);\n   }\n\n};\n\nint main()\n{\n   Type^ myType = MyService::typeid;\n   MethodInfo^ myMethodInfo = myType-&gt;GetMethod( &quot;Add&quot; );\n   LogicalMethodInfo^ myLogicalMethodInfo = gcnew LogicalMethodInfo( myMethodInfo );\n   Console::WriteLine( &quot;<br>Printing properties of method : {0}<br>&quot;, myLogicalMethodInfo );\n   Console::WriteLine( &quot;<br>The declaring type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;DeclaringType );\n   Console::WriteLine( &quot;<br>The parameters of the method {0} are :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;ParameterInfo^&gt;^myParameters = myLogicalMethodInfo-&gt;Parameters;\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, String::Concat( myParameters[ i ]-&gt;Name, &quot; : &quot;, myParameters[ i ]-&gt;ParameterType ) );\n   }\n   Console::WriteLine( &quot;<br>The return type of the method {0} is :<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myLogicalMethodInfo-&gt;ReturnType );\n   MyService^ service = gcnew MyService;\n   Console::WriteLine( &quot;<br>Invoking the method {0}<br>&quot;, myLogicalMethodInfo-&gt;Name );\n   array&lt;Object^&gt;^values = gcnew array&lt;Object^&gt;(2);\n   values[ 0 ] = 10;\n   values[ 1 ] = 10;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The sum of 10 and 10 is : {0}&quot;, myLogicalMethodInfo-&gt;Invoke( service, values ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"LogicalMethodInfo_Constructor#1\">Imports System\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web.Services.Protocols\nImports Microsoft.VisualBasic\n\nPublic Class MyService\n   \n   Public Function Add(xValue As Integer, yValue As Integer) As Integer\n      Return xValue + yValue\n   End Function &#39;Add\nEnd Class &#39;MyService\n\nClass LogicalMethodInfo_Constructor\n\n&lt;PermissionSetAttribute(SecurityAction.Demand, Name := &quot;FullTrust&quot;)&gt;  _\n   Shared Sub Run()\n      Dim myType As Type = GetType(MyService)\n      Dim myMethodInfo As MethodInfo = myType.GetMethod(&quot;Add&quot;)\n      Dim myLogicalMethodInfo As New LogicalMethodInfo(myMethodInfo)\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;Printing properties of method : {0}&quot; + _\n                              ControlChars.NewLine, myLogicalMethodInfo.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The declaring type of the method {0} is :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.DeclaringType.ToString())\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The parameters of the method {0} are :&quot; + _\n                                    ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Dim myParameters As ParameterInfo() = myLogicalMethodInfo.Parameters\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + myParameters(i).Name + &quot; : &quot; + _\n                                                      myParameters(i).ParameterType.ToString())\n      Next i\n      \n      Console.WriteLine(ControlChars.NewLine + &quot;The return type of the method {0} is :&quot; + _\n                                             ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + myLogicalMethodInfo.ReturnType.ToString())\n      \n      Dim service As New MyService()\n      Console.WriteLine(ControlChars.NewLine + &quot;Invoking the method {0}&quot; + _\n                                                ControlChars.NewLine, myLogicalMethodInfo.Name)\n      Console.WriteLine(ControlChars.Tab + &quot;The sum of 10 and 10 is : {0}&quot;, _\n                                    myLogicalMethodInfo.Invoke(service, New Object() {10, 10}))\n\n   End Sub &#39;Run\n   \n   Shared Sub Main()\n      Run()\n   End Sub &#39;Main\nEnd Class &#39;LogicalMethodInfo_Constructor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.Services.Protocols.LogicalMethodInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.Services.Protocols.LogicalMethodInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.Create\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.InParameters\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.IsAsync\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.IsVoid\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.OutParameters\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.Parameters\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.ReturnType\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Services.Protocols.LogicalMethodInfo.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Web.Services.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9f650d9b-043d-7abd-5eb5-598d793f58e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.Services.Protocols/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Services.Protocols.LogicalMethodInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.Services.Protocols.LogicalMethodInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.Services.Protocols.LogicalMethodInfo.yml","open_to_public_contributors":true,"api_name":["System.Web.Services.Protocols.LogicalMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo..ctor","System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter","System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter","System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter","System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke","System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.Create","System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider","System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType","System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke","System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute","System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes","System.Web.Services.Protocols.LogicalMethodInfo.InParameters","System.Web.Services.Protocols.LogicalMethodInfo.Invoke","System.Web.Services.Protocols.LogicalMethodInfo.IsAsync","System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod","System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod","System.Web.Services.Protocols.LogicalMethodInfo.IsVoid","System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.Name","System.Web.Services.Protocols.LogicalMethodInfo.OutParameters","System.Web.Services.Protocols.LogicalMethodInfo.Parameters","System.Web.Services.Protocols.LogicalMethodInfo.ReturnType","System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider","System.Web.Services.Protocols.LogicalMethodInfo.ToString"],"api_location":["System.Web.Services.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Services.Protocols.LogicalMethodInfo","System::Web::Services::Protocols::LogicalMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.#ctor","System::Web::Services::Protocols::LogicalMethodInfo::#ctor","System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter","System::Web::Services::Protocols::LogicalMethodInfo::AsyncCallbackParameter","System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter","System::Web::Services::Protocols::LogicalMethodInfo::AsyncResultParameter","System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter","System::Web::Services::Protocols::LogicalMethodInfo::AsyncStateParameter","System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke","System::Web::Services::Protocols::LogicalMethodInfo::BeginInvoke","System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo","System::Web::Services::Protocols::LogicalMethodInfo::BeginMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.Create","System::Web::Services::Protocols::LogicalMethodInfo::Create","System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider","System::Web::Services::Protocols::LogicalMethodInfo::CustomAttributeProvider","System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType","System::Web::Services::Protocols::LogicalMethodInfo::DeclaringType","System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke","System::Web::Services::Protocols::LogicalMethodInfo::EndInvoke","System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo","System::Web::Services::Protocols::LogicalMethodInfo::EndMethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute","System::Web::Services::Protocols::LogicalMethodInfo::GetCustomAttribute","System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes","System::Web::Services::Protocols::LogicalMethodInfo::GetCustomAttributes","System.Web.Services.Protocols.LogicalMethodInfo.InParameters","System::Web::Services::Protocols::LogicalMethodInfo::InParameters","System.Web.Services.Protocols.LogicalMethodInfo.Invoke","System::Web::Services::Protocols::LogicalMethodInfo::Invoke","System.Web.Services.Protocols.LogicalMethodInfo.IsAsync","System::Web::Services::Protocols::LogicalMethodInfo::IsAsync","System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod","System::Web::Services::Protocols::LogicalMethodInfo::IsBeginMethod","System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod","System::Web::Services::Protocols::LogicalMethodInfo::IsEndMethod","System.Web.Services.Protocols.LogicalMethodInfo.IsVoid","System::Web::Services::Protocols::LogicalMethodInfo::IsVoid","System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo","System::Web::Services::Protocols::LogicalMethodInfo::MethodInfo","System.Web.Services.Protocols.LogicalMethodInfo.Name","System::Web::Services::Protocols::LogicalMethodInfo::Name","System.Web.Services.Protocols.LogicalMethodInfo.OutParameters","System::Web::Services::Protocols::LogicalMethodInfo::OutParameters","System.Web.Services.Protocols.LogicalMethodInfo.Parameters","System::Web::Services::Protocols::LogicalMethodInfo::Parameters","System.Web.Services.Protocols.LogicalMethodInfo.ReturnType","System::Web::Services::Protocols::LogicalMethodInfo::ReturnType","System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider","System::Web::Services::Protocols::LogicalMethodInfo::ReturnTypeCustomAttributeProvider","System.Web.Services.Protocols.LogicalMethodInfo.ToString","System::Web::Services::Protocols::LogicalMethodInfo::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9f650d9b-043d-7abd-5eb5-598d793f58e7","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.Services.Protocols/LogicalMethodInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LogicalMethodInfo class | Microsoft Docs","_op_ogTitle":"LogicalMethodInfo class","description":"Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Web.Services.Protocols/toc.json","toc_rel":"_splitted/System.Web.Services.Protocols/toc.json","source_url":"","ms.assetid":"System.Web.Services.Protocols.LogicalMethodInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.services.protocols.logicalmethodinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.services.protocols.logicalmethodinfo","fileRelativePath":"System.Web.Services.Protocols.LogicalMethodInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}