{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ContentElement</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">DispatcherObject</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">System.Windows.DependencyObject</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">ContentElement</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ClearValue(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyPropertyKey_\" data-linktype=\"relative-path\">ClearValue(DependencyPropertyKey)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_CoerceValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">CoerceValue(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_DependencyObjectType\" data-linktype=\"relative-path\">DependencyObjectType</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator\" data-linktype=\"relative-path\">GetLocalValueEnumerator()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">GetValue(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_InvalidateProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">InvalidateProperty(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_IsSealed\" data-linktype=\"relative-path\">IsSealed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"relative-path\">OnPropertyChanged(DependencyPropertyChangedEventArgs)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ReadLocalValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ReadLocalValue(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetCurrentValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetCurrentValue(DependencyProperty,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyProperty,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ShouldSerializeProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ShouldSerializeProperty(DependencyProperty)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ContentElement defines the following common content characteristics:  </p>\n<ul>\n<li><p>Input: All ContentElement derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.  </p>\n</li>\n<li><p>Focus: All ContentElement derived classes are potentially focusable. (However, the default focusable state for the ContentElement base class is <code>false</code>. For details on how to make a ContentElement focusable, see <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focusable_\" data-linktype=\"relative-path\">Focusable</a>.) In addition, this class contains APIs that you can use for traversing the focus across related elements.  </p>\n</li>\n<li><p>Events: ContentElement includes events that are related to input and focus; it also includes events for changes in state. In many cases, the ContentElement events are routed events. In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition. Also, ContentElement defines APIs that can raise routed events and that can add or remove handlers to events.  </p>\n<p>ContentElement shares many common APIs with <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. These common APIs do not come from a shared class inheritance. But they do share common naming, similar behavior, and similar internal implementation of APIs in each class. The similarity is because ContentElement and <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> are each classes that are an element base, although each has different intentions for its markup object model behavior.  </p>\n<p>In particular, <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> descends from <a class=\"xref\" href=\"system.windows.media.visual\" data-linktype=\"relative-path\">Visual</a>, which provides the lower-level graphics support for rendering a ContentElement to a rectangular region within a composited window, whereas ContentElement defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> and <a class=\"xref\" href=\"system.windows.media.animation.ianimatable\" data-linktype=\"relative-path\">IAnimatable</a>.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ContentElement()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ContentElement ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AllowDropProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllowDropProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.AllowDrop*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty AllowDropProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesCapturedProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesCapturedProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.AreAnyTouchesCaptured*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesCapturedWithinProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesCapturedWithinProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.AreAnyTouchesCapturedWithin*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesDirectlyOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesDirectlyOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.AreAnyTouchesDirectlyOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.AreAnyTouchesOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragEnterEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragEnterEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent DragEnterEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragLeaveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragLeaveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent DragLeaveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragOverEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragOverEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragOver\" data-linktype=\"relative-path\">DragOver</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent DragOverEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DropEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DropEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Drop\" data-linktype=\"relative-path\">Drop</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent DropEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_FocusableProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FocusableProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.Focusable*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty FocusableProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GiveFeedbackEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GiveFeedbackEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GotFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotKeyboardFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotKeyboardFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotMouseCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotMouseCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotStylusCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotStylusCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotStylusCapture\" data-linktype=\"relative-path\">GotStylusCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotTouchCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotTouchCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsEnabledProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsEnabledProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsEnabled*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsEnabledProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsFocusedProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsFocusedProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsFocused*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsFocusedProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocusedProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocusedProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsKeyboardFocused*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocusWithinProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocusWithinProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsKeyboardFocusWithin*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCapturedProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCapturedProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsMouseCaptured*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCaptureWithinProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCaptureWithinProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsMouseCaptureWithin*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseDirectlyOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseDirectlyOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsMouseDirectlyOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsMouseOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsMouseOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCapturedProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCapturedProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsStylusCaptured*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCaptureWithinProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCaptureWithinProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsStylusCaptureWithin*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusDirectlyOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusDirectlyOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsStylusDirectlyOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusOverProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusOverProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <span class=\"xref\">stem.Windows.ContentElement.IsStylusOver*</span> dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.DependencyProperty IsStylusOverProperty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_KeyDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent KeyDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_KeyUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent KeyUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent LostFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostKeyboardFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostKeyboardFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostMouseCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostMouseCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostMouseCapture\" data-linktype=\"relative-path\">LostMouseCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostStylusCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostStylusCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostStylusCapture\" data-linktype=\"relative-path\">LostStylusCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostTouchCaptureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostTouchCaptureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseEnterEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseEnterEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseEnterEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeaveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeaveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseLeaveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeftButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeftButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeftButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeftButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseRightButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseRightButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseRightButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseRightButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseWheelEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseWheelEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent MouseWheelEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragEnterEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragEnterEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragEnter\" data-linktype=\"relative-path\">PreviewDragEnter</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragLeaveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragLeaveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragLeave\" data-linktype=\"relative-path\">PreviewDragLeave</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragOverEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragOverEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragOver\" data-linktype=\"relative-path\">PreviewDragOver</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDropEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDropEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDrop\" data-linktype=\"relative-path\">PreviewDrop</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewDropEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewGiveFeedbackEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewGiveFeedbackEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGiveFeedback\" data-linktype=\"relative-path\">PreviewGiveFeedback</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewGotKeyboardFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewGotKeyboardFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewKeyDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewKeyDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewKeyUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewKeyUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyUp\" data-linktype=\"relative-path\">PreviewKeyUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewLostKeyboardFocusEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewLostKeyboardFocusEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseLeftButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseLeftButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseLeftButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseLeftButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseRightButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseRightButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseRightButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseRightButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseUp\" data-linktype=\"relative-path\">PreviewMouseUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseWheelEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseWheelEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseWheel\" data-linktype=\"relative-path\">PreviewMouseWheel</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewQueryContinueDragEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewQueryContinueDragEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewQueryContinueDrag\" data-linktype=\"relative-path\">PreviewQueryContinueDrag</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonDown\" data-linktype=\"relative-path\">PreviewStylusButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonUp\" data-linktype=\"relative-path\">PreviewStylusButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusInAirMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusInAirMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusInRangeEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusInRangeEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInRange\" data-linktype=\"relative-path\">PreviewStylusInRange</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusMove\" data-linktype=\"relative-path\">PreviewStylusMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusOutOfRangeEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusOutOfRangeEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusOutOfRange\" data-linktype=\"relative-path\">PreviewStylusOutOfRange</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusSystemGestureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusSystemGestureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusSystemGesture\" data-linktype=\"relative-path\">PreviewStylusSystemGesture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusUp\" data-linktype=\"relative-path\">PreviewStylusUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTextInputEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTextInputEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_QueryContinueDragEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">QueryContinueDragEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_QueryCursorEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">QueryCursorEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_QueryCursor\" data-linktype=\"relative-path\">QueryCursor</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent QueryCursorEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusButtonDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusButtonDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonDown\" data-linktype=\"relative-path\">StylusButtonDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusButtonUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusButtonUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonUp\" data-linktype=\"relative-path\">StylusButtonUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusDown\" data-linktype=\"relative-path\">StylusDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusEnterEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusEnterEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusEnter\" data-linktype=\"relative-path\">StylusEnter</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusEnterEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusInAirMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusInAirMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusInRangeEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusInRangeEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInRange\" data-linktype=\"relative-path\">StylusInRange</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusInRangeEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusLeaveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusLeaveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusLeave\" data-linktype=\"relative-path\">StylusLeave</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusLeaveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusMove\" data-linktype=\"relative-path\">StylusMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusOutOfRangeEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusOutOfRangeEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusOutOfRange\" data-linktype=\"relative-path\">StylusOutOfRange</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusSystemGestureEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusSystemGestureEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusSystemGesture\" data-linktype=\"relative-path\">StylusSystemGesture</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusUp\" data-linktype=\"relative-path\">StylusUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent StylusUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TextInputEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TextInputEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TextInput\" data-linktype=\"relative-path\">TextInput</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TextInputEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchDownEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchDownEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TouchDownEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchEnterEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchEnterEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TouchEnterEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchLeaveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchLeaveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TouchLeaveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchMoveEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchMoveEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TouchMoveEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchUpEvent\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchUpEvent</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Identifies the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly System.Windows.RoutedEvent TouchUpEvent;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AllowDrop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllowDrop</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AllowDrop { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this element can be used as the target of a drag-and-drop operation; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting AllowDrop to  <code>true</code>. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> or any other base element class. Certain controls, for example, <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, do have a default behavior, but no <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> derived classes have such a behavior. For more information on drag and drop, see <a href=\"../Topic/Drag%20and%20Drop%20Overview.md\" data-linktype=\"relative-path\">Drag and Drop Overview</a>.  </p>\n<p> <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> overrides the metadata for this dependency property in its implementation. Specifically, <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> designates that this property allows property value inheritance (<a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> is <code>true</code> in metadata). Property value inheritance in this context means that if there are child elements with no other value for AllowDrop assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system. This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> child elements that have not specifically assigned it a value of <code>false</code>.  </p>\n<p><a name=\"dependencyPropertyInfo_AllowDrop\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AllowDropProperty\" data-linktype=\"relative-path\">AllowDropProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesCaptured\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesCaptured</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether at least one touch is captured to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AreAnyTouchesCaptured { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if at least one touch is captured to this element; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesCapturedWithin\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesCapturedWithin</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AreAnyTouchesCapturedWithin { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesDirectlyOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesDirectlyOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether at least one touch is pressed over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AreAnyTouchesDirectlyOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if at least one touch is pressed over this element; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AreAnyTouchesOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AreAnyTouchesOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AreAnyTouchesOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_CommandBindings\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CommandBindings</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> objects that are associated with this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Input.CommandBindingCollection CommandBindings { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.commandbindingcollection\" data-linktype=\"relative-path\">CommandBindingCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The collection of all <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> objects.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.  </p>\n<p> Another typical way to populate the CommandBindings collection is to use <a class=\"xref\" href=\"system.windows.input.commandmanager\" data-linktype=\"relative-path\">CommandManager</a> methods programmatically.  </p>\n<p><a name=\"xamlPropertyElementUsage_CommandBindings\"></a>   </p>\n<h2 id=\"xaml-property-element-usage\">XAML Property Element Usage</h2>\n<pre><code>&lt;object&gt;  \n  &lt;object.CommandBindings&gt;  \n    oneOrMoreCommandBindings  &lt;/object.CommandBindings&gt;  \n&lt;/object&gt;  \n</code></pre><p><a name=\"xamlValues_CommandBindings\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>oneOrMoreCommandBindings</em><br> One or more <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> elements. Each of these should have a <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_Command_\" data-linktype=\"relative-path\">Command</a> attribute set to a known command, and attributes set for the <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_CanExecute\" data-linktype=\"relative-path\">CanExecute</a> and <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_Executed\" data-linktype=\"relative-path\">Executed</a> handler implementations. For more information see <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_Focusable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Focusable</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether the element can receive focus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Focusable { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element is focusable; otherwise <code>false</code>. The default is <code>false</code>; however, see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Only the focused element receives keyboard input.  </p>\n<p> Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.  </p>\n<p> When inherited by <a class=\"xref\" href=\"system.windows.documents.hyperlink\" data-linktype=\"relative-path\">Hyperlink</a> or its derived classes, <a class=\"xref\" href=\"system.windows.documents.hyperlink\" data-linktype=\"relative-path\">Hyperlink</a> overrides the metadata for this dependency property and redefines the default value of this property to be <code>true</code>.  </p>\n<p><a name=\"dependencyPropertyInfo_Focusable\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_FocusableProperty\" data-linktype=\"relative-path\">FocusableProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_HasAnimatedProperties\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HasAnimatedProperties</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this element has any animated properties.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool HasAnimatedProperties { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this element has animations attached to any of its properties; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns <code>true</code> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_InputBindings\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputBindings</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the collection of input bindings that are associated with this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Input.InputBindingCollection InputBindings { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.inputbindingcollection\" data-linktype=\"relative-path\">InputBindingCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The collection of input bindings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Input bindings support the binding of commands to input devices. For example, <a class=\"xref\" href=\"system.windows.input.mousebinding\" data-linktype=\"relative-path\">MouseBinding</a> implements input bindings that include properties that are specific to mouse devices.  </p>\n<p> The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.  </p>\n<p> A related property, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.  </p>\n<p><a name=\"xamlPropertyElementUsage_InputBindings\"></a>   </p>\n<h2 id=\"xaml-property-element-usage\">XAML Property Element Usage</h2>\n<pre><code>&lt;object&gt;  \n  &lt;object.InputBindings&gt;  \n    oneOrMoreInputBindings  &lt;/object.InputBindings&gt;  \n&lt;/object&gt;  \n</code></pre><p><a name=\"xamlValues_InputBindings\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>oneOrMoreInputBindings</em><br> One or more <a class=\"xref\" href=\"system.windows.input.inputbinding\" data-linktype=\"relative-path\">InputBinding</a> elements (typically the <a class=\"xref\" href=\"system.windows.input.keybinding\" data-linktype=\"relative-path\">KeyBinding</a> or <a class=\"xref\" href=\"system.windows.input.mousebinding\" data-linktype=\"relative-path\">MouseBinding</a> derived classes). Each of these is expected to have a <a class=\"xref\" href=\"system.windows.input.inputbinding#System_Windows_Input_InputBinding_Command_\" data-linktype=\"relative-path\">Command</a> and <a class=\"xref\" href=\"system.windows.input.inputbinding#System_Windows_Input_InputBinding_Gesture_\" data-linktype=\"relative-path\">Gesture</a> attribute set.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsEnabled\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsEnabled</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether this element is enabled in the user interface (UI).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsEnabled { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element is enabled; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"dependencyPropertyInfo_IsEnabled\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsEnabledProperty\" data-linktype=\"relative-path\">IsEnabledProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsEnabledCore\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsEnabledCore</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that becomes the return value of <span class=\"xref\">stem.Windows.ContentElement.IsEnabled*</span> in derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool IsEnabledCore { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element is enabled; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsFocused\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsFocused</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that determines whether this element has logical focus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsFocused { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this element has logical focus; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a> and <a href=\"../Topic/Focus%20Overview.md\" data-linktype=\"relative-path\">Focus Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsFocused\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsFocusedProperty\" data-linktype=\"relative-path\">IsFocusedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsInputMethodEnabled\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsInputMethodEnabled</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether an input method system, such as an Input Method Editor (IME), is enabled for processing the input to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsInputMethodEnabled { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if an input method is active; otherwise, <code>false</code>. The default value of the underlying attached property is <code>true</code>; however, this value is influenced by the state of input methods at runtime.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns the value that is returned by the attached property &lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt; for the currently enabled input methods (keyboard, speech, and other input devices).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocused\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocused</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this element has keyboard focus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsKeyboardFocused { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this element has keyboard focus; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"dependencyPropertyInfo_IsKeyboardFocused\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedProperty\" data-linktype=\"relative-path\">IsKeyboardFocusedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocusWithin\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocusWithin</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsKeyboardFocusWithin { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if keyboard focus is on the element or its child elements; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Changes to the value of this property typically raise the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event, unless a derived class has overridden <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnIsKeyboardFocusWithinChanged_\" data-linktype=\"relative-path\">OnIsKeyboardFocusWithinChanged</a> to suppress the event.  </p>\n<p> You do not set this property directly, but you can set the focus to the element by calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focus_\" data-linktype=\"relative-path\">Focus</a>, or by making a <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MoveFocus_\" data-linktype=\"relative-path\">MoveFocus</a> request. Either of these method calls might change this property value.  </p>\n<p><a name=\"dependencyPropertyInfo_IsKeyboardFocusWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinProperty\" data-linktype=\"relative-path\">IsKeyboardFocusWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCaptured\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCaptured</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the mouse is captured by this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMouseCaptured { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element has mouse capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Mouse capture state is related to in-process drag-and-drop operations.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseCaptured\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCapturedProperty\" data-linktype=\"relative-path\">IsMouseCapturedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCaptureWithin\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCaptureWithin</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMouseCaptureWithin { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this element or a contained element has mouse capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"dependencyPropertyInfo_IsMouseCaptureWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptureWithinProperty\" data-linktype=\"relative-path\">IsMouseCaptureWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseDirectlyOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseDirectlyOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMouseDirectlyOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the mouse pointer is over the same element result as a hit test; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Unlike <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a>, this property is only <code>true</code> if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element&#39;s deeper template and compositing, this property will be <code>false</code>. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> instead.  </p>\n<p> If the mouse is captured by this element, and this property is <code>true</code> at time of capture, this property will continue to return <code>true</code> until mouse capture is lost and the pointer is not over its bounds.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseDirectlyOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOverProperty\" data-linktype=\"relative-path\">IsMouseDirectlyOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMouseOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if mouse pointer is over the element or its child elements; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although an analogous &quot;IsMouseOverChanged&quot; event does not exist, several similar events do. For example, you can use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>, and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a>.  </p>\n<p> If this element captures the mouse, this property remains <code>true</code> until mouse capture is lost and the mouse pointer leaves the element bounds.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseOverProperty\" data-linktype=\"relative-path\">IsMouseOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCaptured\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCaptured</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the stylus is captured to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsStylusCaptured { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the element has stylus capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusCaptured\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCapturedProperty\" data-linktype=\"relative-path\">IsStylusCapturedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCaptureWithin\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCaptureWithin</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsStylusCaptureWithin { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if stylus capture is held within this element; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusCaptureWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptureWithinProperty\" data-linktype=\"relative-path\">IsStylusCaptureWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusDirectlyOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusDirectlyOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsStylusDirectlyOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the stylus is over the same element as a hit test; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Unlike <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a>, this property is only <code>true</code> if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element&#39;s deeper compositing, this property will be <code>false</code>.  </p>\n<p> Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> instead.  </p>\n<p> If this element has stylus capture and this property is <code>true</code> at the time of capture, this property remains <code>true</code> until stylus capture is lost and the stylus is not over its bounds.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusDirectlyOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusDirectlyOverProperty\" data-linktype=\"relative-path\">IsStylusDirectlyOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the stylus is located over this element (including visual child elements).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsStylusOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the stylus is over the element or its child elements; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If this element has stylus capture, this property remains <code>true</code> until stylus capture is lost and the pointer is out of its bounds.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusOverProperty\" data-linktype=\"relative-path\">IsStylusOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchesCaptured\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchesCaptured</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets all touch devices that are captured to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are captured to this element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchesCapturedWithin\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchesCapturedWithin</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets all touch devices that are captured to this element or any child elements in its visual tree.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are captured to this element or any child elements in its visual tree.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchesDirectlyOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchesDirectlyOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets all touch devices that are over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are over this element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchesOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchesOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets all touch devices that are over this element or any child elements in its visual tree.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are over this element or any child elements in its visual tree.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddHandler(RoutedEvent,Delegate)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>routedEvent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An identifier for the routed event to be handled.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handler</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to the handler implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  </p>\n<p> You typically use this method to provide the implementation of the &quot;add&quot; accessor for the Microsoft .NET event access pattern of a custom routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddHandler(RoutedEvent,Delegate,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as <code>true</code> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>routedEvent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An identifier for the.routed event to be handled.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handler</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to the handler implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handledEventsToo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <code>false</code> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  </p>\n<p> The default is <code>false</code>.  </p>\n<p> Do not routinely ask to rehandle a routed event. For more information, see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with <code>handledEventsToo</code> as <code>true</code> is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  </p>\n<p> Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event&#39;s preview alternative. For example, if <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> is marked handled by class handling, you might be able to add handlers for <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> instead.  </p>\n<p> You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  </p>\n<p> You typically use this method to provide the implementation of the &quot;add&quot; accessor for the Microsoft .NET event access pattern of a custom routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_AddToEventRoute_System_Windows_EventRoute_System_Windows_RoutedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddToEventRoute(EventRoute,RoutedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds handlers to the specified <a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a> for the current <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> event handler collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>route</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event route that handlers are added to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event data that is used to add the handlers. This method uses the <span class=\"xref\">stem.Windows.RoutedEventArgs.RoutedEvent*</span> property of the arguments to create the handlers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method for content host elements (regardless whether they implement <a class=\"xref\" href=\"system.windows.icontenthost\" data-linktype=\"relative-path\">IContentHost</a>) in order to add handlers for the content host child elements to the host <a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The identifier for the property to animate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>clock</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The animation clock that controls and declares the animation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To remove an animation from a property, specify the identifier for that property as <code>dp</code> and specify <code>clock</code> as <code>null</code>. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property to animate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>clock</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The animation clock that controls and declares the animation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handoffBehavior</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value of the enumeration. The default is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, which will stop any existing animation and replace with the new one.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To remove an animation from a property, specify the identifier for that property as <code>dp</code> and specify <code>clock</code> as <code>null</code>. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts an animation for a specified animated property on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property to animate, which is specified as a dependency property identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>animation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The timeline of the animation to start.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> for <code>animation</code> is <code>null</code>, then any current animations are removed and the current value of the property is held.  </p>\n<p> If the entire <code>animation</code> value is <code>null</code>, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property to animate, which is specified as the dependency property identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>animation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The timeline of the animation to be applied.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handoffBehavior</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> for <code>animation</code> is <code>null</code>, then any current animations are removed and the current value of the property is held.  </p>\n<p> If the entire <code>animation</code> value is <code>null</code>, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_CaptureMouse\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CaptureMouse()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to force capture of the mouse to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CaptureMouse ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the mouse is successfully captured; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To be captured, an element must be enabled. Check whether <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> is <code>true</code> before you call CaptureMouse.  </p>\n<p> If calling CaptureMouse returns <code>true</code>, then <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> is also <code>true</code>.  </p>\n<p> If calling CaptureMouse returns <code>true</code>, then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> events are raised, with <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data reported as the element where the CaptureMouse method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  </p>\n<p> To clear mouse capture from all elements, call <a class=\"xref\" href=\"system.windows.input.mouse#System_Windows_Input_Mouse_Capture_\" data-linktype=\"relative-path\">Capture</a> with the <code>element</code> parameter provided as <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_CaptureStylus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CaptureStylus()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to force capture of the stylus to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CaptureStylus ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the stylus is successfully captured; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default implementation based on the underlying default stylus device always returns <code>true</code>. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  </p>\n<p> When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  </p>\n<p> Calling this method calls an underlying static <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a> method <a class=\"xref\" href=\"system.windows.input.stylus#System_Windows_Input_Stylus_Capture_\" data-linktype=\"relative-path\">Capture</a>. The actual capture behavior is implemented by the active stylus device implementation.  </p>\n<p> To be captured, an element must be enabled. Check whether <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> is <code>true</code> return before you call CaptureStylus.  </p>\n<p> If calling CaptureStylus returns <code>true</code>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> is also <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_CaptureTouch_System_Windows_Input_TouchDevice_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CaptureTouch(TouchDevice)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to force capture of a touch to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>touchDevice</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The device to capture.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified touch is captured to this element; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>touchDevice</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>CaptureTouch will return <code>false</code> if the <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> is currently captured to another element.  </p>\n<p> If CaptureTouch returns <code>true</code>, then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> event is raised.  </p>\n<p> To release capture of a single touch from this element, use the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_ReleaseTouchCapture_\" data-linktype=\"relative-path\">ReleaseTouchCapture</a> method and specify the touch device to release. To release all touches from this element, use the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_ReleaseAllTouchCaptures_\" data-linktype=\"relative-path\">ReleaseAllTouchCaptures</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_Focus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Focus()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to set focus to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Focus ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if keyboard focus could be set to this element; <code>false</code> if this method call did not force focus.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To be focusable, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focusable_\" data-linktype=\"relative-path\">Focusable</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> must both be <code>true</code>. Note that nearly all <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> derived classes are not <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focusable_\" data-linktype=\"relative-path\">Focusable</a> by default.  </p>\n<p> Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <code>false</code>.  </p>\n<p> Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical. This method sets the logical focus. There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input. For more information, see <a href=\"../Topic/Focus%20Overview.md\" data-linktype=\"relative-path\">Focus Overview</a> and <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p> If calling Focus returns <code>true</code>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocused_\" data-linktype=\"relative-path\">IsKeyboardFocused</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithin_\" data-linktype=\"relative-path\">IsKeyboardFocusWithin</a> are also <code>true</code>.  </p>\n<p> If the related properties are not already <code>true</code>, when you call Focus, one or more of the following events are raised in the following order: <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a> (source is the new focus target), <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a>, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a> (source is the new focus target).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GetAnimationBaseValue_System_Windows_DependencyProperty_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAnimationBaseValue(DependencyProperty)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The.dependency property to check.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property value as if no animations are attached to the specified dependency property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If no animations are attached to the property, then the GetAnimationBaseValue return value is always identical to the <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see <a href=\"../Topic/Dependency%20Property%20Value%20Precedence.md\" data-linktype=\"relative-path\">Dependency Property Value Precedence</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GetUIParentCore\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetUIParentCore()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Windows.DependencyObject GetUIParentCore ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">System.Windows.DependencyObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object, if implementation of a derived class has an alternate parent connection to report.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default virtual implementation of this method returns <code>null</code>. <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> provides a practical implementation.  </p>\n<p> Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MoveFocus_System_Windows_Input_TraversalRequest_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MoveFocus(TraversalRequest)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.traversalrequest\" data-linktype=\"relative-path\">TraversalRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the requested traversal was performed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Make sure you check the return value of this method. A return value of <code>false</code> might be returned if the traversal runs into a tab stop that is defined by a control&#39;s composition, and the traversal request did not request to wrap.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnCreateAutomationPeer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnCreateAutomationPeer()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns class-specific <a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a> implementations for the Windows Presentation Foundation (WPF) infrastructure.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type-specific <a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a> implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnDragEnter_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnDragEnter(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnDragEnter (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnDragLeave_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnDragLeave(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnDragLeave (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnDragOver_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnDragOver(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnDragOver (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnDrop_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnDrop(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnDrop (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGiveFeedback_System_Windows_GiveFeedbackEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGiveFeedback(GiveFeedbackEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.GiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGotFocus_System_Windows_RoutedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGotFocus(RoutedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event by using the event data provided.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains event data. This event data must contain the identifier for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method, although virtual, does have a default implementation that raises the event.  </p>\n<p> This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property value changes. The OnGotFocus implementation differs from some other Windows Presentation Foundation (WPF) On* implementations, which only provide a convenient way to add class handling for that event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.GotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGotMouseCapture_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGotMouseCapture(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.GotMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGotStylusCapture_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGotStylusCapture(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.GotStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnGotTouchCapture_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnGotTouchCapture(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event that occurs when a touch is captured to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnGotTouchCapture method has no default implementation. Override OnGotTouchCapture in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> event. Be sure to call the base class’s OnGotTouchCapture method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsKeyboardFocusedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocused_\" data-linktype=\"relative-path\">IsKeyboardFocused</a> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is raised with that same event data instance. Notice that the  <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsKeyboardFocusWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked just before the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithin_\" data-linktype=\"relative-path\">IsKeyboardFocusWithin</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsMouseCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsMouseCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptureWithinChanged\" data-linktype=\"relative-path\">IsMouseCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsMouseDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOver_\" data-linktype=\"relative-path\">IsMouseDirectlyOver</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsStylusCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCapturedChanged\" data-linktype=\"relative-path\">IsStylusCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCapturedChanged\" data-linktype=\"relative-path\">IsStylusCapturedChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsStylusCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptureWithinChanged\" data-linktype=\"relative-path\">IsStylusCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptureWithin_\" data-linktype=\"relative-path\">IsStylusCaptureWithin</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptureWithinChanged\" data-linktype=\"relative-path\">IsStylusCaptureWithinChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnIsStylusDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusDirectlyOverChanged\" data-linktype=\"relative-path\">IsStylusDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusDirectlyOver_\" data-linktype=\"relative-path\">IsStylusDirectlyOver</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusDirectlyOverChanged\" data-linktype=\"relative-path\">IsStylusDirectlyOverChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnKeyDown_System_Windows_Input_KeyEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnKeyDown(KeyEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnKeyUp_System_Windows_Input_KeyEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnKeyUp(KeyEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnLostFocus_System_Windows_RoutedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnLostFocus(RoutedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event by using the event data that is provided.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains event data. This event data must contain the identifier for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method, although virtual, does have a default implementation that raises the event.  </p>\n<p> This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property value changes. This implementation differs from some other Windows Presentation Foundation (WPF) On* implementations, which only provide a convenient way to add class handling for that event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.LostKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnLostMouseCapture_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnLostMouseCapture(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.LostMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnLostStylusCapture_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnLostStylusCapture(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.LostStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnLostTouchCapture_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnLostTouchCapture(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event that occurs when this element loses a touch capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnLostTouchCapture method has no default implementation. Override OnLostTouchCapture in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> event. Be sure to call the base class’s OnLostTouchCapture method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event as handled, OnMouseDown is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Either of these events may be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseEnter_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseEnter(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseEnter</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseLeave_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseLeave(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseLeave</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseLeftButtonDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was pressed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnMouseLeftButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseLeftButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and override OnMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase#System_Windows_Controls_Primitives_ButtonBase_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseLeftButtonUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnMouseLeftButtonUp.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseMove_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseMove(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseRightButtonDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was pressed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnMouseRightButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseRightButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> and override OnMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> default behavior.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseRightButtonUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnMouseRightButtonUp.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseUp</span> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the mouse button was released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event as handled, OnMouseUp is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>. Either of these events might be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnMouseWheel_System_Windows_Input_MouseWheelEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnMouseWheel(MouseWheelEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewDragEnter_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewDragEnter(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewDragLeave_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewDragLeave(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewDragOver_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewDragOver(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewDrop_System_Windows_DragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewDrop(DragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDrop</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewGiveFeedback_System_Windows_GiveFeedbackEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewGiveFeedback(GiveFeedbackEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewGiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewGotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewKeyDown_System_Windows_Input_KeyEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewKeyDown(KeyEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewKeyUp_System_Windows_Input_KeyEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewKeyUp(KeyEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseDown</span> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that one or more mouse buttons were pressed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event as handled, OnPreviewMouseDown is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>. Either of these events may be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was pressed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnPreviewMouseLeftButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseLeftButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and override OnPreviewMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase#System_Windows_Controls_Primitives_ButtonBase_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnPreviewMouseLeftButtonUp.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseMove_System_Windows_Input_MouseEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseMove(MouseEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseRightButtonDown(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was pressed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnPreviewMouseRightButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseRightButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> and override OnPreviewMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> default behavior.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseRightButtonUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> by overriding OnPreviewMouseRightButtonUp.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseUp(MouseButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that one or more mouse buttons were released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event as handled, OnPreviewMouseUp is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>. Either of these events might be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewMouseWheel_System_Windows_Input_MouseWheelEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewMouseWheel(MouseWheelEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewQueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusButtonDown(StylusButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusButtonUp(StylusButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusDown_System_Windows_Input_StylusDownEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusDown(StylusDownEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusInAirMove_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusInAirMove(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusInRange_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusInRange(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusMove_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusMove(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusOutOfRange_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusOutOfRange(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewStylusUp_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewStylusUp(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewTextInput_System_Windows_Input_TextCompositionEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewTextInput(TextCompositionEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.PreviewTextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewTouchDown_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewTouchDown(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event that occurs when a touch presses this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnPreviewTouchDown method has no default implementation. Override OnPreviewTouchDown in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> event. Be sure to call the base class’s OnPreviewTouchDown method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewTouchMove_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewTouchMove(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnPreviewTouchMove method has no default implementation. Override OnPreviewTouchMove in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> event. Be sure to call the base class’s OnPreviewTouchMove method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnPreviewTouchUp_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnPreviewTouchUp(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnPreviewTouchUp method has no default implementation. Override OnPreviewTouchUp in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> event. Be sure to call the base class’s OnPreviewTouchUp method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnQueryContinueDrag(QueryContinueDragEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.QueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnQueryCursor_System_Windows_Input_QueryCursorEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnQueryCursor(QueryCursorEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.QueryCursor</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.querycursoreventargs\" data-linktype=\"relative-path\">QueryCursorEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.querycursoreventargs\" data-linktype=\"relative-path\">QueryCursorEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusButtonDown(StylusButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusButtonUp(StylusButtonEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusDown_System_Windows_Input_StylusDownEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusDown(StylusDownEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusEnter_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusEnter(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusEnter</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusInAirMove_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusInAirMove(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusInRange_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusInRange(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusLeave_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusLeave(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusLeave</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusMove_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusMove(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusOutOfRange_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusOutOfRange(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusSystemGesture(StylusSystemGestureEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnStylusUp_System_Windows_Input_StylusEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnStylusUp(StylusEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTextInput_System_Windows_Input_TextCompositionEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTextInput(TextCompositionEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.TextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTouchDown_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTouchDown(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event that occurs when a touch presses inside this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnTouchDown method has no default implementation. Override OnTouchDown in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> event. Be sure to call the base class’s OnTouchDown method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTouchEnter_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTouchEnter(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event that occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnTouchEnter method has no default implementation. Override OnTouchEnter in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> event. Be sure to call the base class’s OnTouchEnter method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTouchLeave_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTouchLeave(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event that occurs when a touch moves from inside to outside the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnTouchLeave method has no default implementation. Override OnTouchLeave in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> event. Be sure to call the base class’s OnTouchLeave method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTouchMove_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTouchMove(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnTouchMove method has no default implementation. Override OnTouchMove in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> event. Be sure to call the base class’s OnTouchMove method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_OnTouchUp_System_Windows_Input_TouchEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnTouchUp(TouchEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides class handling for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnTouchUp method has no default implementation. Override OnTouchUp in a derived class to handle the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> event. Be sure to call the base class’s OnTouchUp method so that base classes receive the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PredictFocus_System_Windows_Input_FocusNavigationDirection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PredictFocus(FocusNavigationDirection)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>direction</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.focusnavigationdirection\" data-linktype=\"relative-path\">FocusNavigationDirection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The direction of the requested focus traversal.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">System.Windows.DependencyObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The element that would have received focus if <span class=\"xref\">stem.Windows.ContentElement.MoveFocus*</span> were actually invoked.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default implementation of this method in this class is incomplete and always returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_RaiseEvent_System_Windows_RoutedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RaiseEvent(RoutedEventArgs)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises a specific routed event. The <a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a> to be raised is identified within the <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> instance that is provided (as the <span class=\"xref\">stem.Windows.RoutedEventArgs.RoutedEvent*</span> property of that event data).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RaiseEvent (System.Windows.RoutedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains the event data and also identifies the event to raise.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>e</code> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  </p>\n<p> <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from common language runtime (CLR) events and data classes, which typically just contain properties that are related to the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ReleaseAllTouchCaptures\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseAllTouchCaptures()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all captured touch devices from this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReleaseAllTouchCaptures ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ReleaseMouseCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseMouseCapture()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the mouse capture, if this element held the capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReleaseMouseCapture ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If this element did not hold the capture, calling this method has no effect. Consider checking the value of <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> before you call this method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ReleaseStylusCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseStylusCapture()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the stylus device capture, if this element held the capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReleaseStylusCapture ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If this element did not hold the capture, calling this method has no effect. Consider checking the value of <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> before you call this method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ReleaseTouchCapture_System_Windows_Input_TouchDevice_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseTouchCapture(TouchDevice)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to release the specified touch device from this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>touchDevice</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The device to release.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the touch device is released; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>touchDevice</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_RemoveHandler_System_Windows_RoutedEvent_System_Delegate_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveHandler(RoutedEvent,Delegate)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified routed event handler from this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>routedEvent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The identifier of the.routed event for which the handler is attached.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handler</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The specific handler implementation to remove from the event handler collection on this element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The most common scenario for using this API is when you implement the common language runtime (CLR) &quot;wrapper&quot; event that is associated with a custom routed event, specifically when you implement the &quot;remove&quot; logic for handlers at the CLR level. The example that follows this remarks section illustrates this scenario.  </p>\n<p> Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.  </p>\n<p> If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with CLR behavior of the <code>-=</code> operator.  </p>\n<p> Neither <code>routedEvent</code> nor <code>handler</code> may be <code>null</code>. Attempting to provide either value as <code>null</code> will raise an exception.  </p>\n<p> This method ignores the <code>handledEventsToo</code> parameter information, which is provided if the handler was first added with the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> signature that enables handling of already-handled events. Either type of handler is removed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ShouldSerializeCommandBindings\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShouldSerializeCommandBindings()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.ContentElement.CommandBindings*</span> property on instances of this class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShouldSerializeCommandBindings ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Windows.ContentElement.CommandBindings*</span> property value should be serialized; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This will return <code>true</code> if <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a> is locally set.  </p>\n<p> This <code>ShouldSerialize</code> method is provided because the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> For more information, see <a href=\"../Topic/Defining%20Default%20Values%20with%20the%20ShouldSerialize%20and%20Reset%20Methods.md\" data-linktype=\"relative-path\">Defining Default Values with the ShouldSerialize and Reset Methods</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_ShouldSerializeInputBindings\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShouldSerializeInputBindings()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.ContentElement.InputBindings*</span> property on instances of this class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShouldSerializeInputBindings ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Windows.ContentElement.InputBindings*</span> property value should be serialized; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This will return <code>true</code> if <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_InputBindings_\" data-linktype=\"relative-path\">InputBindings</a> is locally set.  </p>\n<p> This <code>ShouldSerialize</code> method is provided because the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InputBindings_\" data-linktype=\"relative-path\">InputBindings</a> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> For more information, see <a href=\"../Topic/Defining%20Default%20Values%20with%20the%20ShouldSerialize%20and%20Reset%20Methods.md\" data-linktype=\"relative-path\">Defining Default Values with the ShouldSerialize and Reset Methods</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragEnter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragEnter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler DragEnter;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event for this class, so that DragEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the DragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragEnterEvent\" data-linktype=\"relative-path\">DragEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragEnter\" data-linktype=\"relative-path\">PreviewDragEnter</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnDragEnter_\" data-linktype=\"relative-path\">OnDragEnter</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragLeave\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragLeave</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler DragLeave;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event for this class so that DragLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the DragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragLeaveEvent\" data-linktype=\"relative-path\">DragLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnDragLeave_\" data-linktype=\"relative-path\">OnDragLeave</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_DragOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DragOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler DragOver;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> and related preview events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event for this class so that DragOver is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the DragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragOver\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragOverEvent\" data-linktype=\"relative-path\">DragOverEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnDragOver_\" data-linktype=\"relative-path\">OnDragOver</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_Drop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Drop</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler Drop;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event for this class so that Drop is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the Drop event are attached to the underlying &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_Drop\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DropEvent\" data-linktype=\"relative-path\">DropEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDrop\" data-linktype=\"relative-path\">PreviewDrop</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnDrop_\" data-linktype=\"relative-path\">OnDrop</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_FocusableChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FocusableChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.Focusable*</span> property changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GiveFeedback\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GiveFeedback</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.GiveFeedbackEventHandler GiveFeedback;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GiveFeedback event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event for this class so that GiveFeedback is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the GiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GiveFeedback\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GiveFeedbackEvent\" data-linktype=\"relative-path\">GiveFeedbackEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.givefeedbackeventhandler\" data-linktype=\"relative-path\">GiveFeedbackEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGiveFeedback\" data-linktype=\"relative-path\">PreviewGiveFeedback</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGiveFeedback_\" data-linktype=\"relative-path\">OnGiveFeedback</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element gets logical focus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.RoutedEventHandler GotFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focus_\" data-linktype=\"relative-path\">Focus</a> method is called still gets logical focus.  </p>\n<p> A more precise interpretation of this event is that it is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property of an element in the route is changed from <code>false</code> to <code>true</code>.  </p>\n<p> Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that gained focus.  </p>\n<p><a name=\"routedEventInfo_GotFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotFocusEvent\" data-linktype=\"relative-path\">GotFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.routedeventhandler\" data-linktype=\"relative-path\">RoutedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGotFocus_\" data-linktype=\"relative-path\">OnGotFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotKeyboardFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotKeyboardFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the keyboard is focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> is a similar event that tracks status changes in a property that maintains the focus state for an element; the GotKeyboardFocus event is raised in many of the same circumstances.  </p>\n<p> Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event for this class so that GotKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the GotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotKeyboardFocusEvent\" data-linktype=\"relative-path\">GotKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGotKeyboardFocus_\" data-linktype=\"relative-path\">OnGotKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotMouseCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotMouseCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element captures the mouse.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler GotMouseCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  </p>\n<p> Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has mouse capture.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event for  this class so that GotMouseCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the GotMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotMouseCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotMouseCaptureEvent\" data-linktype=\"relative-path\">GotMouseCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGotMouseCapture_\" data-linktype=\"relative-path\">OnGotMouseCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotStylusCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotStylusCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element captures the stylus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler GotStylusCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  </p>\n<p> Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has capture.  </p>\n<p> This event creates an alias for the  attached event for this class so that GotStylusCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the GotStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotStylusCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotStylusCaptureEvent\" data-linktype=\"relative-path\">GotStylusCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGotStylusCapture_\" data-linktype=\"relative-path\">OnGotStylusCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_GotTouchCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GotTouchCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a touch is captured to this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_GotTouchCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotTouchCaptureEvent\" data-linktype=\"relative-path\">GotTouchCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnGotTouchCapture_\" data-linktype=\"relative-path\">OnGotTouchCapture</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsEnabledChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsEnabledChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsEnabled*</span> property on this element changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocusedChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocusedChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsKeyboardFocused*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsKeyboardFocusWithinChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsKeyboardFocusWithinChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCapturedChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCapturedChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsMouseCaptured*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseCaptureWithinChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseCaptureWithinChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseCaptureWithinProperty\" data-linktype=\"relative-path\">IsMouseCaptureWithinProperty</a> changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsMouseDirectlyOverChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMouseDirectlyOverChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsMouseDirectlyOver*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCapturedChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCapturedChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsStylusCaptured*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusCaptureWithinChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusCaptureWithinChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsStylusCaptureWithin*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_IsStylusDirectlyOverChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStylusDirectlyOverChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the value of the <span class=\"xref\">stem.Windows.ContentElement.IsStylusDirectlyOver*</span> property changes on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is a CLR event, not a routed event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_KeyDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a key is pressed while focus is on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyEventHandler KeyDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Key handling interacts with other platform features such as commanding and text composition. The KeyDown event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event for this class so that KeyDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the KeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_KeyDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyDownEvent\" data-linktype=\"relative-path\">KeyDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnKeyDown_\" data-linktype=\"relative-path\">OnKeyDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_KeyUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a key is released while focus is on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyEventHandler KeyUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event for this class so that  KeyUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the KeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_KeyUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyUpEvent\" data-linktype=\"relative-path\">KeyUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyUp\" data-linktype=\"relative-path\">PreviewKeyUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnKeyUp_\" data-linktype=\"relative-path\">OnKeyUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element loses logical focus.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.RoutedEventHandler LostFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Focus_\" data-linktype=\"relative-path\">Focus</a> method is called still gets logical focus.  </p>\n<p> A more precise interpretation of this event is that it is raised when the value of the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property of an element in the route changes from <code>true</code> to <code>false</code>.  </p>\n<p> Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that gained focus.  </p>\n<p><a name=\"routedEventInfo_LostFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostFocusEvent\" data-linktype=\"relative-path\">LostFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.routedeventhandler\" data-linktype=\"relative-path\">RoutedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnLostFocus_\" data-linktype=\"relative-path\">OnLostFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostKeyboardFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostKeyboardFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the keyboard is no longer focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that LostKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the LostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostKeyboardFocusEvent\" data-linktype=\"relative-path\">LostKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnLostKeyboardFocus_\" data-linktype=\"relative-path\">OnLostKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostMouseCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostMouseCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element loses mouse capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler LostMouseCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  </p>\n<p> Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost capture.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event for this class, so that LostMouseCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the LostMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostMouseCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostMouseCaptureEvent\" data-linktype=\"relative-path\">LostMouseCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnLostMouseCapture_\" data-linktype=\"relative-path\">OnLostMouseCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostStylusCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostStylusCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element loses stylus capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler LostStylusCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  </p>\n<p> Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event for this class, so that LostStylusCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the LostStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostStylusCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostStylusCaptureEvent\" data-linktype=\"relative-path\">LostStylusCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnLostStylusCapture_\" data-linktype=\"relative-path\">OnLostStylusCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_LostTouchCapture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LostTouchCapture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element loses a touch capture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_LostTouchCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostTouchCaptureEvent\" data-linktype=\"relative-path\">LostTouchCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnLostTouchCapture_\" data-linktype=\"relative-path\">OnLostTouchCapture</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event for this class, so that MouseDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The MouseDown event is often raised together with either <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A few <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> derived classes that have control-like behavior, for example, <a class=\"xref\" href=\"system.windows.documents.hyperlink\" data-linktype=\"relative-path\">Hyperlink</a>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  </p>\n</div>\n<p> You can resolve the issue that is outlined in the preceding Important and still receive MouseDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:  </p>\n<ul>\n<li><p>Attach handlers for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  </p>\n</li>\n<li><p>Register a handler on the control procedurally by calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_MouseDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseDownEvent\" data-linktype=\"relative-path\">MouseDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseDown_\" data-linktype=\"relative-path\">OnMouseDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseEnter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseEnter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the mouse pointer enters the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler MouseEnter;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>MouseEnter is a <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although MouseEnter tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> property value has changed from <code>false</code> to <code>true</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event for this class, so that MouseEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseEnter event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseEnterEvent\" data-linktype=\"relative-path\">MouseEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseEnter_\" data-linktype=\"relative-path\">OnMouseEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeave\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeave</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the mouse pointer leaves the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler MouseLeave;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>MouseLeave is a <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although MouseLeave tracks when the mouse leaves an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> property value has changed from <code>true</code> to <code>false</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event for this class, so that MouseLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseLeave event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeaveEvent\" data-linktype=\"relative-path\">MouseLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseLeave_\" data-linktype=\"relative-path\">OnMouseLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeftButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeftButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A few <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> derived classes that have control-like behavior, for example, <a class=\"xref\" href=\"system.windows.documents.hyperlink\" data-linktype=\"relative-path\">Hyperlink</a>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  </p>\n</div>\n<p> You can resolve the issue that is outlined in the preceding Important and still receive MouseLeftButtonDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:  </p>\n<ul>\n<li><p>Attach handlers for the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  </p>\n</li>\n<li><p>Register a handler on the control procedurally by calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_MouseLeftButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonDownEvent\" data-linktype=\"relative-path\">MouseLeftButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseLeftButtonDown_\" data-linktype=\"relative-path\">OnMouseLeftButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseLeftButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseLeftButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_MouseLeftButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUpEvent\" data-linktype=\"relative-path\">MouseLeftButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseLeftButtonUp_\" data-linktype=\"relative-path\">OnMouseLeftButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the mouse pointer moves while over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler MouseMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event for this class, so that MouseMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseMoveEvent\" data-linktype=\"relative-path\">MouseMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseMove_\" data-linktype=\"relative-path\">OnMouseMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseRightButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseRightButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See <a href=\"../Topic/ContextMenu%20Overview.md\" data-linktype=\"relative-path\">ContextMenu Overview</a>.  </p>\n<p><a name=\"routedEventInfo_MouseRightButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonDownEvent\" data-linktype=\"relative-path\">MouseRightButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseRightButtonDown_\" data-linktype=\"relative-path\">OnMouseRightButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseRightButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseRightButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_MouseRightButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUpEvent\" data-linktype=\"relative-path\">MouseRightButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseRightButtonUp_\" data-linktype=\"relative-path\">OnMouseRightButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when any mouse button is released over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler MouseUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event for this class, so that MouseUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The MouseUp event is often raised together with either <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>, which correspond to a release of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>.  </p>\n<p><a name=\"routedEventInfo_MouseUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseUpEvent\" data-linktype=\"relative-path\">MouseUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseUp\" data-linktype=\"relative-path\">PreviewMouseUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseUp_\" data-linktype=\"relative-path\">OnMouseUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_MouseWheel\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MouseWheel</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseWheelEventHandler MouseWheel;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the MouseWheel event from a focused or captured element, the mouse pointer might actually be over another element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event for this class, so that MouseWheel is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the MouseWheel event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseWheel\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseWheelEvent\" data-linktype=\"relative-path\">MouseWheelEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousewheeleventhandler\" data-linktype=\"relative-path\">MouseWheelEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseWheel\" data-linktype=\"relative-path\">PreviewMouseWheel</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnMouseWheel_\" data-linktype=\"relative-path\">OnMouseWheel</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragEnter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragEnter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler PreviewDragEnter;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event for this class, so that PreviewDragEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragEnterEvent\" data-linktype=\"relative-path\">PreviewDragEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewDragEnter_\" data-linktype=\"relative-path\">OnPreviewDragEnter</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragLeave\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragLeave</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler PreviewDragLeave;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event for this class, so that PreviewDragLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragLeaveEvent\" data-linktype=\"relative-path\">PreviewDragLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragLeave\" data-linktype=\"relative-path\">DragLeave</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewDragLeave_\" data-linktype=\"relative-path\">OnPreviewDragLeave</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDragOver\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDragOver</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler PreviewDragOver;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event for this class, so that PreviewDragOver is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragOver\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDragOverEvent\" data-linktype=\"relative-path\">PreviewDragOverEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_DragOver\" data-linktype=\"relative-path\">DragOver</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewDragOver_\" data-linktype=\"relative-path\">OnPreviewDragOver</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewDrop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewDrop</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.DragEventHandler PreviewDrop;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event for this class, so that PreviewDrop is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDrop event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDrop\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewDropEvent\" data-linktype=\"relative-path\">PreviewDropEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_Drop\" data-linktype=\"relative-path\">Drop</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewDrop_\" data-linktype=\"relative-path\">OnPreviewDrop</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewGiveFeedback\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewGiveFeedback</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a drag-and-drop operation is started.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The PreviewGiveFeedback event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event for this class, so that PreviewGiveFeedback is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewGiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewGiveFeedback\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGiveFeedbackEvent\" data-linktype=\"relative-path\">PreviewGiveFeedbackEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.givefeedbackeventhandler\" data-linktype=\"relative-path\">GiveFeedbackEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewGiveFeedback_\" data-linktype=\"relative-path\">OnPreviewGiveFeedback</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewGotKeyboardFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewGotKeyboardFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the keyboard is focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewGotKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewGotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewGotKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewGotKeyboardFocusEvent\" data-linktype=\"relative-path\">PreviewGotKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewGotKeyboardFocus_\" data-linktype=\"relative-path\">OnPreviewGotKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewKeyDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewKeyDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a key is pressed while the keyboard is focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyEventHandler PreviewKeyDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Key handling interacts with other platform features such as commanding and text composition. The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewKeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewKeyDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyDownEvent\" data-linktype=\"relative-path\">PreviewKeyDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewKeyDown_\" data-linktype=\"relative-path\">OnPreviewKeyDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewKeyUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewKeyUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a key is released while the keyboard is focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyEventHandler PreviewKeyUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Key handling interacts with other platform features such as commanding and text composition. The <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewKeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewKeyUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyUpEvent\" data-linktype=\"relative-path\">PreviewKeyUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewKeyUp_\" data-linktype=\"relative-path\">OnPreviewKeyUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewLostKeyboardFocus\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewLostKeyboardFocus</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the keyboard is no longer focused on this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewLostKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewLostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewLostKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewLostKeyboardFocusEvent\" data-linktype=\"relative-path\">PreviewLostKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewLostKeyboardFocus_\" data-linktype=\"relative-path\">OnPreviewLostKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The PreviewMouseDown event is often raised together with either <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseDownEvent\" data-linktype=\"relative-path\">PreviewMouseDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseDown_\" data-linktype=\"relative-path\">OnPreviewMouseDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseLeftButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseLeftButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseLeftButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonDownEvent\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseLeftButtonDown_\" data-linktype=\"relative-path\">OnPreviewMouseLeftButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseLeftButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseLeftButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseLeftButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUpEvent\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseLeftButtonUp_\" data-linktype=\"relative-path\">OnPreviewMouseLeftButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the mouse pointer moves while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseEventHandler PreviewMouseMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseMoveEvent\" data-linktype=\"relative-path\">PreviewMouseMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseMove_\" data-linktype=\"relative-path\">OnPreviewMouseMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseRightButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseRightButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseRightButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonDownEvent\" data-linktype=\"relative-path\">PreviewMouseRightButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseRightButtonDown_\" data-linktype=\"relative-path\">OnPreviewMouseRightButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseRightButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseRightButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although this <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseRightButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUpEvent\" data-linktype=\"relative-path\">PreviewMouseRightButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseRightButtonUp_\" data-linktype=\"relative-path\">OnPreviewMouseRightButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when any mouse button is released while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The PreviewMouseUp event is often raised together with either <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseUpEvent\" data-linktype=\"relative-path\">PreviewMouseUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseUp_\" data-linktype=\"relative-path\">OnPreviewMouseUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewMouseWheel\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewMouseWheel</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event for this class, so that <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseWheel\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewMouseWheelEvent\" data-linktype=\"relative-path\">PreviewMouseWheelEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousewheeleventhandler\" data-linktype=\"relative-path\">MouseWheelEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewMouseWheel_\" data-linktype=\"relative-path\">OnPreviewMouseWheel</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewQueryContinueDrag\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewQueryContinueDrag</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The PreviewQueryContinueDrag event enables the drag source to declare whether the drag-and-drop operation should be canceled.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that PreviewQueryContinueDrag is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewQueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewQueryContinueDrag\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewQueryContinueDragEvent\" data-linktype=\"relative-path\">PreviewQueryContinueDragEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.querycontinuedrageventhandler\" data-linktype=\"relative-path\">QueryContinueDragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewQueryContinueDrag_\" data-linktype=\"relative-path\">OnPreviewQueryContinueDrag</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonDownEvent\" data-linktype=\"relative-path\">PreviewStylusButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonDown\" data-linktype=\"relative-path\">StylusButtonDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusButtonDown_\" data-linktype=\"relative-path\">OnPreviewStylusButtonDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonUpEvent\" data-linktype=\"relative-path\">PreviewStylusButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonUp\" data-linktype=\"relative-path\">StylusButtonUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusButtonUp_\" data-linktype=\"relative-path\">OnPreviewStylusButtonUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus touches the digitizer while it is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusDownEvent\" data-linktype=\"relative-path\">PreviewStylusDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusdowneventhandler\" data-linktype=\"relative-path\">StylusDownEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusDown\" data-linktype=\"relative-path\">StylusDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusDown_\" data-linktype=\"relative-path\">OnPreviewStylusDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusInAirMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusInAirMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInAirMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusInAirMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInAirMoveEvent\" data-linktype=\"relative-path\">PreviewStylusInAirMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusInAirMove_\" data-linktype=\"relative-path\">OnPreviewStylusInAirMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusInRange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusInRange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInRange is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusInRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInRangeEvent\" data-linktype=\"relative-path\">PreviewStylusInRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInRange\" data-linktype=\"relative-path\">StylusInRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusInRange_\" data-linktype=\"relative-path\">OnPreviewStylusInRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> is raised instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler PreviewStylusMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusMoveEvent\" data-linktype=\"relative-path\">PreviewStylusMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusMove\" data-linktype=\"relative-path\">StylusMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusMove_\" data-linktype=\"relative-path\">OnPreviewStylusMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusOutOfRange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusOutOfRange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus is too far from the digitizer to be detected.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusOutOfRange is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusOutOfRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusOutOfRangeEvent\" data-linktype=\"relative-path\">PreviewStylusOutOfRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusOutOfRange\" data-linktype=\"relative-path\">StylusOutOfRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusOutOfRange_\" data-linktype=\"relative-path\">OnPreviewStylusOutOfRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusSystemGesture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusSystemGesture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For information about stylus gestures, see <a class=\"xref\" href=\"system.windows.input.systemgesture\" data-linktype=\"relative-path\">SystemGesture</a>.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusSystemGesture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusSystemGesture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusSystemGestureEvent\" data-linktype=\"relative-path\">PreviewStylusSystemGestureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventhandler\" data-linktype=\"relative-path\">StylusSystemGestureEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusSystemGesture\" data-linktype=\"relative-path\">StylusSystemGesture</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusSystemGesture_\" data-linktype=\"relative-path\">OnPreviewStylusSystemGesture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewStylusUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewStylusUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler PreviewStylusUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event for this class, so that <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusUpEvent\" data-linktype=\"relative-path\">PreviewStylusUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusUp\" data-linktype=\"relative-path\">StylusUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewStylusUp_\" data-linktype=\"relative-path\">OnPreviewStylusUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTextInput\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTextInput</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The PreviewTextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of PreviewTextInput; but speech, handwriting, and other input devices can also generate PreviewTextInput.  </p>\n<p> Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event for this class, so that PreviewTextInput is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the PreviewTextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewTextInput\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTextInputEvent\" data-linktype=\"relative-path\">PreviewTextInputEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.textcompositioneventhandler\" data-linktype=\"relative-path\">TextCompositionEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TextInput\" data-linktype=\"relative-path\">TextInput</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewTextInput_\" data-linktype=\"relative-path\">OnPreviewTextInput</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default, the PreviewTouchDown and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a>. The press and hold behavior is equivalent to a mouse right-click.  </p>\n<p> To cause the PreviewTouchDown and <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <code>false</code> for this element.  </p>\n<p><a name=\"routedEventInfo_PreviewTouchDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDownEvent\" data-linktype=\"relative-path\">PreviewTouchDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewTouchDown_\" data-linktype=\"relative-path\">OnPreviewTouchDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_PreviewTouchMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchMoveEvent\" data-linktype=\"relative-path\">PreviewTouchMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewTouchMove_\" data-linktype=\"relative-path\">OnPreviewTouchMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_PreviewTouchUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreviewTouchUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_PreviewTouchUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchUpEvent\" data-linktype=\"relative-path\">PreviewTouchUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnPreviewTouchUp_\" data-linktype=\"relative-path\">OnPreviewTouchUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_QueryContinueDrag\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">QueryContinueDrag</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that QueryContinueDrag is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the QueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_QueryContinueDrag\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_QueryContinueDragEvent\" data-linktype=\"relative-path\">QueryContinueDragEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.querycontinuedrageventhandler\" data-linktype=\"relative-path\">QueryContinueDragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewQueryContinueDrag\" data-linktype=\"relative-path\">PreviewQueryContinueDrag</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnQueryContinueDrag_\" data-linktype=\"relative-path\">OnQueryContinueDrag</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_QueryCursor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">QueryCursor</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.QueryCursorEventHandler QueryCursor;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event for this class, so that QueryCursor is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the QueryCursor event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming. That object is represented by the <a class=\"xref\" href=\"system.windows.input.cursor\" data-linktype=\"relative-path\">Cursor</a> class in WPF. The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <a class=\"xref\" href=\"system.windows.input.cursors\" data-linktype=\"relative-path\">Cursors</a> enumeration, or you can declare a custom cursor as an image file.  </p>\n<p> Listening for the QueryCursor event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <a class=\"xref\" href=\"system.windows.frameworkcontentelement#System_Windows_FrameworkContentElement_Cursor_\" data-linktype=\"relative-path\">Cursor</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement#System_Windows_FrameworkContentElement_ForceCursor_\" data-linktype=\"relative-path\">ForceCursor</a>. You should only rely on QueryCursor if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to QueryCursor, see <a class=\"xref\" href=\"system.windows.input.querycursoreventhandler\" data-linktype=\"relative-path\">QueryCursorEventHandler</a>.  </p>\n<p><a name=\"routedEventInfo_QueryCursor\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_QueryCursorEvent\" data-linktype=\"relative-path\">QueryCursorEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.querycursoreventhandler\" data-linktype=\"relative-path\">QueryCursorEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnQueryCursor_\" data-linktype=\"relative-path\">OnQueryCursor</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusButtonDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusButtonDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that StylusButtonDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonDownEvent\" data-linktype=\"relative-path\">StylusButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonDown\" data-linktype=\"relative-path\">PreviewStylusButtonDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusButtonDown_\" data-linktype=\"relative-path\">OnStylusButtonDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusButtonUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusButtonUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that StylusButtonUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusButtonUpEvent\" data-linktype=\"relative-path\">StylusButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusButtonUp\" data-linktype=\"relative-path\">PreviewStylusButtonUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusButtonUp_\" data-linktype=\"relative-path\">OnStylusButtonUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus touches the digitizer while the stylus is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusDownEventHandler StylusDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event for this class, so that StylusDown is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusDownEvent\" data-linktype=\"relative-path\">StylusDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusdowneventhandler\" data-linktype=\"relative-path\">StylusDownEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusDown_\" data-linktype=\"relative-path\">OnStylusDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusEnter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusEnter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus enters the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusEnter;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>StylusEnter is a <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although StylusEnter tracks when the stylus enters the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> property value has changed from <code>false</code> to <code>true</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event for this class, so that StylusEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusEnter event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusEnterEvent\" data-linktype=\"relative-path\">StylusEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusEnter_\" data-linktype=\"relative-path\">OnStylusEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusInAirMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusInAirMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusInAirMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that StylusInAirMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusInAirMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInAirMoveEvent\" data-linktype=\"relative-path\">StylusInAirMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusInAirMove_\" data-linktype=\"relative-path\">OnStylusInAirMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusInRange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusInRange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusInRange;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event for this class, so that StylusInRange is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusInRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInRangeEvent\" data-linktype=\"relative-path\">StylusInRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusInRange\" data-linktype=\"relative-path\">PreviewStylusInRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusInRange_\" data-linktype=\"relative-path\">OnStylusInRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusLeave\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusLeave</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus leaves the bounds of the element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusLeave;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>StylusLeave is a <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a> that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although StylusLeave tracks when the stylus leaves the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> property value has changed from <code>true</code> to <code>false</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event for this class, so that StylusLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusLeave event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusLeaveEvent\" data-linktype=\"relative-path\">StylusLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusLeave_\" data-linktype=\"relative-path\">OnStylusLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> is raised instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event for this class, so that StylusMove is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusMoveEvent\" data-linktype=\"relative-path\">StylusMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusMove\" data-linktype=\"relative-path\">PreviewStylusMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusMove_\" data-linktype=\"relative-path\">OnStylusMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusOutOfRange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusOutOfRange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusOutOfRange;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that StylusOutOfRange is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusOutOfRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusOutOfRangeEvent\" data-linktype=\"relative-path\">StylusOutOfRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusOutOfRange\" data-linktype=\"relative-path\">PreviewStylusOutOfRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusOutOfRange_\" data-linktype=\"relative-path\">OnStylusOutOfRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusSystemGesture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusSystemGesture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about stylus gestures, see <a class=\"xref\" href=\"system.windows.input.systemgesture\" data-linktype=\"relative-path\">SystemGesture</a>.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that StylusSystemGesture is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusSystemGesture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusSystemGestureEvent\" data-linktype=\"relative-path\">StylusSystemGestureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventhandler\" data-linktype=\"relative-path\">StylusSystemGestureEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusSystemGesture\" data-linktype=\"relative-path\">PreviewStylusSystemGesture</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusSystemGesture_\" data-linktype=\"relative-path\">OnStylusSystemGesture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_StylusUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StylusUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user raises the stylus off the digitizer while it is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.StylusEventHandler StylusUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event for this class, so that StylusUp is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the StylusUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_StylusUpEvent\" data-linktype=\"relative-path\">StylusUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewStylusUp\" data-linktype=\"relative-path\">PreviewStylusUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnStylusUp_\" data-linktype=\"relative-path\">OnStylusUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TextInput\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TextInput</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Windows.Input.TextCompositionEventHandler TextInput;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  </p>\n</div>\n<p> The TextInput event may already be marked as handled by the internal implementations of composited controls. For example, a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> is a composited control where the TextInput event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  </p>\n<p> The TextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of TextInput, but speech, handwriting, and other input devices can also raise TextInput.  </p>\n<p> Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event for this class, so that TextInput is part of the class members list when <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> is inherited as a base element. Event handlers that are attached to the TextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_TextInput\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TextInputEvent\" data-linktype=\"relative-path\">TextInputEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.textcompositioneventhandler\" data-linktype=\"relative-path\">TextCompositionEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTextInput_\" data-linktype=\"relative-path\">OnTextInput</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchDown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchDown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default, the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> and TouchDown events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a>. The press and hold behavior is equivalent to a mouse right-click.  </p>\n<p> To cause the <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> and TouchDown events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <code>false</code> for this element.  </p>\n<p><a name=\"routedEventInfo_TouchDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchDownEvent\" data-linktype=\"relative-path\">TouchDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTouchDown_\" data-linktype=\"relative-path\">OnTouchDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchEnter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchEnter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is always raised, whether or not the touch device is captured to this UI element.  </p>\n<p><a name=\"routedEventInfo_TouchEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchEnterEvent\" data-linktype=\"relative-path\">TouchEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTouchEnter_\" data-linktype=\"relative-path\">OnTouchEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchLeave\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchLeave</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a touch moves from inside to outside the bounds of this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_TouchLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchLeaveEvent\" data-linktype=\"relative-path\">TouchLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTouchLeave_\" data-linktype=\"relative-path\">OnTouchLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchMove\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchMove</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_TouchMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchMoveEvent\" data-linktype=\"relative-path\">TouchMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTouchMove_\" data-linktype=\"relative-path\">OnTouchMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_ContentElement_TouchUp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TouchUp</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a name=\"routedEventInfo_TouchUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_TouchUpEvent\" data-linktype=\"relative-path\">TouchUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_OnTouchUp_\" data-linktype=\"relative-path\">OnTouchUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.ContentElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.ContentElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AddHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AddToEventRoute\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AllowDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AllowDropProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ApplyAnimationClock\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.AreAnyTouchesOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.BeginAnimation\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.CaptureMouse\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.CaptureStylus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.CaptureTouch\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.CommandBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DragOverEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.DropEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.Focus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.Focusable\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.FocusableProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GetAnimationBaseValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GetUIParentCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GiveFeedbackEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotMouseCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotStylusCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.GotTouchCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.HasAnimatedProperties\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.InputBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsEnabledCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsEnabledProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsFocused\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsFocusedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsInputMethodEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocused\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocusedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocusWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsKeyboardFocusWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCaptureWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseCaptureWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsMouseOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCaptureWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusCaptureWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.IsStylusOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.KeyDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.KeyUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostMouseCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostStylusCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.LostTouchCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeftButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseLeftButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseRightButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseRightButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MouseWheelEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.MoveFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnCreateAutomationPeer\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnGotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnIsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnLostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnLostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnLostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnLostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnPreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnQueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.OnTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PredictFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDragOverEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewDropEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewGiveFeedbackEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewGotKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewKeyDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewKeyUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewLostKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseRightButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseRightButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewMouseWheelEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewQueryContinueDragEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusInAirMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusInRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusOutOfRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusSystemGestureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewStylusUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTextInputEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.PreviewTouchUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.QueryContinueDragEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.QueryCursorEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.RaiseEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ReleaseAllTouchCaptures\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ReleaseMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ReleaseStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ReleaseTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.RemoveHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ShouldSerializeCommandBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.ShouldSerializeInputBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusInAirMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusInRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusOutOfRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusSystemGestureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.StylusUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TextInputEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchesCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchesCapturedWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchesDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchesOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.add_TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.remove_TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.ContentElement.TouchUpEvent\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1bdb4220-5933-8fb6-f24b-9ff0c76d61da\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.ContentElement\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.ContentElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.ContentElement.yml","open_to_public_contributors":true,"api_name":["System.Windows.ContentElement","System.Windows.ContentElement..ctor","System.Windows.ContentElement.AddHandler","System.Windows.ContentElement.AddToEventRoute","System.Windows.ContentElement.AllowDrop","System.Windows.ContentElement.AllowDropProperty","System.Windows.ContentElement.ApplyAnimationClock","System.Windows.ContentElement.AreAnyTouchesCaptured","System.Windows.ContentElement.AreAnyTouchesCapturedProperty","System.Windows.ContentElement.AreAnyTouchesCapturedWithin","System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty","System.Windows.ContentElement.AreAnyTouchesDirectlyOver","System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty","System.Windows.ContentElement.AreAnyTouchesOver","System.Windows.ContentElement.AreAnyTouchesOverProperty","System.Windows.ContentElement.BeginAnimation","System.Windows.ContentElement.CaptureMouse","System.Windows.ContentElement.CaptureStylus","System.Windows.ContentElement.CaptureTouch","System.Windows.ContentElement.CommandBindings","System.Windows.ContentElement.DragEnter","System.Windows.ContentElement.add_DragEnter","System.Windows.ContentElement.remove_DragEnter","System.Windows.ContentElement.DragEnterEvent","System.Windows.ContentElement.DragLeave","System.Windows.ContentElement.add_DragLeave","System.Windows.ContentElement.remove_DragLeave","System.Windows.ContentElement.DragLeaveEvent","System.Windows.ContentElement.DragOver","System.Windows.ContentElement.add_DragOver","System.Windows.ContentElement.remove_DragOver","System.Windows.ContentElement.DragOverEvent","System.Windows.ContentElement.Drop","System.Windows.ContentElement.add_Drop","System.Windows.ContentElement.remove_Drop","System.Windows.ContentElement.DropEvent","System.Windows.ContentElement.Focus","System.Windows.ContentElement.Focusable","System.Windows.ContentElement.FocusableChanged","System.Windows.ContentElement.add_FocusableChanged","System.Windows.ContentElement.remove_FocusableChanged","System.Windows.ContentElement.FocusableProperty","System.Windows.ContentElement.GetAnimationBaseValue","System.Windows.ContentElement.GetUIParentCore","System.Windows.ContentElement.GiveFeedback","System.Windows.ContentElement.add_GiveFeedback","System.Windows.ContentElement.remove_GiveFeedback","System.Windows.ContentElement.GiveFeedbackEvent","System.Windows.ContentElement.GotFocus","System.Windows.ContentElement.add_GotFocus","System.Windows.ContentElement.remove_GotFocus","System.Windows.ContentElement.GotFocusEvent","System.Windows.ContentElement.GotKeyboardFocus","System.Windows.ContentElement.add_GotKeyboardFocus","System.Windows.ContentElement.remove_GotKeyboardFocus","System.Windows.ContentElement.GotKeyboardFocusEvent","System.Windows.ContentElement.GotMouseCapture","System.Windows.ContentElement.add_GotMouseCapture","System.Windows.ContentElement.remove_GotMouseCapture","System.Windows.ContentElement.GotMouseCaptureEvent","System.Windows.ContentElement.GotStylusCapture","System.Windows.ContentElement.add_GotStylusCapture","System.Windows.ContentElement.remove_GotStylusCapture","System.Windows.ContentElement.GotStylusCaptureEvent","System.Windows.ContentElement.GotTouchCapture","System.Windows.ContentElement.add_GotTouchCapture","System.Windows.ContentElement.remove_GotTouchCapture","System.Windows.ContentElement.GotTouchCaptureEvent","System.Windows.ContentElement.HasAnimatedProperties","System.Windows.ContentElement.InputBindings","System.Windows.ContentElement.IsEnabled","System.Windows.ContentElement.IsEnabledChanged","System.Windows.ContentElement.add_IsEnabledChanged","System.Windows.ContentElement.remove_IsEnabledChanged","System.Windows.ContentElement.IsEnabledCore","System.Windows.ContentElement.IsEnabledProperty","System.Windows.ContentElement.IsFocused","System.Windows.ContentElement.IsFocusedProperty","System.Windows.ContentElement.IsInputMethodEnabled","System.Windows.ContentElement.IsKeyboardFocused","System.Windows.ContentElement.IsKeyboardFocusedChanged","System.Windows.ContentElement.add_IsKeyboardFocusedChanged","System.Windows.ContentElement.remove_IsKeyboardFocusedChanged","System.Windows.ContentElement.IsKeyboardFocusedProperty","System.Windows.ContentElement.IsKeyboardFocusWithin","System.Windows.ContentElement.IsKeyboardFocusWithinChanged","System.Windows.ContentElement.add_IsKeyboardFocusWithinChanged","System.Windows.ContentElement.remove_IsKeyboardFocusWithinChanged","System.Windows.ContentElement.IsKeyboardFocusWithinProperty","System.Windows.ContentElement.IsMouseCaptured","System.Windows.ContentElement.IsMouseCapturedChanged","System.Windows.ContentElement.add_IsMouseCapturedChanged","System.Windows.ContentElement.remove_IsMouseCapturedChanged","System.Windows.ContentElement.IsMouseCapturedProperty","System.Windows.ContentElement.IsMouseCaptureWithin","System.Windows.ContentElement.IsMouseCaptureWithinChanged","System.Windows.ContentElement.add_IsMouseCaptureWithinChanged","System.Windows.ContentElement.remove_IsMouseCaptureWithinChanged","System.Windows.ContentElement.IsMouseCaptureWithinProperty","System.Windows.ContentElement.IsMouseDirectlyOver","System.Windows.ContentElement.IsMouseDirectlyOverChanged","System.Windows.ContentElement.add_IsMouseDirectlyOverChanged","System.Windows.ContentElement.remove_IsMouseDirectlyOverChanged","System.Windows.ContentElement.IsMouseDirectlyOverProperty","System.Windows.ContentElement.IsMouseOver","System.Windows.ContentElement.IsMouseOverProperty","System.Windows.ContentElement.IsStylusCaptured","System.Windows.ContentElement.IsStylusCapturedChanged","System.Windows.ContentElement.add_IsStylusCapturedChanged","System.Windows.ContentElement.remove_IsStylusCapturedChanged","System.Windows.ContentElement.IsStylusCapturedProperty","System.Windows.ContentElement.IsStylusCaptureWithin","System.Windows.ContentElement.IsStylusCaptureWithinChanged","System.Windows.ContentElement.add_IsStylusCaptureWithinChanged","System.Windows.ContentElement.remove_IsStylusCaptureWithinChanged","System.Windows.ContentElement.IsStylusCaptureWithinProperty","System.Windows.ContentElement.IsStylusDirectlyOver","System.Windows.ContentElement.IsStylusDirectlyOverChanged","System.Windows.ContentElement.add_IsStylusDirectlyOverChanged","System.Windows.ContentElement.remove_IsStylusDirectlyOverChanged","System.Windows.ContentElement.IsStylusDirectlyOverProperty","System.Windows.ContentElement.IsStylusOver","System.Windows.ContentElement.IsStylusOverProperty","System.Windows.ContentElement.KeyDown","System.Windows.ContentElement.add_KeyDown","System.Windows.ContentElement.remove_KeyDown","System.Windows.ContentElement.KeyDownEvent","System.Windows.ContentElement.KeyUp","System.Windows.ContentElement.add_KeyUp","System.Windows.ContentElement.remove_KeyUp","System.Windows.ContentElement.KeyUpEvent","System.Windows.ContentElement.LostFocus","System.Windows.ContentElement.add_LostFocus","System.Windows.ContentElement.remove_LostFocus","System.Windows.ContentElement.LostFocusEvent","System.Windows.ContentElement.LostKeyboardFocus","System.Windows.ContentElement.add_LostKeyboardFocus","System.Windows.ContentElement.remove_LostKeyboardFocus","System.Windows.ContentElement.LostKeyboardFocusEvent","System.Windows.ContentElement.LostMouseCapture","System.Windows.ContentElement.add_LostMouseCapture","System.Windows.ContentElement.remove_LostMouseCapture","System.Windows.ContentElement.LostMouseCaptureEvent","System.Windows.ContentElement.LostStylusCapture","System.Windows.ContentElement.add_LostStylusCapture","System.Windows.ContentElement.remove_LostStylusCapture","System.Windows.ContentElement.LostStylusCaptureEvent","System.Windows.ContentElement.LostTouchCapture","System.Windows.ContentElement.add_LostTouchCapture","System.Windows.ContentElement.remove_LostTouchCapture","System.Windows.ContentElement.LostTouchCaptureEvent","System.Windows.ContentElement.MouseDown","System.Windows.ContentElement.add_MouseDown","System.Windows.ContentElement.remove_MouseDown","System.Windows.ContentElement.MouseDownEvent","System.Windows.ContentElement.MouseEnter","System.Windows.ContentElement.add_MouseEnter","System.Windows.ContentElement.remove_MouseEnter","System.Windows.ContentElement.MouseEnterEvent","System.Windows.ContentElement.MouseLeave","System.Windows.ContentElement.add_MouseLeave","System.Windows.ContentElement.remove_MouseLeave","System.Windows.ContentElement.MouseLeaveEvent","System.Windows.ContentElement.MouseLeftButtonDown","System.Windows.ContentElement.add_MouseLeftButtonDown","System.Windows.ContentElement.remove_MouseLeftButtonDown","System.Windows.ContentElement.MouseLeftButtonDownEvent","System.Windows.ContentElement.MouseLeftButtonUp","System.Windows.ContentElement.add_MouseLeftButtonUp","System.Windows.ContentElement.remove_MouseLeftButtonUp","System.Windows.ContentElement.MouseLeftButtonUpEvent","System.Windows.ContentElement.MouseMove","System.Windows.ContentElement.add_MouseMove","System.Windows.ContentElement.remove_MouseMove","System.Windows.ContentElement.MouseMoveEvent","System.Windows.ContentElement.MouseRightButtonDown","System.Windows.ContentElement.add_MouseRightButtonDown","System.Windows.ContentElement.remove_MouseRightButtonDown","System.Windows.ContentElement.MouseRightButtonDownEvent","System.Windows.ContentElement.MouseRightButtonUp","System.Windows.ContentElement.add_MouseRightButtonUp","System.Windows.ContentElement.remove_MouseRightButtonUp","System.Windows.ContentElement.MouseRightButtonUpEvent","System.Windows.ContentElement.MouseUp","System.Windows.ContentElement.add_MouseUp","System.Windows.ContentElement.remove_MouseUp","System.Windows.ContentElement.MouseUpEvent","System.Windows.ContentElement.MouseWheel","System.Windows.ContentElement.add_MouseWheel","System.Windows.ContentElement.remove_MouseWheel","System.Windows.ContentElement.MouseWheelEvent","System.Windows.ContentElement.MoveFocus","System.Windows.ContentElement.OnCreateAutomationPeer","System.Windows.ContentElement.OnDragEnter","System.Windows.ContentElement.OnDragLeave","System.Windows.ContentElement.OnDragOver","System.Windows.ContentElement.OnDrop","System.Windows.ContentElement.OnGiveFeedback","System.Windows.ContentElement.OnGotFocus","System.Windows.ContentElement.OnGotKeyboardFocus","System.Windows.ContentElement.OnGotMouseCapture","System.Windows.ContentElement.OnGotStylusCapture","System.Windows.ContentElement.OnGotTouchCapture","System.Windows.ContentElement.OnIsKeyboardFocusedChanged","System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged","System.Windows.ContentElement.OnIsMouseCapturedChanged","System.Windows.ContentElement.OnIsMouseCaptureWithinChanged","System.Windows.ContentElement.OnIsMouseDirectlyOverChanged","System.Windows.ContentElement.OnIsStylusCapturedChanged","System.Windows.ContentElement.OnIsStylusCaptureWithinChanged","System.Windows.ContentElement.OnIsStylusDirectlyOverChanged","System.Windows.ContentElement.OnKeyDown","System.Windows.ContentElement.OnKeyUp","System.Windows.ContentElement.OnLostFocus","System.Windows.ContentElement.OnLostKeyboardFocus","System.Windows.ContentElement.OnLostMouseCapture","System.Windows.ContentElement.OnLostStylusCapture","System.Windows.ContentElement.OnLostTouchCapture","System.Windows.ContentElement.OnMouseDown","System.Windows.ContentElement.OnMouseEnter","System.Windows.ContentElement.OnMouseLeave","System.Windows.ContentElement.OnMouseLeftButtonDown","System.Windows.ContentElement.OnMouseLeftButtonUp","System.Windows.ContentElement.OnMouseMove","System.Windows.ContentElement.OnMouseRightButtonDown","System.Windows.ContentElement.OnMouseRightButtonUp","System.Windows.ContentElement.OnMouseUp","System.Windows.ContentElement.OnMouseWheel","System.Windows.ContentElement.OnPreviewDragEnter","System.Windows.ContentElement.OnPreviewDragLeave","System.Windows.ContentElement.OnPreviewDragOver","System.Windows.ContentElement.OnPreviewDrop","System.Windows.ContentElement.OnPreviewGiveFeedback","System.Windows.ContentElement.OnPreviewGotKeyboardFocus","System.Windows.ContentElement.OnPreviewKeyDown","System.Windows.ContentElement.OnPreviewKeyUp","System.Windows.ContentElement.OnPreviewLostKeyboardFocus","System.Windows.ContentElement.OnPreviewMouseDown","System.Windows.ContentElement.OnPreviewMouseLeftButtonDown","System.Windows.ContentElement.OnPreviewMouseLeftButtonUp","System.Windows.ContentElement.OnPreviewMouseMove","System.Windows.ContentElement.OnPreviewMouseRightButtonDown","System.Windows.ContentElement.OnPreviewMouseRightButtonUp","System.Windows.ContentElement.OnPreviewMouseUp","System.Windows.ContentElement.OnPreviewMouseWheel","System.Windows.ContentElement.OnPreviewQueryContinueDrag","System.Windows.ContentElement.OnPreviewStylusButtonDown","System.Windows.ContentElement.OnPreviewStylusButtonUp","System.Windows.ContentElement.OnPreviewStylusDown","System.Windows.ContentElement.OnPreviewStylusInAirMove","System.Windows.ContentElement.OnPreviewStylusInRange","System.Windows.ContentElement.OnPreviewStylusMove","System.Windows.ContentElement.OnPreviewStylusOutOfRange","System.Windows.ContentElement.OnPreviewStylusSystemGesture","System.Windows.ContentElement.OnPreviewStylusUp","System.Windows.ContentElement.OnPreviewTextInput","System.Windows.ContentElement.OnPreviewTouchDown","System.Windows.ContentElement.OnPreviewTouchMove","System.Windows.ContentElement.OnPreviewTouchUp","System.Windows.ContentElement.OnQueryContinueDrag","System.Windows.ContentElement.OnQueryCursor","System.Windows.ContentElement.OnStylusButtonDown","System.Windows.ContentElement.OnStylusButtonUp","System.Windows.ContentElement.OnStylusDown","System.Windows.ContentElement.OnStylusEnter","System.Windows.ContentElement.OnStylusInAirMove","System.Windows.ContentElement.OnStylusInRange","System.Windows.ContentElement.OnStylusLeave","System.Windows.ContentElement.OnStylusMove","System.Windows.ContentElement.OnStylusOutOfRange","System.Windows.ContentElement.OnStylusSystemGesture","System.Windows.ContentElement.OnStylusUp","System.Windows.ContentElement.OnTextInput","System.Windows.ContentElement.OnTouchDown","System.Windows.ContentElement.OnTouchEnter","System.Windows.ContentElement.OnTouchLeave","System.Windows.ContentElement.OnTouchMove","System.Windows.ContentElement.OnTouchUp","System.Windows.ContentElement.PredictFocus","System.Windows.ContentElement.PreviewDragEnter","System.Windows.ContentElement.add_PreviewDragEnter","System.Windows.ContentElement.remove_PreviewDragEnter","System.Windows.ContentElement.PreviewDragEnterEvent","System.Windows.ContentElement.PreviewDragLeave","System.Windows.ContentElement.add_PreviewDragLeave","System.Windows.ContentElement.remove_PreviewDragLeave","System.Windows.ContentElement.PreviewDragLeaveEvent","System.Windows.ContentElement.PreviewDragOver","System.Windows.ContentElement.add_PreviewDragOver","System.Windows.ContentElement.remove_PreviewDragOver","System.Windows.ContentElement.PreviewDragOverEvent","System.Windows.ContentElement.PreviewDrop","System.Windows.ContentElement.add_PreviewDrop","System.Windows.ContentElement.remove_PreviewDrop","System.Windows.ContentElement.PreviewDropEvent","System.Windows.ContentElement.PreviewGiveFeedback","System.Windows.ContentElement.add_PreviewGiveFeedback","System.Windows.ContentElement.remove_PreviewGiveFeedback","System.Windows.ContentElement.PreviewGiveFeedbackEvent","System.Windows.ContentElement.PreviewGotKeyboardFocus","System.Windows.ContentElement.add_PreviewGotKeyboardFocus","System.Windows.ContentElement.remove_PreviewGotKeyboardFocus","System.Windows.ContentElement.PreviewGotKeyboardFocusEvent","System.Windows.ContentElement.PreviewKeyDown","System.Windows.ContentElement.add_PreviewKeyDown","System.Windows.ContentElement.remove_PreviewKeyDown","System.Windows.ContentElement.PreviewKeyDownEvent","System.Windows.ContentElement.PreviewKeyUp","System.Windows.ContentElement.add_PreviewKeyUp","System.Windows.ContentElement.remove_PreviewKeyUp","System.Windows.ContentElement.PreviewKeyUpEvent","System.Windows.ContentElement.PreviewLostKeyboardFocus","System.Windows.ContentElement.add_PreviewLostKeyboardFocus","System.Windows.ContentElement.remove_PreviewLostKeyboardFocus","System.Windows.ContentElement.PreviewLostKeyboardFocusEvent","System.Windows.ContentElement.PreviewMouseDown","System.Windows.ContentElement.add_PreviewMouseDown","System.Windows.ContentElement.remove_PreviewMouseDown","System.Windows.ContentElement.PreviewMouseDownEvent","System.Windows.ContentElement.PreviewMouseLeftButtonDown","System.Windows.ContentElement.add_PreviewMouseLeftButtonDown","System.Windows.ContentElement.remove_PreviewMouseLeftButtonDown","System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent","System.Windows.ContentElement.PreviewMouseLeftButtonUp","System.Windows.ContentElement.add_PreviewMouseLeftButtonUp","System.Windows.ContentElement.remove_PreviewMouseLeftButtonUp","System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent","System.Windows.ContentElement.PreviewMouseMove","System.Windows.ContentElement.add_PreviewMouseMove","System.Windows.ContentElement.remove_PreviewMouseMove","System.Windows.ContentElement.PreviewMouseMoveEvent","System.Windows.ContentElement.PreviewMouseRightButtonDown","System.Windows.ContentElement.add_PreviewMouseRightButtonDown","System.Windows.ContentElement.remove_PreviewMouseRightButtonDown","System.Windows.ContentElement.PreviewMouseRightButtonDownEvent","System.Windows.ContentElement.PreviewMouseRightButtonUp","System.Windows.ContentElement.add_PreviewMouseRightButtonUp","System.Windows.ContentElement.remove_PreviewMouseRightButtonUp","System.Windows.ContentElement.PreviewMouseRightButtonUpEvent","System.Windows.ContentElement.PreviewMouseUp","System.Windows.ContentElement.add_PreviewMouseUp","System.Windows.ContentElement.remove_PreviewMouseUp","System.Windows.ContentElement.PreviewMouseUpEvent","System.Windows.ContentElement.PreviewMouseWheel","System.Windows.ContentElement.add_PreviewMouseWheel","System.Windows.ContentElement.remove_PreviewMouseWheel","System.Windows.ContentElement.PreviewMouseWheelEvent","System.Windows.ContentElement.PreviewQueryContinueDrag","System.Windows.ContentElement.add_PreviewQueryContinueDrag","System.Windows.ContentElement.remove_PreviewQueryContinueDrag","System.Windows.ContentElement.PreviewQueryContinueDragEvent","System.Windows.ContentElement.PreviewStylusButtonDown","System.Windows.ContentElement.add_PreviewStylusButtonDown","System.Windows.ContentElement.remove_PreviewStylusButtonDown","System.Windows.ContentElement.PreviewStylusButtonDownEvent","System.Windows.ContentElement.PreviewStylusButtonUp","System.Windows.ContentElement.add_PreviewStylusButtonUp","System.Windows.ContentElement.remove_PreviewStylusButtonUp","System.Windows.ContentElement.PreviewStylusButtonUpEvent","System.Windows.ContentElement.PreviewStylusDown","System.Windows.ContentElement.add_PreviewStylusDown","System.Windows.ContentElement.remove_PreviewStylusDown","System.Windows.ContentElement.PreviewStylusDownEvent","System.Windows.ContentElement.PreviewStylusInAirMove","System.Windows.ContentElement.add_PreviewStylusInAirMove","System.Windows.ContentElement.remove_PreviewStylusInAirMove","System.Windows.ContentElement.PreviewStylusInAirMoveEvent","System.Windows.ContentElement.PreviewStylusInRange","System.Windows.ContentElement.add_PreviewStylusInRange","System.Windows.ContentElement.remove_PreviewStylusInRange","System.Windows.ContentElement.PreviewStylusInRangeEvent","System.Windows.ContentElement.PreviewStylusMove","System.Windows.ContentElement.add_PreviewStylusMove","System.Windows.ContentElement.remove_PreviewStylusMove","System.Windows.ContentElement.PreviewStylusMoveEvent","System.Windows.ContentElement.PreviewStylusOutOfRange","System.Windows.ContentElement.add_PreviewStylusOutOfRange","System.Windows.ContentElement.remove_PreviewStylusOutOfRange","System.Windows.ContentElement.PreviewStylusOutOfRangeEvent","System.Windows.ContentElement.PreviewStylusSystemGesture","System.Windows.ContentElement.add_PreviewStylusSystemGesture","System.Windows.ContentElement.remove_PreviewStylusSystemGesture","System.Windows.ContentElement.PreviewStylusSystemGestureEvent","System.Windows.ContentElement.PreviewStylusUp","System.Windows.ContentElement.add_PreviewStylusUp","System.Windows.ContentElement.remove_PreviewStylusUp","System.Windows.ContentElement.PreviewStylusUpEvent","System.Windows.ContentElement.PreviewTextInput","System.Windows.ContentElement.add_PreviewTextInput","System.Windows.ContentElement.remove_PreviewTextInput","System.Windows.ContentElement.PreviewTextInputEvent","System.Windows.ContentElement.PreviewTouchDown","System.Windows.ContentElement.add_PreviewTouchDown","System.Windows.ContentElement.remove_PreviewTouchDown","System.Windows.ContentElement.PreviewTouchDownEvent","System.Windows.ContentElement.PreviewTouchMove","System.Windows.ContentElement.add_PreviewTouchMove","System.Windows.ContentElement.remove_PreviewTouchMove","System.Windows.ContentElement.PreviewTouchMoveEvent","System.Windows.ContentElement.PreviewTouchUp","System.Windows.ContentElement.add_PreviewTouchUp","System.Windows.ContentElement.remove_PreviewTouchUp","System.Windows.ContentElement.PreviewTouchUpEvent","System.Windows.ContentElement.QueryContinueDrag","System.Windows.ContentElement.add_QueryContinueDrag","System.Windows.ContentElement.remove_QueryContinueDrag","System.Windows.ContentElement.QueryContinueDragEvent","System.Windows.ContentElement.QueryCursor","System.Windows.ContentElement.add_QueryCursor","System.Windows.ContentElement.remove_QueryCursor","System.Windows.ContentElement.QueryCursorEvent","System.Windows.ContentElement.RaiseEvent","System.Windows.ContentElement.ReleaseAllTouchCaptures","System.Windows.ContentElement.ReleaseMouseCapture","System.Windows.ContentElement.ReleaseStylusCapture","System.Windows.ContentElement.ReleaseTouchCapture","System.Windows.ContentElement.RemoveHandler","System.Windows.ContentElement.ShouldSerializeCommandBindings","System.Windows.ContentElement.ShouldSerializeInputBindings","System.Windows.ContentElement.StylusButtonDown","System.Windows.ContentElement.add_StylusButtonDown","System.Windows.ContentElement.remove_StylusButtonDown","System.Windows.ContentElement.StylusButtonDownEvent","System.Windows.ContentElement.StylusButtonUp","System.Windows.ContentElement.add_StylusButtonUp","System.Windows.ContentElement.remove_StylusButtonUp","System.Windows.ContentElement.StylusButtonUpEvent","System.Windows.ContentElement.StylusDown","System.Windows.ContentElement.add_StylusDown","System.Windows.ContentElement.remove_StylusDown","System.Windows.ContentElement.StylusDownEvent","System.Windows.ContentElement.StylusEnter","System.Windows.ContentElement.add_StylusEnter","System.Windows.ContentElement.remove_StylusEnter","System.Windows.ContentElement.StylusEnterEvent","System.Windows.ContentElement.StylusInAirMove","System.Windows.ContentElement.add_StylusInAirMove","System.Windows.ContentElement.remove_StylusInAirMove","System.Windows.ContentElement.StylusInAirMoveEvent","System.Windows.ContentElement.StylusInRange","System.Windows.ContentElement.add_StylusInRange","System.Windows.ContentElement.remove_StylusInRange","System.Windows.ContentElement.StylusInRangeEvent","System.Windows.ContentElement.StylusLeave","System.Windows.ContentElement.add_StylusLeave","System.Windows.ContentElement.remove_StylusLeave","System.Windows.ContentElement.StylusLeaveEvent","System.Windows.ContentElement.StylusMove","System.Windows.ContentElement.add_StylusMove","System.Windows.ContentElement.remove_StylusMove","System.Windows.ContentElement.StylusMoveEvent","System.Windows.ContentElement.StylusOutOfRange","System.Windows.ContentElement.add_StylusOutOfRange","System.Windows.ContentElement.remove_StylusOutOfRange","System.Windows.ContentElement.StylusOutOfRangeEvent","System.Windows.ContentElement.StylusSystemGesture","System.Windows.ContentElement.add_StylusSystemGesture","System.Windows.ContentElement.remove_StylusSystemGesture","System.Windows.ContentElement.StylusSystemGestureEvent","System.Windows.ContentElement.StylusUp","System.Windows.ContentElement.add_StylusUp","System.Windows.ContentElement.remove_StylusUp","System.Windows.ContentElement.StylusUpEvent","System.Windows.ContentElement.TextInput","System.Windows.ContentElement.add_TextInput","System.Windows.ContentElement.remove_TextInput","System.Windows.ContentElement.TextInputEvent","System.Windows.ContentElement.TouchDown","System.Windows.ContentElement.add_TouchDown","System.Windows.ContentElement.remove_TouchDown","System.Windows.ContentElement.TouchDownEvent","System.Windows.ContentElement.TouchEnter","System.Windows.ContentElement.add_TouchEnter","System.Windows.ContentElement.remove_TouchEnter","System.Windows.ContentElement.TouchEnterEvent","System.Windows.ContentElement.TouchesCaptured","System.Windows.ContentElement.TouchesCapturedWithin","System.Windows.ContentElement.TouchesDirectlyOver","System.Windows.ContentElement.TouchesOver","System.Windows.ContentElement.TouchLeave","System.Windows.ContentElement.add_TouchLeave","System.Windows.ContentElement.remove_TouchLeave","System.Windows.ContentElement.TouchLeaveEvent","System.Windows.ContentElement.TouchMove","System.Windows.ContentElement.add_TouchMove","System.Windows.ContentElement.remove_TouchMove","System.Windows.ContentElement.TouchMoveEvent","System.Windows.ContentElement.TouchUp","System.Windows.ContentElement.add_TouchUp","System.Windows.ContentElement.remove_TouchUp","System.Windows.ContentElement.TouchUpEvent"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.ContentElement","System::Windows::ContentElement","System.Windows.ContentElement.#ctor","System::Windows::ContentElement::#ctor","System.Windows.ContentElement.AddHandler","System::Windows::ContentElement::AddHandler","System.Windows.ContentElement.AddToEventRoute","System::Windows::ContentElement::AddToEventRoute","System.Windows.ContentElement.AllowDrop","System::Windows::ContentElement::AllowDrop","System.Windows.ContentElement.AllowDropProperty","System::Windows::ContentElement::AllowDropProperty","System.Windows.ContentElement.ApplyAnimationClock","System::Windows::ContentElement::ApplyAnimationClock","System.Windows.ContentElement.AreAnyTouchesCaptured","System::Windows::ContentElement::AreAnyTouchesCaptured","System.Windows.ContentElement.AreAnyTouchesCapturedProperty","System::Windows::ContentElement::AreAnyTouchesCapturedProperty","System.Windows.ContentElement.AreAnyTouchesCapturedWithin","System::Windows::ContentElement::AreAnyTouchesCapturedWithin","System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty","System::Windows::ContentElement::AreAnyTouchesCapturedWithinProperty","System.Windows.ContentElement.AreAnyTouchesDirectlyOver","System::Windows::ContentElement::AreAnyTouchesDirectlyOver","System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty","System::Windows::ContentElement::AreAnyTouchesDirectlyOverProperty","System.Windows.ContentElement.AreAnyTouchesOver","System::Windows::ContentElement::AreAnyTouchesOver","System.Windows.ContentElement.AreAnyTouchesOverProperty","System::Windows::ContentElement::AreAnyTouchesOverProperty","System.Windows.ContentElement.BeginAnimation","System::Windows::ContentElement::BeginAnimation","System.Windows.ContentElement.CaptureMouse","System::Windows::ContentElement::CaptureMouse","System.Windows.ContentElement.CaptureStylus","System::Windows::ContentElement::CaptureStylus","System.Windows.ContentElement.CaptureTouch","System::Windows::ContentElement::CaptureTouch","System.Windows.ContentElement.CommandBindings","System::Windows::ContentElement::CommandBindings","System.Windows.ContentElement.DragEnter","System::Windows::ContentElement::DragEnter","System.Windows.ContentElement.DragEnterEvent","System::Windows::ContentElement::DragEnterEvent","System.Windows.ContentElement.DragLeave","System::Windows::ContentElement::DragLeave","System.Windows.ContentElement.DragLeaveEvent","System::Windows::ContentElement::DragLeaveEvent","System.Windows.ContentElement.DragOver","System::Windows::ContentElement::DragOver","System.Windows.ContentElement.DragOverEvent","System::Windows::ContentElement::DragOverEvent","System.Windows.ContentElement.Drop","System::Windows::ContentElement::Drop","System.Windows.ContentElement.DropEvent","System::Windows::ContentElement::DropEvent","System.Windows.ContentElement.Focus","System::Windows::ContentElement::Focus","System.Windows.ContentElement.Focusable","System::Windows::ContentElement::Focusable","System.Windows.ContentElement.FocusableChanged","System::Windows::ContentElement::FocusableChanged","System.Windows.ContentElement.FocusableProperty","System::Windows::ContentElement::FocusableProperty","System.Windows.ContentElement.GetAnimationBaseValue","System::Windows::ContentElement::GetAnimationBaseValue","System.Windows.ContentElement.GetUIParentCore","System::Windows::ContentElement::GetUIParentCore","System.Windows.ContentElement.GiveFeedback","System::Windows::ContentElement::GiveFeedback","System.Windows.ContentElement.GiveFeedbackEvent","System::Windows::ContentElement::GiveFeedbackEvent","System.Windows.ContentElement.GotFocus","System::Windows::ContentElement::GotFocus","System.Windows.ContentElement.GotFocusEvent","System::Windows::ContentElement::GotFocusEvent","System.Windows.ContentElement.GotKeyboardFocus","System::Windows::ContentElement::GotKeyboardFocus","System.Windows.ContentElement.GotKeyboardFocusEvent","System::Windows::ContentElement::GotKeyboardFocusEvent","System.Windows.ContentElement.GotMouseCapture","System::Windows::ContentElement::GotMouseCapture","System.Windows.ContentElement.GotMouseCaptureEvent","System::Windows::ContentElement::GotMouseCaptureEvent","System.Windows.ContentElement.GotStylusCapture","System::Windows::ContentElement::GotStylusCapture","System.Windows.ContentElement.GotStylusCaptureEvent","System::Windows::ContentElement::GotStylusCaptureEvent","System.Windows.ContentElement.GotTouchCapture","System::Windows::ContentElement::GotTouchCapture","System.Windows.ContentElement.GotTouchCaptureEvent","System::Windows::ContentElement::GotTouchCaptureEvent","System.Windows.ContentElement.HasAnimatedProperties","System::Windows::ContentElement::HasAnimatedProperties","System.Windows.ContentElement.InputBindings","System::Windows::ContentElement::InputBindings","System.Windows.ContentElement.IsEnabled","System::Windows::ContentElement::IsEnabled","System.Windows.ContentElement.IsEnabledChanged","System::Windows::ContentElement::IsEnabledChanged","System.Windows.ContentElement.IsEnabledCore","System::Windows::ContentElement::IsEnabledCore","System.Windows.ContentElement.IsEnabledProperty","System::Windows::ContentElement::IsEnabledProperty","System.Windows.ContentElement.IsFocused","System::Windows::ContentElement::IsFocused","System.Windows.ContentElement.IsFocusedProperty","System::Windows::ContentElement::IsFocusedProperty","System.Windows.ContentElement.IsInputMethodEnabled","System::Windows::ContentElement::IsInputMethodEnabled","System.Windows.ContentElement.IsKeyboardFocused","System::Windows::ContentElement::IsKeyboardFocused","System.Windows.ContentElement.IsKeyboardFocusedChanged","System::Windows::ContentElement::IsKeyboardFocusedChanged","System.Windows.ContentElement.IsKeyboardFocusedProperty","System::Windows::ContentElement::IsKeyboardFocusedProperty","System.Windows.ContentElement.IsKeyboardFocusWithin","System::Windows::ContentElement::IsKeyboardFocusWithin","System.Windows.ContentElement.IsKeyboardFocusWithinChanged","System::Windows::ContentElement::IsKeyboardFocusWithinChanged","System.Windows.ContentElement.IsKeyboardFocusWithinProperty","System::Windows::ContentElement::IsKeyboardFocusWithinProperty","System.Windows.ContentElement.IsMouseCaptured","System::Windows::ContentElement::IsMouseCaptured","System.Windows.ContentElement.IsMouseCapturedChanged","System::Windows::ContentElement::IsMouseCapturedChanged","System.Windows.ContentElement.IsMouseCapturedProperty","System::Windows::ContentElement::IsMouseCapturedProperty","System.Windows.ContentElement.IsMouseCaptureWithin","System::Windows::ContentElement::IsMouseCaptureWithin","System.Windows.ContentElement.IsMouseCaptureWithinChanged","System::Windows::ContentElement::IsMouseCaptureWithinChanged","System.Windows.ContentElement.IsMouseCaptureWithinProperty","System::Windows::ContentElement::IsMouseCaptureWithinProperty","System.Windows.ContentElement.IsMouseDirectlyOver","System::Windows::ContentElement::IsMouseDirectlyOver","System.Windows.ContentElement.IsMouseDirectlyOverChanged","System::Windows::ContentElement::IsMouseDirectlyOverChanged","System.Windows.ContentElement.IsMouseDirectlyOverProperty","System::Windows::ContentElement::IsMouseDirectlyOverProperty","System.Windows.ContentElement.IsMouseOver","System::Windows::ContentElement::IsMouseOver","System.Windows.ContentElement.IsMouseOverProperty","System::Windows::ContentElement::IsMouseOverProperty","System.Windows.ContentElement.IsStylusCaptured","System::Windows::ContentElement::IsStylusCaptured","System.Windows.ContentElement.IsStylusCapturedChanged","System::Windows::ContentElement::IsStylusCapturedChanged","System.Windows.ContentElement.IsStylusCapturedProperty","System::Windows::ContentElement::IsStylusCapturedProperty","System.Windows.ContentElement.IsStylusCaptureWithin","System::Windows::ContentElement::IsStylusCaptureWithin","System.Windows.ContentElement.IsStylusCaptureWithinChanged","System::Windows::ContentElement::IsStylusCaptureWithinChanged","System.Windows.ContentElement.IsStylusCaptureWithinProperty","System::Windows::ContentElement::IsStylusCaptureWithinProperty","System.Windows.ContentElement.IsStylusDirectlyOver","System::Windows::ContentElement::IsStylusDirectlyOver","System.Windows.ContentElement.IsStylusDirectlyOverChanged","System::Windows::ContentElement::IsStylusDirectlyOverChanged","System.Windows.ContentElement.IsStylusDirectlyOverProperty","System::Windows::ContentElement::IsStylusDirectlyOverProperty","System.Windows.ContentElement.IsStylusOver","System::Windows::ContentElement::IsStylusOver","System.Windows.ContentElement.IsStylusOverProperty","System::Windows::ContentElement::IsStylusOverProperty","System.Windows.ContentElement.KeyDown","System::Windows::ContentElement::KeyDown","System.Windows.ContentElement.KeyDownEvent","System::Windows::ContentElement::KeyDownEvent","System.Windows.ContentElement.KeyUp","System::Windows::ContentElement::KeyUp","System.Windows.ContentElement.KeyUpEvent","System::Windows::ContentElement::KeyUpEvent","System.Windows.ContentElement.LostFocus","System::Windows::ContentElement::LostFocus","System.Windows.ContentElement.LostFocusEvent","System::Windows::ContentElement::LostFocusEvent","System.Windows.ContentElement.LostKeyboardFocus","System::Windows::ContentElement::LostKeyboardFocus","System.Windows.ContentElement.LostKeyboardFocusEvent","System::Windows::ContentElement::LostKeyboardFocusEvent","System.Windows.ContentElement.LostMouseCapture","System::Windows::ContentElement::LostMouseCapture","System.Windows.ContentElement.LostMouseCaptureEvent","System::Windows::ContentElement::LostMouseCaptureEvent","System.Windows.ContentElement.LostStylusCapture","System::Windows::ContentElement::LostStylusCapture","System.Windows.ContentElement.LostStylusCaptureEvent","System::Windows::ContentElement::LostStylusCaptureEvent","System.Windows.ContentElement.LostTouchCapture","System::Windows::ContentElement::LostTouchCapture","System.Windows.ContentElement.LostTouchCaptureEvent","System::Windows::ContentElement::LostTouchCaptureEvent","System.Windows.ContentElement.MouseDown","System::Windows::ContentElement::MouseDown","System.Windows.ContentElement.MouseDownEvent","System::Windows::ContentElement::MouseDownEvent","System.Windows.ContentElement.MouseEnter","System::Windows::ContentElement::MouseEnter","System.Windows.ContentElement.MouseEnterEvent","System::Windows::ContentElement::MouseEnterEvent","System.Windows.ContentElement.MouseLeave","System::Windows::ContentElement::MouseLeave","System.Windows.ContentElement.MouseLeaveEvent","System::Windows::ContentElement::MouseLeaveEvent","System.Windows.ContentElement.MouseLeftButtonDown","System::Windows::ContentElement::MouseLeftButtonDown","System.Windows.ContentElement.MouseLeftButtonDownEvent","System::Windows::ContentElement::MouseLeftButtonDownEvent","System.Windows.ContentElement.MouseLeftButtonUp","System::Windows::ContentElement::MouseLeftButtonUp","System.Windows.ContentElement.MouseLeftButtonUpEvent","System::Windows::ContentElement::MouseLeftButtonUpEvent","System.Windows.ContentElement.MouseMove","System::Windows::ContentElement::MouseMove","System.Windows.ContentElement.MouseMoveEvent","System::Windows::ContentElement::MouseMoveEvent","System.Windows.ContentElement.MouseRightButtonDown","System::Windows::ContentElement::MouseRightButtonDown","System.Windows.ContentElement.MouseRightButtonDownEvent","System::Windows::ContentElement::MouseRightButtonDownEvent","System.Windows.ContentElement.MouseRightButtonUp","System::Windows::ContentElement::MouseRightButtonUp","System.Windows.ContentElement.MouseRightButtonUpEvent","System::Windows::ContentElement::MouseRightButtonUpEvent","System.Windows.ContentElement.MouseUp","System::Windows::ContentElement::MouseUp","System.Windows.ContentElement.MouseUpEvent","System::Windows::ContentElement::MouseUpEvent","System.Windows.ContentElement.MouseWheel","System::Windows::ContentElement::MouseWheel","System.Windows.ContentElement.MouseWheelEvent","System::Windows::ContentElement::MouseWheelEvent","System.Windows.ContentElement.MoveFocus","System::Windows::ContentElement::MoveFocus","System.Windows.ContentElement.OnCreateAutomationPeer","System::Windows::ContentElement::OnCreateAutomationPeer","System.Windows.ContentElement.OnDragEnter","System::Windows::ContentElement::OnDragEnter","System.Windows.ContentElement.OnDragLeave","System::Windows::ContentElement::OnDragLeave","System.Windows.ContentElement.OnDragOver","System::Windows::ContentElement::OnDragOver","System.Windows.ContentElement.OnDrop","System::Windows::ContentElement::OnDrop","System.Windows.ContentElement.OnGiveFeedback","System::Windows::ContentElement::OnGiveFeedback","System.Windows.ContentElement.OnGotFocus","System::Windows::ContentElement::OnGotFocus","System.Windows.ContentElement.OnGotKeyboardFocus","System::Windows::ContentElement::OnGotKeyboardFocus","System.Windows.ContentElement.OnGotMouseCapture","System::Windows::ContentElement::OnGotMouseCapture","System.Windows.ContentElement.OnGotStylusCapture","System::Windows::ContentElement::OnGotStylusCapture","System.Windows.ContentElement.OnGotTouchCapture","System::Windows::ContentElement::OnGotTouchCapture","System.Windows.ContentElement.OnIsKeyboardFocusedChanged","System::Windows::ContentElement::OnIsKeyboardFocusedChanged","System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged","System::Windows::ContentElement::OnIsKeyboardFocusWithinChanged","System.Windows.ContentElement.OnIsMouseCapturedChanged","System::Windows::ContentElement::OnIsMouseCapturedChanged","System.Windows.ContentElement.OnIsMouseCaptureWithinChanged","System::Windows::ContentElement::OnIsMouseCaptureWithinChanged","System.Windows.ContentElement.OnIsMouseDirectlyOverChanged","System::Windows::ContentElement::OnIsMouseDirectlyOverChanged","System.Windows.ContentElement.OnIsStylusCapturedChanged","System::Windows::ContentElement::OnIsStylusCapturedChanged","System.Windows.ContentElement.OnIsStylusCaptureWithinChanged","System::Windows::ContentElement::OnIsStylusCaptureWithinChanged","System.Windows.ContentElement.OnIsStylusDirectlyOverChanged","System::Windows::ContentElement::OnIsStylusDirectlyOverChanged","System.Windows.ContentElement.OnKeyDown","System::Windows::ContentElement::OnKeyDown","System.Windows.ContentElement.OnKeyUp","System::Windows::ContentElement::OnKeyUp","System.Windows.ContentElement.OnLostFocus","System::Windows::ContentElement::OnLostFocus","System.Windows.ContentElement.OnLostKeyboardFocus","System::Windows::ContentElement::OnLostKeyboardFocus","System.Windows.ContentElement.OnLostMouseCapture","System::Windows::ContentElement::OnLostMouseCapture","System.Windows.ContentElement.OnLostStylusCapture","System::Windows::ContentElement::OnLostStylusCapture","System.Windows.ContentElement.OnLostTouchCapture","System::Windows::ContentElement::OnLostTouchCapture","System.Windows.ContentElement.OnMouseDown","System::Windows::ContentElement::OnMouseDown","System.Windows.ContentElement.OnMouseEnter","System::Windows::ContentElement::OnMouseEnter","System.Windows.ContentElement.OnMouseLeave","System::Windows::ContentElement::OnMouseLeave","System.Windows.ContentElement.OnMouseLeftButtonDown","System::Windows::ContentElement::OnMouseLeftButtonDown","System.Windows.ContentElement.OnMouseLeftButtonUp","System::Windows::ContentElement::OnMouseLeftButtonUp","System.Windows.ContentElement.OnMouseMove","System::Windows::ContentElement::OnMouseMove","System.Windows.ContentElement.OnMouseRightButtonDown","System::Windows::ContentElement::OnMouseRightButtonDown","System.Windows.ContentElement.OnMouseRightButtonUp","System::Windows::ContentElement::OnMouseRightButtonUp","System.Windows.ContentElement.OnMouseUp","System::Windows::ContentElement::OnMouseUp","System.Windows.ContentElement.OnMouseWheel","System::Windows::ContentElement::OnMouseWheel","System.Windows.ContentElement.OnPreviewDragEnter","System::Windows::ContentElement::OnPreviewDragEnter","System.Windows.ContentElement.OnPreviewDragLeave","System::Windows::ContentElement::OnPreviewDragLeave","System.Windows.ContentElement.OnPreviewDragOver","System::Windows::ContentElement::OnPreviewDragOver","System.Windows.ContentElement.OnPreviewDrop","System::Windows::ContentElement::OnPreviewDrop","System.Windows.ContentElement.OnPreviewGiveFeedback","System::Windows::ContentElement::OnPreviewGiveFeedback","System.Windows.ContentElement.OnPreviewGotKeyboardFocus","System::Windows::ContentElement::OnPreviewGotKeyboardFocus","System.Windows.ContentElement.OnPreviewKeyDown","System::Windows::ContentElement::OnPreviewKeyDown","System.Windows.ContentElement.OnPreviewKeyUp","System::Windows::ContentElement::OnPreviewKeyUp","System.Windows.ContentElement.OnPreviewLostKeyboardFocus","System::Windows::ContentElement::OnPreviewLostKeyboardFocus","System.Windows.ContentElement.OnPreviewMouseDown","System::Windows::ContentElement::OnPreviewMouseDown","System.Windows.ContentElement.OnPreviewMouseLeftButtonDown","System::Windows::ContentElement::OnPreviewMouseLeftButtonDown","System.Windows.ContentElement.OnPreviewMouseLeftButtonUp","System::Windows::ContentElement::OnPreviewMouseLeftButtonUp","System.Windows.ContentElement.OnPreviewMouseMove","System::Windows::ContentElement::OnPreviewMouseMove","System.Windows.ContentElement.OnPreviewMouseRightButtonDown","System::Windows::ContentElement::OnPreviewMouseRightButtonDown","System.Windows.ContentElement.OnPreviewMouseRightButtonUp","System::Windows::ContentElement::OnPreviewMouseRightButtonUp","System.Windows.ContentElement.OnPreviewMouseUp","System::Windows::ContentElement::OnPreviewMouseUp","System.Windows.ContentElement.OnPreviewMouseWheel","System::Windows::ContentElement::OnPreviewMouseWheel","System.Windows.ContentElement.OnPreviewQueryContinueDrag","System::Windows::ContentElement::OnPreviewQueryContinueDrag","System.Windows.ContentElement.OnPreviewStylusButtonDown","System::Windows::ContentElement::OnPreviewStylusButtonDown","System.Windows.ContentElement.OnPreviewStylusButtonUp","System::Windows::ContentElement::OnPreviewStylusButtonUp","System.Windows.ContentElement.OnPreviewStylusDown","System::Windows::ContentElement::OnPreviewStylusDown","System.Windows.ContentElement.OnPreviewStylusInAirMove","System::Windows::ContentElement::OnPreviewStylusInAirMove","System.Windows.ContentElement.OnPreviewStylusInRange","System::Windows::ContentElement::OnPreviewStylusInRange","System.Windows.ContentElement.OnPreviewStylusMove","System::Windows::ContentElement::OnPreviewStylusMove","System.Windows.ContentElement.OnPreviewStylusOutOfRange","System::Windows::ContentElement::OnPreviewStylusOutOfRange","System.Windows.ContentElement.OnPreviewStylusSystemGesture","System::Windows::ContentElement::OnPreviewStylusSystemGesture","System.Windows.ContentElement.OnPreviewStylusUp","System::Windows::ContentElement::OnPreviewStylusUp","System.Windows.ContentElement.OnPreviewTextInput","System::Windows::ContentElement::OnPreviewTextInput","System.Windows.ContentElement.OnPreviewTouchDown","System::Windows::ContentElement::OnPreviewTouchDown","System.Windows.ContentElement.OnPreviewTouchMove","System::Windows::ContentElement::OnPreviewTouchMove","System.Windows.ContentElement.OnPreviewTouchUp","System::Windows::ContentElement::OnPreviewTouchUp","System.Windows.ContentElement.OnQueryContinueDrag","System::Windows::ContentElement::OnQueryContinueDrag","System.Windows.ContentElement.OnQueryCursor","System::Windows::ContentElement::OnQueryCursor","System.Windows.ContentElement.OnStylusButtonDown","System::Windows::ContentElement::OnStylusButtonDown","System.Windows.ContentElement.OnStylusButtonUp","System::Windows::ContentElement::OnStylusButtonUp","System.Windows.ContentElement.OnStylusDown","System::Windows::ContentElement::OnStylusDown","System.Windows.ContentElement.OnStylusEnter","System::Windows::ContentElement::OnStylusEnter","System.Windows.ContentElement.OnStylusInAirMove","System::Windows::ContentElement::OnStylusInAirMove","System.Windows.ContentElement.OnStylusInRange","System::Windows::ContentElement::OnStylusInRange","System.Windows.ContentElement.OnStylusLeave","System::Windows::ContentElement::OnStylusLeave","System.Windows.ContentElement.OnStylusMove","System::Windows::ContentElement::OnStylusMove","System.Windows.ContentElement.OnStylusOutOfRange","System::Windows::ContentElement::OnStylusOutOfRange","System.Windows.ContentElement.OnStylusSystemGesture","System::Windows::ContentElement::OnStylusSystemGesture","System.Windows.ContentElement.OnStylusUp","System::Windows::ContentElement::OnStylusUp","System.Windows.ContentElement.OnTextInput","System::Windows::ContentElement::OnTextInput","System.Windows.ContentElement.OnTouchDown","System::Windows::ContentElement::OnTouchDown","System.Windows.ContentElement.OnTouchEnter","System::Windows::ContentElement::OnTouchEnter","System.Windows.ContentElement.OnTouchLeave","System::Windows::ContentElement::OnTouchLeave","System.Windows.ContentElement.OnTouchMove","System::Windows::ContentElement::OnTouchMove","System.Windows.ContentElement.OnTouchUp","System::Windows::ContentElement::OnTouchUp","System.Windows.ContentElement.PredictFocus","System::Windows::ContentElement::PredictFocus","System.Windows.ContentElement.PreviewDragEnter","System::Windows::ContentElement::PreviewDragEnter","System.Windows.ContentElement.PreviewDragEnterEvent","System::Windows::ContentElement::PreviewDragEnterEvent","System.Windows.ContentElement.PreviewDragLeave","System::Windows::ContentElement::PreviewDragLeave","System.Windows.ContentElement.PreviewDragLeaveEvent","System::Windows::ContentElement::PreviewDragLeaveEvent","System.Windows.ContentElement.PreviewDragOver","System::Windows::ContentElement::PreviewDragOver","System.Windows.ContentElement.PreviewDragOverEvent","System::Windows::ContentElement::PreviewDragOverEvent","System.Windows.ContentElement.PreviewDrop","System::Windows::ContentElement::PreviewDrop","System.Windows.ContentElement.PreviewDropEvent","System::Windows::ContentElement::PreviewDropEvent","System.Windows.ContentElement.PreviewGiveFeedback","System::Windows::ContentElement::PreviewGiveFeedback","System.Windows.ContentElement.PreviewGiveFeedbackEvent","System::Windows::ContentElement::PreviewGiveFeedbackEvent","System.Windows.ContentElement.PreviewGotKeyboardFocus","System::Windows::ContentElement::PreviewGotKeyboardFocus","System.Windows.ContentElement.PreviewGotKeyboardFocusEvent","System::Windows::ContentElement::PreviewGotKeyboardFocusEvent","System.Windows.ContentElement.PreviewKeyDown","System::Windows::ContentElement::PreviewKeyDown","System.Windows.ContentElement.PreviewKeyDownEvent","System::Windows::ContentElement::PreviewKeyDownEvent","System.Windows.ContentElement.PreviewKeyUp","System::Windows::ContentElement::PreviewKeyUp","System.Windows.ContentElement.PreviewKeyUpEvent","System::Windows::ContentElement::PreviewKeyUpEvent","System.Windows.ContentElement.PreviewLostKeyboardFocus","System::Windows::ContentElement::PreviewLostKeyboardFocus","System.Windows.ContentElement.PreviewLostKeyboardFocusEvent","System::Windows::ContentElement::PreviewLostKeyboardFocusEvent","System.Windows.ContentElement.PreviewMouseDown","System::Windows::ContentElement::PreviewMouseDown","System.Windows.ContentElement.PreviewMouseDownEvent","System::Windows::ContentElement::PreviewMouseDownEvent","System.Windows.ContentElement.PreviewMouseLeftButtonDown","System::Windows::ContentElement::PreviewMouseLeftButtonDown","System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent","System::Windows::ContentElement::PreviewMouseLeftButtonDownEvent","System.Windows.ContentElement.PreviewMouseLeftButtonUp","System::Windows::ContentElement::PreviewMouseLeftButtonUp","System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent","System::Windows::ContentElement::PreviewMouseLeftButtonUpEvent","System.Windows.ContentElement.PreviewMouseMove","System::Windows::ContentElement::PreviewMouseMove","System.Windows.ContentElement.PreviewMouseMoveEvent","System::Windows::ContentElement::PreviewMouseMoveEvent","System.Windows.ContentElement.PreviewMouseRightButtonDown","System::Windows::ContentElement::PreviewMouseRightButtonDown","System.Windows.ContentElement.PreviewMouseRightButtonDownEvent","System::Windows::ContentElement::PreviewMouseRightButtonDownEvent","System.Windows.ContentElement.PreviewMouseRightButtonUp","System::Windows::ContentElement::PreviewMouseRightButtonUp","System.Windows.ContentElement.PreviewMouseRightButtonUpEvent","System::Windows::ContentElement::PreviewMouseRightButtonUpEvent","System.Windows.ContentElement.PreviewMouseUp","System::Windows::ContentElement::PreviewMouseUp","System.Windows.ContentElement.PreviewMouseUpEvent","System::Windows::ContentElement::PreviewMouseUpEvent","System.Windows.ContentElement.PreviewMouseWheel","System::Windows::ContentElement::PreviewMouseWheel","System.Windows.ContentElement.PreviewMouseWheelEvent","System::Windows::ContentElement::PreviewMouseWheelEvent","System.Windows.ContentElement.PreviewQueryContinueDrag","System::Windows::ContentElement::PreviewQueryContinueDrag","System.Windows.ContentElement.PreviewQueryContinueDragEvent","System::Windows::ContentElement::PreviewQueryContinueDragEvent","System.Windows.ContentElement.PreviewStylusButtonDown","System::Windows::ContentElement::PreviewStylusButtonDown","System.Windows.ContentElement.PreviewStylusButtonDownEvent","System::Windows::ContentElement::PreviewStylusButtonDownEvent","System.Windows.ContentElement.PreviewStylusButtonUp","System::Windows::ContentElement::PreviewStylusButtonUp","System.Windows.ContentElement.PreviewStylusButtonUpEvent","System::Windows::ContentElement::PreviewStylusButtonUpEvent","System.Windows.ContentElement.PreviewStylusDown","System::Windows::ContentElement::PreviewStylusDown","System.Windows.ContentElement.PreviewStylusDownEvent","System::Windows::ContentElement::PreviewStylusDownEvent","System.Windows.ContentElement.PreviewStylusInAirMove","System::Windows::ContentElement::PreviewStylusInAirMove","System.Windows.ContentElement.PreviewStylusInAirMoveEvent","System::Windows::ContentElement::PreviewStylusInAirMoveEvent","System.Windows.ContentElement.PreviewStylusInRange","System::Windows::ContentElement::PreviewStylusInRange","System.Windows.ContentElement.PreviewStylusInRangeEvent","System::Windows::ContentElement::PreviewStylusInRangeEvent","System.Windows.ContentElement.PreviewStylusMove","System::Windows::ContentElement::PreviewStylusMove","System.Windows.ContentElement.PreviewStylusMoveEvent","System::Windows::ContentElement::PreviewStylusMoveEvent","System.Windows.ContentElement.PreviewStylusOutOfRange","System::Windows::ContentElement::PreviewStylusOutOfRange","System.Windows.ContentElement.PreviewStylusOutOfRangeEvent","System::Windows::ContentElement::PreviewStylusOutOfRangeEvent","System.Windows.ContentElement.PreviewStylusSystemGesture","System::Windows::ContentElement::PreviewStylusSystemGesture","System.Windows.ContentElement.PreviewStylusSystemGestureEvent","System::Windows::ContentElement::PreviewStylusSystemGestureEvent","System.Windows.ContentElement.PreviewStylusUp","System::Windows::ContentElement::PreviewStylusUp","System.Windows.ContentElement.PreviewStylusUpEvent","System::Windows::ContentElement::PreviewStylusUpEvent","System.Windows.ContentElement.PreviewTextInput","System::Windows::ContentElement::PreviewTextInput","System.Windows.ContentElement.PreviewTextInputEvent","System::Windows::ContentElement::PreviewTextInputEvent","System.Windows.ContentElement.PreviewTouchDown","System::Windows::ContentElement::PreviewTouchDown","System.Windows.ContentElement.PreviewTouchDownEvent","System::Windows::ContentElement::PreviewTouchDownEvent","System.Windows.ContentElement.PreviewTouchMove","System::Windows::ContentElement::PreviewTouchMove","System.Windows.ContentElement.PreviewTouchMoveEvent","System::Windows::ContentElement::PreviewTouchMoveEvent","System.Windows.ContentElement.PreviewTouchUp","System::Windows::ContentElement::PreviewTouchUp","System.Windows.ContentElement.PreviewTouchUpEvent","System::Windows::ContentElement::PreviewTouchUpEvent","System.Windows.ContentElement.QueryContinueDrag","System::Windows::ContentElement::QueryContinueDrag","System.Windows.ContentElement.QueryContinueDragEvent","System::Windows::ContentElement::QueryContinueDragEvent","System.Windows.ContentElement.QueryCursor","System::Windows::ContentElement::QueryCursor","System.Windows.ContentElement.QueryCursorEvent","System::Windows::ContentElement::QueryCursorEvent","System.Windows.ContentElement.RaiseEvent","System::Windows::ContentElement::RaiseEvent","System.Windows.ContentElement.ReleaseAllTouchCaptures","System::Windows::ContentElement::ReleaseAllTouchCaptures","System.Windows.ContentElement.ReleaseMouseCapture","System::Windows::ContentElement::ReleaseMouseCapture","System.Windows.ContentElement.ReleaseStylusCapture","System::Windows::ContentElement::ReleaseStylusCapture","System.Windows.ContentElement.ReleaseTouchCapture","System::Windows::ContentElement::ReleaseTouchCapture","System.Windows.ContentElement.RemoveHandler","System::Windows::ContentElement::RemoveHandler","System.Windows.ContentElement.ShouldSerializeCommandBindings","System::Windows::ContentElement::ShouldSerializeCommandBindings","System.Windows.ContentElement.ShouldSerializeInputBindings","System::Windows::ContentElement::ShouldSerializeInputBindings","System.Windows.ContentElement.StylusButtonDown","System::Windows::ContentElement::StylusButtonDown","System.Windows.ContentElement.StylusButtonDownEvent","System::Windows::ContentElement::StylusButtonDownEvent","System.Windows.ContentElement.StylusButtonUp","System::Windows::ContentElement::StylusButtonUp","System.Windows.ContentElement.StylusButtonUpEvent","System::Windows::ContentElement::StylusButtonUpEvent","System.Windows.ContentElement.StylusDown","System::Windows::ContentElement::StylusDown","System.Windows.ContentElement.StylusDownEvent","System::Windows::ContentElement::StylusDownEvent","System.Windows.ContentElement.StylusEnter","System::Windows::ContentElement::StylusEnter","System.Windows.ContentElement.StylusEnterEvent","System::Windows::ContentElement::StylusEnterEvent","System.Windows.ContentElement.StylusInAirMove","System::Windows::ContentElement::StylusInAirMove","System.Windows.ContentElement.StylusInAirMoveEvent","System::Windows::ContentElement::StylusInAirMoveEvent","System.Windows.ContentElement.StylusInRange","System::Windows::ContentElement::StylusInRange","System.Windows.ContentElement.StylusInRangeEvent","System::Windows::ContentElement::StylusInRangeEvent","System.Windows.ContentElement.StylusLeave","System::Windows::ContentElement::StylusLeave","System.Windows.ContentElement.StylusLeaveEvent","System::Windows::ContentElement::StylusLeaveEvent","System.Windows.ContentElement.StylusMove","System::Windows::ContentElement::StylusMove","System.Windows.ContentElement.StylusMoveEvent","System::Windows::ContentElement::StylusMoveEvent","System.Windows.ContentElement.StylusOutOfRange","System::Windows::ContentElement::StylusOutOfRange","System.Windows.ContentElement.StylusOutOfRangeEvent","System::Windows::ContentElement::StylusOutOfRangeEvent","System.Windows.ContentElement.StylusSystemGesture","System::Windows::ContentElement::StylusSystemGesture","System.Windows.ContentElement.StylusSystemGestureEvent","System::Windows::ContentElement::StylusSystemGestureEvent","System.Windows.ContentElement.StylusUp","System::Windows::ContentElement::StylusUp","System.Windows.ContentElement.StylusUpEvent","System::Windows::ContentElement::StylusUpEvent","System.Windows.ContentElement.TextInput","System::Windows::ContentElement::TextInput","System.Windows.ContentElement.TextInputEvent","System::Windows::ContentElement::TextInputEvent","System.Windows.ContentElement.TouchDown","System::Windows::ContentElement::TouchDown","System.Windows.ContentElement.TouchDownEvent","System::Windows::ContentElement::TouchDownEvent","System.Windows.ContentElement.TouchEnter","System::Windows::ContentElement::TouchEnter","System.Windows.ContentElement.TouchEnterEvent","System::Windows::ContentElement::TouchEnterEvent","System.Windows.ContentElement.TouchesCaptured","System::Windows::ContentElement::TouchesCaptured","System.Windows.ContentElement.TouchesCapturedWithin","System::Windows::ContentElement::TouchesCapturedWithin","System.Windows.ContentElement.TouchesDirectlyOver","System::Windows::ContentElement::TouchesDirectlyOver","System.Windows.ContentElement.TouchesOver","System::Windows::ContentElement::TouchesOver","System.Windows.ContentElement.TouchLeave","System::Windows::ContentElement::TouchLeave","System.Windows.ContentElement.TouchLeaveEvent","System::Windows::ContentElement::TouchLeaveEvent","System.Windows.ContentElement.TouchMove","System::Windows::ContentElement::TouchMove","System.Windows.ContentElement.TouchMoveEvent","System::Windows::ContentElement::TouchMoveEvent","System.Windows.ContentElement.TouchUp","System::Windows::ContentElement::TouchUp","System.Windows.ContentElement.TouchUpEvent","System::Windows::ContentElement::TouchUpEvent"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1bdb4220-5933-8fb6-f24b-9ff0c76d61da","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/ContentElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ContentElement class | Microsoft Docs","_op_ogTitle":"ContentElement class","description":"Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object…","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.ContentElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.contentelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.contentelement","fileRelativePath":"System.Windows.ContentElement.html"},"themesRelativePathToOutputRoot":"_themes/"}