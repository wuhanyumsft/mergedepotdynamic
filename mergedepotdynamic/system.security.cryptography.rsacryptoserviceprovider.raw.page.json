{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_RSACryptoServiceProvider\">\r\n      <span class=\"lang-csharp\">RSACryptoServiceProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Performs asymmetric encryption and decryption using the implementation of the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RSACryptoServiceProvider : System.Security.Cryptography.RSA, System.Security.Cryptography.ICspAsymmetricAlgorithm</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">System.Security.Cryptography.RSA</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RSACryptoServiceProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_FromXmlString_System_String_\" data-linktype=\"relative-path\">FromXmlString(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_SignData_System_Byte___System_Int32_System_Int32_System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_SignData_System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">SignData(Byte[],HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_SignData_System_IO_Stream_System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">SignData(Stream,HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_ToXmlString_System_Boolean_\" data-linktype=\"relative-path\">ToXmlString(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_VerifyData_System_Byte___System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_VerifyData_System_Byte___System_Int32_System_Int32_System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rsa#System_Security_Cryptography_RSA_VerifyData_System_IO_Stream_System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"relative-path\">VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This is the default implementation of <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.  </p>\n<p> The RSACryptoServiceProvider supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  </p>\n<p> Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the RSACryptoServiceProvider instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to Windows 8.1, and key sizes of 512 to 16384 bits for Windows 8.1. For more information, see <a href=\"http://msdn.microsoft.com/library/aa379941(v=vs.85).aspx\" data-linktype=\"external\">CryptGenKey</a> function in the Windows documentation.  </p>\n<h2 id=\"interoperation-with-the-microsoft-cryptographic-api-capi\">Interoperation with the Microsoft Cryptographic API (CAPI)</h2>\n<p> Unlike the RSA implementation in unmanaged CAPI, the RSACryptoServiceProvider class reverses the order of an encrypted array of bytes after encryption and before decryption.  By default, data encrypted by the RSACryptoServiceProvider class cannot be decrypted by the CAPI <code>CryptDecrypt</code> function and data encrypted by the CAPI <code>CryptEncrypt</code> method cannot be decrypted by the RSACryptoServiceProvider class.  </p>\n<p> If you do not compensate for the reverse ordering when interoperating between APIs, the RSACryptoServiceProvider class throws a <a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a>.  </p>\n<p> To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider__ctor\" data-linktype=\"self-bookmark\">RSACryptoServiceProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class using the default key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Int32_\" data-linktype=\"self-bookmark\">RSACryptoServiceProvider(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified key size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">RSACryptoServiceProvider(CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Int32_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">RSACryptoServiceProvider(Int32,CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified key size and parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_CspKeyContainerInfo\" data-linktype=\"self-bookmark\">CspKeyContainerInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object that describes additional information about a cryptographic key pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_KeyExchangeAlgorithm\" data-linktype=\"self-bookmark\">KeyExchangeAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the key exchange algorithm available with this implementation of <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_KeySize\" data-linktype=\"self-bookmark\">KeySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size of the current key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_PersistKeyInCsp\" data-linktype=\"self-bookmark\">PersistKeyInCsp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_PublicOnly\" data-linktype=\"self-bookmark\">PublicOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object contains only a public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignatureAlgorithm\" data-linktype=\"self-bookmark\">SignatureAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the signature algorithm available with this implementation of <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_UseMachineKeyStore\" data-linktype=\"self-bookmark\">UseMachineKeyStore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the key should be persisted in the computer&#39;s key store instead of the user profile store.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_System_Byte___System_Boolean_\" data-linktype=\"self-bookmark\">Decrypt(Byte[],Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_System_Byte___System_Security_Cryptography_RSAEncryptionPadding_\" data-linktype=\"self-bookmark\">Decrypt(Byte[],RSAEncryptionPadding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrypts data that was previously encrypted with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm by using the specified padding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_DecryptValue_System_Byte___\" data-linktype=\"self-bookmark\">DecryptValue(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method is not supported in the current version.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_System_Byte___System_Boolean_\" data-linktype=\"self-bookmark\">Encrypt(Byte[],Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_System_Byte___System_Security_Cryptography_RSAEncryptionPadding_\" data-linktype=\"self-bookmark\">Encrypt(Byte[],RSAEncryptionPadding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm using the specified padding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_EncryptValue_System_Byte___\" data-linktype=\"self-bookmark\">EncryptValue(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method is not supported in the current version.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_ExportCspBlob_System_Boolean_\" data-linktype=\"self-bookmark\">ExportCspBlob(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exports a blob containing the key information associated with an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_ExportParameters_System_Boolean_\" data-linktype=\"self-bookmark\">ExportParameters(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exports the <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_HashData_System_IO_Stream_System_Security_Cryptography_HashAlgorithmName_\" data-linktype=\"self-bookmark\">HashData(Stream,HashAlgorithmName)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_HashData_System_Byte___System_Int32_System_Int32_System_Security_Cryptography_HashAlgorithmName_\" data-linktype=\"self-bookmark\">HashData(Byte[],Int32,Int32,HashAlgorithmName)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_ImportCspBlob_System_Byte___\" data-linktype=\"self-bookmark\">ImportCspBlob(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Imports a blob that represents RSA key information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_ImportParameters_System_Security_Cryptography_RSAParameters_\" data-linktype=\"self-bookmark\">ImportParameters(RSAParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Imports the specified <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_Byte___System_Object_\" data-linktype=\"self-bookmark\">SignData(Byte[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_IO_Stream_System_Object_\" data-linktype=\"self-bookmark\">SignData(Stream,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_Byte___System_Int32_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">SignData(Byte[],Int32,Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignHash_System_Byte___System_String_\" data-linktype=\"self-bookmark\">SignHash(Byte[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the signature for the specified hash value by encrypting it with the private key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_SignHash_System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"self-bookmark\">SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_VerifyData_System_Byte___System_Object_System_Byte___\" data-linktype=\"self-bookmark\">VerifyData(Byte[],Object,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_System_Byte___System_String_System_Byte___\" data-linktype=\"self-bookmark\">VerifyHash(Byte[],String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_System_Byte___System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\" data-linktype=\"self-bookmark\">VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RSACryptoServiceProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class using the default key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RSACryptoServiceProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no default key is found, a new key is created.  </p>\n<p> This constructor creates an <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <code>AT_KEYEXCHANGE</code> value used in the unmanaged Microsoft Cryptographic API (CAPI).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\narray&lt;Byte&gt;^ RSAEncrypt( array&lt;Byte&gt;^DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Import the RSA Key information. This only needs\n      //toinclude the public key information.\n      RSA-&gt;ImportParameters( RSAKeyInfo );\n      \n      //Encrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n\n      array&lt;Byte&gt;^encryptedData = RSA-&gt;Encrypt( DataToEncrypt, DoOAEPPadding );\n\t  delete RSA;\n\t  return encryptedData;\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\narray&lt;Byte&gt;^ RSADecrypt( array&lt;Byte&gt;^DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Import the RSA Key information. This needs\n      //to include the private key information.\n      RSA-&gt;ImportParameters( RSAKeyInfo );\n      \n      //Decrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n\t  \n      array&lt;Byte&gt;^decryptedData = RSA-&gt;Decrypt( DataToDecrypt, DoOAEPPadding );\n      delete RSA;\n\t  return decryptedData;\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      //Create a UnicodeEncoder to convert between byte array and string.\n      UnicodeEncoding^ ByteConverter = gcnew UnicodeEncoding;\n      \n      //Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^dataToEncrypt = ByteConverter-&gt;GetBytes( &quot;Data to Encrypt&quot; );\n      array&lt;Byte&gt;^encryptedData;\n      array&lt;Byte&gt;^decryptedData;\n      \n      //Create a new instance of RSACryptoServiceProvider to generate\n      //public and private key data.\n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Pass the data to ENCRYPT, the public key information \n      //(using RSACryptoServiceProvider.ExportParameters(false),\n      //and a boolean flag specifying no OAEP padding.\n      encryptedData = RSAEncrypt( dataToEncrypt, RSA-&gt;ExportParameters( false ), false );\n      \n      //Pass the data to DECRYPT, the private key information \n      //(using RSACryptoServiceProvider.ExportParameters(true),\n      //and a boolean flag specifying no OAEP padding.\n      decryptedData = RSADecrypt( encryptedData, RSA-&gt;ExportParameters( true ), false );\n      \n      //Display the decrypted plaintext to the console. \n      Console::WriteLine( &quot;Decrypted plaintext: {0}&quot;, ByteConverter-&gt;GetString( decryptedData ) );\n\t  delete RSA;\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      \n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( &quot;Encryption failed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            //Create a UnicodeEncoder to convert between byte array and string.\n            UnicodeEncoding ByteConverter = new UnicodeEncoding();\n\n            //Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] dataToEncrypt = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;);\n            byte[] encryptedData;\n            byte[] decryptedData;\n\n            //Create a new instance of RSACryptoServiceProvider to generate\n            //public and private key data.\n            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())\n            {\n\n                //Pass the data to ENCRYPT, the public key information \n                //(using RSACryptoServiceProvider.ExportParameters(false),\n                //and a boolean flag specifying no OAEP padding.\n                encryptedData = RSAEncrypt(dataToEncrypt, RSA.ExportParameters(false), false);\n\n                //Pass the data to DECRYPT, the private key information \n                //(using RSACryptoServiceProvider.ExportParameters(true),\n                //and a boolean flag specifying no OAEP padding.\n                decryptedData = RSADecrypt(encryptedData, RSA.ExportParameters(true), false);\n\n                //Display the decrypted plaintext to the console. \n                Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData));\n            }\n        }\n        catch (ArgumentNullException)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;);\n\n        }\n    }\n\n    static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)\n    {\n        try\n        {\n            byte[] encryptedData;\n            //Create a new instance of RSACryptoServiceProvider.\n            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())\n            {\n\n                //Import the RSA Key information. This only needs\n                //toinclude the public key information.\n                RSA.ImportParameters(RSAKeyInfo);\n\n                //Encrypt the passed byte array and specify OAEP padding.  \n                //OAEP padding is only available on Microsoft Windows XP or\n                //later.  \n                encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding);\n            }\n            return encryptedData;\n        }\n        //Catch and display a CryptographicException  \n        //to the console.\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n\n    }\n\n    static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)\n    {\n        try\n        {\n            byte[] decryptedData;\n            //Create a new instance of RSACryptoServiceProvider.\n            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())\n            {\n                //Import the RSA Key information. This needs\n                //to include the private key information.\n                RSA.ImportParameters(RSAKeyInfo);\n\n                //Decrypt the passed byte array and specify OAEP padding.  \n                //OAEP padding is only available on Microsoft Windows XP or\n                //later.  \n                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding);\n            }\n            return decryptedData;\n        }\n        //Catch and display a CryptographicException  \n        //to the console.\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.ToString());\n\n            return null;\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\n _\n\nClass RSACSPSample\n\n\n    Shared Sub Main()\n        Try\n            &#39;Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New UnicodeEncoding()\n\n            &#39;Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim dataToEncrypt As Byte() = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;)\n            Dim encryptedData() As Byte\n            Dim decryptedData() As Byte\n\n            &#39;Create a new instance of RSACryptoServiceProvider to generate\n            &#39;public and private key data.\n            Using RSA As New RSACryptoServiceProvider\n\n                &#39;Pass the data to ENCRYPT, the public key information \n                &#39;(using RSACryptoServiceProvider.ExportParameters(false),\n                &#39;and a boolean flag specifying no OAEP padding.\n                encryptedData = RSAEncrypt(dataToEncrypt, RSA.ExportParameters(False), False)\n\n                &#39;Pass the data to DECRYPT, the private key information \n                &#39;(using RSACryptoServiceProvider.ExportParameters(true),\n                &#39;and a boolean flag specifying no OAEP padding.\n                decryptedData = RSADecrypt(encryptedData, RSA.ExportParameters(True), False)\n\n                &#39;Display the decrypted plaintext to the console. \n                Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData))\n            End Using\n        Catch e As ArgumentNullException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;)\n        End Try\n    End Sub\n\n\n    Public Shared Function RSAEncrypt(ByVal DataToEncrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            Dim encryptedData() As Byte\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            Using RSA As New RSACryptoServiceProvider\n\n                &#39;Import the RSA Key information. This only needs\n                &#39;toinclude the public key information.\n                RSA.ImportParameters(RSAKeyInfo)\n\n                &#39;Encrypt the passed byte array and specify OAEP padding.  \n                &#39;OAEP padding is only available on Microsoft Windows XP or\n                &#39;later.  \n                encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding)\n            End Using\n            Return encryptedData\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function\n\n\n    Public Shared Function RSADecrypt(ByVal DataToDecrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            Dim decryptedData() As Byte\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            Using RSA As New RSACryptoServiceProvider\n                &#39;Import the RSA Key information. This needs\n                &#39;to include the private key information.\n                RSA.ImportParameters(RSAKeyInfo)\n\n                &#39;Decrypt the passed byte array and specify OAEP padding.  \n                &#39;OAEP padding is only available on Microsoft Windows XP or\n                &#39;later.  \n                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding)\n                &#39;Catch and display a CryptographicException  \n                &#39;to the console.\n            End Using\n            Return decryptedData\n        Catch e As CryptographicException\n            Console.WriteLine(e.ToString())\n\n            Return Nothing\n        End Try\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RSACryptoServiceProvider(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified key size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RSACryptoServiceProvider (int dwKeySize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dwKeySize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the key to use in bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no default key is found, a new key is created.  </p>\n<p> This constructor creates an <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <code>AT_KEYEXCHANGE</code> value used in the unmanaged Microsoft Cryptographic API (CAPI).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a>, generates a new key, and stores it in a key container.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.ctor-int32-2#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            //Create a UnicodeEncoder to convert between byte array and string.\n            UnicodeEncoding ByteConverter = new UnicodeEncoding();\n\n            //Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] dataToEncrypt = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;);\n            byte[] encryptedData;\n            byte[] decryptedData;\n\t\t\t\n            //Create a new instance of RSACryptoServiceProvider to generate\n            //public and private key data.  Pass an integer specifying a key-\n            //length of 2048.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(2048);\n\n            //Display the key-legth to the console.\n            Console.WriteLine(&quot;A new key pair of legth {0} was created&quot;, RSAalg.KeySize);\n\n            //Pass the data to ENCRYPT, the public key information \n            //(using RSACryptoServiceProvider.ExportParameters(false),\n            //and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt,RSAalg.ExportParameters(false), false);\n\n            //Pass the data to DECRYPT, the private key information \n            //(using RSACryptoServiceProvider.ExportParameters(true),\n            //and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData,RSAalg.ExportParameters(true), false);\n\n            //Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData));\n        }\n        catch(ArgumentNullException)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;);\n\n        }\n    }\n\n    static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)\n    {\n        try\n        {\t\n            //Create a new instance of RSACryptoServiceProvider.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            //Import the RSA Key information. This only needs\n            //toinclude the public key information.\n            RSAalg.ImportParameters(RSAKeyInfo);\n\n            //Encrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n\n    }\n\n    static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo,bool DoOAEPPadding)\n    {\n        try\n        {\n            //Create a new instance of RSACryptoServiceProvider.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            //Import the RSA Key information. This needs\n            //to include the private key information.\n            RSAalg.ImportParameters(RSAKeyInfo);\n\n            //Decrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.ToString());\n\n            return null;\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.ctor-int32-2#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\narray&lt;Byte&gt;^ RSAEncrypt( array&lt;Byte&gt;^DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      //Import the RSA Key information. This only needs\n      //toinclude the public key information.\n      RSAalg-&gt;ImportParameters( RSAKeyInfo );\n      \n      //Encrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Encrypt( DataToEncrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\narray&lt;Byte&gt;^ RSADecrypt( array&lt;Byte&gt;^DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      //Import the RSA Key information. This needs\n      //to include the private key information.\n      RSAalg-&gt;ImportParameters( RSAKeyInfo );\n      \n      //Decrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Decrypt( DataToDecrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      //Create a UnicodeEncoder to convert between byte array and string.\n      UnicodeEncoding^ ByteConverter = gcnew UnicodeEncoding;\n      \n      //Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^dataToEncrypt = ByteConverter-&gt;GetBytes( &quot;Data to Encrypt&quot; );\n      array&lt;Byte&gt;^encryptedData;\n      array&lt;Byte&gt;^decryptedData;\n      \n      //Create a new instance of RSACryptoServiceProvider to generate\n      //public and private key data.  Pass an integer specifying a key-\n      //length of 2048.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( 2048 );\n      \n      //Display the key-legth to the console.\n      Console::WriteLine( &quot;A new key pair of legth {0} was created&quot;, RSAalg-&gt;KeySize );\n      \n      //Pass the data to ENCRYPT, the public key information \n      //(using RSACryptoServiceProvider.ExportParameters(false),\n      //and a boolean flag specifying no OAEP padding.\n      encryptedData = RSAEncrypt( dataToEncrypt, RSAalg-&gt;ExportParameters( false ), false );\n      \n      //Pass the data to DECRYPT, the private key information \n      //(using RSACryptoServiceProvider.ExportParameters(true),\n      //and a boolean flag specifying no OAEP padding.\n      decryptedData = RSADecrypt( encryptedData, RSAalg-&gt;ExportParameters( true ), false );\n      \n      //Display the decrypted plaintext to the console. \n      Console::WriteLine( &quot;Decrypted plaintext: {0}&quot;, ByteConverter-&gt;GetString( decryptedData ) );\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      \n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( &quot;Encryption failed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.ctor-int32-2#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            &#39;Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New UnicodeEncoding\n\n            &#39;Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim dataToEncrypt As Byte() = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;)\n            Dim encryptedData() As Byte\n            Dim decryptedData() As Byte\n\n            &#39;Create a new instance of RSACryptoServiceProvider to generate\n            &#39;public and private key data.  Pass an integer specifying a key-\n            &#39;length of 2048.\n            Dim RSAalg As New RSACryptoServiceProvider(2048)\n\n            &#39;Display the key-legth to the console.\n            Console.WriteLine(&quot;A new key pair of legth {0} was created&quot;, RSAalg.KeySize)\n\n            &#39;Pass the data to ENCRYPT, the public key information \n            &#39;(using RSACryptoServiceProvider.ExportParameters(false),\n            &#39;and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt, RSAalg.ExportParameters(False), False)\n\n            &#39;Pass the data to DECRYPT, the private key information \n            &#39;(using RSACryptoServiceProvider.ExportParameters(true),\n            &#39;and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData, RSAalg.ExportParameters(True), False)\n\n            &#39;Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData))\n        Catch e As ArgumentNullException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;)\n        End Try\n    End Sub &#39;Main\n\n\n    Function RSAEncrypt(ByVal DataToEncrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39;Import the RSA Key information. This only needs\n            &#39;toinclude the public key information.\n            RSAalg.ImportParameters(RSAKeyInfo)\n\n            &#39;Encrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function \n\n\n    Function RSADecrypt(ByVal DataToDecrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39;Import the RSA Key information. This needs\n            &#39;to include the private key information.\n            RSAalg.ImportParameters(RSAKeyInfo)\n\n            &#39;Decrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.ToString())\n\n            Return Nothing\n        End Try\n    End Function  \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RSACryptoServiceProvider(CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameters to be passed to the cryptographic service provider (CSP).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The CSP cannot be acquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates or reuses a key container specified using the <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> field of the <code>parameters</code> parameter.  </p>\n<p> By default, this constructor creates an <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <code>AT_KEYEXCHANGE</code> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p> You can create a <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable for authenticating (digitally signed) messages or files by setting the <a class=\"xref\" href=\"system.security.cryptography.cspparameters#System_Security_Cryptography_CspParameters_KeyNumber\" data-linktype=\"relative-path\">KeyNumber</a> field of the <code>parameters</code> parameter to the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value. This type of key corresponds to the <code>AT_SIGNATURE</code> value used in CAPI.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object with the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specified and then create another <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object with the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specified, both keys will be placed in a single container if both objects specify the same key container name.  </p>\n<p> To create a key that is compatible with stong-name signing using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class, you must create a <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object, generates a new key, and stores it in a key container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.ctor-csp#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nvoid RSAPersistKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider to generate\n      //a new key pair.  Pass the CspParameters class to persist the \n      //key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key was persisted in the container, \\&quot;{0}\\&quot;.&quot;, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid RSADeleteKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider. \n      //Pass the CspParameters class to use the \n      //key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Delete the key entry in the container.\n      RSAalg-&gt;PersistKeyInCsp = false;\n      \n      //Call Clear to release resources and delete the key from the container.\n      RSAalg-&gt;Clear();\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\narray&lt;Byte&gt;^ RSAEncrypt( array&lt;Byte&gt;^DataToEncrypt, String^ ContainerName, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      //Pass the CspParameters class to use the key \n      //from the key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Encrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Encrypt( DataToEncrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\narray&lt;Byte&gt;^ RSADecrypt( array&lt;Byte&gt;^DataToDecrypt, String^ ContainerName, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      //Pass the CspParameters class to use the key \n      //from the key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Decrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Decrypt( DataToDecrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      String^ KeyContainerName = &quot;MyKeyContainer&quot;;\n      \n      //Create a new key and persist it in \n      //the key container.\n      RSAPersistKeyInCSP( KeyContainerName );\n      \n      //Create a UnicodeEncoder to convert between byte array and string.\n      UnicodeEncoding^ ByteConverter = gcnew UnicodeEncoding;\n      \n      //Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^dataToEncrypt = ByteConverter-&gt;GetBytes( &quot;Data to Encrypt&quot; );\n      array&lt;Byte&gt;^encryptedData;\n      array&lt;Byte&gt;^decryptedData;\n      \n      //Pass the data to ENCRYPT, the name of the key container,\n      //and a boolean flag specifying no OAEP padding.\n      encryptedData = RSAEncrypt( dataToEncrypt, KeyContainerName, false );\n      \n      //Pass the data to DECRYPT, the name of the key container,\n      //and a boolean flag specifying no OAEP padding.\n      decryptedData = RSADecrypt( encryptedData, KeyContainerName, false );\n      \n      //Display the decrypted plaintext to the console. \n      Console::WriteLine( &quot;Decrypted plaintext: {0}&quot;, ByteConverter-&gt;GetString( decryptedData ) );\n      RSADeleteKeyInCSP( KeyContainerName );\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      \n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( &quot;Encryption failed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.ctor-csp#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            Dim KeyContainerName As String = &quot;MyKeyContainer&quot;\n\n            &#39;Create a new key and persist it in \n            &#39;the key container.\n            RSAPersistKeyInCSP(KeyContainerName)\n\n            &#39;Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New UnicodeEncoding\n\n            &#39;Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim dataToEncrypt As Byte() = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;)\n            Dim encryptedData() As Byte\n            Dim decryptedData() As Byte\n\n            &#39;Pass the data to ENCRYPT, the name of the key container, \n            &#39;and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt, KeyContainerName, False)\n\n            &#39;Pass the data to DECRYPT, the name of the key container, \n            &#39;and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData, KeyContainerName, False)\n\n            &#39;Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData))\n\n            RSADeleteKeyInCSP(KeyContainerName)\n        Catch e As ArgumentNullException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;)\n        End Try\n    End Sub\n\n\n    Sub RSAPersistKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider to generate\n            &#39;a new key pair.  Pass the CspParameters class to persist the \n            &#39;key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was persisted in the container, &quot;&quot;{0}&quot;&quot;.&quot;, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub RSADeleteKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider. \n            &#39;Pass the CspParameters class to use the \n            &#39;key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = False\n\n            &#39;Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear()\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, &quot;&quot;{0}&quot;&quot;.&quot;, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Function RSAEncrypt(ByVal DataToEncrypt() As Byte, ByVal ContainerName As String, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            &#39;Pass the CspParameters class to use the key \n            &#39;from the key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Encrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function RSADecrypt(ByVal DataToDecrypt() As Byte, ByVal ContainerName As String, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            &#39;Pass the CspParameters class to use the key \n            &#39;from the key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Decrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.ToString())\n\n            Return Nothing\n        End Try\n    End Function\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.ctor-csp#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            string KeyContainerName = &quot;MyKeyContainer&quot;;\n\n            //Create a new key and persist it in \n            //the key container.\n            RSAPersistKeyInCSP(KeyContainerName);\n\n            //Create a UnicodeEncoder to convert between byte array and string.\n            UnicodeEncoding ByteConverter = new UnicodeEncoding();\n\n            //Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] dataToEncrypt = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;);\n            byte[] encryptedData;\n            byte[] decryptedData;\n\n            //Pass the data to ENCRYPT, the name of the key container,\n            //and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt,KeyContainerName, false);\n\n            //Pass the data to DECRYPT, the name of the key container,\n            //and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData,KeyContainerName, false);\n\n            //Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData));\n\n            RSADeleteKeyInCSP(KeyContainerName);\n        }\n        catch(ArgumentNullException)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;);\n\n        }\n    }\n\n    public static void RSAPersistKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider to generate\n            //a new key pair.  Pass the CspParameters class to persist the \n            //key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was persisted in the container, \\&quot;{0}\\&quot;.&quot;, ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    public static void RSADeleteKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider. \n            //Pass the CspParameters class to use the \n            //key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = false;\n\n            //Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear();\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    static public byte[] RSAEncrypt(byte[] DataToEncrypt, string ContainerName, bool DoOAEPPadding)\n    {\n        try\n        {\t\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider.\n            //Pass the CspParameters class to use the key \n            //from the key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Encrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n\n    }\n\n    static public byte[] RSADecrypt(byte[] DataToDecrypt, string ContainerName, bool DoOAEPPadding)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider.\n            //Pass the CspParameters class to use the key \n            //from the key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Decrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.ToString());\n\n            return null;\n        }\n\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_System_Int32_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RSACryptoServiceProvider(Int32,CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class with the specified key size and parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dwKeySize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the key to use in bits.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameters to be passed to the cryptographic service provider (CSP).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The CSP cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The key cannot be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates or reuses a key container specified using the <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> field of the <code>parameters</code> parameter.  </p>\n<p> By default, this constructor creates an <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the <code>AT_KEYEXCHANGE</code> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p> You can create a <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair suitable for authenticating (digitally signed) messages or files by setting the <a class=\"xref\" href=\"system.security.cryptography.cspparameters#System_Security_Cryptography_CspParameters_KeyNumber\" data-linktype=\"relative-path\">KeyNumber</a> field of the <code>parameters</code> parameter to the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value. This type of key corresponds to the <code>AT_SIGNATURE</code> value used in CAPI.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object with the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specified and then create another <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object with the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specified, both keys will be placed in a single container if both objects specify the same key container name.  </p>\n<p> To create a key that is compatible with stong-name signing using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class, you must create a <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> key pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a>, generates a new key, and stores it in a key container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.ctor-int32-csp#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nvoid RSAPersistKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider to generate\n      //a new key pair.  Pass the CspParameters class to persist the \n      //key in the container.  Pass an intger of 2048 to specify the \n      //key-size.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( 2048,cspParams );\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key with a key-size of {0} was persisted in the container, \\&quot;{1}\\&quot;.&quot;, RSAalg-&gt;KeySize, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid RSADeleteKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of DSACryptoServiceProvider. \n      //Pass the CspParameters class to use the \n      //key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Delete the key entry in the container.\n      RSAalg-&gt;PersistKeyInCsp = false;\n      \n      //Call Clear to release resources and delete the key from the container.\n      RSAalg-&gt;Clear();\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\narray&lt;Byte&gt;^ RSAEncrypt( array&lt;Byte&gt;^DataToEncrypt, String^ ContainerName, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of DSACryptoServiceProvider.\n      //Pass the CspParameters class to use the key \n      //from the key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Encrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Encrypt( DataToEncrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\narray&lt;Byte&gt;^ RSADecrypt( array&lt;Byte&gt;^DataToDecrypt, String^ ContainerName, bool DoOAEPPadding )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of DSACryptoServiceProvider.\n      //Pass the CspParameters class to use the key \n      //from the key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Decrypt the passed byte array and specify OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      return RSAalg-&gt;Decrypt( DataToDecrypt, DoOAEPPadding );\n   }\n   //Catch and display a CryptographicException  \n   //to the console.\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      String^ KeyContainerName = &quot;MyKeyContainer&quot;;\n      \n      //Create a new key and persist it in \n      //the key container.\n      RSAPersistKeyInCSP( KeyContainerName );\n      \n      //Create a UnicodeEncoder to convert between byte array and string.\n      UnicodeEncoding^ ByteConverter = gcnew UnicodeEncoding;\n      \n      //Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^dataToEncrypt = ByteConverter-&gt;GetBytes( &quot;Data to Encrypt&quot; );\n      array&lt;Byte&gt;^encryptedData;\n      array&lt;Byte&gt;^decryptedData;\n      \n      //Pass the data to ENCRYPT, the name of the key container,\n      //and a boolean flag specifying no OAEP padding.\n      encryptedData = RSAEncrypt( dataToEncrypt, KeyContainerName, false );\n      \n      //Pass the data to DECRYPT, the name of the key container,\n      //and a boolean flag specifying no OAEP padding.\n      decryptedData = RSADecrypt( encryptedData, KeyContainerName, false );\n      \n      //Display the decrypted plaintext to the console. \n      Console::WriteLine( &quot;Decrypted plaintext: {0}&quot;, ByteConverter-&gt;GetString( decryptedData ) );\n      RSADeleteKeyInCSP( KeyContainerName );\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      \n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( &quot;Encryption failed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.ctor-int32-csp#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            string KeyContainerName = &quot;MyKeyContainer&quot;;\n\n            //Create a new key and persist it in \n            //the key container.\n            RSAPersistKeyInCSP(KeyContainerName);\n\n            //Create a UnicodeEncoder to convert between byte array and string.\n            UnicodeEncoding ByteConverter = new UnicodeEncoding();\n\n            //Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] dataToEncrypt = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;);\n            byte[] encryptedData;\n            byte[] decryptedData;\n\n            //Pass the data to ENCRYPT, the name of the key container,\n            //and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt,KeyContainerName, false);\n\n            //Pass the data to DECRYPT, the name of the key container,\n            //and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData,KeyContainerName, false);\n\n            //Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData));\n\n            RSADeleteKeyInCSP(KeyContainerName);\n        }\n        catch(ArgumentNullException)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;);\n\n        }\n    }\n\n    public static void RSAPersistKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider to generate\n            //a new key pair.  Pass the CspParameters class to persist the \n            //key in the container.  Pass an intger of 2048 to specify the \n            //key-size.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider( 2048, cspParams);\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key with a key-size of {0} was persisted in the container, \\&quot;{1}\\&quot;.&quot;, \n                              RSAalg.KeySize , ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    public static void RSADeleteKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of DSACryptoServiceProvider. \n            //Pass the CspParameters class to use the \n            //key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = false;\n\n            //Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear();\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    static public byte[] RSAEncrypt(byte[] DataToEncrypt, string ContainerName, bool DoOAEPPadding)\n    {\n        try\n        {\t\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of DSACryptoServiceProvider.\n            //Pass the CspParameters class to use the key \n            //from the key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Encrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n\n    }\n\n    static public byte[] RSADecrypt(byte[] DataToDecrypt, string ContainerName, bool DoOAEPPadding)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of DSACryptoServiceProvider.\n            //Pass the CspParameters class to use the key \n            //from the key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Decrypt the passed byte array and specify OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding);\n        }\n            //Catch and display a CryptographicException  \n            //to the console.\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.ToString());\n\n            return null;\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.ctor-int32-csp#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            Dim KeyContainerName As String = &quot;MyKeyContainer&quot;\n\n            &#39;Create a new key and persist it in \n            &#39;the key container.\n            RSAPersistKeyInCSP(KeyContainerName)\n\n            &#39;Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New UnicodeEncoding\n\n            &#39;Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim dataToEncrypt As Byte() = ByteConverter.GetBytes(&quot;Data to Encrypt&quot;)\n            Dim encryptedData() As Byte\n            Dim decryptedData() As Byte\n\n            &#39;Pass the data to ENCRYPT, the name of the key container, \n            &#39;and a boolean flag specifying no OAEP padding.\n            encryptedData = RSAEncrypt(dataToEncrypt, KeyContainerName, False)\n\n            &#39;Pass the data to DECRYPT, the name of the key container, \n            &#39;and a boolean flag specifying no OAEP padding.\n            decryptedData = RSADecrypt(encryptedData, KeyContainerName, False)\n\n            &#39;Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData))\n\n            RSADeleteKeyInCSP(KeyContainerName)\n        Catch e As ArgumentNullException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(&quot;Encryption failed.&quot;)\n        End Try\n    End Sub\n\n\n    Sub RSAPersistKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider to generate\n            &#39;a new key pair.  Pass the CspParameters class to persist the \n            &#39;key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(2048, cspParams)\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key with a key-size of {0} was persisted in the container, &quot;&quot;{1}&quot;&quot;.&quot;, _\n                              RSAalg.KeySize, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub RSADeleteKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider. \n            &#39;Pass the CspParameters class to use the \n            &#39;key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = False\n\n            &#39;Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear()\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, &quot;&quot;{0}&quot;&quot;.&quot;, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Function RSAEncrypt(ByVal DataToEncrypt() As Byte, ByVal ContainerName As String, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            &#39;Pass the CspParameters class to use the key \n            &#39;from the key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Encrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Encrypt(DataToEncrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function RSADecrypt(ByVal DataToDecrypt() As Byte, ByVal ContainerName As String, ByVal DoOAEPPadding As Boolean) As Byte()\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            &#39;Pass the CspParameters class to use the key \n            &#39;from the key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Decrypt the passed byte array and specify OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            Return RSAalg.Decrypt(DataToDecrypt, DoOAEPPadding)\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.ToString())\n\n            Return Nothing\n        End Try\n    End Function\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_CspKeyContainerInfo\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_CspKeyContainerInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CspKeyContainerInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object that describes additional information about a cryptographic key pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object that describes additional information about a cryptographic key pair.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.  The returned <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  </p>\n<p> In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object returned by the <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider#System_Security_Cryptography_DSACryptoServiceProvider_CspKeyContainerInfo_\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> property will throw a <a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a> if a key container has not been created.  To make sure that a key container has been created, call a method such as <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a>, <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a>, <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_SignData_\" data-linktype=\"relative-path\">SignData</a>, <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider#System_Security_Cryptography_DSACryptoServiceProvider_SignHash_\" data-linktype=\"relative-path\">SignHash</a>, and so on, before you call the <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider#System_Security_Cryptography_DSACryptoServiceProvider_CspKeyContainerInfo_\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_KeyExchangeAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_KeyExchangeAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyExchangeAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the key exchange algorithm available with this implementation of <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string KeyExchangeAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the key exchange algorithm if it exists; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates the name of the algorithm, not of the type. For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_KeySize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_KeySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size of the current key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int KeySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size of the key in bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  </p>\n<p> Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to Windows 8.1, and key sizes of 512 to 16384 bits for Windows 8.1. For more information, see <a href=\"http://msdn.microsoft.com/library/aa379941(v=vs.85).aspx\" data-linktype=\"external\">CryptGenKey</a> function in the Windows documentation.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_PersistKeyInCsp\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_PersistKeyInCsp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PersistKeyInCsp</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool PersistKeyInCsp { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key should be persisted in the CSP; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to persist a key in a key container.  </p>\n<p> The PersistKeyInCsp property is automatically set to <code>true</code> when you specify a key container name in the <a class=\"xref\" href=\"system.security.cryptography.cspparameters#System_Security_Cryptography_CspParameters_KeyContainerName\" data-linktype=\"relative-path\">KeyContainerName</a> field of a <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object and use it to initialize an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object by calling one of the constructors with a <code>parameters</code> parameter.  </p>\n<p> The PersistKeyInCsp property has no effect if the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object is created with a <code>null</code> key container name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object and persists the key to a key container.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.PersistKey#1\">using System;\nusing System.Security.Cryptography;\n\n\nclass RSACSPSample\n{\n\n    static void Main()\n    {\n\n        string KeyContainerName = &quot;MyKeyContainer&quot;;\n\n        //Create a new key and persist it in \n        //the key container.  \n        RSAPersistKeyInCSP(KeyContainerName);\n\n        //Delete the key from the key container.\n        RSADeleteKeyInCSP(KeyContainerName);\n    }\n\n    public static void RSAPersistKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider to generate\n            //a new key pair.  Pass the CspParameters class to persist the \n            //key in the container.  The PersistKeyInCsp property is true by \n            //default, allowing the key to be persisted. \n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was persisted in the container, \\&quot;{0}\\&quot;.&quot;, ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    public static void RSADeleteKeyInCSP(string ContainerName)\n    {\n        try\n        {\n            // Create a new instance of CspParameters.  Pass\n            // 13 to specify a DSA container or 1 to specify\n            // an RSA container.  The default is 1.\n            CspParameters cspParams = new CspParameters();\n\n            // Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName;\n\n            //Create a new instance of RSACryptoServiceProvider. \n            //Pass the CspParameters class to use the \n            //key in the container.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams);\n\n            //Explicitly set the PersistKeyInCsp property to false\n            //to delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = false;\n\n            //Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear();\n\n            //Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.PersistKey#1\">Imports System.Security.Cryptography\n\nModule RSACSPExample\n\n    Sub Main()\n\n        Dim KeyContainerName As String = &quot;MyKeyContainer&quot;\n\n        &#39;Create a new key and persist it in \n        &#39;the key container.  \n        RSAPersistKeyInCSP(KeyContainerName)\n\n        &#39;Delete the key from the key container.\n        RSADeleteKeyInCSP(KeyContainerName)\n    End Sub\n\n\n    Sub RSAPersistKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider to generate\n            &#39;a new key pair.  Pass the CspParameters class to persist the \n            &#39;key in the container.  The PersistKeyInCsp property is True by \n            &#39;default, allowing the key to be persisted. \n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was persisted in the container, &quot;&quot;{0}&quot;&quot;.&quot;, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub RSADeleteKeyInCSP(ByVal ContainerName As String)\n        Try\n            &#39; Create a new instance of CspParameters.  Pass\n            &#39; 13 to specify a DSA container or 1 to specify\n            &#39; an RSA container.  The default is 1.\n            Dim cspParams As New CspParameters\n\n            &#39; Specify the container name using the passed variable.\n            cspParams.KeyContainerName = ContainerName\n\n            &#39;Create a new instance of RSACryptoServiceProvider. \n            &#39;Pass the CspParameters class to use the \n            &#39;key in the container.\n            Dim RSAalg As New RSACryptoServiceProvider(cspParams)\n\n            &#39;Explicitly set the PersistKeyInCsp property to False\n            &#39;to delete the key entry in the container.\n            RSAalg.PersistKeyInCsp = False\n\n            &#39;Call Clear to release resources and delete the key from the container.\n            RSAalg.Clear()\n\n            &#39;Indicate that the key was persisted.\n            Console.WriteLine(&quot;The RSA key was deleted from the container, &quot;&quot;{0}&quot;&quot;.&quot;, ContainerName)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.PersistKey#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nvoid RSAPersistKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider to generate\n      //a new key pair.  Pass the CspParameters class to persist the \n      //key in the container.  The PersistKeyInCsp property is true by \n      //default, allowing the key to be persisted. \n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key was persisted in the container, \\&quot;{0}\\&quot;.&quot;, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid RSADeleteKeyInCSP( String^ ContainerName )\n{\n   try\n   {\n      \n      // Create a new instance of CspParameters.  Pass\n      // 13 to specify a DSA container or 1 to specify\n      // an RSA container.  The default is 1.\n      CspParameters^ cspParams = gcnew CspParameters;\n      \n      // Specify the container name using the passed variable.\n      cspParams-&gt;KeyContainerName = ContainerName;\n      \n      //Create a new instance of RSACryptoServiceProvider. \n      //Pass the CspParameters class to use the \n      //key in the container.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider( cspParams );\n      \n      //Explicitly set the PersistKeyInCsp property to false\n      //to delete the key entry in the container.\n      RSAalg-&gt;PersistKeyInCsp = false;\n      \n      //Call Clear to release resources and delete the key from the container.\n      RSAalg-&gt;Clear();\n      \n      //Indicate that the key was persisted.\n      Console::WriteLine( &quot;The RSA key was deleted from the container, \\&quot;{0}\\&quot;.&quot;, ContainerName );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   String^ KeyContainerName = &quot;MyKeyContainer&quot;;\n   \n   //Create a new key and persist it in \n   //the key container.  \n   RSAPersistKeyInCSP( KeyContainerName );\n   \n   //Delete the key from the key container.\n   RSADeleteKeyInCSP( KeyContainerName );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_PublicOnly\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_PublicOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PublicOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object contains only a public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool PublicOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object contains only a public key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class can be initialized either with a public key only or with both a public and private key.  Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignatureAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignatureAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the signature algorithm available with this implementation of <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string SignatureAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the signature algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is used in XML digital signature classes to indicate the algorithm URI. In this implementation, this property always returns <a href=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#rsa-sha1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_UseMachineKeyStore\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_UseMachineKeyStore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseMachineKeyStore</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the key should be persisted in the computer&#39;s key store instead of the user profile store.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool UseMachineKeyStore { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key should be persisted in the computer key store; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property to <code>true</code> is equivalent to passing the <a class=\"xref\" href=\"system.security.cryptography.cspproviderflags\" data-linktype=\"relative-path\">CspProviderFlags</a> flag to a <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object. The UseMachineKeyStore property applies to all code in the current application domain, whereas the <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded. Setting UseMachineKeyStore affects the key store location only if <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> is initialized with no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object and sets the static UseMachineKeyStore property to use the machine key store instead of the user profile key store.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.UseMachineKey#2\">using System;\nusing System.Security.Cryptography;\n\npublic class RSAKeyStoreSample\n{\n    public static void Main()\n    {\n        // Set the static UseMachineKeyStore property to use the machine key\n        // store instead of the user profile key store. All CSP instances not\n        // initialized with CspParameters will use this setting.\n        RSACryptoServiceProvider.UseMachineKeyStore = true;\n        try\n        {\n            // This CSP instance will use the Machine Store as set above and is\n            // initialized with no parameters.\n            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider())\n            {\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo);\n                RSAalg.PersistKeyInCsp = false;\n            }\n\n            CspParameters cspParams = new CspParameters();\n\n            cspParams.KeyContainerName = &quot;MyKeyContainer&quot;;\n\n            // This CSP instance will use the User Store since cspParams are used.\n            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams))\n            {\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo);\n                RSAalg.PersistKeyInCsp = false;\n            }\n\n            cspParams.Flags |= CspProviderFlags.UseMachineKeyStore;\n\n            // This CSP instance will use the Machine Store. Although cspParams are used,\n            // the cspParams.Flags is set to CspProviderFlags.UseMachineKeyStore.\n            using (RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider(cspParams))\n            {\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo);\n                RSAalg.PersistKeyInCsp = false;\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(&quot;Exception: {0}&quot;, e.GetType().FullName);\n            Console.WriteLine(e.Message);\n\n        }\n    }\n\n    public static void ShowContainerInfo(CspKeyContainerInfo containerInfo)\n    {\n        string keyStore;\n\n        Console.WriteLine();\n        if (containerInfo.MachineKeyStore)\n        {\n            keyStore = &quot;Machine Store&quot;;\n        }\n        else\n        {\n            keyStore = &quot;User Store&quot;;\n        }\n        Console.WriteLine(&quot;Key Store:     {0}&quot;, keyStore);\n        Console.WriteLine(&quot;Key Provider:  {0}&quot;, containerInfo.ProviderName);\n        Console.WriteLine(&quot;Key Container: \\&quot;{0}\\&quot;&quot;, containerInfo.KeyContainerName);\n        Console.WriteLine(&quot;Generated:     {0}&quot;, containerInfo.RandomlyGenerated);\n        Console.WriteLine(&quot;Key Nubmer:    {0}&quot;, containerInfo.KeyNumber);\n        Console.WriteLine(&quot;Removable Key: {0}&quot;, containerInfo.Removable);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.UseMachineKey#2\">using namespace System;\nusing namespace System::Security::Cryptography;\n\nref class RSAKeyStoreSample\n{\npublic:\n    static void Main()\n    {\n        // Set the static UseMachineKeyStore property to use the machine key\n        // store instead of the user profile key store. All CSP instances not\n        // initialized with CspParameters will use this setting.\n        RSACryptoServiceProvider::UseMachineKeyStore = true;\n        try\n        {\n            RSACryptoServiceProvider^ RSAalg;\n\n            // This CSP instance will use the Machine Store as set above and is\n            // initialized with no parameters.\n            RSAalg = gcnew RSACryptoServiceProvider();\n            ShowContainerInfo(RSAalg-&gt;CspKeyContainerInfo);\n            RSAalg-&gt;PersistKeyInCsp = false;\n            delete RSAalg;\n\n            CspParameters^ cspParams = gcnew CspParameters();\n\n            cspParams-&gt;KeyContainerName = &quot;MyKeyContainer&quot;;\n\n            // This CSP instance will use the User Store since cspParams are used.\n            RSAalg = gcnew RSACryptoServiceProvider(cspParams);\n            ShowContainerInfo(RSAalg-&gt;CspKeyContainerInfo);\n            RSAalg-&gt;PersistKeyInCsp = false;\n            delete RSAalg;\n\n            cspParams-&gt;Flags |= CspProviderFlags::UseMachineKeyStore;\n\n            // This CSP instance will use the Machine Store. Although cspParams are used,\n            // the cspParams.Flags is set to CspProviderFlags.UseMachineKeyStore.\n            RSAalg = gcnew RSACryptoServiceProvider(cspParams);\n            ShowContainerInfo(RSAalg-&gt;CspKeyContainerInfo);\n            RSAalg-&gt;PersistKeyInCsp = false;\n            delete RSAalg;\n        }\n        catch (CryptographicException^ e)\n        {\n            Console::WriteLine(&quot;Exception: {0}&quot;, e-&gt;GetType()-&gt;FullName);\n            Console::WriteLine(e-&gt;Message);\n        }\n    }\n\n    static void ShowContainerInfo(CspKeyContainerInfo^ containerInfo)\n    {\n        String^ keyStore;\n\n        Console::WriteLine();\n        if (containerInfo-&gt;MachineKeyStore)\n        {\n            keyStore = &quot;Machine Store&quot;;\n        }\n        else\n        {\n            keyStore = &quot;User Store&quot;;\n        }\n        Console::WriteLine(&quot;Key Store:     {0}&quot;, keyStore);\n        Console::WriteLine(&quot;Key Provider:  {0}&quot;, containerInfo-&gt;ProviderName);\n        Console::WriteLine(&quot;Key Container: \\&quot;{0}\\&quot;&quot;, containerInfo-&gt;KeyContainerName);\n        Console::WriteLine(&quot;Generated:     {0}&quot;, containerInfo-&gt;RandomlyGenerated);\n        Console::WriteLine(&quot;Key Nubmer:    {0}&quot;, containerInfo-&gt;KeyNumber);\n        Console::WriteLine(&quot;Removable Key: {0}&quot;, containerInfo-&gt;Removable);\n    }\n};\n\nint main()\n{\n    RSAKeyStoreSample::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.UseMachineKey#2\">Imports System\nImports System.Security.Cryptography\n\nPublic Class RSAKeyStoreSample\n    Public Shared Sub Main()\n        &#39; Set the static UseMachineKeyStore property to use the machine key\n        &#39; store instead of the user profile key store. All CSP instances not\n        &#39; initialized with CspParameters will use this setting.\n        RSACryptoServiceProvider.UseMachineKeyStore = True\n        Try\n            &#39; This CSP instance will use the Machine Store as set above and is\n            &#39; initialized with no parameters.\n            Using RSAalg As New RSACryptoServiceProvider()\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo)\n                RSAalg.PersistKeyInCsp = False\n            End Using\n\n            Dim cspParams As New CspParameters()\n\n            cspParams.KeyContainerName = &quot;MyKeyContainer&quot;\n\n            &#39; This CSP instance will use the User Store since cspParams are used.\n            Using RSAalg As New RSACryptoServiceProvider(cspParams)\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo)\n                RSAalg.PersistKeyInCsp = False\n            End Using\n\n            cspParams.Flags = cspParams.Flags Or CspProviderFlags.UseMachineKeyStore\n\n            &#39; This CSP instance will use the Machine Store. Although cspParams are used,\n            &#39; the cspParams.Flags is set to CspProviderFlags.UseMachineKeyStore.\n            Using RSAalg As New RSACryptoServiceProvider(cspParams)\n                ShowContainerInfo(RSAalg.CspKeyContainerInfo)\n                RSAalg.PersistKeyInCsp = False\n            End Using\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;Exception: {0}&quot;, e.GetType().FullName)\n            Console.WriteLine(e.Message)\n\n        End Try\n    End Sub\n\n    Public Shared Sub ShowContainerInfo(containerInfo As CspKeyContainerInfo)\n        Dim keyStore As String\n\n        Console.WriteLine()\n        If containerInfo.MachineKeyStore Then\n            keyStore = &quot;Machine Store&quot;\n        Else\n            keyStore = &quot;User Store&quot;\n        End If\n        Console.WriteLine(&quot;Key Store:     {0}&quot;, keyStore)\n        Console.WriteLine(&quot;Key Provider:  {0}&quot;, containerInfo.ProviderName)\n        Console.WriteLine(&quot;Key Container: &quot;&quot;{0}&quot;&quot;&quot;, containerInfo.KeyContainerName)\n        Console.WriteLine(&quot;Generated:     {0}&quot;, containerInfo.RandomlyGenerated)\n        Console.WriteLine(&quot;Key Nubmer:    {0}&quot;, containerInfo.KeyNumber)\n        Console.WriteLine(&quot;Removable Key: {0}&quot;, containerInfo.Removable)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_System_Byte___System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrypt(Byte[],Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Decrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Decrypt (byte[] rgb, bool fOAEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be decrypted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fOAEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform direct <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <code>false</code> to use PKCS#1 v1.5 padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The decrypted data, which is the original plain text before encryption.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The <code>fOAEP</code> parameter is <code>true</code> and the length of the <code>rgb</code> parameter is greater than <span class=\"xref\">stem.Security.Cryptography.RSACryptoServiceProvider.KeySize*</span>.  </p>\n<p> -or-  </p>\n<p> The <code>fOAEP</code> parameter is <code>true</code> and OAEP is not supported.  </p>\n<p> -or-  </p>\n<p> The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rgb </code>is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> to encrypt data for decryption with this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and decrypts data.  </p>\n<p> This example uses the <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> class; however, the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class may be preferable in large data operations. The encrypted value can be saved as an <code>nvarchar</code> data type in Microsoft SQL Server 2005.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.Decrypt#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n    static void Main()\n    {\n        try\n        {\n            //Create a UnicodeEncoder to convert between byte array and string.\n            ASCIIEncoding ByteConverter = new ASCIIEncoding();\n\n            string dataString = &quot;Data to Encrypt&quot;;\n\n            //Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] dataToEncrypt = ByteConverter.GetBytes(dataString);\n            byte[] encryptedData;\n            byte[] decryptedData;\n\n            //Create a new instance of the RSACryptoServiceProvider class \n            // and automatically create a new key-pair.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            //Display the origianl data to the console.\n            Console.WriteLine(&quot;Original Data: {0}&quot;, dataString);\n\n            //Encrypt the byte array and specify no OAEP padding.  \n            //OAEP padding is only available on Microsoft Windows XP or\n            //later.  \n            encryptedData = RSAalg.Encrypt(dataToEncrypt, false);\n\n            //Display the encrypted data to the console. \n            Console.WriteLine(&quot;Encrypted Data: {0}&quot;, ByteConverter.GetString(encryptedData));\n\n            //Pass the data to ENCRYPT and boolean flag specifying \n            //no OAEP padding.\n            decryptedData = RSAalg.Decrypt(encryptedData, false);\n\n            //Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData));\n        }\n        catch(CryptographicException e)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(e.Message);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.Decrypt#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   try\n   {\n      \n      //Create a UnicodeEncoder to convert between byte array and string.\n      ASCIIEncoding^ ByteConverter = gcnew ASCIIEncoding;\n      String^ dataString = &quot;Data to Encrypt&quot;;\n      \n      //Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^dataToEncrypt = ByteConverter-&gt;GetBytes( dataString );\n      array&lt;Byte&gt;^encryptedData;\n      array&lt;Byte&gt;^decryptedData;\n      \n      //Create a new instance of the RSACryptoServiceProvider class \n      // and automatically create a new key-pair.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      //Display the origianl data to the console.\n      Console::WriteLine( &quot;Original Data: {0}&quot;, dataString );\n      \n      //Encrypt the byte array and specify no OAEP padding.  \n      //OAEP padding is only available on Microsoft Windows XP or\n      //later.  \n      encryptedData = RSAalg-&gt;Encrypt( dataToEncrypt, false );\n      \n      //Display the encrypted data to the console. \n      Console::WriteLine( &quot;Encrypted Data: {0}&quot;, ByteConverter-&gt;GetString( encryptedData ) );\n      \n      //Pass the data to ENCRYPT and boolean flag specifying \n      //no OAEP padding.\n      decryptedData = RSAalg-&gt;Decrypt( encryptedData, false );\n      \n      //Display the decrypted plaintext to the console. \n      Console::WriteLine( &quot;Decrypted plaintext: {0}&quot;, ByteConverter-&gt;GetString( decryptedData ) );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      \n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.Decrypt#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            &#39;Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New ASCIIEncoding\n\n            Dim dataString As String = &quot;Data to Encrypt&quot;\n\n            &#39;Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim dataToEncrypt As Byte() = ByteConverter.GetBytes(dataString)\n            Dim encryptedData() As Byte\n            Dim decryptedData() As Byte\n\n            &#39;Create a new instance of the RSACryptoServiceProvider class \n            &#39; and automatically create a new key-pair.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39;Display the origianl data to the console.\n            Console.WriteLine(&quot;Original Data: {0}&quot;, dataString)\n\n            &#39;Encrypt the byte array and specify no OAEP padding.  \n            &#39;OAEP padding is only available on Microsoft Windows XP or\n            &#39;later.  \n            encryptedData = RSAalg.Encrypt(dataToEncrypt, False)\n\n            &#39;Display the encrypted data to the console. \n            Console.WriteLine(&quot;Encrypted Data: {0}&quot;, ByteConverter.GetString(encryptedData))\n\n            &#39;Pass the data to ENCRYPT and boolean flag specifying \n            &#39;no OAEP padding.\n            decryptedData = RSAalg.Decrypt(encryptedData, False)\n\n            &#39;Display the decrypted plaintext to the console. \n            Console.WriteLine(&quot;Decrypted plaintext: {0}&quot;, ByteConverter.GetString(decryptedData))\n        Catch e As CryptographicException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_System_Byte___System_Security_Cryptography_RSAEncryptionPadding_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrypt(Byte[],RSAEncryptionPadding)</div>        \r\n          </div>\r\n    \r\n            <p>Decrypts data that was previously encrypted with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm by using the specified padding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] Decrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to decrypt.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>padding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding\" data-linktype=\"relative-path\">RSAEncryptionPadding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The decrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>data</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>padding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The padding mode is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>padding</code> must be either <a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding#System_Security_Cryptography_RSAEncryptionPadding_Pkcs1_\" data-linktype=\"relative-path\">Pkcs1</a> or <a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding#System_Security_Cryptography_RSAEncryptionPadding_OaepSHA1_\" data-linktype=\"relative-path\">OaepSHA1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_DecryptValue_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_DecryptValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DecryptValue(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>This method is not supported in the current version.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] DecryptValue (byte[] rgb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be decrypted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The decrypted data, which is the original plain text before encryption.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported in the current version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_System_Byte___System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encrypt(Byte[],Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Encrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Encrypt (byte[] rgb, bool fOAEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be encrypted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fOAEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform direct <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, <code>false</code> to use PKCS#1 v1.5 padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The length of the <code>rgb</code> parameter is greater than the maximum allowed length.  </p>\n<p> -or-  </p>\n<p> The <code>fOAEP</code> parameter is <code>true</code> and OAEP padding is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rgb </code>is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of <code>rgb</code> allowed by the different combinations of operating systems and padding.  </p>\n<table>\n<thead>\n<tr>\n<th>Padding</th>\n<th>Operating System Supported</th>\n<th>Maximum Length of rgb Parameter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OAEP padding (PKCS#1 v2)</td>\n<td>Windows XP or later.</td>\n<td>Modulus size -2 -2*hLen, where hLen is the size of the hash.</td>\n</tr>\n<tr>\n<td>Direct Encryption (PKCS#1 v1.5)</td>\n<td>Microsoft Windows 2000 or later with the high encryption pack installed.</td>\n<td>Modulus size - 11. (11 bytes is the minimum padding possible.)</td>\n</tr>\n<tr>\n<td>Direct Encryption and OAEP padding not supported</td>\n<td>Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.</td>\n<td>The maximum size allowed for a symmetric key.</td>\n</tr>\n</tbody>\n</table>\n<p> Use <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> to decrypt the results of this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example initializes an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object to the value of a public key (sent by another party), generates a session key using the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged\" data-linktype=\"relative-path\">RijndaelManaged</a> algorithm, and then encrypts the session key using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object.  Using this scheme, the session key could be sent back to the owner of the private RSA key and the two parties could use the session key to exchange encrypted data.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1\">using System;\nusing System.Security.Cryptography;\n\nclass RSACSPSample\n{\n\n\tstatic void Main()\n\t{\n\t\ttry\n\t\t{\t\t//initialze the byte arrays to the public key information.\n\t\t\tbyte[] PublicKey = {214,46,220,83,160,73,40,39,201,155,19,202,3,11,191,178,56,\n\t\t\t\t\t\t\t\t   74,90,36,248,103,18,144,170,163,145,87,54,61,34,220,222,\n\t\t\t\t\t\t\t\t   207,137,149,173,14,92,120,206,222,158,28,40,24,30,16,175,\n\t\t\t\t\t\t\t\t   108,128,35,230,118,40,121,113,125,216,130,11,24,90,48,194,\n\t\t\t\t\t\t\t\t   240,105,44,76,34,57,249,228,125,80,38,9,136,29,117,207,139,\n\t\t\t\t\t\t\t\t   168,181,85,137,126,10,126,242,120,247,121,8,100,12,201,171,\n\t\t\t\t\t\t\t\t   38,226,193,180,190,117,177,87,143,242,213,11,44,180,113,93,\n\t\t\t\t\t\t\t\t   106,99,179,68,175,211,164,116,64,148,226,254,172,147};\n\n\t\t\tbyte[] Exponent = {1,0,1};\n      \n\t\t\t//Values to store encrypted symmetric keys.\n\t\t\tbyte[] EncryptedSymmetricKey;\n\t\t\tbyte[] EncryptedSymmetricIV;\n\n\t\t\t//Create a new instance of RSACryptoServiceProvider.\n\t\t\tRSACryptoServiceProvider RSA = new RSACryptoServiceProvider();\n\n\t\t\t//Create a new instance of RSAParameters.\n\t\t\tRSAParameters RSAKeyInfo = new RSAParameters();\n\n\t\t\t//Set RSAKeyInfo to the public key values. \n\t\t\tRSAKeyInfo.Modulus = PublicKey;\n\t\t\tRSAKeyInfo.Exponent = Exponent;\n\n\t\t\t//Import key parameters into RSA.\n\t\t\tRSA.ImportParameters(RSAKeyInfo);\n\n\t\t\t//Create a new instance of the RijndaelManaged class.\n\t\t\tRijndaelManaged RM = new RijndaelManaged();\n\n\t\t\t//Encrypt the symmetric key and IV.\n\t\t\tEncryptedSymmetricKey = RSA.Encrypt(RM.Key, false);\n\t\t\tEncryptedSymmetricIV = RSA.Encrypt(RM.IV, false);\n\n\t\t\tConsole.WriteLine(&quot;RijndaelManaged Key and IV have been encrypted with RSACryptoServiceProvider.&quot;); \n\t\t\n\t\t}\n\t\t//Catch and display a CryptographicException  \n\t\t//to the console.\n\t\tcatch(CryptographicException e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nint main()\n{\n   try\n   {\n      \n      //initialze the Byte arrays to the public key information.\n      array&lt;Byte&gt;^PublicKey = {214,46,220,83,160,73,40,39,201,155,19,202,3,11,191,178,56,74,90,36,248,103,18,144,170,163,145,87,54,61,34,220,222,207,137,149,173,14,92,120,206,222,158,28,40,24,30,16,175,108,128,35,230,118,40,121,113,125,216,130,11,24,90,48,194,240,105,44,76,34,57,249,228,125,80,38,9,136,29,117,207,139,168,181,85,137,126,10,126,242,120,247,121,8,100,12,201,171,38,226,193,180,190,117,177,87,143,242,213,11,44,180,113,93,106,99,179,68,175,211,164,116,64,148,226,254,172,147};\n      array&lt;Byte&gt;^Exponent = {1,0,1};\n      \n      //Values to store encrypted symmetric keys.\n      array&lt;Byte&gt;^EncryptedSymmetricKey;\n      array&lt;Byte&gt;^EncryptedSymmetricIV;\n      \n      //Create a new instance of RSACryptoServiceProvider.\n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Create a new instance of RSAParameters.\n      RSAParameters RSAKeyInfo;\n      \n      //Set RSAKeyInfo to the public key values. \n      RSAKeyInfo.Modulus = PublicKey;\n      RSAKeyInfo.Exponent = Exponent;\n      \n      //Import key parameters into RSA.\n      RSA-&gt;ImportParameters( RSAKeyInfo );\n      \n      //Create a new instance of the RijndaelManaged class.\n      RijndaelManaged^ RM = gcnew RijndaelManaged;\n      \n      //Encrypt the symmetric key and IV.\n      EncryptedSymmetricKey = RSA-&gt;Encrypt( RM-&gt;Key, false );\n      EncryptedSymmetricIV = RSA-&gt;Encrypt( RM-&gt;IV, false );\n      Console::WriteLine( &quot;RijndaelManaged Key and IV have been encrypted with RSACryptoServiceProvider.&quot; );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      \n      //Catch and display a CryptographicException  \n      //to the console.\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1\">Imports System\nImports System.Security.Cryptography\n\nClass RSACSPSample\n\n    Shared Sub Main()\n        Try\n            &#39;initialze the byte arrays to the public key information.\n            Dim PublicKey As Byte() = {214, 46, 220, 83, 160, 73, 40, 39, 201, 155, 19, 202, 3, 11, 191, 178, 56, 74, 90, 36, 248, 103, 18, 144, 170, 163, 145, 87, 54, 61, 34, 220, 222, 207, 137, 149, 173, 14, 92, 120, 206, 222, 158, 28, 40, 24, 30, 16, 175, 108, 128, 35, 230, 118, 40, 121, 113, 125, 216, 130, 11, 24, 90, 48, 194, 240, 105, 44, 76, 34, 57, 249, 228, 125, 80, 38, 9, 136, 29, 117, 207, 139, 168, 181, 85, 137, 126, 10, 126, 242, 120, 247, 121, 8, 100, 12, 201, 171, 38, 226, 193, 180, 190, 117, 177, 87, 143, 242, 213, 11, 44, 180, 113, 93, 106, 99, 179, 68, 175, 211, 164, 116, 64, 148, 226, 254, 172, 147}\n\n            Dim Exponent As Byte() = {1, 0, 1}\n\n            &#39;Values to store encrypted symmetric keys.\n            Dim EncryptedSymmetricKey() As Byte\n            Dim EncryptedSymmetricIV() As Byte\n\n            &#39;Create a new instance of RSACryptoServiceProvider.\n            Dim RSA As New RSACryptoServiceProvider()\n\n            &#39;Create a new instance of RSAParameters.\n            Dim RSAKeyInfo As New RSAParameters()\n\n            &#39;Set RSAKeyInfo to the public key values. \n            RSAKeyInfo.Modulus = PublicKey\n            RSAKeyInfo.Exponent = Exponent\n\n            &#39;Import key parameters into RSA.\n            RSA.ImportParameters(RSAKeyInfo)\n\n            &#39;Create a new instance of the RijndaelManaged class.\n            Dim RM As New RijndaelManaged()\n\n            &#39;Encrypt the symmetric key and IV.\n            EncryptedSymmetricKey = RSA.Encrypt(RM.Key, False)\n            EncryptedSymmetricIV = RSA.Encrypt(RM.IV, False)\n\n            Console.WriteLine(&quot;RijndaelManaged Key and IV have been encrypted with RSACryptoServiceProvider.&quot;)\n\n            &#39;Catch and display a CryptographicException  \n            &#39;to the console.\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_System_Byte___System_Security_Cryptography_RSAEncryptionPadding_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_Encrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encrypt(Byte[],RSAEncryptionPadding)</div>        \r\n          </div>\r\n    \r\n            <p>Encrypts data with the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> algorithm using the specified padding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] Encrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to encrypt.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>padding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding\" data-linktype=\"relative-path\">RSAEncryptionPadding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>data</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>padding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The padding mode is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>padding</code> must be either <a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding#System_Security_Cryptography_RSAEncryptionPadding_Pkcs1_\" data-linktype=\"relative-path\">Pkcs1</a> or <a class=\"xref\" href=\"system.security.cryptography.rsaencryptionpadding#System_Security_Cryptography_RSAEncryptionPadding_OaepSHA1_\" data-linktype=\"relative-path\">OaepSHA1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_EncryptValue_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_EncryptValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptValue(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>This method is not supported in the current version.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] EncryptValue (byte[] rgb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be encrypted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported in the current version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_ExportCspBlob_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_ExportCspBlob_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExportCspBlob(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Exports a blob containing the key information associated with an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] ExportCspBlob (bool includePrivateParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includePrivateParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include the private key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the key information associated with an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExportCspBlob method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_ExportParameters_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_ExportParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExportParameters(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Exports the <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includePrivateParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include private parameters; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a></div>\r\n                  </div>\r\n                  <p>The parameters for <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key cannot be exported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example exports the key information created using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> into an <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1\">        try\n        {\n            //Create a new RSACryptoServiceProvider object.\n            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())\n            {\n\n\n                //Export the key information to an RSAParameters object.\n                //Pass false to export the public key information or pass\n                //true to export public and private key information.\n                RSAParameters RSAParams = RSA.ExportParameters(false);\n            }\n\n\n        }\n        catch (CryptographicException e)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(e.Message);\n\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1\">   try\n   {\n      //Create a new RSACryptoServiceProvider Object*.\n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Export the key information to an RSAParameters object.\n      //Pass false to export the public key information or pass\n      //true to export public and private key information.\n      RSAParameters RSAParams = RSA-&gt;ExportParameters( false );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1\">        Try\n\n            &#39;Create a new RSACryptoServiceProvider object. \n            Dim RSA As New RSACryptoServiceProvider()\n\n            &#39;Export the key information to an RSAParameters object.\n\t\t\t&#39;Pass false to export the public key information or pass\n\t\t\t&#39;true to export public and private key information.\n            Dim RSAParams As RSAParameters = RSA.ExportParameters(False)\n\n\n        Catch e As CryptographicException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(e.Message)\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_HashData_System_IO_Stream_System_Security_Cryptography_HashAlgorithmName_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_HashData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashData(Stream,HashAlgorithmName)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_HashData_System_Byte___System_Int32_System_Int32_System_Security_Cryptography_HashAlgorithmName_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_HashData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashData(Byte[],Int32,Int32,HashAlgorithmName)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_ImportCspBlob_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_ImportCspBlob_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImportCspBlob(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Imports a blob that represents RSA key information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ImportCspBlob (byte[] keyBlob);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyBlob</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that represents an RSA key blob.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImportCspBlob method initializes the key data of an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_ImportParameters_System_Security_Cryptography_RSAParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_ImportParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImportParameters(RSAParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Imports the specified <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void ImportParameters (System.Security.Cryptography.RSAParameters parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameters for <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The <code>parameters</code> parameter has missing fields.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example imports key information created from an <a class=\"xref\" href=\"system.security.cryptography.rsaparameters\" data-linktype=\"relative-path\">RSAParameters</a> object into an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1\">   try\n   {\n      //Create a new RSACryptoServiceProvider object. \n      RSACryptoServiceProvider^ RSA = gcnew RSACryptoServiceProvider;\n      \n      //Export the key information to an RSAParameters object.\n      //Pass false to export the public key information or pass\n      //true to export public and private key information.\n      RSAParameters RSAParams = RSA-&gt;ExportParameters( false );\n      \n      //Create another RSACryptoServiceProvider object.\n      RSACryptoServiceProvider^ RSA2 = gcnew RSACryptoServiceProvider;\n      \n      //Import the the key information from the other \n      //RSACryptoServiceProvider object.  \n      RSA2-&gt;ImportParameters( RSAParams );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      //Catch this exception in case the encryption did\n      //not succeed.\n      Console::WriteLine( e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1\">        try\n        {\n            //Create a new RSACryptoServiceProvider object. \n            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())\n            {\n                //Export the key information to an RSAParameters object.\n                //Pass false to export the public key information or pass\n                //true to export public and private key information.\n                RSAParameters RSAParams = RSA.ExportParameters(false);\n\n                //Create another RSACryptoServiceProvider object.\n                using (RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider())\n                {\n                //Import the the key information from the other \n                //RSACryptoServiceProvider object.  \n                RSA2.ImportParameters(RSAParams);\n                }\n            }\n\n\n        }\n        catch (CryptographicException e)\n        {\n            //Catch this exception in case the encryption did\n            //not succeed.\n            Console.WriteLine(e.Message);\n\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1\">        Try\n            &#39;Create a new RSACryptoServiceProvider object. \n            Using RSA As New RSACryptoServiceProvider()\n\n                &#39;Export the key information to an RSAParameters object.\n                &#39;Pass false to export the public key information or pass\n                &#39;true to export public and private key information.\n                Dim RSAParams As RSAParameters = RSA.ExportParameters(False)\n\n                &#39;Create another RSACryptoServiceProvider object.\n                Using RSA2 As New RSACryptoServiceProvider()\n\n                    &#39;Import the the key information from the other \n                    &#39;RSACryptoServiceProvider object.  \n                    RSA2.ImportParameters(RSAParams)\n                End Using\n            End Using\n\n        Catch e As CryptographicException\n            &#39;Catch this exception in case the encryption did\n            &#39;not succeed.\n            Console.WriteLine(e.Message)\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_Byte___System_Object_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignData(Byte[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SignData (byte[] buffer, object halg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input data for which to compute the hash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>halg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to create the hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature for the specified data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is not a valid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a digital signature that is verified using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_VerifyData_\" data-linktype=\"relative-path\">VerifyData</a> method.  </p>\n<p> The <code>halg</code> parameter can accept a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, a <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>, or a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example signs and verifies data.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.SignData2#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\narray&lt;Byte&gt;^ HashAndSignBytes( array&lt;Byte&gt;^DataToSign, RSAParameters Key )\n{\n   try\n   {\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.  \n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;SignData( DataToSign, gcnew SHA1CryptoServiceProvider );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nbool VerifySignedHash( array&lt;Byte&gt;^DataToVerify, array&lt;Byte&gt;^SignedData, RSAParameters Key )\n{\n   try\n   {\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;VerifyData( DataToVerify, gcnew SHA1CryptoServiceProvider, SignedData );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return false;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a UnicodeEncoder to convert between byte array and string.\n      ASCIIEncoding^ ByteConverter = gcnew ASCIIEncoding;\n      String^ dataString = &quot;Data to Sign&quot;;\n      \n      // Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^originalData = ByteConverter-&gt;GetBytes( dataString );\n      array&lt;Byte&gt;^signedData;\n      \n      // Create a new instance of the RSACryptoServiceProvider class \n      // and automatically create a new key-pair.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      // Export the key information to an RSAParameters object.\n      // You must pass true to export the private key for signing.\n      // However, you do not need to export the private key\n      // for verification.\n      RSAParameters Key = RSAalg-&gt;ExportParameters( true );\n      \n      // Hash and sign the data.\n      signedData = HashAndSignBytes( originalData, Key );\n      \n      // Verify the data and display the result to the \n      // console.\n      if ( VerifySignedHash( originalData, signedData, Key ) )\n      {\n         Console::WriteLine( &quot;The data was verified.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The data does not match the signature.&quot; );\n      }\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      Console::WriteLine( &quot;The data was not signed or verified&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.SignData2#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n    static void Main()\n    {\n        try\n        {\n            // Create a UnicodeEncoder to convert between byte array and string.\n            ASCIIEncoding ByteConverter = new ASCIIEncoding();\n\n            string dataString = &quot;Data to Sign&quot;;\n\n            // Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] originalData = ByteConverter.GetBytes(dataString);\n            byte[] signedData;\n\n            // Create a new instance of the RSACryptoServiceProvider class \n            // and automatically create a new key-pair.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            // Export the key information to an RSAParameters object.\n            // You must pass true to export the private key for signing.\n            // However, you do not need to export the private key\n            // for verification.\n            RSAParameters Key = RSAalg.ExportParameters(true);\n\n            // Hash and sign the data.\n            signedData = HashAndSignBytes(originalData, Key);\n\n            // Verify the data and display the result to the \n            // console.\n            if(VerifySignedHash(originalData, signedData, Key))\n            {\n                Console.WriteLine(&quot;The data was verified.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The data does not match the signature.&quot;);\n            }\n\n        }\n        catch(ArgumentNullException)\n        {\n            Console.WriteLine(&quot;The data was not signed or verified&quot;);\n\n        }\n    }\n    public static byte[] HashAndSignBytes(byte[] DataToSign, RSAParameters Key)\n    {\n        try\n        {   \n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.  \n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.SignData(DataToSign, new SHA1CryptoServiceProvider());\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n    }\n\n    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)\n    {\n        try\n        {\n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); \n\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return false;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.SignData2#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            &#39; Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New ASCIIEncoding\n\n            Dim dataString As String = &quot;Data to Sign&quot;\n\n            &#39; Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim originalData As Byte() = ByteConverter.GetBytes(dataString)\n            Dim signedData() As Byte\n\n            &#39; Create a new instance of the RSACryptoServiceProvider class \n            &#39; and automatically create a new key-pair.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39; Export the key information to an RSAParameters object.\n            &#39; You must pass true to export the private key for signing.\n            &#39; However, you do not need to export the private key\n            &#39; for verification.\n            Dim Key As RSAParameters = RSAalg.ExportParameters(True)\n\n            &#39; Hash and sign the data.\n            signedData = HashAndSignBytes(originalData, Key)\n\n            &#39; Verify the data and display the result to the \n            &#39; console.\n            If VerifySignedHash(originalData, signedData, Key) Then\n                Console.WriteLine(&quot;The data was verified.&quot;)\n            Else\n                Console.WriteLine(&quot;The data does not match the signature.&quot;)\n            End If\n\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;The data was not signed or verified.&quot;)\n        End Try\n    End Sub\n\n    Function HashAndSignBytes(ByVal DataToSign() As Byte, ByVal Key As RSAParameters) As Byte()\n        Try\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.  \n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.SignData(DataToSign, New SHA1CryptoServiceProvider)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function VerifySignedHash(ByVal DataToVerify() As Byte, ByVal SignedData() As Byte, ByVal Key As RSAParameters) As Boolean\n        Try\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.VerifyData(DataToVerify, New SHA1CryptoServiceProvider, SignedData)\n\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return False\n        End Try\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_IO_Stream_System_Object_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignData(Stream,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SignData (System.IO.Stream inputStream, object halg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input data for which to compute the hash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>halg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to create the hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature for the specified data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is not a valid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>halg</code> parameter can accept a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, a <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>, or a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example signs and verifies data.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.SignData3#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass RSACSPSample\n{\n    static void Main()\n    {\n        try\n        {\n            ASCIIEncoding ByteConverter = new ASCIIEncoding();\n\n            // Create some bytes to be signed.\n            byte[] dataBytes = ByteConverter.GetBytes(&quot;Here is some data to sign!&quot;);\n   \n            // Create a buffer for the memory stream.\n            byte[] buffer = new byte[dataBytes.Length];\n\n            // Create a MemoryStream.\n            MemoryStream mStream = new MemoryStream(buffer);\n\n            // Write the bytes to the stream and flush it.\n            mStream.Write(dataBytes, 0, dataBytes.Length);\n\n            mStream.Flush();\n\n            // Create a new instance of the RSACryptoServiceProvider class \n            // and automatically create a new key-pair.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            // Export the key information to an RSAParameters object.\n            // You must pass true to export the private key for signing.\n            // However, you do not need to export the private key\n            // for verification.\n            RSAParameters Key = RSAalg.ExportParameters(true);\n\n            // Hash and sign the data.\n            byte[] signedData = HashAndSignBytes(mStream, Key);\n           \n\n            // Verify the data and display the result to the \n            // console.\n            if(VerifySignedHash(dataBytes, signedData, Key))\n            {\n                Console.WriteLine(&quot;The data was verified.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The data does not match the signature.&quot;);\n            } \n            \n            // Close the MemoryStream.\n            mStream.Close();\n\n        }\n        catch(ArgumentNullException)\n        {\n            Console.WriteLine(&quot;The data was not signed or verified&quot;);\n\n        }\n    }\n    public static byte[] HashAndSignBytes(Stream DataStream, RSAParameters Key)\n    {\n        try\n        { \n            // Reset the current position in the stream to \n            // the beginning of the stream (0). RSACryptoServiceProvider\n            // can&#39;t verify the data unless the the stream position\n            // is set to the starting position of the data.\n            DataStream.Position = 0;\n\n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.  \n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.SignData(DataStream, new SHA1CryptoServiceProvider());\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n    }\n\n    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)\n    {\n        try\n        {\n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); \n\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return false;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.SignData3#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\narray&lt;Byte&gt;^ HashAndSignBytes( Stream^ DataStream, RSAParameters Key )\n{\n   try\n   {\n      \n      // Reset the current position in the stream to \n      // the beginning of the stream (0). RSACryptoServiceProvider\n      // can&#39;t verify the data unless the the stream position\n      // is set to the starting position of the data.\n      DataStream-&gt;Position = 0;\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.  \n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;SignData( DataStream, gcnew SHA1CryptoServiceProvider );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nbool VerifySignedHash( array&lt;Byte&gt;^DataToVerify, array&lt;Byte&gt;^SignedData, RSAParameters Key )\n{\n   try\n   {\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;VerifyData( DataToVerify, gcnew SHA1CryptoServiceProvider, SignedData );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return false;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      ASCIIEncoding^ ByteConverter = gcnew ASCIIEncoding;\n      \n      // Create some bytes to be signed.\n      array&lt;Byte&gt;^dataBytes = ByteConverter-&gt;GetBytes( &quot;Here is some data to sign!&quot; );\n      \n      // Create a buffer for the memory stream.\n      array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(dataBytes-&gt;Length);\n      \n      // Create a MemoryStream.\n      MemoryStream^ mStream = gcnew MemoryStream( buffer );\n      \n      // Write the bytes to the stream and flush it.\n      mStream-&gt;Write( dataBytes, 0, dataBytes-&gt;Length );\n      mStream-&gt;Flush();\n      \n      // Create a new instance of the RSACryptoServiceProvider class \n      // and automatically create a new key-pair.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      // Export the key information to an RSAParameters object.\n      // You must pass true to export the private key for signing.\n      // However, you do not need to export the private key\n      // for verification.\n      RSAParameters Key = RSAalg-&gt;ExportParameters( true );\n      \n      // Hash and sign the data.\n      array&lt;Byte&gt;^signedData = HashAndSignBytes( mStream, Key );\n      \n      // Verify the data and display the result to the \n      // console.\n      if ( VerifySignedHash( dataBytes, signedData, Key ) )\n      {\n         Console::WriteLine( &quot;The data was verified.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The data does not match the signature.&quot; );\n      }\n      \n      // Close the MemoryStream.\n      mStream-&gt;Close();\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      Console::WriteLine( &quot;The data was not signed or verified&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.SignData3#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            Dim ByteConverter As New ASCIIEncoding\n\n            &#39; Create some bytes to be signed.\n            Dim dataBytes As Byte() = ByteConverter.GetBytes(&quot;Here is some data to sign!&quot;)\n\n            &#39; Create a buffer for the memory stream.\n            &#39; VB automatically pads arrays with an extra \n            &#39; Digit of &quot;0&quot;.\n            &#39; RSACryptoServiceProvider will not verify\n            &#39; the buffer if the automatic padding is \n            &#39; present.  To remove the padding, decrement\n            &#39; the buffer length by 1.\n            Dim buffer(dataBytes.Length - 1) As Byte\n\n            &#39; Create a MemoryStream.\n            Dim mStream As New MemoryStream(buffer)\n\n            &#39; Write the bytes to the stream and flush it.\n            mStream.Write(dataBytes, 0, dataBytes.Length)\n\n            mStream.Flush()\n\n            &#39; Create a new instance of the RSACryptoServiceProvider class \n            &#39; and automatically create a new key-pair.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39; Export the key information to an RSAParameters object.\n            &#39; You must pass true to export the private key for signing.\n            &#39; However, you do not need to export the private key\n            &#39; for verification.\n            Dim Key As RSAParameters = RSAalg.ExportParameters(True)\n\n            &#39; Hash and sign the data.\n            Dim signedData As Byte() = HashAndSignBytes(mStream, Key)\n\n\n            &#39; Verify the data and display the result to the \n            &#39; console.\n            If VerifySignedHash(dataBytes, signedData, Key) Then\n                Console.WriteLine(&quot;The data was verified.&quot;)\n            Else\n                Console.WriteLine(&quot;The data does not match the signature.&quot;)\n            End If\n\n            &#39; Close the MemoryStream.\n            mStream.Close()\n\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;The data was not signed or verified&quot;)\n        End Try\n    End Sub \n\n    Function HashAndSignBytes(ByVal DataStream As Stream, ByVal Key As RSAParameters) As Byte()\n        Try\n            &#39; Reset the current position in the stream to \n            &#39; the beginning of the stream (0). RSACryptoServiceProvider\n            &#39; can&#39;t verify the data unless the the stream position\n            &#39; is set to the starting position of the data.\n            DataStream.Position = 0\n\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.  \n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.SignData(DataStream, New SHA1CryptoServiceProvider)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function \n\n\n    Function VerifySignedHash(ByVal DataToVerify() As Byte, ByVal SignedData() As Byte, ByVal Key As RSAParameters) As Boolean\n        Try\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.VerifyData(DataToVerify, New SHA1CryptoServiceProvider, SignedData)\n\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return False\n        End Try\n    End Function \nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_System_Byte___System_Int32_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignData(Byte[],Int32,Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SignData (byte[] buffer, int offset, int count, object halg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input data for which to compute the hash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the array from which to begin using data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the array to use as data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>halg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to create the hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature for the specified data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is not a valid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a digital signature that is verified using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_VerifyData_\" data-linktype=\"relative-path\">VerifyData</a> method.  </p>\n<p> The <code>halg</code> parameter can accept a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, a <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>, or a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>. The string value can be one of the following:  </p>\n<ul>\n<li><p>The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.  </p>\n</li>\n<li><p>The OID value. The OID must be one recognized by the Crypto API.  </p>\n<p>For example, you could use SignData(new byte[5], &quot;1.3.14.3.2.26&quot;) or SignData(new byte[5], &quot;sha1&quot;), or SignData(new byte[5], &quot;SHA1&quot;).</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example signs and verifies data.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RSACSP.SignData1#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\narray&lt;Byte&gt;^ HashAndSignBytes( array&lt;Byte&gt;^DataToSign, RSAParameters Key, int Index, int Length )\n{\n   try\n   {\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.  \n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;SignData( DataToSign, Index, Length, gcnew SHA1CryptoServiceProvider );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nbool VerifySignedHash( array&lt;Byte&gt;^DataToVerify, array&lt;Byte&gt;^SignedData, RSAParameters Key )\n{\n   try\n   {\n      \n      // Create a new instance of RSACryptoServiceProvider using the \n      // key from RSAParameters.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      RSAalg-&gt;ImportParameters( Key );\n      \n      // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n      // to specify the use of SHA1 for hashing.\n      return RSAalg-&gt;VerifyData( DataToVerify, gcnew SHA1CryptoServiceProvider, SignedData );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n      return false;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a UnicodeEncoder to convert between byte array and string.\n      ASCIIEncoding^ ByteConverter = gcnew ASCIIEncoding;\n      String^ dataString = &quot;Data to Sign&quot;;\n      \n      // Create byte arrays to hold original, encrypted, and decrypted data.\n      array&lt;Byte&gt;^originalData = ByteConverter-&gt;GetBytes( dataString );\n      array&lt;Byte&gt;^signedData;\n      array&lt;Byte&gt;^smallArray;\n      \n      // Create a new instance of the RSACryptoServiceProvider class \n      // and automatically create a new key-pair.\n      RSACryptoServiceProvider^ RSAalg = gcnew RSACryptoServiceProvider;\n      \n      // Export the key information to an RSAParameters object.\n      // You must pass true to export the private key for signing.\n      // However, you do not need to export the private key\n      // for verification.\n      RSAParameters Key = RSAalg-&gt;ExportParameters( true );\n      \n      // Hash and sign the data.  Start at the fifth offset\n      // only use data from the next 7 bytes.\n      signedData = HashAndSignBytes( originalData, Key, 5, 7 );\n      \n      // The previous method only signed one segment\n      // of the array.  Create a new array for verification\n      // that only holds the data that was actually signed.\n      //\n      // Initialize the array.\n      smallArray = gcnew array&lt;Byte&gt;(7);\n      \n      // Copy 7 bytes starting at the 5th index to \n      // the new array.\n      Array::Copy( originalData, 5, smallArray, 0, 7 );\n      \n      // Verify the data and display the result to the \n      // console.  \n      if ( VerifySignedHash( smallArray, signedData, Key ) )\n      {\n         Console::WriteLine( &quot;The data was verified.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The data does not match the signature.&quot; );\n      }\n   }\n   catch ( ArgumentNullException^ ) \n   {\n      Console::WriteLine( &quot;The data was not signed or verified&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RSACSP.SignData1#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass RSACSPSample\n{\n    static void Main()\n    {\n        try\n        {\n            // Create a UnicodeEncoder to convert between byte array and string.\n            ASCIIEncoding ByteConverter = new ASCIIEncoding();\n\n            string dataString = &quot;Data to Sign&quot;;\n\n            // Create byte arrays to hold original, encrypted, and decrypted data.\n            byte[] originalData = ByteConverter.GetBytes(dataString);\n            byte[] signedData;\n            byte[] smallArray;\n\n            // Create a new instance of the RSACryptoServiceProvider class \n            // and automatically create a new key-pair.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            // Export the key information to an RSAParameters object.\n            // You must pass true to export the private key for signing.\n            // However, you do not need to export the private key\n            // for verification.\n            RSAParameters Key = RSAalg.ExportParameters(true);\n\n            // Hash and sign the data.  Start at the fifth offset\n            // only use data from the next 7 bytes.\n            signedData = HashAndSignBytes(originalData, Key, 5, 7 );\n\n            // The previous method only signed one segment\n            // of the array.  Create a new array for verification\n            // that only holds the data that was actually signed.\n            //\n            // Initialize the array.\n            smallArray = new byte[7];\n            // Copy 7 bytes starting at the 5th index to \n            // the new array.\n            Array.Copy(originalData, 5 , smallArray, 0, 7); \n\n            // Verify the data and display the result to the \n            // console.  \n            if(VerifySignedHash(smallArray, signedData, Key))\n            {\n                Console.WriteLine(&quot;The data was verified.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The data does not match the signature.&quot;);\n            }\n\n        }\n        catch(ArgumentNullException)\n        {\n            Console.WriteLine(&quot;The data was not signed or verified&quot;);\n\n        }\n    }\n    public static byte[] HashAndSignBytes(byte[] DataToSign, RSAParameters Key, int Index, int Length)\n    {\n        try\n        {   \n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.  \n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.SignData(DataToSign,Index,Length, new SHA1CryptoServiceProvider());\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return null;\n        }\n    }\n\n    public static bool VerifySignedHash(byte[] DataToVerify, byte[] SignedData, RSAParameters Key)\n    {\n        try\n        {\n            // Create a new instance of RSACryptoServiceProvider using the \n            // key from RSAParameters.\n            RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();\n\n            RSAalg.ImportParameters(Key);\n\n            // Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            // to specify the use of SHA1 for hashing.\n            return RSAalg.VerifyData(DataToVerify, new SHA1CryptoServiceProvider(), SignedData); \n\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n            return false;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RSACSP.SignData1#1\">Imports System.Security.Cryptography\nImports System.Text\n\nModule RSACSPExample\n\n    Sub Main()\n        Try\n            &#39; Create a UnicodeEncoder to convert between byte array and string.\n            Dim ByteConverter As New ASCIIEncoding\n\n            Dim dataString As String = &quot;Data to Sign&quot;\n\n            &#39; Create byte arrays to hold original, encrypted, and decrypted data.\n            Dim originalData As Byte() = ByteConverter.GetBytes(dataString)\n            Dim signedData() As Byte\n            Dim smallArray() As Byte\n\n            &#39; Create a new instance of the RSACryptoServiceProvider class \n            &#39; and automatically create a new key-pair.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            &#39; Export the key information to an RSAParameters object.\n            &#39; You must pass true to export the private key for signing.\n            &#39; However, you do not need to export the private key\n            &#39; for verification.\n            Dim Key As RSAParameters = RSAalg.ExportParameters(True)\n\n            &#39; Hash and sign the data.  Start at the fifth offset\n            &#39; only use data from the next 7 bytes.\n            signedData = HashAndSignBytes(originalData, Key, 5, 7)\n\n            &#39; The previous function only signed one segment\n            &#39; of the array.  Create a new array for verification\n            &#39; that only holds the data that was actually signed.\n            &#39;\n            &#39; Initialize the array.\n            smallArray = New Byte(6) {}\n            &#39; Copy 7 bytes starting at the 5th index to \n            &#39; the new array.\n            Array.Copy(originalData, 5, smallArray, 0, 7)\n\n            &#39; Verify the data and display the result to the \n            &#39; console.  \n            If VerifySignedHash(smallArray, signedData, Key) Then\n                Console.WriteLine(&quot;The data was verified.&quot;)\n            Else\n                Console.WriteLine(&quot;The data does not match the signature.&quot;)\n            End If\n\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;The data was not signed or verified&quot;)\n        End Try\n    End Sub\n\n    Function HashAndSignBytes(ByVal DataToSign() As Byte, ByVal Key As RSAParameters, ByVal Index As Integer, ByVal Length As Integer) As Byte()\n        Try\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.  \n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.SignData(DataToSign, Index, Length, New SHA1CryptoServiceProvider)\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function VerifySignedHash(ByVal DataToVerify() As Byte, ByVal SignedData() As Byte, ByVal Key As RSAParameters) As Boolean\n        Try\n            &#39; Create a new instance of RSACryptoServiceProvider using the \n            &#39; key from RSAParameters.\n            Dim RSAalg As New RSACryptoServiceProvider\n\n            RSAalg.ImportParameters(Key)\n\n            &#39; Verify the data using the signature.  Pass a new instance of SHA1CryptoServiceProvider\n            &#39; to specify the use of SHA1 for hashing.\n            Return RSAalg.VerifyData(DataToVerify, New SHA1CryptoServiceProvider, SignedData)\n\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n\n            Return False\n        End Try\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignHash_System_Byte___System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignHash(Byte[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the signature for the specified hash value by encrypting it with the private key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SignHash (byte[] rgbHash, string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbHash</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash value of the data to be signed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm identifier (OID) used to create the hash value of the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature for the specified hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>rgbHash</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> There is no private key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a digital signature that is verified using the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_\" data-linktype=\"relative-path\">VerifyHash</a> method.  </p>\n<p> The valid hash algorithms are <a class=\"xref\" href=\"system.security.cryptography.sha1\" data-linktype=\"relative-path\">SHA1</a> and <a class=\"xref\" href=\"system.security.cryptography.md5\" data-linktype=\"relative-path\">MD5</a>. The algorithm identifier can be derived from the hash name by using the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig#System_Security_Cryptography_CryptoConfig_MapNameToOID_\" data-linktype=\"relative-path\">MapNameToOID</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts some data, creates a hash of the encrypted data, and then signs hash with a digital signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\nref class Sender\n{\nprivate:\n   RSAParameters rsaPubParams;\n   RSAParameters rsaPrivateParams;\n\npublic:\n   Sender()\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      \n      //Generate public and private key data.\n      rsaPrivateParams = rsaCSP-&gt;ExportParameters( true );\n      rsaPubParams = rsaCSP-&gt;ExportParameters( false );\n   }\n\n\n   property RSAParameters PublicParameters \n   {\n      RSAParameters get()\n      {\n         return rsaPubParams;\n      }\n\n   }\n\n   //Manually performs hash and then signs hashed value.\n   array&lt;Byte&gt;^ HashAndSign( array&lt;Byte&gt;^encrypted )\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      SHA1Managed^ hash = gcnew SHA1Managed;\n      array&lt;Byte&gt;^hashedData;\n      rsaCSP-&gt;ImportParameters( rsaPrivateParams );\n      hashedData = hash-&gt;ComputeHash( encrypted );\n      return rsaCSP-&gt;SignHash( hashedData, CryptoConfig::MapNameToOID( &quot;SHA1&quot; ) );\n   }\n\n\n   //Encrypts using only the public key data.\n   array&lt;Byte&gt;^ EncryptData( RSAParameters rsaParams, array&lt;Byte&gt;^toEncrypt )\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      rsaCSP-&gt;ImportParameters( rsaParams );\n      return rsaCSP-&gt;Encrypt( toEncrypt, false );\n   }\n\n};\n\nref class Receiver\n{\nprivate:\n   RSAParameters rsaPubParams;\n   RSAParameters rsaPrivateParams;\n\npublic:\n   Receiver()\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      \n      //Generate public and private key data.\n      rsaPrivateParams = rsaCSP-&gt;ExportParameters( true );\n      rsaPubParams = rsaCSP-&gt;ExportParameters( false );\n   }\n\n\n   property RSAParameters PublicParameters \n   {\n      RSAParameters get()\n      {\n         return rsaPubParams;\n      }\n\n   }\n\n   //Manually performs hash and then verifies hashed value.\n   bool VerifyHash( RSAParameters rsaParams, array&lt;Byte&gt;^signedData, array&lt;Byte&gt;^signature )\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      SHA1Managed^ hash = gcnew SHA1Managed;\n      array&lt;Byte&gt;^hashedData;\n      rsaCSP-&gt;ImportParameters( rsaParams );\n\t  bool dataOK = rsaCSP-&gt;VerifyData(signedData, CryptoConfig::MapNameToOID(&quot;SHA1&quot;), signature);\n      hashedData = hash-&gt;ComputeHash( signedData );\n      return rsaCSP-&gt;VerifyHash( hashedData, CryptoConfig::MapNameToOID( &quot;SHA1&quot; ), signature );\n   }\n\n\n   //Decrypt using the private key data.\n   void DecryptData( array&lt;Byte&gt;^encrypted )\n   {\n      array&lt;Byte&gt;^fromEncrypt;\n      String^ roundTrip;\n      ASCIIEncoding^ myAscii = gcnew ASCIIEncoding;\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      rsaCSP-&gt;ImportParameters( rsaPrivateParams );\n      fromEncrypt = rsaCSP-&gt;Decrypt( encrypted, false );\n      roundTrip = myAscii-&gt;GetString( fromEncrypt );\n      Console::WriteLine( &quot;RoundTrip: {0}&quot;, roundTrip );\n   }\n\n};\n\nint main()\n{\n   array&lt;Byte&gt;^toEncrypt;\n   array&lt;Byte&gt;^encrypted;\n   array&lt;Byte&gt;^signature;\n   \n   //Choose a small amount of data to encrypt.\n   String^ original = &quot;Hello&quot;;\n   ASCIIEncoding^ myAscii = gcnew ASCIIEncoding;\n   \n   //Create a sender and receiver.\n   Sender^ mySender = gcnew Sender;\n   Receiver^ myReceiver = gcnew Receiver;\n   \n   //Convert the data string to a byte array.\n   toEncrypt = myAscii-&gt;GetBytes( original );\n   \n   //Encrypt data using receiver&#39;s public key.\n   encrypted = mySender-&gt;EncryptData( myReceiver-&gt;PublicParameters, toEncrypt );\n   \n   //Hash the encrypted data and generate a signature on the hash\n   // using the sender&#39;s private key.\n   signature = mySender-&gt;HashAndSign( encrypted );\n   Console::WriteLine( &quot;Original: {0}&quot;, original );\n   \n   //Verify the signature is authentic using the sender&#39;s public key.\n   if ( myReceiver-&gt;VerifyHash( mySender-&gt;PublicParameters, encrypted, signature ) )\n   {\n      \n      //Decrypt the data using the receiver&#39;s private key.\n      myReceiver-&gt;DecryptData( encrypted );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Invalid signature&quot; );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1\">using System;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RSACryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            byte[] toEncrypt;\n            byte[] encrypted;\n            byte[] signature;\n            //Choose a small amount of data to encrypt.\n            string original = &quot;Hello&quot;;\n            ASCIIEncoding myAscii = new ASCIIEncoding();\n\n            //Create a sender and receiver.\n            Sender mySender = new Sender();\n            Receiver myReceiver = new Receiver();\n\n            //Convert the data string to a byte array.\n            toEncrypt = myAscii.GetBytes(original);\n\n            //Encrypt data using receiver&#39;s public key.\n            encrypted = mySender.EncryptData(myReceiver.PublicParameters, toEncrypt);\n\n            //Hash the encrypted data and generate a signature on the hash\n            // using the sender&#39;s private key.\n            signature = mySender.HashAndSign(encrypted);\n\n            Console.WriteLine(&quot;Original: {0}&quot;, original);\n\n            //Verify the signature is authentic using the sender&#39;s public key.\n            if (myReceiver.VerifyHash(mySender.PublicParameters, encrypted, signature))\n            {\n                //Decrypt the data using the receiver&#39;s private key.\n                myReceiver.DecryptData(encrypted);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Invalid signature&quot;);\n            }\n        }\n    }\n\n    class Sender\n    {\n        RSAParameters rsaPubParams;\n        RSAParameters rsaPrivateParams;\n\n        public Sender()\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n\n            //Generate public and private key data.\n            rsaPrivateParams = rsaCSP.ExportParameters(true);\n            rsaPubParams = rsaCSP.ExportParameters(false);\n        }\n\n        public RSAParameters PublicParameters\n        {\n            get\n            {\n                return rsaPubParams;\n            }\n        }\n\n        //Manually performs hash and then signs hashed value.\n        public byte[] HashAndSign(byte[] encrypted)\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n            SHA1Managed hash = new SHA1Managed();\n            byte[] hashedData;\n\n            rsaCSP.ImportParameters(rsaPrivateParams);\n\n            hashedData = hash.ComputeHash(encrypted);\n            return rsaCSP.SignHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;));\n        }\n\n        //Encrypts using only the public key data.\n        public byte[] EncryptData(RSAParameters rsaParams, byte[] toEncrypt)\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n\n            rsaCSP.ImportParameters(rsaParams);\n            return rsaCSP.Encrypt(toEncrypt, false);\n        }\n    }\n\n    class Receiver\n    {\n        RSAParameters rsaPubParams;\n        RSAParameters rsaPrivateParams;\n\n        public Receiver()\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n\n            //Generate public and private key data.\n            rsaPrivateParams = rsaCSP.ExportParameters(true);\n            rsaPubParams = rsaCSP.ExportParameters(false);\n        }\n\n        public RSAParameters PublicParameters\n        {\n            get\n            {\n                return rsaPubParams;\n            }\n        }\n\n        //Manually performs hash and then verifies hashed value.\n        public bool VerifyHash(RSAParameters rsaParams, byte[] signedData, byte[] signature)\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n            SHA1Managed hash = new SHA1Managed();\n            byte[] hashedData;\n\n            rsaCSP.ImportParameters(rsaParams);\n            bool dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n            hashedData = hash.ComputeHash(signedData);\n            return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n        }\n\n        //Decrypt using the private key data.\n        public void DecryptData(byte[] encrypted)\n        {\n            byte[] fromEncrypt;\n            string roundTrip;\n            ASCIIEncoding myAscii = new ASCIIEncoding();\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n\n            rsaCSP.ImportParameters(rsaPrivateParams);\n            fromEncrypt = rsaCSP.Decrypt(encrypted, false);\n            roundTrip = myAscii.GetString(fromEncrypt);\n\n            Console.WriteLine(&quot;RoundTrip: {0}&quot;, roundTrip);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1\">Imports System\nImports System.Text\nImports System.Security.Cryptography\n\nNamespace RSACryptoServiceProvider_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim toEncrypt() As Byte\n            Dim encrypted() As Byte\n            Dim signature() As Byte\n            &#39;Choose a small amount of data to encrypt.\n            Dim original As String = &quot;Hello&quot;\n            Dim myAscii As New ASCIIEncoding()\n\n            &#39;Create a sender and receiver.\n            Dim mySender As New Sender()\n            Dim myReceiver As New Receiver()\n\n            &#39;Convert the data string to a byte array.\n            toEncrypt = myAscii.GetBytes(original)\n\n            &#39;Encrypt data using receiver&#39;s public key.\n            encrypted = mySender.EncryptData(myReceiver.PublicParameters, toEncrypt)\n\n            &#39;Hash the encrypted data and generate a signature on the hash\n            &#39; using the sender&#39;s private key.\n            signature = mySender.HashAndSign(encrypted)\n\n            Console.WriteLine(&quot;Original: {0}&quot;, original)\n\n            &#39;Verify the signature is authentic using the sender&#39;s public key.\n            If myReceiver.VerifyHash(mySender.PublicParameters, encrypted, signature) Then\n                &#39;Decrypt the data using the receiver&#39;s private key.\n                myReceiver.DecryptData(encrypted)\n            Else\n                Console.WriteLine(&quot;Invalid signature&quot;)\n            End If\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n\n    Class Sender\n        Private rsaPubParams As RSAParameters\n        Private rsaPrivateParams As RSAParameters\n\n        Public Sub New()\n            Dim rsaCSP As New RSACryptoServiceProvider()\n\n            &#39;Generate public and private key data.\n            rsaPrivateParams = rsaCSP.ExportParameters(True)\n            rsaPubParams = rsaCSP.ExportParameters(False)\n        End Sub &#39;New\n\n        Public ReadOnly Property PublicParameters() As RSAParameters\n            Get\n                Return rsaPubParams\n            End Get\n        End Property\n\n        &#39;Manually performs hash and then signs hashed value.\n        Public Function HashAndSign(ByVal encrypted() As Byte) As Byte()\n            Dim rsaCSP As New RSACryptoServiceProvider()\n            Dim hash As New SHA1Managed()\n            Dim hashedData() As Byte\n\n            rsaCSP.ImportParameters(rsaPrivateParams)\n\n            hashedData = hash.ComputeHash(encrypted)\n            Return rsaCSP.SignHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;))\n        End Function &#39;HashAndSign\n\n        &#39;Encrypts using only the public key data.\n        Public Function EncryptData(ByVal rsaParams As RSAParameters, ByVal toEncrypt() As Byte) As Byte()\n            Dim rsaCSP As New RSACryptoServiceProvider()\n\n            rsaCSP.ImportParameters(rsaParams)\n            Return rsaCSP.Encrypt(toEncrypt, False)\n        End Function &#39;EncryptData\n    End Class &#39;Sender\n\n    Class Receiver\n        Private rsaPubParams As RSAParameters\n        Private rsaPrivateParams As RSAParameters\n\n        Public Sub New()\n            Dim rsaCSP As New RSACryptoServiceProvider()\n\n            &#39;Generate public and private key data.\n            rsaPrivateParams = rsaCSP.ExportParameters(True)\n            rsaPubParams = rsaCSP.ExportParameters(False)\n        End Sub &#39;New\n\n        Public ReadOnly Property PublicParameters() As RSAParameters\n            Get\n                Return rsaPubParams\n            End Get\n        End Property\n\n        &#39;Manually performs hash and then verifies hashed value.\n        Public Function VerifyHash(ByVal rsaParams As RSAParameters, ByVal signedData() As Byte, ByVal signature() As Byte) As Boolean\n            Dim rsaCSP As New RSACryptoServiceProvider()\n            Dim hash As New SHA1Managed()\n            Dim hashedData() As Byte\n            Dim dataOK As Boolean\n\n            rsaCSP.ImportParameters(rsaParams)\n            dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n            hashedData = hash.ComputeHash(signedData)\n            Return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n        End Function &#39;VerifyHash\n\n        &#39;Decrypt using the private key data.\n        Public Sub DecryptData(ByVal encrypted() As Byte)\n            Dim fromEncrypt() As Byte\n            Dim roundTrip As String\n            Dim myAscii As New ASCIIEncoding()\n            Dim rsaCSP As New RSACryptoServiceProvider()\n\n            rsaCSP.ImportParameters(rsaPrivateParams)\n            fromEncrypt = rsaCSP.Decrypt(encrypted, False)\n            roundTrip = myAscii.GetString(fromEncrypt)\n\n            Console.WriteLine(&quot;RoundTrip: {0}&quot;, roundTrip)\n        End Sub &#39;DecryptData\n    End Class &#39;Receiver\nEnd Namespace &#39;RSACryptoServiceProvider_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignHash_System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_SignHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] SignHash (byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hash</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash value of the data to be signed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm name used to create the hash value of the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>padding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsasignaturepadding\" data-linktype=\"relative-path\">RSASignaturePadding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature for the specified hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hashAlgorithm</code> is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hash</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>padding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p><code>padding</code> does not equal <span class=\"xref\">stem.Security.Cryptography.RSASignaturePadding.Pkcs1*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyData_System_Byte___System_Object_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerifyData(Byte[],Object,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool VerifyData (byte[] buffer, object halg, byte[] signature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data that was signed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>halg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the hash algorithm used to create the hash value of the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>signature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signature data to be verified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the signature is valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>halg</code> parameter is not a valid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method verifies the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> digital signature produced by the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_SignData_\" data-linktype=\"relative-path\">SignData</a> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  </p>\n<p> The <code>halg</code> parameter can accept a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, a <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>, or a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the VerifyData method to verify a signature. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_SignHash_\" data-linktype=\"relative-path\">SignHash</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">   bool VerifyHash( RSAParameters rsaParams, array&lt;Byte&gt;^signedData, array&lt;Byte&gt;^signature )\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      SHA1Managed^ hash = gcnew SHA1Managed;\n      array&lt;Byte&gt;^hashedData;\n      rsaCSP-&gt;ImportParameters( rsaParams );\n\t  bool dataOK = rsaCSP-&gt;VerifyData(signedData, CryptoConfig::MapNameToOID(&quot;SHA1&quot;), signature);\n      hashedData = hash-&gt;ComputeHash( signedData );\n      return rsaCSP-&gt;VerifyHash( hashedData, CryptoConfig::MapNameToOID( &quot;SHA1&quot; ), signature );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">        public bool VerifyHash(RSAParameters rsaParams, byte[] signedData, byte[] signature)\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n            SHA1Managed hash = new SHA1Managed();\n            byte[] hashedData;\n\n            rsaCSP.ImportParameters(rsaParams);\n            bool dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n            hashedData = hash.ComputeHash(signedData);\n            return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">        Public Function VerifyHash(ByVal rsaParams As RSAParameters, ByVal signedData() As Byte, ByVal signature() As Byte) As Boolean\n            Dim rsaCSP As New RSACryptoServiceProvider()\n            Dim hash As New SHA1Managed()\n            Dim hashedData() As Byte\n            Dim dataOK As Boolean\n\n            rsaCSP.ImportParameters(rsaParams)\n            dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n            hashedData = hash.ComputeHash(signedData)\n            Return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n        End Function &#39;VerifyHash\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_System_Byte___System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerifyHash(Byte[],String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbHash</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash value of the signed data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm identifier (OID) used to create the hash value of the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signature data to be verified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the signature is valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>rgbHash</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>rgbSignature</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The signature cannot be verified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method verifies the <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> digital signature produced by the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_SignHash_\" data-linktype=\"relative-path\">SignHash</a> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  </p>\n<p> The valid hash algorithms are <a class=\"xref\" href=\"system.security.cryptography.sha1\" data-linktype=\"relative-path\">SHA1</a> and <a class=\"xref\" href=\"system.security.cryptography.md5\" data-linktype=\"relative-path\">MD5</a>. The algorithm identifier can be derived from the hash name by using the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig#System_Security_Cryptography_CryptoConfig_MapNameToOID_\" data-linktype=\"relative-path\">MapNameToOID</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the VerifyHash method to verify a signature. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider#System_Security_Cryptography_RSACryptoServiceProvider_SignHash_\" data-linktype=\"relative-path\">SignHash</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">   bool VerifyHash( RSAParameters rsaParams, array&lt;Byte&gt;^signedData, array&lt;Byte&gt;^signature )\n   {\n      RSACryptoServiceProvider^ rsaCSP = gcnew RSACryptoServiceProvider;\n      SHA1Managed^ hash = gcnew SHA1Managed;\n      array&lt;Byte&gt;^hashedData;\n      rsaCSP-&gt;ImportParameters( rsaParams );\n\t  bool dataOK = rsaCSP-&gt;VerifyData(signedData, CryptoConfig::MapNameToOID(&quot;SHA1&quot;), signature);\n      hashedData = hash-&gt;ComputeHash( signedData );\n      return rsaCSP-&gt;VerifyHash( hashedData, CryptoConfig::MapNameToOID( &quot;SHA1&quot; ), signature );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">        public bool VerifyHash(RSAParameters rsaParams, byte[] signedData, byte[] signature)\n        {\n            RSACryptoServiceProvider rsaCSP = new RSACryptoServiceProvider();\n            SHA1Managed hash = new SHA1Managed();\n            byte[] hashedData;\n\n            rsaCSP.ImportParameters(rsaParams);\n            bool dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n            hashedData = hash.ComputeHash(signedData);\n            return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2\">        Public Function VerifyHash(ByVal rsaParams As RSAParameters, ByVal signedData() As Byte, ByVal signature() As Byte) As Boolean\n            Dim rsaCSP As New RSACryptoServiceProvider()\n            Dim hash As New SHA1Managed()\n            Dim hashedData() As Byte\n            Dim dataOK As Boolean\n\n            rsaCSP.ImportParameters(rsaParams)\n            dataOK = rsaCSP.VerifyData(signedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n            hashedData = hash.ComputeHash(signedData)\n            Return rsaCSP.VerifyHash(hashedData, CryptoConfig.MapNameToOID(&quot;SHA1&quot;), signature)\n        End Function &#39;VerifyHash\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_System_Byte___System_Byte___System_Security_Cryptography_HashAlgorithmName_System_Security_Cryptography_RSASignaturePadding_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RSACryptoServiceProvider_VerifyHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)</div>        \r\n          </div>\r\n    \r\n            <p>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool VerifyHash (byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hash</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash value of the signed data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>signature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signature data to be verified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm name used to create the hash value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>padding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.rsasignaturepadding\" data-linktype=\"relative-path\">RSASignaturePadding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The padding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the signature is valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hashAlgorithm</code> is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hash</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>padding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p><code>padding</code> does not equal <span class=\"xref\">stem.Security.Cryptography.RSASignaturePadding.Pkcs1*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RSACryptoServiceProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RSACryptoServiceProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.Decrypt\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.Encrypt\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.HashData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.SignData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.SignHash\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"cea9d286-7527-a510-96df-b94c2866b83b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Performs asymmetric encryption and decryption using the implementation of the  algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.RSACryptoServiceProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RSACryptoServiceProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RSACryptoServiceProvider.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.RSACryptoServiceProvider","System.Security.Cryptography.RSACryptoServiceProvider..ctor","System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo","System.Security.Cryptography.RSACryptoServiceProvider.Decrypt","System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue","System.Security.Cryptography.RSACryptoServiceProvider.Dispose","System.Security.Cryptography.RSACryptoServiceProvider.Encrypt","System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue","System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob","System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters","System.Security.Cryptography.RSACryptoServiceProvider.HashData","System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob","System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters","System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm","System.Security.Cryptography.RSACryptoServiceProvider.KeySize","System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp","System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly","System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm","System.Security.Cryptography.RSACryptoServiceProvider.SignData","System.Security.Cryptography.RSACryptoServiceProvider.SignHash","System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore","System.Security.Cryptography.RSACryptoServiceProvider.VerifyData","System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.RSACryptoServiceProvider","System::Security::Cryptography::RSACryptoServiceProvider","System.Security.Cryptography.RSACryptoServiceProvider.#ctor","System::Security::Cryptography::RSACryptoServiceProvider::#ctor","System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo","System::Security::Cryptography::RSACryptoServiceProvider::CspKeyContainerInfo","System.Security.Cryptography.RSACryptoServiceProvider.Decrypt","System::Security::Cryptography::RSACryptoServiceProvider::Decrypt","System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue","System::Security::Cryptography::RSACryptoServiceProvider::DecryptValue","System.Security.Cryptography.RSACryptoServiceProvider.Dispose","System::Security::Cryptography::RSACryptoServiceProvider::Dispose","System.Security.Cryptography.RSACryptoServiceProvider.Encrypt","System::Security::Cryptography::RSACryptoServiceProvider::Encrypt","System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue","System::Security::Cryptography::RSACryptoServiceProvider::EncryptValue","System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob","System::Security::Cryptography::RSACryptoServiceProvider::ExportCspBlob","System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters","System::Security::Cryptography::RSACryptoServiceProvider::ExportParameters","System.Security.Cryptography.RSACryptoServiceProvider.HashData","System::Security::Cryptography::RSACryptoServiceProvider::HashData","System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob","System::Security::Cryptography::RSACryptoServiceProvider::ImportCspBlob","System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters","System::Security::Cryptography::RSACryptoServiceProvider::ImportParameters","System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm","System::Security::Cryptography::RSACryptoServiceProvider::KeyExchangeAlgorithm","System.Security.Cryptography.RSACryptoServiceProvider.KeySize","System::Security::Cryptography::RSACryptoServiceProvider::KeySize","System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp","System::Security::Cryptography::RSACryptoServiceProvider::PersistKeyInCsp","System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly","System::Security::Cryptography::RSACryptoServiceProvider::PublicOnly","System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm","System::Security::Cryptography::RSACryptoServiceProvider::SignatureAlgorithm","System.Security.Cryptography.RSACryptoServiceProvider.SignData","System::Security::Cryptography::RSACryptoServiceProvider::SignData","System.Security.Cryptography.RSACryptoServiceProvider.SignHash","System::Security::Cryptography::RSACryptoServiceProvider::SignHash","System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore","System::Security::Cryptography::RSACryptoServiceProvider::UseMachineKeyStore","System.Security.Cryptography.RSACryptoServiceProvider.VerifyData","System::Security::Cryptography::RSACryptoServiceProvider::VerifyData","System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash","System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"cea9d286-7527-a510-96df-b94c2866b83b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RSACryptoServiceProvider class | Microsoft Docs","_op_ogTitle":"RSACryptoServiceProvider class","description":"Performs asymmetric encryption and decryption using the implementation of the  algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.RSACryptoServiceProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rsacryptoserviceprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rsacryptoserviceprovider","fileRelativePath":"System.Security.Cryptography.RSACryptoServiceProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}