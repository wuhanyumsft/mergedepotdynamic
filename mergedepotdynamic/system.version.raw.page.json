{"content":"    \r\n    <h1 id=\"System_Version\">\r\n      <span class=\"lang-csharp\">Version</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class Version : ICloneable, IComparable, IComparable&lt;Version&gt;, IEquatable&lt;Version&gt;</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Version</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Version numbers consist of two to four components: major, minor, build, and revision. The major and minor components are required; the build and revision components are optional, but the build component is required if the revision component is defined. All defined components must be integers greater than or equal to 0. The format of the version number is as follows (optional components are shown in square brackets ([ and ]):  </p>\n<p> <em>major</em>.<em>minor</em>[.<em>build</em>[.<em>revision</em>]]  </p>\n<p> The components are used by convention as follows:  </p>\n<ul>\n<li><p><em>Major</em>: Assemblies with the same name but different major versions are not interchangeable. A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed.  </p>\n</li>\n<li><p><em>Minor</em>: If the name and major version number on two assemblies are the same, but the minor version number is different, this indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product.  </p>\n</li>\n<li><p><em>Build</em>: A difference in build number represents a recompilation of the same source. Different build numbers might be used when the processor, platform, or compiler changes.  </p>\n</li>\n<li><p><em>Revision</em>: Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. A higher revision number might be used in a build that fixes a security hole in a previously released assembly.  </p>\n<p>Subsequent versions of an assembly that differ only by build or revision numbers are considered to be Hotfix updates of the prior version.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The value of Version properties that have not been explicitly assigned a value is undefined (-1).  </p>\n</div>\n<p> Starting with .NET Framework 2.0, the <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a> and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties enable you to identify a temporary version of your application that, for example, corrects a problem until you can release a permanent solution.  Furthermore, the Windows NT operating system uses the <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a> property to encode the service pack number.  </p>\n<h2 id=\"assigning-version-information-to-assemblies\">Assigning Version Information to Assemblies</h2>\n<p> Ordinarily, the Version class is not used to assign a version number to an assembly. Instead, the <a class=\"xref\" href=\"system.reflection.assemblyversionattribute\" data-linktype=\"relative-path\">AssemblyVersionAttribute</a> class is used to define an assembly&#39;s version, as illustrated by the example in this topic.  </p>\n<h2 id=\"retrieving-version-information\">Retrieving Version Information</h2>\n<p> Version objects are most frequently used to store version information about some system or application component (such as the operating system), the common language runtime, the current application&#39;s executable, or a particular assembly. The following examples illustrate some of the most common scenarios:  </p>\n<ul>\n<li><p>Retrieving the operating system version. The following example uses the <a class=\"xref\" href=\"system.operatingsystem#System_OperatingSystem_Version_\" data-linktype=\"relative-path\">Version</a> property to retrieve the version number of the operating system.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Version.Class#1\">      &#39; Get the operating system version.\n      Dim os As OperatingSystem = Environment.OSVersion\n      Dim ver As Version = os.Version\n      Console.WriteLine(&quot;Operating System: {0} ({1})&quot;, os.VersionString, ver.ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Version.Class#1\">      // Get the operating system version.\n      OperatingSystem os = Environment.OSVersion;\n      Version ver = os.Version;\n      Console.WriteLine(&quot;Operating System: {0} ({1})&quot;, os.VersionString, ver.ToString());\n</code></pre></li>\n<li><p>Retrieving the version of the common language runtime. The following example uses the <a class=\"xref\" href=\"system.environment#System_Environment_Version_\" data-linktype=\"relative-path\">Version</a> property to retrieve version information about the common language runtime.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Version.Class#2\">      &#39; Get the common language runtime version.\n      Dim ver As Version = Environment.Version\n      Console.WriteLine(&quot;CLR Version {0}&quot;, ver.ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Version.Class#2\">      // Get the common language runtime version.\n      Version ver = Environment.Version;\n      Console.WriteLine(&quot;CLR Version {0}&quot;, ver.ToString());\n</code></pre></li>\n<li><p>Retrieving the current application&#39;s assembly version. The following example uses the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetEntryAssembly_\" data-linktype=\"relative-path\">GetEntryAssembly</a> method to obtain a reference to an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that represents the application executable and then retrieves its assembly version number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Class#5\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get the version of the executing assembly (that is, this assembly).\n      Assembly assem = Assembly.GetEntryAssembly();\n      AssemblyName assemName = assem.GetName();\n      Version ver = assemName.Version;\n      Console.WriteLine(&quot;Application {0}, Version {1}&quot;, assemName.Name, ver.ToString());\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Class#5\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Get the version of the executing assembly (that is, this assembly).\n      Dim assem As Assembly = Assembly.GetEntryAssembly()\n      Dim assemName As AssemblyName = assem.GetName()\n      Dim ver As Version = assemName.Version\n      Console.WriteLine(&quot;Application {0}, Version {1}&quot;, assemName.Name, ver.ToString())\n   End Sub\nEnd Module\n</code></pre></li>\n<li><p>Retrieving the current assembly&#39;s assembly version. The following example uses the <a class=\"xref\" href=\"system.type#System_Type_Assembly_\" data-linktype=\"relative-path\">Assembly</a> property to obtain a reference to an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that represents the assembly that contains the application entry point, and then retrieves its version information.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Class#4\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get the version of the current assembly.\n      Assembly assem = typeof(Example).Assembly;\n      AssemblyName assemName = assem.GetName();\n      Version ver = assemName.Version;\n      Console.WriteLine(&quot;{0}, Version {1}&quot;, assemName.Name, ver.ToString());\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Class#4\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Get the version of the current assembly.\n      Dim assem As Assembly = GetType(Example).Assembly\n      Dim assemName As AssemblyName = assem.GetName()\n      Dim ver As Version = assemName.Version\n      Console.WriteLine(&quot;{0}, Version {1}&quot;, assemName.Name, ver.ToString())            VB\n   End Sub\nEnd Module\n</code></pre></li>\n<li><p>Retrieving the version of a specific assembly. The following example uses the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> method to obtain a reference to an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that has a particular file name, and then retrieves its version information. Note that several other methods also exist to instantiate an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object by file name or by strong name.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Class#3\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get the version of a specific assembly.\n      string filename = @&quot;.\\StringLibrary.dll&quot;;\n      Assembly assem = Assembly.ReflectionOnlyLoadFrom(filename);\n      AssemblyName assemName = assem.GetName();\n      Version ver = assemName.Version;\n      Console.WriteLine(&quot;{0}, Version {1}&quot;, assemName.Name, ver.ToString());\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Class#3\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Get the version of a specific assembly.\n      Dim filename As String = &quot;.\\StringLibrary.dll&quot;\n      Dim assem As Assembly = Assembly.ReflectionOnlyLoadFrom(filename)\n      Dim assemName As AssemblyName = assem.GetName()\n      Dim ver As Version = assemName.Version\n      Console.WriteLine(&quot;{0}, Version {1}&quot;, assemName.Name, ver.ToString())\n   End Sub\nEnd Module\n</code></pre></li>\n<li><p>Retrieving the Publish Version of a ClickOnce application. The following example uses the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentVersion_\" data-linktype=\"relative-path\">CurrentVersion</a> property to display an application&#39;s Publish Version. Note that its successful execution requires the example&#39;s application identity to be set. This is handled automatically by the Visual Studio Publish Wizard.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Class#7\">using System;\nusing System.Deployment.Application;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Version ver = ApplicationDeployment.CurrentDeployment.CurrentVersion;\n      Console.WriteLine(&quot;ClickOnce Publish Version: {0}&quot;, ver);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Class#7\">Imports System.Deployment.Application\n\nModule Example\n   Public Sub Main()\n      Dim ver As Version = ApplicationDeployment.CurrentDeployment.CurrentVersion\n      Console.WriteLine(&quot;ClickOnce Publish Version: {0}&quot;, ver)\n   End Sub\nEnd Module\n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p> The Publish Version of an application for ClickOnce deployment is completely independent of its assembly version.  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"comparing-version-objects\">Comparing Version Objects</h2>\n<p> You can use the <a class=\"xref\" href=\"system.version#System_Version_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to determine whether one Version object is earlier than, the same as, or later than a second Version object. The following example indicates that Version 2.1 is later than Version 2.0.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Version.Class.Comparing#1\">      Dim v1 As New Version(2,0)\n      Dim v2 As New Version(&quot;2.1&quot;)\n      Console.Write(&quot;Version {0} is &quot;, v1)\n      Select Case v1.CompareTo(v2)\n         Case 0\n            Console.Write(&quot;the same as&quot;)\n         Case 1\n            Console.Write(&quot;later than&quot;)\n         Case -1\n            Console.Write(&quot;earlier than&quot;)\n      End Select\n      Console.WriteLine(&quot; Version {0}.&quot;, v2)                  \n      &#39; The example displays the following output:\n      &#39;       Version 2.0 is earlier than Version 2.1.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Version.Class.Comparing#1\">      Version v1 = new Version(2, 0);\n      Version v2 = new Version(&quot;2.1&quot;);\n      Console.Write(&quot;Version {0} is &quot;, v1);\n      switch(v1.CompareTo(v2))\n      {\n         case 0:\n            Console.Write(&quot;the same as&quot;);\n            break;\n         case 1:\n            Console.Write(&quot;later than&quot;);\n            break;\n         case -1:\n            Console.Write(&quot;earlier than&quot;);\n            break;\n      }\n      Console.WriteLine(&quot; Version {0}.&quot;, v2);                  \n      // The example displays the following output:\n      //       Version 2.0 is earlier than Version 2.1.\n</code></pre><p> For two versions to be equal, the major, minor, build, and revision numbers of the first Version object must be identical to those of the second Version object. If the build or revision number of a Version object is undefined, that Version object is considered to be earlier than a Version object whose build or revision number is equal to zero. The following example illustrates this by comparing three Version objects that have undefined version components.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Class.Comparing#2\">using System;\n\nenum VersionTime {Earlier = -1, Same = 0, Later = 1 };\n\npublic class Example\n{\n   public static void Main()\n   {\n      Version v1 = new Version(1, 1);\n      Version v1a = new Version(&quot;1.1.0&quot;);\n      ShowRelationship(v1, v1a);\n      \n      Version v1b = new Version(1, 1, 0, 0);\n      ShowRelationship(v1b, v1a);\n   }\n\n   private static void ShowRelationship(Version v1, Version v2)\n   {\n      Console.WriteLine(&quot;Relationship of {0} to {1}: {2}&quot;, \n                        v1, v2, (VersionTime) v1.CompareTo(v2));       \n   }\n}\n// The example displays the following output:\n//       Relationship of 1.1 to 1.1.0: Earlier\n//       Relationship of 1.1.0.0 to 1.1.0: Later\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Class.Comparing#2\">Public Enum VersionTime\n   Earlier = -1\n   Same = 0\n   Later = 1\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim v1 As New Version(1, 1)\n      Dim v1a As New Version(&quot;1.1.0&quot;)\n      ShowRelationship(v1, v1a)\n      \n      Dim v1b As New Version(1, 1, 0, 0)\n      ShowRelationship(v1b, v1a)\n   End Sub\n\n   Private Sub ShowRelationship(v1 As Version, v2 As Version)\n      Console.WriteLine(&quot;Relationship of {0} to {1}: {2}&quot;, \n                        v1, v2, CType(v1.CompareTo(v2), VersionTime))       \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Relationship of 1.1 to 1.1.0: Earlier\n&#39;       Relationship of 1.1.0.0 to 1.1.0: Later\n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version__ctor\" data-linktype=\"self-bookmark\">Version()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version__ctor_System_String_\" data-linktype=\"self-bookmark\">Version(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version__ctor_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Version(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified major and minor values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version__ctor_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Version(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified major, minor, and build values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version__ctor_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Version(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class with the specified major, minor, build, and revision numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Build\" data-linktype=\"self-bookmark\">Build</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the build component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Major\" data-linktype=\"self-bookmark\">Major</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the major component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_MajorRevision\" data-linktype=\"self-bookmark\">MajorRevision</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the high 16 bits of the revision number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Minor\" data-linktype=\"self-bookmark\">Minor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the minor component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_MinorRevision\" data-linktype=\"self-bookmark\">MinorRevision</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the low 16 bits of the revision number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Revision\" data-linktype=\"self-bookmark\">Revision</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the revision component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object whose value is the same as the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to a specified object and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_CompareTo_System_Version_\" data-linktype=\"self-bookmark\">CompareTo(Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to a specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Equals_System_Version_\" data-linktype=\"self-bookmark\">Equals(Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object and a specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object represent the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a version number to an equivalent <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to its equivalent <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_ToString_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to its equivalent <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation. A specified count indicates the number of components to return.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_TryParse_System_String_System_Version__\" data-linktype=\"self-bookmark\">TryParse(String,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to convert the string representation of a version number to an equivalent <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_Equality_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_Equality(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_GreaterThan_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_GreaterThan(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is greater than the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_GreaterThanOrEqual_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_GreaterThanOrEqual(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is greater than or equal to the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_Inequality_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_Inequality(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_LessThan_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_LessThan(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is less than the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Version_op_LessThanOrEqual_System_Version_System_Version_\" data-linktype=\"self-bookmark\">op_LessThanOrEqual(Version,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is less than or equal to the second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Version__ctor\">\r\n    \r\n            <a id=\"System_Version__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object with the following property values.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a></td>\n<td>0</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a></td>\n<td>0</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a></td>\n<td>undefined (-1)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a></td>\n<td>undefined (-1)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Version__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version (string version);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character (&#39;.&#39;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>version</code> has fewer than two components or more than four components.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>version</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>A major, minor, build, or revision component is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>At least one component of <code>version</code> does not parse to an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>At least one component of <code>version</code> represents a number greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>version</code> parameter can contain only the components major, minor, build, and revision, in that order, and all separated by periods. There must be at least two components, and at most four. The first two components are assumed to be major and minor. The value of unspecified components is undefined.  </p>\n<p> The format of the version number is as follows. Optional components are shown in square brackets (&#39;[&#39; and &#39;]&#39;):  </p>\n<p> major.minor[.build[.revision]]  </p>\n<p> All defined components must be integers greater than or equal to 0. For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then <code>version</code> should be &quot;6.2.1.3&quot;.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version__ctor_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Version__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified major and minor values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version (int major, int minor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>major</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The major version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minor version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>major</code> or <code>minor</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object with the following property values.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a></td>\n<td><code>major</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a></td>\n<td><code>minor</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a></td>\n<td>undefined (-1)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a></td>\n<td>undefined (-1)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version__ctor_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Version__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class using the specified major, minor, and build values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version (int major, int minor, int build);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>major</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The major version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minor version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>build</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The build number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>major</code>, <code>minor</code>, or <code>build</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object with the following property values.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a></td>\n<td><code>major</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a></td>\n<td><code>minor</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a></td>\n<td><code>build</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a></td>\n<td>undefined (-1)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version__ctor_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Version__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class with the specified major, minor, build, and revision numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version (int major, int minor, int build, int revision);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>major</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The major version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minor version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>build</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The build number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>revision</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The revision number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>major</code>, <code>minor</code>, <code>build</code>, or <code>revision</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object with the following property values.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a></td>\n<td><code>major</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a></td>\n<td><code>minor</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a></td>\n<td><code>build</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a></td>\n<td><code>revision</code></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Version constructor, and <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Build\">\r\n    \r\n            <a id=\"System_Version_Build_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Build</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the build component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Build { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The build number, or -1 if the build number is undefined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if the version number is 6.2.1.3, the build number is 1. If the version number is 6.2, the build number is undefined.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, Build, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Major\">\r\n    \r\n            <a id=\"System_Version_Major_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Major</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the major component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Major { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The major version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if the version number is 6.2, the major version is 6.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_MajorRevision\">\r\n    \r\n            <a id=\"System_Version_MajorRevision_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MajorRevision</div>        \r\n          </div>\r\n    \r\n            <p>Gets the high 16 bits of the revision number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public short MajorRevision { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a> property to obtain the entire revision number, use the MajorRevision property to obtain the high 16 bits, and use the <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> property to obtain the low 16 bits.  </p>\n<p> Starting in the .NET Framework version 2.0, the Windows NT operating system uses the MajorRevision property to encode the service pack number.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and the <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, MajorRevision, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Minor\">\r\n    \r\n            <a id=\"System_Version_Minor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Minor</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the minor component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Minor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The minor version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if the version number is 6.2, the minor version is 2.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, Minor, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_MinorRevision\">\r\n    \r\n            <a id=\"System_Version_MinorRevision_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinorRevision</div>        \r\n          </div>\r\n    \r\n            <p>Gets the low 16 bits of the revision number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public short MinorRevision { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a> property to obtain the entire revision number, use the <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a> property to obtain the high 16 bits, and use the MinorRevision property to obtain the low 16 bits.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and the <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and MinorRevision properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Revision\">\r\n    \r\n            <a id=\"System_Version_Revision_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Revision</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the revision component of the version number for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Revision { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The revision number, or -1 if the revision number is undefined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if the version number is 6.2.1.3, the revision number is 3. If the version number is 6.2, the revision number is undefined.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, Revision, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Clone\">\r\n    \r\n            <a id=\"System_Version_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object whose value is the same as the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> whose values are a copy of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of the return value is important, cast the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> instance that is returned by this method to a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Version_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to a specified object and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object version);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative values of the two objects, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is a version before <code>version</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is the same version as <code>version</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is a version subsequent to <code>version</code>.<br>\n -or-<br>\n <code>version</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>version</code> is not of type <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The components of <code>Version</code> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component.  </p>\n<p> For example:  </p>\n<ul>\n<li><p>Version 1.1 is older than version 1.1.0  </p>\n</li>\n<li><p>Version 1.1 is older than version 1.1.1  </p>\n</li>\n<li><p>Version 1.1 is older than version 1.1.2.3  </p>\n</li>\n<li><p>Version 1.1.2 is older than version 1.1.2.4  </p>\n</li>\n<li><p>Version 1.2.5 is newer than version 1.2.3.4</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_CompareTo_System_Version_\">\r\n    \r\n            <a id=\"System_Version_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Version)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to a specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (Version value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to compare to the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative values of the two objects, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is a version before <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is the same version as <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is a version subsequent to <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface, and performs slightly better than the <a class=\"xref\" href=\"system.version#System_Version_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to unbox the <code>value</code> parameter.  </p>\n<p> The components of <code>Version</code> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component. For example:  </p>\n<ul>\n<li><p>Version 1.1 is older than version 1.1.0.  </p>\n</li>\n<li><p>Version 1.1 is older than version 1.1.1.  </p>\n</li>\n<li><p>Version 1.1 is older than version 1.1.2.3.  </p>\n</li>\n<li><p>Version 1.1.2 is older than version 1.1.2.4.  </p>\n</li>\n<li><p>Version 1.2.5 is newer than version 1.2.3.4.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates generic and nongeneric versions of the <code>CompareTo</code> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Version_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object and <code>obj</code> are both <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> objects, and every component of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object matches the corresponding component of <code>obj</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Equals_System_Version_\">\r\n    \r\n            <a id=\"System_Version_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Version)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object and a specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object represent the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (Version obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to compare to the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if every component of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object matches the corresponding component of the <code>obj</code> parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface, and performs slightly better than the <a class=\"xref\" href=\"system.version#System_Version_Equals_\" data-linktype=\"relative-path\">Equals</a> method because it does not have to unbox the <code>obj</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_GetHashCode\">\r\n    \r\n            <a id=\"System_Version_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.version#System_Version__ctor_\" data-linktype=\"relative-path\">Version</a> constructor, and <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a>, <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a>, <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a>, <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a>, <a class=\"xref\" href=\"system.version#System_Version_MajorRevision_\" data-linktype=\"relative-path\">MajorRevision</a>, and <a class=\"xref\" href=\"system.version#System_Version_MinorRevision_\" data-linktype=\"relative-path\">MinorRevision</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing namespace System;\n\nint main()\n{\n    String^ formatStandard = &quot;Standard version:<br>&quot; +\n        &quot; major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    String^ formatInterim = &quot;Interim version:<br>&quot; +\n        &quot; major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version^ standardVersion = gcnew Version(2, 4, 1128, 2);\n    Version^ interimVersion = gcnew Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console::WriteLine(formatStandard, standardVersion-&gt;Major, \n        standardVersion-&gt;Minor, standardVersion-&gt;Build, \n        standardVersion-&gt;Revision);\n    Console::WriteLine(formatInterim, interimVersion-&gt;Major,\n        interimVersion-&gt;Minor, interimVersion-&gt;Build, \n        interimVersion-&gt;MajorRevision, interimVersion-&gt;MinorRevision);\n};\n/*\nThis code example produces the following results:\n\nStandard version:\nmajor.minor.build.revision = 2.4.1128.2\nInterim version:\nmajor.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.version.revision#1\">&#39; This example demonstrates the Version.Revision,\n&#39; MajorRevision, and MinorRevision properties.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim fmtStd As String = &quot;Standard version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;\n        Dim fmtInt As String = &quot;Interim version:&quot; &amp; vbCrLf &amp; _\n                               &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;\n        \n        Dim std As New Version(2, 4, 1128, 2)\n        Dim interim As New Version(2, 4, 1128, (100 &lt;&lt; 16) + 2)\n        \n        Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision)\n        Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, _\n                          interim.MajorRevision, interim.MinorRevision)\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard version:\n&#39;  major.minor.build.revision = 2.4.1128.2\n&#39;Interim version:\n&#39;  major.minor.build.majRev/minRev = 2.4.1128.100/2\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.version.revision#1\">// This example demonstrates the Version.Revision,\n// MajorRevision, and MinorRevision properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n    string fmtStd = &quot;Standard version:<br>&quot; +\n                    &quot;  major.minor.build.revision = {0}.{1}.{2}.{3}&quot;;\n    string fmtInt = &quot;Interim version:<br>&quot; +\n                    &quot;  major.minor.build.majRev/minRev = {0}.{1}.{2}.{3}/{4}&quot;;\n\n    Version std = new Version(2, 4, 1128, 2);\n    Version interim = new Version(2, 4, 1128, (100 &lt;&lt; 16) + 2);\n\n    Console.WriteLine(fmtStd, std.Major, std.Minor, std.Build, std.Revision);\n    Console.WriteLine(fmtInt, interim.Major, interim.Minor, interim.Build, \n                              interim.MajorRevision, interim.MinorRevision);\n    }\n}\n/*\nThis code example produces the following results:\n\nStandard version:\n  major.minor.build.revision = 2.4.1128.2\nInterim version:\n  major.minor.build.majRev/minRev = 2.4.1128.100/2\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Version_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a version number to an equivalent <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Version Parse (string input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a version number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>An object that is equivalent to the version number specified in the <code>input</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has fewer than two or more than four version components.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>At least one component in <code>input</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>At least one component in <code>input</code> is not an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>At least one component in <code>input</code> represents a number that is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>input</code> parameter must have the following format:  </p>\n<pre><code>\nmajor.minor[.build[.revision]]\n</code></pre><p> where <em>major</em>, <em>minor</em>, <em>build</em>, and <em>revision</em> are the string representations of the version number&#39;s four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in the specified order, and must be separated by periods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Because the string representation of a version number must conform to a recognized pattern, applications should always use exception handling when calling the Parse method to parse user input. Alternatively, you can call the <a class=\"xref\" href=\"system.version#System_Version_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method to parse the string representation of a version number and return a value that indicates whether the parse operation succeeded.  </p>\n</div>\n<p> The Parse method is a convenience method; it is equivalent to calling the <a class=\"xref\" href=\"system.version#System_Version__ctor_System_String_\" data-linktype=\"relative-path\">Version(String)</a> constructor.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to parse a number of strings that contain version information.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.Parse#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;4.0&quot;;\n      ParseVersion(input);\n      \n      input = &quot;4.0.&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2.01702&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2.0702.119&quot;;\n      ParseVersion(input);\n      \n      input =  &quot;1.3.5.2150000000&quot;;\n      ParseVersion(input);\n   }\n   \n   private static void ParseVersion(string input)\n   {\n      try {\n         Version ver = Version.Parse(input);\n         Console.WriteLine(&quot;Converted &#39;{0} to {1}.&quot;, input, ver);\n      }\n      catch (ArgumentNullException) {\n         Console.WriteLine(&quot;Error: String to be parsed is null.&quot;);\n      }\n      catch (ArgumentOutOfRangeException) {\n         Console.WriteLine(&quot;Error: Negative value in &#39;{0}&#39;.&quot;, input);\n      }\n      catch (ArgumentException) {\n         Console.WriteLine(&quot;Error: Bad number of components in &#39;{0}&#39;.&quot;, \n                           input);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Error: Non-integer value in &#39;{0}&#39;.&quot;, input);\n      }\n      catch (OverflowException) {   \n         Console.WriteLine(&quot;Error: Number out of range in &#39;{0}&#39;.&quot;, input);                  \n      }   \n   }\n}\n// The example displays the following output:\n//       Converted &#39;4.0 to 4.0.\n//       Error: Non-integer value in &#39;4.0.&#39;.\n//       Converted &#39;1.1.2 to 1.1.2.\n//       Converted &#39;1.1.2.01702 to 1.1.2.1702.\n//       Error: Bad number of components in &#39;1.1.2.0702.119&#39;.\n//       Error: Number out of range in &#39;1.3.5.2150000000&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.Parse#1\">Module Example\n   Public Sub Main()\n      Dim input As String = &quot;4.0&quot;\n      ParseVersion(input)\n      \n      input = &quot;4.0.&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2.01702&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2.0702.119&quot;\n      ParseVersion(input)\n      \n      input =  &quot;1.3.5.2150000000&quot;\n      ParseVersion(input)\n   End Sub\n   \n   Private Sub ParseVersion(input As String)\n      Try\n         Dim ver As Version = Version.Parse(input)\n         Console.WriteLine(&quot;Converted &#39;{0} to {1}.&quot;, input, ver)\n      Catch e As ArgumentNullException\n         Console.WriteLine(&quot;Error: String to be parsed is null.&quot;)\n      Catch e As ArgumentOutOfRangeException\n         Console.WriteLine(&quot;Error: Negative value in &#39;{0}&#39;.&quot;, input)\n      Catch e As ArgumentException\n         Console.WriteLine(&quot;Error: Bad number of components in &#39;{0}&#39;.&quot;, \n                           input)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Error: Non-integer value in &#39;{0}&#39;.&quot;, input)\n      Catch e As OverflowException   \n         Console.WriteLine(&quot;Error: Number out of range in &#39;{0}&#39;.&quot;, input)                  \n      End Try   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;4.0 to 4.0.\n&#39;       Error: Non-integer value in &#39;4.0.&#39;.\n&#39;       Converted &#39;1.1.2 to 1.1.2.\n&#39;       Converted &#39;1.1.2.01702 to 1.1.2.1702.\n&#39;       Error: Bad number of components in &#39;1.1.2.0702.119&#39;.\n&#39;       Error: Number out of range in &#39;1.3.5.2150000000&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_ToString\">\r\n    \r\n            <a id=\"System_Version_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to its equivalent <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation of the values of the major, minor, build, and revision components of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, as depicted in the following format. Each component is separated by a period character (&#39;.&#39;). Square brackets (&#39;[&#39; and &#39;]&#39;) indicate a component that will not appear in the return value if the component is not defined:  </p>\n<p> major.minor[.build[.revision]]  </p>\n<p> For example, if you create a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object using the constructor <code>Version(1,1)</code>, the returned string is &quot;1.1&quot;. If you create a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object using the constructor <code>Version(1,3,4,2)</code>, the returned string is &quot;1.3.4.2&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_ToString_System_Int32_\">\r\n    \r\n            <a id=\"System_Version_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object to its equivalent <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation. A specified count indicates the number of components to return.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (int fieldCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of components to return. The <code>fieldCount</code> ranges from 0 to 4.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation of the values of the major, minor, build, and revision components of the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, each separated by a period character (&#39;.&#39;). The <code>fieldCount</code> parameter determines how many components are returned.  </p>\n <table><thead><tr><th> fieldCount<br>\n </th><th> Return Value<br>\n </th></tr></thead><tbody><tr><td> 0<br>\n </td><td> An empty string (&quot;&quot;).<br>\n </td></tr><tr><td> 1<br>\n </td><td> major<br>\n </td></tr><tr><td> 2<br>\n </td><td> major.minor<br>\n </td></tr><tr><td> 3<br>\n </td><td> major.minor.build<br>\n </td></tr><tr><td> 4<br>\n </td><td> major.minor.build.revision<br>\n </td></tr></tbody></table>  \n\n<p> For example, if you create <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object using the constructor <code>Version(1,3,5)</code>, <code>ToString(2)</code> returns &quot;1.3&quot; and <code>ToString(4)</code> throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fieldCount</code> is less than 0, or more than 4.  </p>\n<p> -or-  </p>\n<p> <code>fieldCount</code> is more than the number of components defined in the current <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_TryParse_System_String_System_Version__\">\r\n    \r\n            <a id=\"System_Version_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to convert the string representation of a version number to an equivalent <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string input, out Version result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a version number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> equivalent of the number that is contained in <code>input</code>, if the conversion succeeded, or a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object whose major and minor version numbers are 0 if the conversion failed. If <code>input</code> is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, <code>result</code> is <code>null</code> when the method returns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>input</code> parameter was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParse method is similar to the <a class=\"xref\" href=\"system.version#System_Version_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except that it does not throw an exception if the conversion fails. Instead, it returns <code>false</code> if <code>input</code> is null, has fewer than two or more than four components, has at least one component that is not an integer, has at least one component that is less than zero, or has at least one component that is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>.  </p>\n<p> For the parse operation to succeed, the <code>input</code> parameter must be in the following format:  </p>\n<pre><code>\nmajor.minor[.build[.revision]]\n</code></pre><p> where <em>major</em>, <em>minor</em>, <em>build</em>, and <em>revision</em> are the string representations of the version number&#39;s four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in order, and must be separated by periods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the TryParse method to parse a number of strings that contain version information.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Version.TryParse#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;4.0&quot;;\n      ParseVersion(input);\n      \n      input = &quot;4.0.&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2.01702&quot;;\n      ParseVersion(input);\n      \n      input = &quot;1.1.2.0702.119&quot;;\n      ParseVersion(input);\n      \n      input =  &quot;1.3.5.2150000000&quot;;\n      ParseVersion(input);\n   }\n   \n   private static void ParseVersion(string input)\n   {\n      Version ver = null;\n      if (Version.TryParse(input, out ver))\n         Console.WriteLine(&quot;Converted &#39;{0} to {1}.&quot;, input, ver);\n      else\n         Console.WriteLine(&quot;Unable to determine the version from &#39;{0}&#39;.&quot;,\n                           input);\n   }\n}\n// The example displays the following output:\n//       Converted &#39;4.0 to 4.0.\n//       Unable to determine the version from &#39;4.0.&#39;.\n//       Converted &#39;1.1.2 to 1.1.2.\n//       Converted &#39;1.1.2.01702 to 1.1.2.1702.\n//       Unable to determine the version from &#39;1.1.2.0702.119&#39;.\n//       Unable to determine the version from &#39;1.3.5.2150000000&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Version.TryParse#1\">Module Example\n   Public Sub Main()\n      Dim input As String = &quot;4.0&quot;\n      ParseVersion(input)\n      \n      input = &quot;4.0.&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2.01702&quot;\n      ParseVersion(input)\n      \n      input = &quot;1.1.2.0702.119&quot;\n      ParseVersion(input)\n      \n      input =  &quot;1.3.5.2150000000&quot;\n      ParseVersion(input)\n   End Sub\n   \n   Private Sub ParseVersion(input As String)\n      Dim ver As Version = Nothing\n      If Version.TryParse(input, ver) Then\n         Console.WriteLine(&quot;Converted &#39;{0} to {1}.&quot;, input, ver)\n      Else\n         Console.WriteLine(&quot;Unable to determine the version from &#39;{0}&#39;.&quot;,\n                           input)\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;4.0 to 4.0.\n&#39;       Unable to determine the version from &#39;4.0.&#39;.\n&#39;       Converted &#39;1.1.2 to 1.1.2.\n&#39;       Converted &#39;1.1.2.01702 to 1.1.2.1702.\n&#39;       Unable to determine the version from &#39;1.1.2.0702.119&#39;.\n&#39;       Unable to determine the version from &#39;1.3.5.2150000000&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_Equality_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> equals <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_GreaterThan_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThan(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is greater than the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThan (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> is greater than <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_GreaterThanOrEqual_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThanOrEqual(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is greater than or equal to the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThanOrEqual (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> is greater than or equal to <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_Inequality_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> does not equal <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_LessThan_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThan(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is less than the second specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThan (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> is less than <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>v1</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Version_op_LessThanOrEqual_System_Version_System_Version_\">\r\n    \r\n            <a id=\"System_Version_op_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThanOrEqual(Version,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the first specified <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object is less than or equal to the second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThanOrEqual (Version v1, Version v2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>v1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>v2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>v1</code> is less than or equal to <code>v2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>v1</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Version.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Version.yml\">\r\n<meta name=\"APIName\" content=\"System.Version\">\r\n<meta name=\"APIName\" content=\"System.Version..ctor\">\r\n<meta name=\"APIName\" content=\"System.Version.Build\">\r\n<meta name=\"APIName\" content=\"System.Version.Clone\">\r\n<meta name=\"APIName\" content=\"System.Version.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Version.Equals\">\r\n<meta name=\"APIName\" content=\"System.Version.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Version.Major\">\r\n<meta name=\"APIName\" content=\"System.Version.MajorRevision\">\r\n<meta name=\"APIName\" content=\"System.Version.Minor\">\r\n<meta name=\"APIName\" content=\"System.Version.MinorRevision\">\r\n<meta name=\"APIName\" content=\"System.Version.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Version.op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Version.op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Version.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Version.op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Version.op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Version.op_op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Version.Parse\">\r\n<meta name=\"APIName\" content=\"System.Version.Revision\">\r\n<meta name=\"APIName\" content=\"System.Version.ToString\">\r\n<meta name=\"APIName\" content=\"System.Version.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"83ee77d2-f3db-0fb7-20a7-2df6299c786d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Version.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Version\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Version.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Version.yml","open_to_public_contributors":true,"api_name":["System.Version","System.Version..ctor","System.Version.Build","System.Version.Clone","System.Version.CompareTo","System.Version.Equals","System.Version.GetHashCode","System.Version.Major","System.Version.MajorRevision","System.Version.Minor","System.Version.MinorRevision","System.Version.op_Equality","System.Version.op_op_Equality","System.Version.op_GreaterThan","System.Version.op_op_GreaterThan","System.Version.op_GreaterThanOrEqual","System.Version.op_op_GreaterThanOrEqual","System.Version.op_Inequality","System.Version.op_op_Inequality","System.Version.op_LessThan","System.Version.op_op_LessThan","System.Version.op_LessThanOrEqual","System.Version.op_op_LessThanOrEqual","System.Version.Parse","System.Version.Revision","System.Version.ToString","System.Version.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Version","System::Version","System.Version.#ctor","System::Version::#ctor","System.Version.Build","System::Version::Build","System.Version.Clone","System::Version::Clone","System.Version.CompareTo","System::Version::CompareTo","System.Version.Equals","System::Version::Equals","System.Version.GetHashCode","System::Version::GetHashCode","System.Version.Major","System::Version::Major","System.Version.MajorRevision","System::Version::MajorRevision","System.Version.Minor","System::Version::Minor","System.Version.MinorRevision","System::Version::MinorRevision","System.Version.op_Equality","System::Version::op_Equality","System.Version.op_GreaterThan","System::Version::op_GreaterThan","System.Version.op_GreaterThanOrEqual","System::Version::op_GreaterThanOrEqual","System.Version.op_Inequality","System::Version::op_Inequality","System.Version.op_LessThan","System::Version::op_LessThan","System.Version.op_LessThanOrEqual","System::Version::op_LessThanOrEqual","System.Version.Parse","System::Version::Parse","System.Version.Revision","System::Version::Revision","System.Version.ToString","System::Version::ToString","System.Version.TryParse","System::Version::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"83ee77d2-f3db-0fb7-20a7-2df6299c786d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Version.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Version.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Version class | Microsoft Docs","_op_ogTitle":"Version class","description":"Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Version","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.version","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.version","fileRelativePath":"System.Version.html"},"themesRelativePathToOutputRoot":"_themes/"}