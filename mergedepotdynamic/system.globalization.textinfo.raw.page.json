{"content":"    \r\n    <h1 id=\"System_Globalization_TextInfo\">\r\n      <span class=\"lang-csharp\">TextInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines text properties and behaviors, such as casing, that are specific to a writing system.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class TextInfo : ICloneable, System.Runtime.Serialization.IDeserializationCallback</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TextInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A writing system is the collection of scripts and orthographic rules required to represent a language as text. The TextInfo class represents a writing system.  </p>\n<p> The application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a> property to obtain the TextInfo object for a particular <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. If a security decision depends on a string comparison or a case-change operation, the application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a> property of the object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior of the operation is consistent regardless of the operating system culture settings.  </p>\n<h2 id=\"overrides\">Overrides</h2>\n<p> The user might use the regional and language options portion of Control Panel to override the values associated with the current culture of Windows. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is set to <code>true</code>, the property values of the objects returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a>, and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a> properties are also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ANSICodePage\" data-linktype=\"self-bookmark\">ANSICodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_CultureName\" data-linktype=\"self-bookmark\">CultureName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the culture associated with the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_EBCDICCodePage\" data-linktype=\"self-bookmark\">EBCDICCodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_IsRightToLeft\" data-linktype=\"self-bookmark\">IsRightToLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object represents a writing system where text flows from right to left.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_LCID\" data-linktype=\"self-bookmark\">LCID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture identifier for the culture associated with the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ListSeparator\" data-linktype=\"self-bookmark\">ListSeparator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string that separates items in a list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_MacCodePage\" data-linktype=\"self-bookmark\">MacCodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Macintosh code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_OEMCodePage\" data-linktype=\"self-bookmark\">OEMCodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new object that is a copy of the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object represents the same writing system as the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ReadOnly_System_Globalization_TextInfo_\" data-linktype=\"self-bookmark\">ReadOnly(TextInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only version of the specified <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToLower_System_Char_\" data-linktype=\"self-bookmark\">ToLower(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified character to lowercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToLower_System_String_\" data-linktype=\"self-bookmark\">ToLower(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string to lowercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToTitleCase_System_String_\" data-linktype=\"self-bookmark\">ToTitleCase(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToUpper_System_Char_\" data-linktype=\"self-bookmark\">ToUpper(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified character to uppercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_ToUpper_System_String_\" data-linktype=\"self-bookmark\">ToUpper(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string to uppercase.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_TextInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">IDeserializationCallback.OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the deserialization event when deserialization is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ANSICodePage\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ANSICodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ANSICodePage</div>        \r\n          </div>\r\n    \r\n            <p>Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ANSICodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The ANSI code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_CultureName\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_CultureName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the culture associated with the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CultureName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is created from a specific culture, and the CultureName property returns the name of that culture.  </p>\n<p> The CultureName property always reflects a specific culture rather than a neutral culture. If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> has a neutral culture as its value, then the corresponding CultureName has as its value an arbitrary specific culture that uses the same language. For example, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property returns &quot;en&quot; for the English neutral culture, but the corresponding CultureName property might return &quot;en-US&quot; for the English (United States) culture. If the<a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is associated with a specific culture instead of a neutral culture, the value of its CultureName property is always identical to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property value of its associated <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n<p> Similarly, the CultureName property never reflects a particular sort. It always corresponds to a default sort order. For example, the default sort order for Spanish (Spain) is the international sort order. If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> is es-ES_tradnl (Spanish with the traditional sort order) then the corresponding CultureName is es-ES (Spanish with the default international sort order).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_EBCDICCodePage\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_EBCDICCodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EBCDICCodePage</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int EBCDICCodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The EBCDIC code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_IsReadOnly\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the IsReadOnly property is <code>true</code>, the application cannot change any of the properties of the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_IsRightToLeft\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_IsRightToLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsRightToLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object represents a writing system where text flows from right to left.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsRightToLeft { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if text flows from right to left; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsRightToLeft property indicates the dominant direction of written text and the relative position of user interface elements such as buttons and scroll bars.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_LCID\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_LCID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LCID</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture identifier for the culture associated with the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LCID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A number that identifies the culture from which the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object was created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Certain predefined culture names and identifiers are used by this and other classes in the <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace, as well as the Windows API. The detailed culture information is defined in the <a href=\"http://msdn.microsoft.com/goglobal/bb896001.aspx\" data-linktype=\"external\">National Language Support (NLS) API Reference topic at the Go Global Developer Center</a>.  </p>\n<p> The LCID property always reflects a specific culture identifier instead of a neutral culture identifier. If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> is set to a neutral culture identifier, the corresponding LCID has as its value an arbitrary specific culture identifier that uses the same language. For example, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property returns 0x0009 for the English neutral culture, named &quot;en&quot;. However, the corresponding LCID property might return 0x0409 for the English (United States) culture, named en-US.  </p>\n<p> Similarly, the LCID property always corresponds to a default sort order, and never reflects a specific sort order. For example, the default sort order for Spanish (Spain) is the international sort order. If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> is set to &quot;0x040A&quot; (Spanish with the traditional sort order), the corresponding LCID value is &quot;0x0C0A&quot; (Spanish with the default international sort order).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ListSeparator\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ListSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListSeparator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string that separates items in a list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ListSeparator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that separates items in a list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_MacCodePage\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_MacCodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MacCodePage</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Macintosh code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MacCodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The Macintosh code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_OEMCodePage\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_OEMCodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OEMCodePage</div>        \r\n          </div>\r\n    \r\n            <p>Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int OEMCodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The OEM code page used by the writing system represented by the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_Clone\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new object that is a copy of the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A new instance of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the memberwise clone of the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The new memberwise clone is not read-only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Clone and <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.textinfo.clone#1\">// This example demonstrates the TextInfo.Clone() and\n// TextInfo.ReadOnly() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Get the TextInfo of a predefined culture that ships with \n// the .NET Framework.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n    TextInfo ti1 = ci.TextInfo;\n\n// Display whether the TextInfo is read-only or not.\n    DisplayReadOnly(&quot;1) The original TextInfo object&quot;, ti1);\n    Console.WriteLine();\n   \n// Create a clone of the original TextInfo and cast the clone to a TextInfo type.\n    Console.WriteLine(&quot;2a) Create a clone of the original TextInfo object...&quot;);\n    TextInfo ti2 = (TextInfo)ti1.Clone();\n\n// Display whether the clone is read-only.\n    DisplayReadOnly(&quot;2b) The TextInfo clone&quot;, ti2);\n\n// Set the ListSeparator property on the TextInfo clone.\n    Console.WriteLine(&quot;2c) The original value of the clone&#39;s ListSeparator &quot; +\n                      &quot;property is \\&quot;{0}\\&quot;.&quot;, ti2.ListSeparator);\n    ti2.ListSeparator = &quot;/&quot;;\n    Console.WriteLine(&quot;2d) The new value of the clone&#39;s ListSeparator &quot; +\n                      &quot;property is \\&quot;{0}\\&quot;.<br>&quot;, ti2.ListSeparator);\n\n// Create a read-only clone of the original TextInfo.\n    Console.WriteLine(&quot;3a) Create a read-only clone of the original TextInfo object...&quot;);\n    TextInfo ti3 = TextInfo.ReadOnly(ti1);\n\n// Display whether the read-only clone is actually read-only.\n    DisplayReadOnly(&quot;3b) The TextInfo clone&quot;, ti3);\n\n// Try to set the ListSeparator property of a read-only TextInfo object. Use the\n// IsReadOnly property again to determine whether to attempt the set operation. You \n// could use a try-catch block instead and catch an InvalidOperationException when\n// the set operation fails, but that programming technique is inefficient.\n    Console.WriteLine(&quot;3c) Try to set the read-only clone&#39;s LineSeparator &quot; +\n                      &quot;property.&quot;);\n    if (ti3.IsReadOnly == true)\n        {\n        Console.WriteLine(&quot;3d) The set operation is invalid.&quot;);\n        }\n    else\n        {\n        // This clause is not executed.\n        ti3.ListSeparator = &quot;/&quot;;\n        Console.WriteLine(&quot;3d) The new value of the clone&#39;s ListSeparator &quot; +\n                          &quot;property is \\&quot;{0}\\&quot;.<br>&quot;, ti2.ListSeparator);\n        }\n    }\n\n    private static void DisplayReadOnly(string caption, TextInfo ti)\n    {\n    Console.WriteLine(&quot;{0} is {1}read-only.&quot;, \n                      caption, ti.IsReadOnly ? &quot;&quot; : &quot;not &quot;);\n    }\n}\n\n/*\nThis code example produces the following results:\n\n1) The original TextInfo object is not read-only.\n\n2a) Create a clone of the original TextInfo object...\n2b) The TextInfo clone is not read-only.\n2c) The original value of the clone&#39;s ListSeparator property is &quot;,&quot;.\n2d) The new value of the clone&#39;s ListSeparator property is &quot;/&quot;.\n\n3a) Create a read-only clone of the original TextInfo object...\n3b) The TextInfo clone is read-only.\n3c) Try to set the read-only clone&#39;s LineSeparator property.\n3d) The set operation is invalid.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.textinfo.clone#1\">&#39; This example demonstrates the TextInfo.Clone() and\n&#39; TextInfo.ReadOnly() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        &#39; Get the TextInfo of a predefined culture that ships with \n        &#39; the .NET Framework.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        Dim ti1 As TextInfo = ci.TextInfo\n        \n        &#39; Display whether the TextInfo is read-only or not.\n        DisplayReadOnly(&quot;1) The original TextInfo object&quot;, ti1)\n        Console.WriteLine()\n        \n        &#39; Create a clone of the original TextInfo and cast the clone to a TextInfo type.\n        Console.WriteLine(&quot;2a) Create a clone of the original TextInfo object...&quot;)\n        Dim ti2 As TextInfo = CType(ti1.Clone(), TextInfo)\n        \n        &#39; Display whether the clone is read-only.\n        DisplayReadOnly(&quot;2b) The TextInfo clone&quot;, ti2)\n        \n        &#39; Set the ListSeparator property on the TextInfo clone.\n        Console.WriteLine(&quot;2c) The original value of the clone&#39;s ListSeparator &quot; &amp; _\n                          &quot;property is &quot;&quot;{0}&quot;&quot;.&quot;, ti2.ListSeparator)\n        ti2.ListSeparator = &quot;/&quot;\n        Console.WriteLine(&quot;2d) The new value of the clone&#39;s ListSeparator &quot; &amp; _ \n                          &quot;property is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ti2.ListSeparator)\n        \n        &#39; Create a read-only clone of the original TextInfo.\n        Console.WriteLine(&quot;3a) Create a read-only clone of the original TextInfo object...&quot;)\n        Dim ti3 As TextInfo = TextInfo.ReadOnly(ti1)\n        \n        &#39; Display whether the read-only clone is actually read-only.\n        DisplayReadOnly(&quot;3b) The TextInfo clone&quot;, ti3)\n        \n        &#39; Try to set the ListSeparator property of a read-only TextInfo object. Use the\n        &#39; IsReadOnly property again to determine whether to attempt the set operation. You \n        &#39; could use a try-catch block instead and catch an InvalidOperationException when\n        &#39; the set operation fails, but that programming technique is inefficient.\n        Console.WriteLine(&quot;3c) Try to set the read-only clone&#39;s LineSeparator property.&quot;)\n        If ti3.IsReadOnly = True Then\n            Console.WriteLine(&quot;3d) The set operation is invalid.&quot;)\n        Else\n            &#39; This clause is not executed.\n            ti3.ListSeparator = &quot;/&quot;\n            Console.WriteLine(&quot;3d) The new value of the clone&#39;s ListSeparator &quot; &amp; _ \n                              &quot;property is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ti2.ListSeparator)\n        End If\n    \n    End Sub &#39;Main\n    \n    Private Shared Sub DisplayReadOnly(ByVal caption As String, ByVal ti As TextInfo)\n        Dim middle As String\n        If ti.IsReadOnly = True Then\n            middle = &quot;&quot;\n        Else \n            middle = &quot;not &quot;\n        End If        \n        Console.WriteLine(&quot;{0} is {1}read-only.&quot;, caption, middle)\n    End Sub &#39;DisplayReadOnly\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;1) The original TextInfo object is not read-only.\n&#39;\n&#39;2a) Create a clone of the original TextInfo object...\n&#39;2b) The TextInfo clone is not read-only.\n&#39;2c) The original value of the clone&#39;s ListSeparator property is &quot;,&quot;.\n&#39;2d) The new value of the clone&#39;s ListSeparator property is &quot;/&quot;.\n&#39;\n&#39;3a) Create a read-only clone of the original TextInfo object...\n&#39;3b) The TextInfo clone is read-only.\n&#39;3c) Try to set the read-only clone&#39;s LineSeparator property.\n&#39;3d) The set operation is invalid.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object represents the same writing system as the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> represents the same writing system as the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ReadOnly_System_Globalization_TextInfo_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(TextInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only version of the specified <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.TextInfo ReadOnly (System.Globalization.TextInfo textInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object specified by the <code>textInfo</code> parameter, if <code>textInfo</code> is read-only.  </p>\n<p> -or-  </p>\n<p> A read-only memberwise clone of the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object specified by <code>textInfo</code>, if <code>textInfo</code> is not read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>textInfo</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_Clone_\" data-linktype=\"relative-path\">Clone</a> and ReadOnly methods.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.textinfo.clone#1\">// This example demonstrates the TextInfo.Clone() and\n// TextInfo.ReadOnly() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Get the TextInfo of a predefined culture that ships with \n// the .NET Framework.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n    TextInfo ti1 = ci.TextInfo;\n\n// Display whether the TextInfo is read-only or not.\n    DisplayReadOnly(&quot;1) The original TextInfo object&quot;, ti1);\n    Console.WriteLine();\n   \n// Create a clone of the original TextInfo and cast the clone to a TextInfo type.\n    Console.WriteLine(&quot;2a) Create a clone of the original TextInfo object...&quot;);\n    TextInfo ti2 = (TextInfo)ti1.Clone();\n\n// Display whether the clone is read-only.\n    DisplayReadOnly(&quot;2b) The TextInfo clone&quot;, ti2);\n\n// Set the ListSeparator property on the TextInfo clone.\n    Console.WriteLine(&quot;2c) The original value of the clone&#39;s ListSeparator &quot; +\n                      &quot;property is \\&quot;{0}\\&quot;.&quot;, ti2.ListSeparator);\n    ti2.ListSeparator = &quot;/&quot;;\n    Console.WriteLine(&quot;2d) The new value of the clone&#39;s ListSeparator &quot; +\n                      &quot;property is \\&quot;{0}\\&quot;.<br>&quot;, ti2.ListSeparator);\n\n// Create a read-only clone of the original TextInfo.\n    Console.WriteLine(&quot;3a) Create a read-only clone of the original TextInfo object...&quot;);\n    TextInfo ti3 = TextInfo.ReadOnly(ti1);\n\n// Display whether the read-only clone is actually read-only.\n    DisplayReadOnly(&quot;3b) The TextInfo clone&quot;, ti3);\n\n// Try to set the ListSeparator property of a read-only TextInfo object. Use the\n// IsReadOnly property again to determine whether to attempt the set operation. You \n// could use a try-catch block instead and catch an InvalidOperationException when\n// the set operation fails, but that programming technique is inefficient.\n    Console.WriteLine(&quot;3c) Try to set the read-only clone&#39;s LineSeparator &quot; +\n                      &quot;property.&quot;);\n    if (ti3.IsReadOnly == true)\n        {\n        Console.WriteLine(&quot;3d) The set operation is invalid.&quot;);\n        }\n    else\n        {\n        // This clause is not executed.\n        ti3.ListSeparator = &quot;/&quot;;\n        Console.WriteLine(&quot;3d) The new value of the clone&#39;s ListSeparator &quot; +\n                          &quot;property is \\&quot;{0}\\&quot;.<br>&quot;, ti2.ListSeparator);\n        }\n    }\n\n    private static void DisplayReadOnly(string caption, TextInfo ti)\n    {\n    Console.WriteLine(&quot;{0} is {1}read-only.&quot;, \n                      caption, ti.IsReadOnly ? &quot;&quot; : &quot;not &quot;);\n    }\n}\n\n/*\nThis code example produces the following results:\n\n1) The original TextInfo object is not read-only.\n\n2a) Create a clone of the original TextInfo object...\n2b) The TextInfo clone is not read-only.\n2c) The original value of the clone&#39;s ListSeparator property is &quot;,&quot;.\n2d) The new value of the clone&#39;s ListSeparator property is &quot;/&quot;.\n\n3a) Create a read-only clone of the original TextInfo object...\n3b) The TextInfo clone is read-only.\n3c) Try to set the read-only clone&#39;s LineSeparator property.\n3d) The set operation is invalid.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.textinfo.clone#1\">&#39; This example demonstrates the TextInfo.Clone() and\n&#39; TextInfo.ReadOnly() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        &#39; Get the TextInfo of a predefined culture that ships with \n        &#39; the .NET Framework.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        Dim ti1 As TextInfo = ci.TextInfo\n        \n        &#39; Display whether the TextInfo is read-only or not.\n        DisplayReadOnly(&quot;1) The original TextInfo object&quot;, ti1)\n        Console.WriteLine()\n        \n        &#39; Create a clone of the original TextInfo and cast the clone to a TextInfo type.\n        Console.WriteLine(&quot;2a) Create a clone of the original TextInfo object...&quot;)\n        Dim ti2 As TextInfo = CType(ti1.Clone(), TextInfo)\n        \n        &#39; Display whether the clone is read-only.\n        DisplayReadOnly(&quot;2b) The TextInfo clone&quot;, ti2)\n        \n        &#39; Set the ListSeparator property on the TextInfo clone.\n        Console.WriteLine(&quot;2c) The original value of the clone&#39;s ListSeparator &quot; &amp; _\n                          &quot;property is &quot;&quot;{0}&quot;&quot;.&quot;, ti2.ListSeparator)\n        ti2.ListSeparator = &quot;/&quot;\n        Console.WriteLine(&quot;2d) The new value of the clone&#39;s ListSeparator &quot; &amp; _ \n                          &quot;property is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ti2.ListSeparator)\n        \n        &#39; Create a read-only clone of the original TextInfo.\n        Console.WriteLine(&quot;3a) Create a read-only clone of the original TextInfo object...&quot;)\n        Dim ti3 As TextInfo = TextInfo.ReadOnly(ti1)\n        \n        &#39; Display whether the read-only clone is actually read-only.\n        DisplayReadOnly(&quot;3b) The TextInfo clone&quot;, ti3)\n        \n        &#39; Try to set the ListSeparator property of a read-only TextInfo object. Use the\n        &#39; IsReadOnly property again to determine whether to attempt the set operation. You \n        &#39; could use a try-catch block instead and catch an InvalidOperationException when\n        &#39; the set operation fails, but that programming technique is inefficient.\n        Console.WriteLine(&quot;3c) Try to set the read-only clone&#39;s LineSeparator property.&quot;)\n        If ti3.IsReadOnly = True Then\n            Console.WriteLine(&quot;3d) The set operation is invalid.&quot;)\n        Else\n            &#39; This clause is not executed.\n            ti3.ListSeparator = &quot;/&quot;\n            Console.WriteLine(&quot;3d) The new value of the clone&#39;s ListSeparator &quot; &amp; _ \n                              &quot;property is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ti2.ListSeparator)\n        End If\n    \n    End Sub &#39;Main\n    \n    Private Shared Sub DisplayReadOnly(ByVal caption As String, ByVal ti As TextInfo)\n        Dim middle As String\n        If ti.IsReadOnly = True Then\n            middle = &quot;&quot;\n        Else \n            middle = &quot;not &quot;\n        End If        \n        Console.WriteLine(&quot;{0} is {1}read-only.&quot;, caption, middle)\n    End Sub &#39;DisplayReadOnly\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;1) The original TextInfo object is not read-only.\n&#39;\n&#39;2a) Create a clone of the original TextInfo object...\n&#39;2b) The TextInfo clone is not read-only.\n&#39;2c) The original value of the clone&#39;s ListSeparator property is &quot;,&quot;.\n&#39;2d) The new value of the clone&#39;s ListSeparator property is &quot;/&quot;.\n&#39;\n&#39;3a) Create a read-only clone of the original TextInfo object...\n&#39;3b) The TextInfo clone is read-only.\n&#39;3c) Try to set the read-only clone&#39;s LineSeparator property.\n&#39;3d) The set operation is invalid.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToLower_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified character to lowercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char ToLower (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to convert to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The specified character converted to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  </p>\n<p> If a security decision depends on a string comparison or a case-change operation, the application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  </p>\n<p> For more information on cultures, see <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo_casing#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesTextInfo  {\n\n   public static void Main()  {\n\n      // Defines the string with mixed casing.\n      string myString = &quot;wAr aNd pEaCe&quot;;\n\n      // Creates a TextInfo based on the &quot;en-US&quot; culture.\n      TextInfo myTI = new CultureInfo(&quot;en-US&quot;,false).TextInfo;\n\n      // Changes a string to lowercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI.ToLower( myString ) );\n\n      // Changes a string to uppercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper( myString ) );\n\n      // Changes a string to titlecase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase( myString ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.TextInfo_casing#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the String* with mixed casing.\n   String^ myString = &quot;wAr aNd pEaCe&quot;;\n   \n   // Creates a TextInfo based on the S&quot;en-US&quot; culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   TextInfo^ myTI = MyCI-&gt;TextInfo;\n   \n   // Changes a String* to lowercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI-&gt;ToLower( myString ) );\n   \n   // Changes a String* to uppercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI-&gt;ToUpper( myString ) );\n   \n   // Changes a String* to titlecase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI-&gt;ToTitleCase( myString ) );\n}\n\n/*\nThis code produces the following output.\n\nS&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\nS&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\nS&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo_casing#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesTextInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the string with mixed casing.\n      Dim myString As String = &quot;wAr aNd pEaCe&quot;\n\n      &#39; Creates a TextInfo based on the &quot;en-US&quot; culture.\n      Dim myTI As TextInfo = New CultureInfo(&quot;en-US&quot;, False).TextInfo\n\n      &#39; Changes a string to lowercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to lowercase: {1}&quot;, myString, myTI.ToLower(myString))\n\n      &#39; Changes a string to uppercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper(myString))\n\n      &#39; Changes a string to titlecase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase(myString))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesTextInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&#39;&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&#39;&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToLower_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string to lowercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ToLower (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The specified string converted to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 &quot;Case Mappings,&quot; published by the Unicode Consortium (<a href=\"http://www.unicode.org\" data-linktype=\"external\">http://www.unicode.org</a>). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.  </p>\n<p> Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  </p>\n<p> If a security decision depends on a string comparison or a case-change operation, the application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  </p>\n<p> For more information on cultures, see <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo_casing#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesTextInfo  {\n\n   public static void Main()  {\n\n      // Defines the string with mixed casing.\n      string myString = &quot;wAr aNd pEaCe&quot;;\n\n      // Creates a TextInfo based on the &quot;en-US&quot; culture.\n      TextInfo myTI = new CultureInfo(&quot;en-US&quot;,false).TextInfo;\n\n      // Changes a string to lowercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI.ToLower( myString ) );\n\n      // Changes a string to uppercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper( myString ) );\n\n      // Changes a string to titlecase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase( myString ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.TextInfo_casing#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the String* with mixed casing.\n   String^ myString = &quot;wAr aNd pEaCe&quot;;\n   \n   // Creates a TextInfo based on the S&quot;en-US&quot; culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   TextInfo^ myTI = MyCI-&gt;TextInfo;\n   \n   // Changes a String* to lowercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI-&gt;ToLower( myString ) );\n   \n   // Changes a String* to uppercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI-&gt;ToUpper( myString ) );\n   \n   // Changes a String* to titlecase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI-&gt;ToTitleCase( myString ) );\n}\n\n/*\nThis code produces the following output.\n\nS&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\nS&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\nS&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo_casing#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesTextInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the string with mixed casing.\n      Dim myString As String = &quot;wAr aNd pEaCe&quot;\n\n      &#39; Creates a TextInfo based on the &quot;en-US&quot; culture.\n      Dim myTI As TextInfo = New CultureInfo(&quot;en-US&quot;, False).TextInfo\n\n      &#39; Changes a string to lowercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to lowercase: {1}&quot;, myString, myTI.ToLower(myString))\n\n      &#39; Changes a string to uppercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper(myString))\n\n      &#39; Changes a string to titlecase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase(myString))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesTextInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&#39;&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&#39;&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToString\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToTitleCase_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToTitleCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToTitleCase(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToTitleCase (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert to title case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The specified string converted to title case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Generally, title casing converts the first character of a word to uppercase and the rest of the characters to lowercase. However, this method does not currently provide proper casing to convert a word that is entirely uppercase, such as an acronym. The following table shows the way the method renders several strings.  </p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Language</th>\n<th>Expected result</th>\n<th>Actual result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>war and peace</td>\n<td>English</td>\n<td>War and Peace</td>\n<td>War And Peace</td>\n</tr>\n<tr>\n<td>Per anhalter durch die Galaxis</td>\n<td>German</td>\n<td>Per Anhalter durch die Galaxis</td>\n<td>Per Anhalter Durch Die Galaxis</td>\n</tr>\n<tr>\n<td>les naufragés d&#39;ythaq</td>\n<td>French</td>\n<td>Les Naufragés d&#39;Ythaq</td>\n<td>Les Naufragés D&#39;ythaq</td>\n</tr>\n</tbody>\n</table>\n<p> As illustrated above, the ToTitleCase method provides an arbitrary casing behavior which is not necessarily linguistically correct. A linguistically correct solution would require additional rules, and the current algorithm is somewhat simpler and faster. We reserve the right to make this API slower in the future.  </p>\n<p> The current implementation of the ToTitleCase method yields an output string that is the same length as the input string. However, this behavior is not guaranteed and could change in a future implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo_casing#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesTextInfo  {\n\n   public static void Main()  {\n\n      // Defines the string with mixed casing.\n      string myString = &quot;wAr aNd pEaCe&quot;;\n\n      // Creates a TextInfo based on the &quot;en-US&quot; culture.\n      TextInfo myTI = new CultureInfo(&quot;en-US&quot;,false).TextInfo;\n\n      // Changes a string to lowercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI.ToLower( myString ) );\n\n      // Changes a string to uppercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper( myString ) );\n\n      // Changes a string to titlecase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase( myString ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.TextInfo_casing#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the String* with mixed casing.\n   String^ myString = &quot;wAr aNd pEaCe&quot;;\n   \n   // Creates a TextInfo based on the S&quot;en-US&quot; culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   TextInfo^ myTI = MyCI-&gt;TextInfo;\n   \n   // Changes a String* to lowercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI-&gt;ToLower( myString ) );\n   \n   // Changes a String* to uppercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI-&gt;ToUpper( myString ) );\n   \n   // Changes a String* to titlecase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI-&gt;ToTitleCase( myString ) );\n}\n\n/*\nThis code produces the following output.\n\nS&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\nS&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\nS&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo_casing#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesTextInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the string with mixed casing.\n      Dim myString As String = &quot;wAr aNd pEaCe&quot;\n\n      &#39; Creates a TextInfo based on the &quot;en-US&quot; culture.\n      Dim myTI As TextInfo = New CultureInfo(&quot;en-US&quot;, False).TextInfo\n\n      &#39; Changes a string to lowercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to lowercase: {1}&quot;, myString, myTI.ToLower(myString))\n\n      &#39; Changes a string to uppercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper(myString))\n\n      &#39; Changes a string to titlecase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase(myString))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesTextInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&#39;&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&#39;&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n</code></pre><p> The following example passes each string in an array to the ToTitleCase method. The strings include proper title strings as well as acronyms. The strings are converted to title case by using the conventions of the en-US culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo.ToTitleCase#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;a tale of two cities&quot;, &quot;gROWL to the rescue&quot;,\n                          &quot;inside the US government&quot;, &quot;sports and MLB baseball&quot;,\n                          &quot;The Return of Sherlock Holmes&quot;, &quot;UNICEF and children&quot;};\n                                 \n      TextInfo ti = CultureInfo.CurrentCulture.TextInfo;\n      foreach (var value in values)\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, ti.ToTitleCase(value));\n   }\n}\n// The example displays the following output:\n//    a tale of two cities --&gt; A Tale Of Two Cities\n//    gROWL to the rescue --&gt; Growl To The Rescue\n//    inside the US government --&gt; Inside The US Government\n//    sports and MLB baseball --&gt; Sports And MLB Baseball\n//    The Return of Sherlock Holmes --&gt; The Return Of Sherlock Holmes\n//    UNICEF and children --&gt; UNICEF And Children\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo.ToTitleCase#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;a tale of two cities&quot;, &quot;gROWL to the rescue&quot;,\n                                 &quot;inside the US government&quot;, &quot;sports and MLB baseball&quot;,\n                                 &quot;The Return of Sherlock Holmes&quot;, &quot;UNICEF and children&quot;}\n                                 \n      Dim ti As TextInfo = CultureInfo.CurrentCulture.TextInfo\n      For Each value In values\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, ti.ToTitleCase(value))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    a tale of two cities --&gt; A Tale Of Two Cities\n&#39;    gROWL to the rescue --&gt; Growl To The Rescue\n&#39;    inside the US government --&gt; Inside The US Government\n&#39;    sports and MLB baseball --&gt; Sports And MLB Baseball\n&#39;    The Return of Sherlock Holmes --&gt; The Return Of Sherlock Holmes\n&#39;    UNICEF and children --&gt; UNICEF And Children\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToUpper_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified character to uppercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char ToUpper (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to convert to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The specified character converted to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  </p>\n<p> If a security decision depends on a string comparison or a case-change operation, the application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  </p>\n<p> For more information on cultures, see <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo_casing#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesTextInfo  {\n\n   public static void Main()  {\n\n      // Defines the string with mixed casing.\n      string myString = &quot;wAr aNd pEaCe&quot;;\n\n      // Creates a TextInfo based on the &quot;en-US&quot; culture.\n      TextInfo myTI = new CultureInfo(&quot;en-US&quot;,false).TextInfo;\n\n      // Changes a string to lowercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI.ToLower( myString ) );\n\n      // Changes a string to uppercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper( myString ) );\n\n      // Changes a string to titlecase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase( myString ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.TextInfo_casing#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the String* with mixed casing.\n   String^ myString = &quot;wAr aNd pEaCe&quot;;\n   \n   // Creates a TextInfo based on the S&quot;en-US&quot; culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   TextInfo^ myTI = MyCI-&gt;TextInfo;\n   \n   // Changes a String* to lowercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI-&gt;ToLower( myString ) );\n   \n   // Changes a String* to uppercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI-&gt;ToUpper( myString ) );\n   \n   // Changes a String* to titlecase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI-&gt;ToTitleCase( myString ) );\n}\n\n/*\nThis code produces the following output.\n\nS&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\nS&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\nS&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo_casing#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesTextInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the string with mixed casing.\n      Dim myString As String = &quot;wAr aNd pEaCe&quot;\n\n      &#39; Creates a TextInfo based on the &quot;en-US&quot; culture.\n      Dim myTI As TextInfo = New CultureInfo(&quot;en-US&quot;, False).TextInfo\n\n      &#39; Changes a string to lowercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to lowercase: {1}&quot;, myString, myTI.ToLower(myString))\n\n      &#39; Changes a string to uppercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper(myString))\n\n      &#39; Changes a string to titlecase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase(myString))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesTextInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&#39;&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&#39;&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_ToUpper_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string to uppercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ToUpper (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The specified string converted to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 &quot;Case Mappings,&quot; published by the Unicode Consortium (<a href=\"http://www.unicode.org\" data-linktype=\"external\">http://www.unicode.org</a>). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.  </p>\n<p> Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  </p>\n<p> If a security decision depends on a string comparison or a case-change operation, the application should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  </p>\n<p> For more information on cultures, see <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.TextInfo_casing#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesTextInfo  {\n\n   public static void Main()  {\n\n      // Defines the string with mixed casing.\n      string myString = &quot;wAr aNd pEaCe&quot;;\n\n      // Creates a TextInfo based on the &quot;en-US&quot; culture.\n      TextInfo myTI = new CultureInfo(&quot;en-US&quot;,false).TextInfo;\n\n      // Changes a string to lowercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI.ToLower( myString ) );\n\n      // Changes a string to uppercase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper( myString ) );\n\n      // Changes a string to titlecase.\n      Console.WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase( myString ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.TextInfo_casing#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the String* with mixed casing.\n   String^ myString = &quot;wAr aNd pEaCe&quot;;\n   \n   // Creates a TextInfo based on the S&quot;en-US&quot; culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   TextInfo^ myTI = MyCI-&gt;TextInfo;\n   \n   // Changes a String* to lowercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to lowercase: {1}&quot;, myString, myTI-&gt;ToLower( myString ) );\n   \n   // Changes a String* to uppercase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to uppercase: {1}&quot;, myString, myTI-&gt;ToUpper( myString ) );\n   \n   // Changes a String* to titlecase.\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; to titlecase: {1}&quot;, myString, myTI-&gt;ToTitleCase( myString ) );\n}\n\n/*\nThis code produces the following output.\n\nS&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\nS&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\nS&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.TextInfo_casing#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesTextInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the string with mixed casing.\n      Dim myString As String = &quot;wAr aNd pEaCe&quot;\n\n      &#39; Creates a TextInfo based on the &quot;en-US&quot; culture.\n      Dim myTI As TextInfo = New CultureInfo(&quot;en-US&quot;, False).TextInfo\n\n      &#39; Changes a string to lowercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to lowercase: {1}&quot;, myString, myTI.ToLower(myString))\n\n      &#39; Changes a string to uppercase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to uppercase: {1}&quot;, myString, myTI.ToUpper(myString))\n\n      &#39; Changes a string to titlecase.\n      Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot; to titlecase: {1}&quot;, myString, myTI.ToTitleCase(myString))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesTextInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;&quot;wAr aNd pEaCe&quot; to lowercase: war and peace\n&#39;&quot;wAr aNd pEaCe&quot; to uppercase: WAR AND PEACE\n&#39;&quot;wAr aNd pEaCe&quot; to titlecase: War And Peace\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_TextInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_TextInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDeserializationCallback.OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the deserialization event when deserialization is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDeserializationCallback.OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the deserialization event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.TextInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.TextInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ANSICodePage\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.Clone\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.CultureName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.EBCDICCodePage\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.IsRightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.LCID\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ListSeparator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.MacCodePage\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.OEMCodePage\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.IDeserializationCallback.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ToLower\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ToString\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ToTitleCase\">\r\n<meta name=\"APIName\" content=\"System.Globalization.TextInfo.ToUpper\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b06fd09d-8b09-2e35-d1dc-a721ae0cb76c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines text properties and behaviors, such as casing, that are specific to a writing system.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.TextInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.TextInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.TextInfo.yml","open_to_public_contributors":true,"api_name":["System.Globalization.TextInfo","System.Globalization.TextInfo.ANSICodePage","System.Globalization.TextInfo.Clone","System.Globalization.TextInfo.CultureName","System.Globalization.TextInfo.EBCDICCodePage","System.Globalization.TextInfo.Equals","System.Globalization.TextInfo.GetHashCode","System.Globalization.TextInfo.IsReadOnly","System.Globalization.TextInfo.IsRightToLeft","System.Globalization.TextInfo.LCID","System.Globalization.TextInfo.ListSeparator","System.Globalization.TextInfo.MacCodePage","System.Globalization.TextInfo.OEMCodePage","System.Globalization.TextInfo.ReadOnly","System.Globalization.TextInfo.IDeserializationCallback.OnDeserialization","System.Globalization.TextInfo.ToLower","System.Globalization.TextInfo.ToString","System.Globalization.TextInfo.ToTitleCase","System.Globalization.TextInfo.ToUpper"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.TextInfo","System::Globalization::TextInfo","System.Globalization.TextInfo.ANSICodePage","System::Globalization::TextInfo::ANSICodePage","System.Globalization.TextInfo.Clone","System::Globalization::TextInfo::Clone","System.Globalization.TextInfo.CultureName","System::Globalization::TextInfo::CultureName","System.Globalization.TextInfo.EBCDICCodePage","System::Globalization::TextInfo::EBCDICCodePage","System.Globalization.TextInfo.Equals","System::Globalization::TextInfo::Equals","System.Globalization.TextInfo.GetHashCode","System::Globalization::TextInfo::GetHashCode","System.Globalization.TextInfo.IsReadOnly","System::Globalization::TextInfo::IsReadOnly","System.Globalization.TextInfo.IsRightToLeft","System::Globalization::TextInfo::IsRightToLeft","System.Globalization.TextInfo.LCID","System::Globalization::TextInfo::LCID","System.Globalization.TextInfo.ListSeparator","System::Globalization::TextInfo::ListSeparator","System.Globalization.TextInfo.MacCodePage","System::Globalization::TextInfo::MacCodePage","System.Globalization.TextInfo.OEMCodePage","System::Globalization::TextInfo::OEMCodePage","System.Globalization.TextInfo.ReadOnly","System::Globalization::TextInfo::ReadOnly","System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System::Globalization::TextInfo::System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System.Globalization.TextInfo.ToLower","System::Globalization::TextInfo::ToLower","System.Globalization.TextInfo.ToString","System::Globalization::TextInfo::ToString","System.Globalization.TextInfo.ToTitleCase","System::Globalization::TextInfo::ToTitleCase","System.Globalization.TextInfo.ToUpper","System::Globalization::TextInfo::ToUpper"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b06fd09d-8b09-2e35-d1dc-a721ae0cb76c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/TextInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TextInfo class | Microsoft Docs","_op_ogTitle":"TextInfo class","description":"Defines text properties and behaviors, such as casing, that are specific to a writing system.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.TextInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.textinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.textinfo","fileRelativePath":"System.Globalization.TextInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}