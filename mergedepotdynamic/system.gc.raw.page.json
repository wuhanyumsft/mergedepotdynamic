{"content":"    \r\n    <h1 id=\"System_GC\">\r\n      <span class=\"lang-csharp\">GC</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Controls the system garbage collector, a service that automatically reclaims unused memory.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class GC</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">GC</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The garbage collector is a common language runtime component that controls the allocation and release of managed memory. The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released. Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.  </p>\n<p> The garbage collector tracks and reclaims objects allocated in managed memory. Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references. Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory. Alternatively, an application can force garbage collection using the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method.  </p>\n<p> Garbage collection consists of the following steps:  </p>\n<ol>\n<li><p>The garbage collector searches for managed objects that are referenced in managed code.  </p>\n</li>\n<li><p>The garbage collector tries to finalize objects that are not referenced.  </p>\n</li>\n<li><p>The garbage collector frees objects that are not referenced and reclaims their memory.  </p>\n<p>This topic includes the following sections:  </p>\n<p><a href=\"#unmanaged\" data-linktype=\"self-bookmark\">The garbage collector and unmanaged resources</a><br><a href=\"#generations\" data-linktype=\"self-bookmark\">Object aging and generations</a><br><a href=\"#NoGCRegion\" data-linktype=\"self-bookmark\">Disallowing garbage collection</a>  </p>\n</li>\n</ol>\n<p><a name=\"unmanaged\"></a>   </p>\n<h2 id=\"the-garbage-collector-and-unmanaged-resources\">The garbage collector and unmanaged resources</h2>\n<p> During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code. However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so. The <a class=\"xref\" href=\"system.gc#System_GC_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.  </p>\n<p> Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections. When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.  </p>\n<p> In most cases, finalizers are implemented by overriding the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a>. In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object. However, the garbage collector is not required to call finalizers in all situations; for example, the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method explicitly prevents an object&#39;s finalizer from being called. Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.  </p>\n<p> In scenarios where resources must be released at a specific time, classes can implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface, which contains the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method that performs resource management and cleanup tasks. Classes that implement <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> must specify, as part of their class contract, if and when class consumers call the method to clean up the object. The garbage collector does not, by default, call the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method; however, implementations of the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method can call methods in the GC class to customize the finalization behavior of the garbage collector.  </p>\n<p> For more information on object finalization and the dispose pattern, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.  </p>\n<p><a name=\"generations\"></a>   </p>\n<h2 id=\"object-aging-and-generations\">Object aging and generations</h2>\n<p> The garbage collector in the common language runtime supports object aging using generations. A generation is a unit of measure of the relative age of objects in memory. The generation number, or age, of an object indicates the generation to which an object belongs. Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle. Objects in the most recent generation are in generation 0. This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2. You can retrieve the value of the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum generation number supported by the system.  </p>\n<p> Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations. Overloads of the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method that include a <code>generation</code> parameter allow you to specify the oldest generation to be garbage collected.  </p>\n<p><a name=\"NoGCRegion\"></a>   </p>\n<h2 id=\"disallowing-garbage-collection\">Disallowing garbage collection</h2>\n<p> Starting with the .NET Framework 4.6, the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app&#39;s performance. The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector. If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.  </p>\n<p> You define the beginning of the critical path of the no GC region by calling one of the overloads of the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a>. You specify the end of its critical path by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.  </p>\n<p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_MaxGeneration\" data-linktype=\"self-bookmark\">MaxGeneration</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum number of generations that the system currently supports.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_AddMemoryPressure_System_Int64_\" data-linktype=\"self-bookmark\">AddMemoryPressure(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_CancelFullGCNotification\" data-linktype=\"self-bookmark\">CancelFullGCNotification()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the registration of a garbage collection notification.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_Collect\" data-linktype=\"self-bookmark\">Collect()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces an immediate garbage collection of all generations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_Collect_System_Int32_\" data-linktype=\"self-bookmark\">Collect(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces an immediate garbage collection from generation 0 through a specified generation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_Collect_System_Int32_System_GCCollectionMode_\" data-linktype=\"self-bookmark\">Collect(Int32,GCCollectionMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_\" data-linktype=\"self-bookmark\">Collect(Int32,GCCollectionMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with a value specifying whether the collection should be blocking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with values that specify whether the collection should be blocking and compacting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_CollectionCount_System_Int32_\" data-linktype=\"self-bookmark\">CollectionCount(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of times garbage collection has occurred for the specified generation of objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_EndNoGCRegion\" data-linktype=\"self-bookmark\">EndNoGCRegion()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the no GC region latency mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_GetGeneration_System_Object_\" data-linktype=\"self-bookmark\">GetGeneration(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the current generation number of the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_GetGeneration_System_WeakReference_\" data-linktype=\"self-bookmark\">GetGeneration(WeakReference)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the current generation number of the target of a specified weak reference.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_GetTotalMemory_System_Boolean_\" data-linktype=\"self-bookmark\">GetTotalMemory(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_KeepAlive_System_Object_\" data-linktype=\"self-bookmark\">KeepAlive(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_RegisterForFullGCNotification_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">RegisterForFullGCNotification(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_RemoveMemoryPressure_System_Int64_\" data-linktype=\"self-bookmark\">RemoveMemoryPressure(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_ReRegisterForFinalize_System_Object_\" data-linktype=\"self-bookmark\">ReRegisterForFinalize(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests that the system call the finalizer for the specified object for which <span class=\"xref\">stem.GC.SuppressFinalize*</span> has previously been called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_SuppressFinalize_System_Object_\" data-linktype=\"self-bookmark\">SuppressFinalize(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests that the common language runtime not call the finalizer for the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_TryStartNoGCRegion_System_Int64_\" data-linktype=\"self-bookmark\">TryStartNoGCRegion(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_TryStartNoGCRegion_System_Int64_System_Boolean_\" data-linktype=\"self-bookmark\">TryStartNoGCRegion(Int64,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_TryStartNoGCRegion_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">TryStartNoGCRegion(Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_TryStartNoGCRegion_System_Int64_System_Int64_System_Boolean_\" data-linktype=\"self-bookmark\">TryStartNoGCRegion(Int64,Int64,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_WaitForFullGCApproach\" data-linktype=\"self-bookmark\">WaitForFullGCApproach()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_WaitForFullGCApproach_System_Int32_\" data-linktype=\"self-bookmark\">WaitForFullGCApproach(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_WaitForFullGCComplete\" data-linktype=\"self-bookmark\">WaitForFullGCComplete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_WaitForFullGCComplete_System_Int32_\" data-linktype=\"self-bookmark\">WaitForFullGCComplete(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_GC_WaitForPendingFinalizers\" data-linktype=\"self-bookmark\">WaitForPendingFinalizers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_GC_MaxGeneration\">\r\n    \r\n            <a id=\"System_GC_MaxGeneration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxGeneration</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum number of generations that the system currently supports.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MaxGeneration { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value that ranges from zero to the maximum number of supported generations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The generation number, or age, of an object is an implementation-defined relative measure of an object&#39;s lifespan. The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the MaxGeneration property.  </p>\n<p> The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory. Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the MaxGeneration property value can grow over time.  </p>\n<p> If object aging is implemented, the MaxGeneration property returns the maximum generation number used by the system; otherwise, this property returns zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the MaxGeneration property to display the largest generation number currently in use.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect Int Example#1\">using System;\n\nnamespace GCCollectIntExample\n{\n    class MyGCCollectClass\n    {\n        private const long maxGarbage = 1000;\n      \n        static void Main()\n        {\n            MyGCCollectClass myGCCol = new MyGCCollectClass();\n\n            // Determine the maximum number of generations the system\n\t    // garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration);\n            \n            myGCCol.MakeSomeGarbage();\n\n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            // Determine the best available approximation of the number \n\t    // of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of generation 0 only.\n            GC.Collect(0);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of all generations up to and including 2.\n            GC.Collect(2);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            Console.Read();\n        }\n\n        void MakeSomeGarbage()\n        {\n            Version vt;\n\n            for(int i = 0; i &lt; maxGarbage; i++)\n            {\n                // Create objects and release them to fill up memory\n\t\t// with unused objects.\n                vt = new Version();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.GC.Collect Int Example#1\">using namespace System;\nconst long maxGarbage = 1000;\nref class MyGCCollectClass\n{\npublic:\n   void MakeSomeGarbage()\n   {\n      Version^ vt;\n      for ( int i = 0; i &lt; maxGarbage; i++ )\n      {\n         \n         // Create objects and release them to fill up memory\n         // with unused objects.\n         vt = gcnew Version;\n\n      }\n   }\n\n};\n\nint main()\n{\n   MyGCCollectClass^ myGCCol = gcnew MyGCCollectClass;\n   \n   // Determine the maximum number of generations the system\n   // garbage collector currently supports.\n   Console::WriteLine( &quot;The highest generation is {0}&quot;, GC::MaxGeneration );\n   myGCCol-&gt;MakeSomeGarbage();\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Determine the best available approximation of the number\n   // of bytes currently allocated in managed memory.\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of generation 0 only.\n   GC::Collect( 0 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of all generations up to and including 2.\n   GC::Collect( 2 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect Int Example#1\">Imports System\n\nNamespace GCCollectInt_Example\n    Class MyGCCollectClass\n        Private maxGarbage As Long = 10000\n\n        Public Shared Sub Main()\n            Dim myGCCol As New MyGCCollectClass\n\n            &#39;Determine the maximum number of generations the system\n            &#39;garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration)\n\n            myGCCol.MakeSomeGarbage()\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            &#39;Determine the best available approximation of the number \n            &#39;of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of generation 0 only.\n            GC.Collect(0)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of all generations up to and including 2.\n            GC.Collect(2)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n            Console.Read()\n\n        End Sub\n\n\n        Sub MakeSomeGarbage()\n            Dim vt As Version\n\n            Dim i As Integer\n            For i = 0 To maxGarbage - 1\n                &#39;Create objects and release them to fill up memory\n                &#39;with unused objects.\n                vt = New Version\n            Next i\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_GC_AddMemoryPressure_System_Int64_\">\r\n    \r\n            <a id=\"System_GC_AddMemoryPressure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMemoryPressure(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AddMemoryPressure (long bytesAllocated);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesAllocated</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The incremental amount of unmanaged memory that has been allocated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bytesAllocated</code> is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> On a 32-bit computer, <code>bytesAllocated</code> is larger than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated. If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection. The AddMemoryPressure method informs the runtime of this additional pressure on system memory.  </p>\n<p> In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the <code>Dispose</code> or <code>Finalize</code> method. Call the AddMemoryPressure method after allocating the unmanaged memory, and call the <a class=\"xref\" href=\"system.gc#System_GC_RemoveMemoryPressure_\" data-linktype=\"relative-path\">RemoveMemoryPressure</a> method after releasing it.  </p>\n<p> In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the AddMemoryPressure and <a class=\"xref\" href=\"system.gc#System_GC_RemoveMemoryPressure_\" data-linktype=\"relative-path\">RemoveMemoryPressure</a> methods to communicate these incremental changes to the runtime.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must ensure that you remove exactly the amount of pressure you add. Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_CancelFullGCNotification\">\r\n    \r\n            <a id=\"System_GC_CancelFullGCNotification_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelFullGCNotification()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the registration of a garbage collection notification.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void CancelFullGCNotification ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This member is not available when concurrent garbage collection is enabled. See the <a href=\"../Topic/%3CgcConcurrent%3E%20Element.md\" data-linktype=\"relative-path\"><gcconcurrent></gcconcurrent></a> runtime setting for information about how to disable concurrent garbage collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method cancels a garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example cancels a garbage collection registration. This example is part of a larger example provided for the <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a> topic.  </p>\n<pre><code class=\"lang-cpp\" name=\"GCNotification#7\">                finalExit = true;\n                checkForNotify = false;\n                GC::CancelFullGCNotification();\n</code></pre><pre><code class=\"lang-cs\" name=\"GCNotification#7\">                finalExit = true;\n                checkForNotify = false;\n                GC.CancelFullGCNotification();\n</code></pre><pre><code class=\"lang-vb\" name=\"GCNotification#7\">            finalExit = True\n            checkForNotify = False\n            GC.CancelFullGCNotification()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_Collect\">\r\n    \r\n            <a id=\"System_GC_Collect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collect()</div>        \r\n          </div>\r\n    \r\n            <p>Forces an immediate garbage collection of all generations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Collect ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to try to reclaim all memory that is inaccessible. It performs a blocking garbage collection of all generations.  </p>\n<p> All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected. Use this method to force the system to try to reclaim the maximum amount of available memory.  </p>\n<p> Starting with the .NET Framework 4.5.1, you can compact the large object heap (LOH) by setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> before calling the Collect method, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.GCSettings#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce\n      GC.Collect()      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.GCSettings#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n      GC.Collect();      \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the Collect method to perform a collection on all generations of memory. The code generates a number of unused objects, and then calls the Collect method to clean them from memory.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.GC.Collect Example#1\">using namespace System;\n\nconst int maxGarbage = 1000;\n\nvoid MakeSomeGarbage()\n{\n   Version^ vt;\n   for ( int i = 0; i &lt; maxGarbage; i++ ) {\n      // Create objects and release them to fill up memory with unused objects.\n      vt = gcnew Version;\n   }\n}\n\nvoid main()\n{\n   // Put some objects in memory.\n   MakeSomeGarbage();\n   Console::WriteLine(&quot;Memory used before collection:       {0:N0}&quot;, \n                      GC::GetTotalMemory( false ) );\n   \n   // Collect all generations of memory.\n   GC::Collect();\n   Console::WriteLine(&quot;Memory used after full collection:   {0:N0}&quot;, \n                      GC::GetTotalMemory( true ) );\n}\n// The output from the example resembles the following:\n//       Memory used before collection:       79,392\n//       Memory used after full collection:   52,640\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.Collect Example#1\">using System;\n\nclass MyGCCollectClass\n{\n   private const int maxGarbage = 1000;\n\n   static void Main()\n   {\n      // Put some objects in memory.\n      MyGCCollectClass.MakeSomeGarbage();\n      Console.WriteLine(&quot;Memory used before collection:       {0:N0}&quot;, \n                        GC.GetTotalMemory(false));\n      \n      // Collect all generations of memory.\n      GC.Collect();\n      Console.WriteLine(&quot;Memory used after full collection:   {0:N0}&quot;, \n                        GC.GetTotalMemory(true));\n   }\n\n   static void MakeSomeGarbage()\n   {\n      Version vt;\n\n      // Create objects and release them to fill up memory with unused objects.\n      for(int i = 0; i &lt; maxGarbage; i++) {\n         vt = new Version();\n      }\n   }\n}\n// The output from the example resembles the following:\n//       Memory used before collection:       79,392\n//       Memory used after full collection:   52,640\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect Example#1\">Class MyGCCollectClass\n     Private Const maxGarbage As Integer = 1000\n\n     Shared Sub Main()\n         &#39;Put some objects in memory.\n         MyGCCollectClass.MakeSomeGarbage()\n         Console.WriteLine(&quot;Memory used before collection:       {0:N0}&quot;, \n                           GC.GetTotalMemory(False))\n\n         &#39;Collect all generations of memory.\n         GC.Collect()\n         Console.WriteLine(&quot;Memory used after full collection:   {0:N0}&quot;, \n                           GC.GetTotalMemory(True))\n     End Sub\n\n     Shared Sub MakeSomeGarbage()\n         Dim vt As Version\n\n         Dim i As Integer\n         For i = 0 To maxGarbage - 1\n             &#39;Create objects and release them to fill up memory with unused objects.\n             vt = New Version()\n         Next \n     End Sub\n End Class\n&#39; The output from the example resembles the following:\n&#39;       Memory used before collection:       79,392\n&#39;       Memory used after full collection:   52,640\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_Collect_System_Int32_\">\r\n    \r\n            <a id=\"System_GC_Collect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collect(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Forces an immediate garbage collection from generation 0 through a specified generation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Collect (int generation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the oldest generation to be garbage collected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>generation</code> is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to try to reclaim memory that is inaccessible. However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.  </p>\n<p> If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation. If object aging is not implemented, the garbage collector considers all objects during the garbage collection.  </p>\n<p> Use the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum valid value of the <code>generation</code> parameter.  </p>\n<p> To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters. To have the garbage collector reclaim objects based on a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> setting, use the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_\" data-linktype=\"relative-path\">System.GC.Collect(Int32,GCCollectionMode)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the Collect method to perform a collection on individual layers of memory. The code generates a number of unused objects, and then calls the Collect method to clean them from memory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect Int Example#1\">using System;\n\nnamespace GCCollectIntExample\n{\n    class MyGCCollectClass\n    {\n        private const long maxGarbage = 1000;\n      \n        static void Main()\n        {\n            MyGCCollectClass myGCCol = new MyGCCollectClass();\n\n            // Determine the maximum number of generations the system\n\t    // garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration);\n            \n            myGCCol.MakeSomeGarbage();\n\n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            // Determine the best available approximation of the number \n\t    // of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of generation 0 only.\n            GC.Collect(0);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of all generations up to and including 2.\n            GC.Collect(2);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            Console.Read();\n        }\n\n        void MakeSomeGarbage()\n        {\n            Version vt;\n\n            for(int i = 0; i &lt; maxGarbage; i++)\n            {\n                // Create objects and release them to fill up memory\n\t\t// with unused objects.\n                vt = new Version();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.GC.Collect Int Example#1\">using namespace System;\nconst long maxGarbage = 1000;\nref class MyGCCollectClass\n{\npublic:\n   void MakeSomeGarbage()\n   {\n      Version^ vt;\n      for ( int i = 0; i &lt; maxGarbage; i++ )\n      {\n         \n         // Create objects and release them to fill up memory\n         // with unused objects.\n         vt = gcnew Version;\n\n      }\n   }\n\n};\n\nint main()\n{\n   MyGCCollectClass^ myGCCol = gcnew MyGCCollectClass;\n   \n   // Determine the maximum number of generations the system\n   // garbage collector currently supports.\n   Console::WriteLine( &quot;The highest generation is {0}&quot;, GC::MaxGeneration );\n   myGCCol-&gt;MakeSomeGarbage();\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Determine the best available approximation of the number\n   // of bytes currently allocated in managed memory.\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of generation 0 only.\n   GC::Collect( 0 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of all generations up to and including 2.\n   GC::Collect( 2 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect Int Example#1\">Imports System\n\nNamespace GCCollectInt_Example\n    Class MyGCCollectClass\n        Private maxGarbage As Long = 10000\n\n        Public Shared Sub Main()\n            Dim myGCCol As New MyGCCollectClass\n\n            &#39;Determine the maximum number of generations the system\n            &#39;garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration)\n\n            myGCCol.MakeSomeGarbage()\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            &#39;Determine the best available approximation of the number \n            &#39;of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of generation 0 only.\n            GC.Collect(0)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of all generations up to and including 2.\n            GC.Collect(2)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n            Console.Read()\n\n        End Sub\n\n\n        Sub MakeSomeGarbage()\n            Dim vt As Version\n\n            Dim i As Integer\n            For i = 0 To maxGarbage - 1\n                &#39;Create objects and release them to fill up memory\n                &#39;with unused objects.\n                vt = New Version\n            Next i\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_\">\r\n    \r\n            <a id=\"System_GC_Collect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collect(Int32,GCCollectionMode)</div>        \r\n          </div>\r\n    \r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Collect (int generation, GCCollectionMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the oldest generation to be garbage collected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>generation</code> is not valid.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is not one of the <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>mode</code> parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects. Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.  </p>\n<p> To adjust the intrusiveness of garbage collection during critical periods in your application, set the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LatencyMode_\" data-linktype=\"relative-path\">LatencyMode</a> property.  </p>\n<p> The garbage collector does not collect objects with a generation number higher than specified by the <code>generation</code> parameter. Use the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum valid value of <code>generation</code>.  </p>\n<p> To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.  </p>\n<p> To have the garbage collector reclaim objects up to a specified generation of objects, use the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_\" data-linktype=\"relative-path\">System.GC.Collect(Int32)</a> method overload. When you specify the maximum generation, all objects are collected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example forces a garbage collection for generation 2 objects with the <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> setting.  </p>\n<pre><code class=\"lang-vb\" name=\"System.GC.GCCollectionMode#1\">Imports System\n\nClass Program\n\n    Public Shared Sub Main()\n        GC.Collect(2, GCCollectionMode.Optimized)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.GCCollectionMode#1\">using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        GC.Collect(2, GCCollectionMode.Optimized);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_GC_Collect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collect(Int32,GCCollectionMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with a value specifying whether the collection should be blocking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Collect (int generation, GCCollectionMode mode, bool blocking);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the oldest generation to be garbage collected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>blocking</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform a blocking garbage collection; <code>false</code> to perform a background garbage collection where possible.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>generation</code> is not valid.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is not one of the <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table summarizes the interaction of the <code>mode</code> and <code>blocking</code> parameters:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mode</code></td>\n<td><code>blocking</code> is <code>true</code></td>\n<td><code>blocking</code> is <code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></td>\n<td>A blocking collection is performed as soon as possible. If a background collection is in progress and <code>generation</code> is 0 or 1, the Collect method immediately triggers a blocking collection and returns when the collection is finished. If a background collection is in progress and <code>generation</code> is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</td>\n<td>A collection is performed as soon as possible. The Collect method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed. If a background collection is already in progress, the method returns immediately.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></td>\n<td>A blocking collection may be performed, depending on the state of the garbage collector and the <code>generation</code> parameter. The garbage collector tries to provide optimal performance.</td>\n<td>A collection may be performed, depending on the state of the garbage collector. The Collect method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed. The garbage collector tries to provide optimal performance. If a background collection is already in progress, the method returns immediately.</td>\n</tr>\n</tbody>\n</table>\n<p> If a call to the Collect method performs a full blocking garbage collection, you can also compact the large object heap by setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> before calling the Collect method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_GC_Collect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with values that specify whether the collection should be blocking and compacting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the oldest generation to be garbage collected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>blocking</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform a blocking garbage collection; <code>false</code> to perform a background garbage collection where possible. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>compacting</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to compact the small object heap; <code>false</code> to sweep only. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>blocking</code> is <code>false</code>, the GC decides whether to perform a background or a blocking garbage collection. If <code>compacting</code> is <code>true</code>, it performs a blocking garbage collection.  </p>\n<p> If <code>compacting</code> is <code>true</code>, the runtime compacts the small object heap (SOH). The large object heap (LOH) is not compacted unless the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property is set to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a>. Note that this includes all blocking garbage collections, not just full blocking garbage collections.  </p>\n<p> You can call the Collect method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n      GC.Collect(2, GCCollectionMode.Forced, true, true);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce\n      GC.Collect(2, GCCollectionMode.Forced, True, True)\n</code></pre><p> Specifying <code>true</code> for the <code>compacting</code> argument guarantees a compacting, full blocking garbage collection. Setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> ensures that both the LOH and SOH are compacted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_CollectionCount_System_Int32_\">\r\n    \r\n            <a id=\"System_GC_CollectionCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CollectionCount(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of times garbage collection has occurred for the specified generation of objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CollectionCount (int generation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The generation of objects for which the garbage collection count is to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of times garbage collection has occurred for the specified generation since the process was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>generation</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you implement your own resource management, you might need to force garbage collection periodically by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently. Save the value returned by CollectionCount immediately after calling <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a>. The next time you need to call <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a>, compare the current value returned by CollectionCount to the saved value. If the two values are equal, no collection has occurred in the interim and it is reasonable to call <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> again.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_EndNoGCRegion\">\r\n    \r\n            <a id=\"System_GC_EndNoGCRegion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndNoGCRegion()</div>        \r\n          </div>\r\n    \r\n            <p>Ends the no GC region latency mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EndNoGCRegion ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The garbage collector is not in no GC region latency mode. See the Remarks section for more information.  </p>\n<p> -or-  </p>\n<p> The no GC region latency mode was ended previously because a garbage collection was induced.  </p>\n<p> -or-  </p>\n<p> A memory allocation exceeded the amount specified in the call to the <span class=\"xref\">stem.GC.TryStartNoGCRegion*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndNoGCRegion method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if the garbage collector is not in no GC region latency mode. This occurs under any of the following conditions:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method was not called previously.  </p>\n</li>\n<li><p>The call to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method returned <code>false</code>.  </p>\n</li>\n<li><p>The call to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method threw an exception.  </p>\n<p>You can prevent an exception for any of these reasons by using code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.GC.EndNoGCRegion#1\">     If GCSettings.LatencyMode = GCLatencyMode.NoGCRegion Then\n        GC.EndNoGCRegion()\n     End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.EndNoGCRegion#1\">     if (GCSettings.LatencyMode == GCLatencyMode.NoGCRegion)\n        GC.EndNoGCRegion();\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_GetGeneration_System_Object_\">\r\n    \r\n            <a id=\"System_GC_GetGeneration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGeneration(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the current generation number of the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetGeneration (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that generation information is retrieved for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current generation number of <code>obj</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to determine the age of an object, and then use that information with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method to force the garbage collector to collect objects in the same generation. For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the GetGeneration method to determine the age of an object. The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect Int Example#1\">using System;\n\nnamespace GCCollectIntExample\n{\n    class MyGCCollectClass\n    {\n        private const long maxGarbage = 1000;\n      \n        static void Main()\n        {\n            MyGCCollectClass myGCCol = new MyGCCollectClass();\n\n            // Determine the maximum number of generations the system\n\t    // garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration);\n            \n            myGCCol.MakeSomeGarbage();\n\n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            // Determine the best available approximation of the number \n\t    // of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of generation 0 only.\n            GC.Collect(0);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of all generations up to and including 2.\n            GC.Collect(2);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            Console.Read();\n        }\n\n        void MakeSomeGarbage()\n        {\n            Version vt;\n\n            for(int i = 0; i &lt; maxGarbage; i++)\n            {\n                // Create objects and release them to fill up memory\n\t\t// with unused objects.\n                vt = new Version();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.GC.Collect Int Example#1\">using namespace System;\nconst long maxGarbage = 1000;\nref class MyGCCollectClass\n{\npublic:\n   void MakeSomeGarbage()\n   {\n      Version^ vt;\n      for ( int i = 0; i &lt; maxGarbage; i++ )\n      {\n         \n         // Create objects and release them to fill up memory\n         // with unused objects.\n         vt = gcnew Version;\n\n      }\n   }\n\n};\n\nint main()\n{\n   MyGCCollectClass^ myGCCol = gcnew MyGCCollectClass;\n   \n   // Determine the maximum number of generations the system\n   // garbage collector currently supports.\n   Console::WriteLine( &quot;The highest generation is {0}&quot;, GC::MaxGeneration );\n   myGCCol-&gt;MakeSomeGarbage();\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Determine the best available approximation of the number\n   // of bytes currently allocated in managed memory.\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of generation 0 only.\n   GC::Collect( 0 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of all generations up to and including 2.\n   GC::Collect( 2 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect Int Example#1\">Imports System\n\nNamespace GCCollectInt_Example\n    Class MyGCCollectClass\n        Private maxGarbage As Long = 10000\n\n        Public Shared Sub Main()\n            Dim myGCCol As New MyGCCollectClass\n\n            &#39;Determine the maximum number of generations the system\n            &#39;garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration)\n\n            myGCCol.MakeSomeGarbage()\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            &#39;Determine the best available approximation of the number \n            &#39;of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of generation 0 only.\n            GC.Collect(0)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of all generations up to and including 2.\n            GC.Collect(2)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n            Console.Read()\n\n        End Sub\n\n\n        Sub MakeSomeGarbage()\n            Dim vt As Version\n\n            Dim i As Integer\n            For i = 0 To maxGarbage - 1\n                &#39;Create objects and release them to fill up memory\n                &#39;with unused objects.\n                vt = New Version\n            Next i\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_GetGeneration_System_WeakReference_\">\r\n    \r\n            <a id=\"System_GC_GetGeneration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGeneration(WeakReference)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the current generation number of the target of a specified weak reference.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetGeneration (WeakReference wo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>wo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.weakreference\" data-linktype=\"relative-path\">WeakReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.weakreference\" data-linktype=\"relative-path\">WeakReference</a> that refers to the target object whose generation number is to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current generation number of the target of <code>wo</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Garbage collection has already been performed on <code>wo</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetGeneration method to determine the age of a weak reference object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.GetGenerationWeak Example#1\">using System;\n\nnamespace GCGetGenerationWeakExample\n{\n    public class MyGCCollectClass\n    {\n        private const long maxGarbage = 1000;\n      \n        static void Main()\n        {\n            // Create a strong reference to an object.\n            MyGCCollectClass myGCCol = new MyGCCollectClass();\n\n            // Put some objects in memory.\n            myGCCol.MakeSomeGarbage();\n            \n            // Get the generation of managed memory where myGCCol is stored.\n            Console.WriteLine(&quot;The object is in generation: {0}&quot;, GC.GetGeneration(myGCCol));\n\t\t\t\t\t\t\n            // Perform a full garbage collection.\n            // Because there is a strong reference to myGCCol, it will\n            // not be garbage collected.\n            GC.Collect();\n\t\t\t\n            // Get the generation of managed memory where myGCCol is stored.\n            Console.WriteLine(&quot;The object is in generation: {0}&quot;, GC.GetGeneration(myGCCol));\n\t\t\t\n            // Create a WeakReference to myGCCol.\n            WeakReference wkref = new WeakReference(myGCCol);\n            // Remove the strong reference to myGCCol.\n            myGCCol = null;\n            \n            // Get the generation of managed memory where wkref is stored.\n            Console.WriteLine(&quot;The WeakReference to the object is in generation: {0}&quot;, GC.GetGeneration(wkref));\n\t\t\t\n            // Perform another full garbage collection.\n            // A WeakReference will not survive a garbage collection.\n            GC.Collect();\n\t\t\n            // Try to get the generation of managed memory where wkref is stored.\n            // Because it has been collected, an exception will be thrown.\n            try\n            {\n                Console.WriteLine(&quot;The WeakReference to the object is in generation: {0}&quot;, GC.GetGeneration(wkref));\n                Console.Read();\n            }\n            catch(Exception e)\n            {\n                Console.WriteLine(&quot;The WeakReference to the object has been garbage collected: &#39;{0}&#39;&quot;, e);\n                Console.Read();\n            }\n        }\n\n        void MakeSomeGarbage()\n        {\n            Version vt;\n\n            for(int i = 0; i &lt; maxGarbage; i++)\n            {\n                // Create objects and release them to fill up memory\n                // with unused objects.\n                vt = new Version();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.GC.GetGenerationWeak Example#1\">using namespace System;\nref class MyGCCollectClass\n{\nprivate:\n   static const long maxGarbage = 1000;\n\npublic:\n   void MakeSomeGarbage()\n   {\n      Version^ vt;\n      for ( int i = 0; i &lt; maxGarbage; i++ )\n      {\n         \n         // Create objects and release them to fill up memory\n         // with unused objects.\n         vt = gcnew Version;\n\n      }\n   }\n\n};\n\nint main()\n{\n   \n   // Create a strong reference to an Object.\n   MyGCCollectClass^ myGCCol = gcnew MyGCCollectClass;\n   \n   // Put some objects in memory.\n   myGCCol-&gt;MakeSomeGarbage();\n   \n   // Get the generation of managed memory where myGCCol is stored.\n   Console::WriteLine( &quot;The object is in generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Perform a full garbage collection.\n   // Because there is a strong reference to myGCCol, it will\n   // not be garbage collected.\n   GC::Collect();\n   \n   // Get the generation of managed memory where myGCCol is stored.\n   Console::WriteLine( &quot;The object is in generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Create a WeakReference to myGCCol.\n   WeakReference^ wkref = gcnew WeakReference( myGCCol );\n   \n   // Remove the strong reference to myGCCol.\n   myGCCol = nullptr;\n   \n   // Get the generation of managed memory where wkref is stored.\n   Console::WriteLine( &quot;The WeakReference to the object is in generation: {0}&quot;, GC::GetGeneration( wkref ) );\n   \n   // Perform another full garbage collection.\n   // A WeakReference will not survive a garbage collection.\n   GC::Collect();\n   \n   // Try to get the generation of managed memory where wkref is stored.\n   // Because it has been collected, an exception will be thrown.\n   try\n   {\n      Console::WriteLine( &quot;The WeakReference to the object is in generation: {0}&quot;, GC::GetGeneration( wkref ) );\n      Console::Read();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The WeakReference to the object has been garbage collected: &#39; {0}&#39;&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.GetGenerationWeak Example#1\">Imports System\n\nNamespace GCGetGenerationWeakExample\n\n   Class MyGCCollectClass\n      Private maxGarbage As Long = 1000\n\n      Public Shared Sub Main()\n         &#39; Create a strong reference to an object.\n         Dim myGCCol As New MyGCCollectClass\n\n         &#39; Put some objects in memory.\n         myGCCol.MakeSomeGarbage()\n\n         &#39; Get the generation of managed memory where myGCCol is stored.\n         Console.WriteLine(&quot;The object is in generation: {0}&quot;, _\n                            GC.GetGeneration(myGCCol))\n\n         &#39; Perform a full garbage collection.\n         &#39; Because there is a strong reference to myGCCol, it will\n         &#39; not be garbage collected.\n         GC.Collect()\n\n         &#39; Get the generation of managed memory where myGCCol is stored.\n         Console.WriteLine(&quot;The object is in generation: {0}&quot;, _\n                            GC.GetGeneration(myGCCol))\n\n         &#39; Create a WeakReference to myGCCol.\n         Dim wkref As New WeakReference(myGCCol)\n         &#39; Remove the strong reference to myGCCol.\n         myGCCol = Nothing\n\n         &#39; Get the generation of managed memory where wkref is stored.\n         Console.WriteLine(&quot;The WeakReference to the object is in generation: {0}&quot;, _\n                           GC.GetGeneration(wkref))\n\n         &#39; Perform another full garbage collection.\n         &#39; A WeakReference will not survive a garbage collection.\n         GC.Collect()\n\n         &#39; Try to get the generation of managed memory where wkref is stored.\n         &#39; Because it has been collected, an exception will be thrown.\n         Try\n            Console.WriteLine(&quot;The WeakReference to the object is in generation: {0}&quot;, _\n                               GC.GetGeneration(wkref))\n            Console.Read()\n         Catch e As Exception\n            Console.WriteLine(&quot;The WeakReference to the object &quot; &amp; _\n                              &quot;has been garbage collected: &#39;{0}&#39;&quot;, e)\n            Console.Read()\n         End Try\n      End Sub\n\n\n      Sub MakeSomeGarbage()\n         Dim vt As Version\n\n         Dim i As Integer\n         For i = 0 To maxGarbage - 1\n            &#39; Create objects and release them to fill up memory\n            &#39; with unused objects.\n            vt = New Version\n         Next i\n      End Sub\n   End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_GetTotalMemory_System_Boolean_\">\r\n    \r\n            <a id=\"System_GC_GetTotalMemory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTotalMemory(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long GetTotalMemory (bool forceFullCollection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>forceFullCollection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>forceFullCollection</code> parameter is <code>true</code>, this method waits a short interval before returning while the system collects garbage and finalizes objects. The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles. The garbage collector does not guarantee that all inaccessible memory is collected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the GetTotalMemory method to get and display the number of bytes currently allocated in managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect Int Example#1\">using System;\n\nnamespace GCCollectIntExample\n{\n    class MyGCCollectClass\n    {\n        private const long maxGarbage = 1000;\n      \n        static void Main()\n        {\n            MyGCCollectClass myGCCol = new MyGCCollectClass();\n\n            // Determine the maximum number of generations the system\n\t    // garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration);\n            \n            myGCCol.MakeSomeGarbage();\n\n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            // Determine the best available approximation of the number \n\t    // of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of generation 0 only.\n            GC.Collect(0);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            \n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            \n            // Perform a collection of all generations up to and including 2.\n            GC.Collect(2);\n            \n            // Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol));\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(false));\n            Console.Read();\n        }\n\n        void MakeSomeGarbage()\n        {\n            Version vt;\n\n            for(int i = 0; i &lt; maxGarbage; i++)\n            {\n                // Create objects and release them to fill up memory\n\t\t// with unused objects.\n                vt = new Version();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.GC.Collect Int Example#1\">using namespace System;\nconst long maxGarbage = 1000;\nref class MyGCCollectClass\n{\npublic:\n   void MakeSomeGarbage()\n   {\n      Version^ vt;\n      for ( int i = 0; i &lt; maxGarbage; i++ )\n      {\n         \n         // Create objects and release them to fill up memory\n         // with unused objects.\n         vt = gcnew Version;\n\n      }\n   }\n\n};\n\nint main()\n{\n   MyGCCollectClass^ myGCCol = gcnew MyGCCollectClass;\n   \n   // Determine the maximum number of generations the system\n   // garbage collector currently supports.\n   Console::WriteLine( &quot;The highest generation is {0}&quot;, GC::MaxGeneration );\n   myGCCol-&gt;MakeSomeGarbage();\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   \n   // Determine the best available approximation of the number\n   // of bytes currently allocated in managed memory.\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of generation 0 only.\n   GC::Collect( 0 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n   \n   // Perform a collection of all generations up to and including 2.\n   GC::Collect( 2 );\n   \n   // Determine which generation myGCCol object is stored in.\n   Console::WriteLine( &quot;Generation: {0}&quot;, GC::GetGeneration( myGCCol ) );\n   Console::WriteLine( &quot;Total Memory: {0}&quot;, GC::GetTotalMemory( false ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect Int Example#1\">Imports System\n\nNamespace GCCollectInt_Example\n    Class MyGCCollectClass\n        Private maxGarbage As Long = 10000\n\n        Public Shared Sub Main()\n            Dim myGCCol As New MyGCCollectClass\n\n            &#39;Determine the maximum number of generations the system\n            &#39;garbage collector currently supports.\n            Console.WriteLine(&quot;The highest generation is {0}&quot;, GC.MaxGeneration)\n\n            myGCCol.MakeSomeGarbage()\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            &#39;Determine the best available approximation of the number \n            &#39;of bytes currently allocated in managed memory.\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of generation 0 only.\n            GC.Collect(0)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n\n            &#39;Perform a collection of all generations up to and including 2.\n            GC.Collect(2)\n\n            &#39;Determine which generation myGCCol object is stored in.\n            Console.WriteLine(&quot;Generation: {0}&quot;, GC.GetGeneration(myGCCol))\n            Console.WriteLine(&quot;Total Memory: {0}&quot;, GC.GetTotalMemory(False))\n            Console.Read()\n\n        End Sub\n\n\n        Sub MakeSomeGarbage()\n            Dim vt As Version\n\n            Dim i As Integer\n            For i = 0 To maxGarbage - 1\n                &#39;Create objects and release them to fill up memory\n                &#39;with unused objects.\n                vt = New Version\n            Next i\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_KeepAlive_System_Object_\">\r\n    \r\n            <a id=\"System_GC_KeepAlive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepAlive(Object)</div>        \r\n          </div>\r\n    \r\n            <p>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void KeepAlive (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The purpose of the KeepAlive method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector. A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Win32 APIs, unmanaged DLLs, or methods using COM.  </p>\n<p> This method references the <code>obj</code> parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called. Code this method at the end, not the beginning, of the range of instructions where <code>obj</code> must be available.  </p>\n<p> The KeepAlive method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an object at the beginning of its <code>Main</code> method and does not refer to the object again until the end, when the KeepAlive method is called. The object persists for the 30-second duration of the <code>Main</code> method, despite calls to the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> and <a class=\"xref\" href=\"system.gc#System_GC_WaitForPendingFinalizers_\" data-linktype=\"relative-path\">WaitForPendingFinalizers</a> methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.GC.KeepAlive Example2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::InteropServices;\n\n// A simple class that exposes two static Win32 functions.\n// One is a delegate type and the other is an enumerated type.\npublic ref class MyWin32\n{\npublic:\n\n   // An enumerated type for the control messages sent to the handler routine.\n   enum class CtrlTypes\n   {\n      CTRL_C_EVENT = 0,\n      CTRL_BREAK_EVENT, CTRL_CLOSE_EVENT, CTRL_LOGOFF_EVENT = 5,\n      CTRL_SHUTDOWN_EVENT\n   };\n\n   delegate Boolean HandlerRoutine(    // A delegate type to be used as the Handler Routine for SetConsoleCtrlHandler.\n   CtrlTypes CtrlType );\n\n   // Declare the SetConsoleCtrlHandler function as external and receiving a delegate.\n\n   [DllImport(&quot;Kernel32&quot;)]\n   static Boolean SetConsoleCtrlHandler( HandlerRoutine^ Handler, Boolean Add );\n};\n\npublic ref class MyApp\n{\nprivate:\n\n   // A private static handler function in the MyApp class.\n   static Boolean Handler( MyWin32::CtrlTypes CtrlType )\n   {\n      String^ message = &quot;This message should never be seen!&quot;;\n      \n      // A switch to handle the event type.\n      switch ( CtrlType )\n      {\n         case MyWin32::CtrlTypes::CTRL_C_EVENT:\n            message = &quot;A CTRL_C_EVENT was raised by the user.&quot;;\n            break;\n\n         case MyWin32::CtrlTypes::CTRL_BREAK_EVENT:\n            message = &quot;A CTRL_BREAK_EVENT was raised by the user.&quot;;\n            break;\n\n         case MyWin32::CtrlTypes::CTRL_CLOSE_EVENT:\n            message = &quot;A CTRL_CLOSE_EVENT was raised by the user.&quot;;\n            break;\n\n         case MyWin32::CtrlTypes::CTRL_LOGOFF_EVENT:\n            message = &quot;A CTRL_LOGOFF_EVENT was raised by the user.&quot;;\n            break;\n\n         case MyWin32::CtrlTypes::CTRL_SHUTDOWN_EVENT:\n            message = &quot;A CTRL_SHUTDOWN_EVENT was raised by the user.&quot;;\n            break;\n      }\n      \n      // Use interop to display a message for the type of event.\n      Console::WriteLine( message );\n      return true;\n   }\n\n\npublic:\n   static void Test()\n   {\n      \n      // Use interop to set a console control handler.\n      MyWin32::HandlerRoutine^ hr = gcnew MyWin32::HandlerRoutine( Handler );\n      MyWin32::SetConsoleCtrlHandler( hr, true );\n      \n      // Give the user some time to raise a few events.\n      Console::WriteLine( &quot;Waiting 30 seconds for console ctrl events...&quot; );\n      \n      // The Object hr is not referred to again.\n      // The garbage collector can detect that the object has no\n      // more managed references and might clean it up here while\n      // the unmanaged SetConsoleCtrlHandler method is still using it.\n      // Force a garbage collection to demonstrate how the hr\n      // object will be handled.\n      GC::Collect();\n      GC::WaitForPendingFinalizers();\n      GC::Collect();\n      Thread::Sleep( 30000 );\n      \n      // Display a message to the console when the unmanaged method\n      // has finished its work.\n      Console::WriteLine( &quot;Finished!&quot; );\n      \n      // Call GC::KeepAlive(hr) at this point to maintain a reference to hr.\n      // This will prevent the garbage collector from collecting the\n      // object during the execution of the SetConsoleCtrlHandler method.\n      GC::KeepAlive( hr );\n   }\n\n};\n\nint main()\n{\n   MyApp::Test();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.KeepAlive Example2#1\">using System;\nusing System.Threading;\nusing System.Runtime.InteropServices;\n\n// A simple class that exposes two static Win32 functions.\n// One is a delegate type and the other is an enumerated type.\npublic class MyWin32 \n{\n    // Declare the SetConsoleCtrlHandler function \n    // as external and receiving a delegate.   \n    [DllImport(&quot;Kernel32&quot;)] \n    public static extern Boolean SetConsoleCtrlHandler(HandlerRoutine Handler, \n        Boolean Add);\n\n    // A delegate type to be used as the handler routine \n    // for SetConsoleCtrlHandler.\n    public delegate Boolean HandlerRoutine(CtrlTypes CtrlType);\n\n    // An enumerated type for the control messages \n    // sent to the handler routine.\n    public enum CtrlTypes \n    {\n        CTRL_C_EVENT = 0,\n        CTRL_BREAK_EVENT,\n        CTRL_CLOSE_EVENT,   \n        CTRL_LOGOFF_EVENT = 5,\n        CTRL_SHUTDOWN_EVENT\n    }\n}\n\npublic class MyApp \n{\n    // A private static handler function in the MyApp class.\n    static Boolean Handler(MyWin32.CtrlTypes CtrlType)\n    {\n        String message = &quot;This message should never be seen!&quot;;\n\n        // A switch to handle the event type.\n        switch(CtrlType)\n        {\n            case MyWin32.CtrlTypes.CTRL_C_EVENT:\n                message = &quot;A CTRL_C_EVENT was raised by the user.&quot;;\n                break;\n            case MyWin32.CtrlTypes.CTRL_BREAK_EVENT:\n                message = &quot;A CTRL_BREAK_EVENT was raised by the user.&quot;;\n                break;\n            case MyWin32.CtrlTypes.CTRL_CLOSE_EVENT:   \n                message = &quot;A CTRL_CLOSE_EVENT was raised by the user.&quot;;\n                break;\n            case MyWin32.CtrlTypes.CTRL_LOGOFF_EVENT:\n                message = &quot;A CTRL_LOGOFF_EVENT was raised by the user.&quot;;\n                break;\n            case MyWin32.CtrlTypes.CTRL_SHUTDOWN_EVENT:\n                message = &quot;A CTRL_SHUTDOWN_EVENT was raised by the user.&quot;;\n                break;\n        }\n\n        // Use interop to display a message for the type of event.\n        Console.WriteLine(message);\n\n        return true;\n    }\n\n    public static void Main()\n    {         \n\n        // Use interop to set a console control handler.\n        MyWin32.HandlerRoutine hr = new MyWin32.HandlerRoutine(Handler);\n        MyWin32.SetConsoleCtrlHandler(hr, true);\n\n        // Give the user some time to raise a few events.\n        Console.WriteLine(&quot;Waiting 30 seconds for console ctrl events...&quot;);\n\n        // The object hr is not referred to again.\n        // The garbage collector can detect that the object has no\n        // more managed references and might clean it up here while\n        // the unmanaged SetConsoleCtrlHandler method is still using it.      \n\t\t\n        // Force a garbage collection to demonstrate how the hr\n        // object will be handled.\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n\t\t\n        Thread.Sleep(30000);\n\n        // Display a message to the console when the unmanaged method\n        // has finished its work.\n        Console.WriteLine(&quot;Finished!&quot;);\n\n        // Call GC.KeepAlive(hr) at this point to maintain a reference to hr. \n        // This will prevent the garbage collector from collecting the \n        // object during the execution of the SetConsoleCtrlHandler method.\n        GC.KeepAlive(hr);   \n        Console.Read();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.KeepAlive Example2#1\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices\n\n&#39; A simple class that exposes two static Win32 functions.\n&#39; One is a delegate type and the other is an enumerated type.\n\nPublic Class MyWin32\n\n   &#39; Declare the SetConsoleCtrlHandler function as external \n   &#39; and receiving a delegate.   \n   &lt;DllImport(&quot;Kernel32&quot;)&gt; _\n   Public Shared Function SetConsoleCtrlHandler(ByVal Handler As HandlerRoutine, _\n         ByVal Add As Boolean) As Boolean\n   End Function\n\n\n   &#39; A delegate type to be used as the handler routine \n   &#39; for SetConsoleCtrlHandler.\n   Delegate Function HandlerRoutine(ByVal CtrlType As CtrlTypes) As [Boolean]\n\n   &#39; An enumerated type for the control messages \n   &#39; sent to the handler routine.\n\n   Public Enum CtrlTypes\n      CTRL_C_EVENT = 0\n      CTRL_BREAK_EVENT\n      CTRL_CLOSE_EVENT\n      CTRL_LOGOFF_EVENT = 5\n      CTRL_SHUTDOWN_EVENT\n   End Enum\nEnd Class\n\nPublic Class MyApp\n\n   &#39; A private static handler function in the MyApp class.\n   Shared Function Handler(ByVal CtrlType As MyWin32.CtrlTypes) As [Boolean]\n      Dim message As [String] = &quot;This message should never be seen!&quot;\n\n      &#39; A select case to handle the event type.\n      Select Case CtrlType\n         Case MyWin32.CtrlTypes.CTRL_C_EVENT\n            message = &quot;A CTRL_C_EVENT was raised by the user.&quot;\n         Case MyWin32.CtrlTypes.CTRL_BREAK_EVENT\n            message = &quot;A CTRL_BREAK_EVENT was raised by the user.&quot;\n         Case MyWin32.CtrlTypes.CTRL_CLOSE_EVENT\n            message = &quot;A CTRL_CLOSE_EVENT was raised by the user.&quot;\n         Case MyWin32.CtrlTypes.CTRL_LOGOFF_EVENT\n            message = &quot;A CTRL_LOGOFF_EVENT was raised by the user.&quot;\n         Case MyWin32.CtrlTypes.CTRL_SHUTDOWN_EVENT\n            message = &quot;A CTRL_SHUTDOWN_EVENT was raised by the user.&quot;\n      End Select\n\n      &#39; Use interop to display a message for the type of event.\n      Console.WriteLine(message)\n\n      Return True\n   End Function\n\n\n   Public Shared Sub Main()\n      &#39; Use interop to set a console control handler.\n      Dim hr As New MyWin32.HandlerRoutine(AddressOf Handler)\n      MyWin32.SetConsoleCtrlHandler(hr, True)\n\n      &#39; Give the user some time to raise a few events.\n      Console.WriteLine(&quot;Waiting 30 seconds for console ctrl events...&quot;)\n\n      &#39; The object hr is not referred to again.\n      &#39; The garbage collector can detect that the object has no\n      &#39; more managed references and might clean it up here while\n      &#39; the unmanaged SetConsoleCtrlHandler method is still using it.      \n      &#39; Force a garbage collection to demonstrate how the hr\n      &#39; object will be handled.\n      GC.Collect()\n      GC.WaitForPendingFinalizers()\n      GC.Collect()\n\n      Thread.Sleep(30000)\n\n      &#39; Display a message to the console when the unmanaged method\n      &#39; has finished its work.\n      Console.WriteLine(&quot;Finished!&quot;)\n\n      &#39; Call GC.KeepAlive(hr) at this point to maintain a reference to hr. \n      &#39; This will prevent the garbage collector from collecting the \n      &#39; object during the execution of the SetConsoleCtrlHandler method.\n      GC.KeepAlive(hr)\n      Console.Read()\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_RegisterForFullGCNotification_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_GC_RegisterForFullGCNotification_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterForFullGCNotification(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxGenerationThreshold</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>largeObjectHeapThreshold</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>maxGenerationThreshold </code>or <code>largeObjectHeapThreshold </code>is not between 1 and 99.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For each generation, the garbage collector sets a threshold for allocations into that generation. When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation. For example, if generation 2â€™s threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection. Similarly, if the large object heap&#39;s (LOH&#39;s) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).  </p>\n<p> The <code>maxGenerationThreshold</code> and <code>largeObjectHeapThreshold</code> thresholds control how much in advance you are notified before a full garbage collection occurs. The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.  </p>\n<p> If you have situations in which a full garbage collection by the common language runtime would adversely affect your application&#39;s performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method) when conditions are still favorable. In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:  </p>\n<ul>\n<li><p>You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries). As a result, when the garbage collection occurs, it is able to reclaim more memory.  </p>\n</li>\n<li><p>You monitor for the completion of a full garbage collection so that you can collect some statistics.  For example, you might want to measure the size of the heap at GC completion so that you know the size of live data. (After a full GC, the heap is at its smallest size.)  </p>\n<p>For more information about what represents a full garbage collection, see <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a>.  </p>\n<p>When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed. This pattern resembles how the operating system monitors for low memory notifications.  </p>\n<p>Use the following guidelines for specifying the <code>maxGenerationThreshold</code> and <code>largeObjectHeapThreshold</code> parameters:  </p>\n</li>\n<li><p>The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.  </p>\n<p> A larger threshold value provides more opportunities for the runtime to check for an approaching collection. This increases the likelihood that you will be notified. However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.  </p>\n<p> When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime&#39;s next collection.  </p>\n</li>\n<li><p>The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification. This code example is part of a larger example provided for <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a> topic.  </p>\n<pre><code class=\"lang-cpp\" name=\"GCNotification#2\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Threading;\n\nnamespace GCNotify\n{\n    ref class Program\n    {\n    private:\n        // Variable for continual checking in the\n        // While loop in the WaitForFullGCProc method.\n        static bool checkForNotify = false;\n\n        // Variable for suspending work\n        // (such servicing allocated server requests)\n        // after a notification is received and then\n        // resuming allocation after inducing a garbage collection.\n        static bool bAllocate = false;\n\n        // Variable for ending the example.\n        static bool finalExit = false;\n\n        // Collection for objects that\n        // simulate the server request workload.\n        static List&lt;array&lt;Byte&gt;^&gt;^ load = gcnew List&lt;array&lt;Byte&gt;^&gt;();\n\n\n    public:\n        static void Main()\n        {\n            try\n            {\n                // Register for a notification.\n                GC::RegisterForFullGCNotification(10, 10);\n                Console::WriteLine(&quot;Registered for GC notification.&quot;);\n\n                checkForNotify = true;\n                bAllocate = true;\n\n                // Start a thread using WaitForFullGCProc.\n                Thread^ thWaitForFullGC = gcnew Thread(gcnew ThreadStart(&amp;WaitForFullGCProc));\n                thWaitForFullGC-&gt;Start();\n\n                // While the thread is checking for notifications in\n                // WaitForFullGCProc, create objects to simulate a server workload.\n                try\n                {\n                    int lastCollCount = 0;\n                    int newCollCount = 0;\n\n\n                    while (true)\n                    {\n                        if (bAllocate)\n                        {\n                            load-&gt;Add(gcnew array&lt;Byte&gt;(1000));\n                            newCollCount = GC::CollectionCount(2);\n                            if (newCollCount != lastCollCount)\n                            {\n                                // Show collection count when it increases:\n                                Console::WriteLine(&quot;Gen 2 collection count: {0}&quot;, GC::CollectionCount(2).ToString());\n                                lastCollCount = newCollCount;\n                            }\n\n                            // For ending the example (arbitrary).\n                            if (newCollCount == 500)\n                            {\n                                finalExit = true;\n                                checkForNotify = false;\n                                break;\n                            }\n                        }\n                    }\n\n                }\n                catch (OutOfMemoryException^)\n                {\n                    Console::WriteLine(&quot;Out of memory.&quot;);\n                }\n\n\n                finalExit = true;\n                checkForNotify = false;\n                GC::CancelFullGCNotification();\n\n            }\n            catch (InvalidOperationException^ invalidOp)\n            {\n\n                Console::WriteLine(&quot;GC Notifications are not supported while concurrent GC is enabled.<br>&quot;\n                    + invalidOp-&gt;Message);\n            }\n        }\n\n    public:\n        static void OnFullGCApproachNotify()\n        {\n            Console::WriteLine(&quot;Redirecting requests.&quot;);\n\n            // Method that tells the request queuing\n            // server to not direct requests to this server.\n            RedirectRequests();\n\n            // Method that provides time to\n            // finish processing pending requests.\n            FinishExistingRequests();\n\n            // This is a good time to induce a GC collection\n            // because the runtime will induce a full GC soon.\n            // To be very careful, you can check precede with a\n            // check of the GC.GCCollectionCount to make sure\n            // a full GC did not already occur since last notified.\n            GC::Collect();\n            Console::WriteLine(&quot;Induced a collection.&quot;);\n\n        }\n\n\n    public:\n        static void OnFullGCCompleteEndNotify()\n        {\n            // Method that informs the request queuing server\n            // that this server is ready to accept requests again.\n            AcceptRequests();\n            Console::WriteLine(&quot;Accepting requests again.&quot;);\n        }\n\n    public:\n        static void WaitForFullGCProc()\n        {\n            while (true)\n            {\n                // CheckForNotify is set to true and false in Main.\n                while (checkForNotify)\n                {\n                    // Check for a notification of an approaching collection.\n                    GCNotificationStatus s = GC::WaitForFullGCApproach();\n                    if (s == GCNotificationStatus::Succeeded)\n                    {\n                        Console::WriteLine(&quot;GC Notifiction raised.&quot;);\n                        OnFullGCApproachNotify();\n                    }\n                    else if (s == GCNotificationStatus::Canceled)\n                    {\n                        Console::WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // This can occur if a timeout period\n                        // is specified for WaitForFullGCApproach(Timeout)\n                        // or WaitForFullGCComplete(Timeout)\n                        // and the time out period has elapsed.\n                        Console::WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n\n                    // Check for a notification of a completed collection.\n                    s = GC::WaitForFullGCComplete();\n                    if (s == GCNotificationStatus::Succeeded)\n                    {\n                        Console::WriteLine(&quot;GC Notification raised.&quot;);\n                        OnFullGCCompleteEndNotify();\n                    }\n                    else if (s == GCNotificationStatus::Canceled)\n                    {\n                        Console::WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // Could be a time out.\n                        Console::WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n                }\n\n\n                Thread::Sleep(500);\n                // FinalExit is set to true right before\n                // the main thread cancelled notification.\n                if (finalExit)\n                {\n                    break;\n                }\n            }\n        }\n\n    private:\n        static void RedirectRequests()\n        {\n            // Code that sends requests\n            // to other servers.\n\n            // Suspend work.\n            bAllocate = false;\n\n        }\n\n        static void FinishExistingRequests()\n        {\n            // Code that waits a period of time\n            // for pending requests to finish.\n\n            // Clear the simulated workload.\n            load-&gt;Clear();\n\n        }\n\n        static void AcceptRequests()\n        {\n            // Code that resumes processing\n            // requests on this server.\n\n            // Resume work.\n            bAllocate = true;\n        }\n    };\n}\n\nint main()\n{\n    GCNotify::Program::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"GCNotification#2\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace GCNotify\n{\n    class Program\n    {\n        // Variable for continual checking in the \n        // While loop in the WaitForFullGCProc method.\n        static bool checkForNotify = false;\n\n        // Variable for suspending work \n        // (such servicing allocated server requests)\n        // after a notification is received and then \n        // resuming allocation after inducing a garbage collection.\n        static bool bAllocate = false;\n\n        // Variable for ending the example.\n        static bool finalExit = false;\n\n        // Collection for objects that  \n        // simulate the server request workload.\n        static List&lt;byte[]&gt; load = new List&lt;byte[]&gt;();\n\n\n        public static void Main(string[] args)\n        {\n            try\n            {\n                // Register for a notification. \n                GC.RegisterForFullGCNotification(10, 10);\n                Console.WriteLine(&quot;Registered for GC notification.&quot;);\n\n                checkForNotify = true;\n                bAllocate = true;\n\n                // Start a thread using WaitForFullGCProc.\n                Thread thWaitForFullGC = new Thread(new ThreadStart(WaitForFullGCProc));\n                thWaitForFullGC.Start();\n\n                // While the thread is checking for notifications in\n                // WaitForFullGCProc, create objects to simulate a server workload.\n                try\n                {\n\n                    int lastCollCount = 0;\n                    int newCollCount = 0;\n                    \n                    \n                    while (true)\n                    {\n                        if (bAllocate)\n                        {\n                            load.Add(new byte[1000]);\n                            newCollCount = GC.CollectionCount(2);\n                            if (newCollCount != lastCollCount)\n                            {\n                                // Show collection count when it increases:\n                                Console.WriteLine(&quot;Gen 2 collection count: {0}&quot;, GC.CollectionCount(2).ToString());\n                                lastCollCount = newCollCount;\n                            }\n                           \n                            // For ending the example (arbitrary).\n                            if (newCollCount == 500)\n                            {\n                                finalExit = true;\n                                checkForNotify = false;\n                                break;\n                            }\n                        }\n                    }\n\n                }\n                catch (OutOfMemoryException)\n                {\n                    Console.WriteLine(&quot;Out of memory.&quot;);\n                }\n\n\n                finalExit = true;\n                checkForNotify = false;\n                GC.CancelFullGCNotification();\n\n            }\n            catch (InvalidOperationException invalidOp)\n            {\n\n                Console.WriteLine(&quot;GC Notifications are not supported while concurrent GC is enabled.<br>&quot;\n                    + invalidOp.Message);\n            }\n        }\n\n        public static void OnFullGCApproachNotify()\n        {\n\n            Console.WriteLine(&quot;Redirecting requests.&quot;);\n\n            // Method that tells the request queuing  \n            // server to not direct requests to this server. \n            RedirectRequests();\n\n            // Method that provides time to \n            // finish processing pending requests. \n            FinishExistingRequests();\n\n            // This is a good time to induce a GC collection\n            // because the runtime will induce a full GC soon.\n            // To be very careful, you can check precede with a\n            // check of the GC.GCCollectionCount to make sure\n            // a full GC did not already occur since last notified.\n            GC.Collect();\n            Console.WriteLine(&quot;Induced a collection.&quot;);\n\n        }\n\n\n        public static void OnFullGCCompleteEndNotify()\n        {\n            // Method that informs the request queuing server\n            // that this server is ready to accept requests again.\n            AcceptRequests();\n            Console.WriteLine(&quot;Accepting requests again.&quot;);\n        }\n\n        public static void WaitForFullGCProc()\n        {\n            while (true)\n            {\n                // CheckForNotify is set to true and false in Main.\n                while (checkForNotify)\n                {\n                    // Check for a notification of an approaching collection.\n                    GCNotificationStatus s = GC.WaitForFullGCApproach();\n                    if (s == GCNotificationStatus.Succeeded)\n                    {\n                        Console.WriteLine(&quot;GC Notification raised.&quot;);\n                        OnFullGCApproachNotify();\n                    }\n                    else if (s == GCNotificationStatus.Canceled)\n                    {\n                        Console.WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // This can occur if a timeout period\n                        // is specified for WaitForFullGCApproach(Timeout) \n                        // or WaitForFullGCComplete(Timeout)  \n                        // and the time out period has elapsed. \n                        Console.WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n\n                    // Check for a notification of a completed collection.\n                    s = GC.WaitForFullGCComplete();\n                    if (s == GCNotificationStatus.Succeeded)\n                    {\n                        Console.WriteLine(&quot;GC Notifiction raised.&quot;);\n                        OnFullGCCompleteEndNotify();\n                    }\n                    else if (s == GCNotificationStatus.Canceled)\n                    {\n                        Console.WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // Could be a time out.\n                        Console.WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n                }\n\n\n                Thread.Sleep(500);\n                // FinalExit is set to true right before  \n                // the main thread cancelled notification.\n                if (finalExit)\n                {\n                    break;\n                }\n            }\n\n        }\n\n        private static void RedirectRequests()\n        {\n            // Code that sends requests\n            // to other servers.\n\n            // Suspend work.\n            bAllocate = false;\n\n        }\n\n        private static void FinishExistingRequests()\n        {\n            // Code that waits a period of time\n            // for pending requests to finish.\n\n            // Clear the simulated workload.\n            load.Clear();\n\n        }\n\n        private static void AcceptRequests()\n        {\n            // Code that resumes processing\n            // requests on this server.\n\n            // Resume work.\n            bAllocate = true;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GCNotification#2\">Imports System.Collections.Generic\nImports System.Threading\n\nClass Program\n    &#39; Variables for continual checking in the\n    &#39; While loop in the WaitForFullGcProc method.\n    Private Shared checkForNotify As Boolean = False\n\n    &#39; Variable for suspending work \n    &#39; (such as servicing allocated server requests)\n    &#39; after a notification is received and then \n    &#39; resuming allocation after inducing a garbage collection.\n    Private Shared bAllocate As Boolean = False\n\n    &#39; Variable for ending the example.\n    Private Shared finalExit As Boolean = False\n\n    &#39; Collection for objects that  \n    &#39; simulate the server request workload.\n    Private Shared load As New List(Of Byte())\n\n\n    Public Shared Sub Main(ByVal args() As String)\n        Try\n            &#39; Register for a notification. \n            GC.RegisterForFullGCNotification(10, 10)\n            Console.WriteLine(&quot;Registered for GC notification.&quot;)\n\n            bAllocate = True\n            checkForNotify = True\n\n            &#39; Start a thread using WaitForFullGCProc.\n            Dim thWaitForFullGC As Thread = _\n                New Thread(New ThreadStart(AddressOf WaitForFullGCProc))\n            thWaitForFullGC.Start()\n\n            &#39; While the thread is checking for notifications in\n            &#39; WaitForFullGCProc, create objects to simulate a server workload.\n            Try\n                Dim lastCollCount As Integer = 0\n                Dim newCollCount As Integer = 0\n                \n                \n                While (True)\n                    If bAllocate = True Then\n\n                        load.Add(New Byte(1000) {})\n                        newCollCount = GC.CollectionCount(2)\n                        If (newCollCount &lt;&gt; lastCollCount) Then\n                            &#39; Show collection count when it increases:\n                            Console.WriteLine(&quot;Gen 2 collection count: {0}&quot;, _\n                                              GC.CollectionCount(2).ToString)\n                            lastCollCount = newCollCount\n                        End If\n\n                        &#39; For ending the example (arbitrary).\n                        If newCollCount = 500 Then\n                            finalExit = True\n                            checkForNotify = False\n                            bAllocate = False\n                            Exit While\n                        End If\n\n                    End If\n                End While\n                \n            Catch outofMem As OutOfMemoryException\n                Console.WriteLine(&quot;Out of memory.&quot;)\n            End Try\n\n            finalExit = True\n            checkForNotify = False\n            GC.CancelFullGCNotification()\n\n        Catch invalidOp As InvalidOperationException\n            Console.WriteLine(&quot;GC Notifications are not supported while concurrent GC is enabled.&quot; _\n                              &amp; vbLf &amp; invalidOp.Message)\n        End Try\n    End Sub\n\n    Public Shared Sub OnFullGCApproachNotify()\n        Console.WriteLine(&quot;Redirecting requests.&quot;)\n\n        &#39; Method that tells the request queuing  \n        &#39; server to not direct requests to this server. \n        RedirectRequests()\n\n        &#39; Method that provides time to \n        &#39; finish processing pending requests. \n        FinishExistingRequests()\n\n        &#39; This is a good time to induce a GC collection\n        &#39; because the runtime will induce a ful GC soon.\n        &#39; To be very careful, you can check precede with a\n        &#39; check of the GC.GCCollectionCount to make sure\n        &#39; a full GC did not already occur since last notified.\n        GC.Collect()\n        Console.WriteLine(&quot;Induced a collection.&quot;)\n    End Sub\n\n    Public Shared Sub OnFullGCCompleteEndNotify()\n        &#39; Method that informs the request queuing server\n        &#39; that this server is ready to accept requests again.\n        AcceptRequests()\n        Console.WriteLine(&quot;Accepting requests again.&quot;)\n    End Sub\n\n    Public Shared Sub WaitForFullGCProc()\n\n        While True\n            &#39; CheckForNotify is set to true and false in Main.\n\n            While checkForNotify\n                &#39; Check for a notification of an approaching collection.\n                Dim s As GCNotificationStatus = GC.WaitForFullGCApproach\n                If (s = GCNotificationStatus.Succeeded) Then\n                    Console.WriteLine(&quot;GC Notification raised.&quot;)\n                    OnFullGCApproachNotify()\n                ElseIf (s = GCNotificationStatus.Canceled) Then\n                    Console.WriteLine(&quot;GC Notification cancelled.&quot;)\n                    Exit While\n                Else\n                    &#39; This can occur if a timeout period\n                    &#39; is specified for WaitForFullGCApproach(Timeout) \n                    &#39; or WaitForFullGCComplete(Timeout)  \n                    &#39; and the time out period has elapsed. \n                    Console.WriteLine(&quot;GC Notification not applicable.&quot;)\n                    Exit While\n                End If\n\n                &#39; Check for a notification of a completed collection.\n                s = GC.WaitForFullGCComplete\n                If (s = GCNotificationStatus.Succeeded) Then\n                    Console.WriteLine(&quot;GC Notifiction raised.&quot;)\n                    OnFullGCCompleteEndNotify()\n                ElseIf (s = GCNotificationStatus.Canceled) Then\n                    Console.WriteLine(&quot;GC Notification cancelled.&quot;)\n                    Exit While\n                Else\n                    &#39; Could be a time out.\n                    Console.WriteLine(&quot;GC Notification not applicable.&quot;)\n                    Exit While\n                End If\n\n            End While\n            Thread.Sleep(500)\n            &#39; FinalExit is set to true right before  \n            &#39; the main thread cancelled notification.\n            If finalExit Then\n                Exit While\n            End If\n\n        End While\n    End Sub\n\n    Private Shared Sub RedirectRequests()\n        &#39; Code that sends requests\n        &#39; to other servers.\n\n        &#39; Suspend work.\n        bAllocate = False\n    End Sub\n\n    Private Shared Sub FinishExistingRequests()\n        &#39; Code that waits a period of time\n        &#39; for pending requests to finish.\n\n        &#39; Clear the simulated workload.\n        load.Clear()\n\n    End Sub\n\n    Private Shared Sub AcceptRequests()\n        &#39; Code that resumes processing\n        &#39; requests on this server.\n\n        &#39; Resume work.\n        bAllocate = True\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_RemoveMemoryPressure_System_Int64_\">\r\n    \r\n            <a id=\"System_GC_RemoveMemoryPressure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveMemoryPressure(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RemoveMemoryPressure (long bytesAllocated);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesAllocated</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of unmanaged memory that has been released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bytesAllocated</code> is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> On a 32-bit computer, <code>bytesAllocated</code> is larger than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated. If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection. The <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> method informs the runtime of this additional pressure on system memory, and the RemoveMemoryPressure method informs the runtime that the additional pressure has been released.  </p>\n<p> In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the <code>Dispose</code> or <code>Finalize</code> method. Call the <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> method after allocating the unmanaged memory, and call the RemoveMemoryPressure method after releasing it.  </p>\n<p> In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> and RemoveMemoryPressure methods to communicate these incremental changes to the runtime.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must ensure that you remove exactly the amount of pressure you add. Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_ReRegisterForFinalize_System_Object_\">\r\n    \r\n            <a id=\"System_GC_ReRegisterForFinalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReRegisterForFinalize(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Requests that the system call the finalizer for the specified object for which <span class=\"xref\">stem.GC.SuppressFinalize*</span> has previously been called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ReRegisterForFinalize (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that a finalizer must be called for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReRegisterForFinalize method adds the <code>obj</code> parameter to the list of objects that request finalization before the garbage collector frees the object. The <code>obj</code> parameter must be the caller of this method.  </p>\n<p> Calling the ReRegisterForFinalize method does not guarantee that the garbage collector will call an object&#39;s finalizer.  </p>\n<p> By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method.  </p>\n<p> A finalizer can use this method to resurrect itself or an object that it references.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ReRegisterForFinalize method to finalize an object a second time after garbage collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.GC.ReregisterForFinalize Example#1\">using namespace System;\nref class MyFinalizeObject\n{\npublic:\n   static MyFinalizeObject^ currentInstance = nullptr;\n\nprivate:\n   bool hasFinalized;\n\npublic:\n   MyFinalizeObject()\n   {\n      hasFinalized = false;\n   }\n\n   ~MyFinalizeObject()\n   {\n      if ( hasFinalized == false )\n      {\n         Console::WriteLine( &quot;First finalization&quot; );\n         \n         // Put this object back into a root by creating\n         // a reference to it.\n         MyFinalizeObject::currentInstance = this;\n         \n         // Indicate that this instance has finalized once.\n         hasFinalized = true;\n         \n         // Place a reference to this object back in the\n         // finalization queue.\n         GC::ReRegisterForFinalize( this );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Second finalization&quot; );\n      }\n   }\n\n};\n\nint main()\n{\n   \n   // Create a MyFinalizeObject.\n   MyFinalizeObject^ mfo = gcnew MyFinalizeObject;\n   \n   // Release the reference to mfo.\n   mfo = nullptr;\n   \n   // Force a garbage collection.\n   GC::Collect();\n   \n   // At this point mfo will have gone through the first Finalize.\n   // There should now be a reference to mfo in the static\n   // MyFinalizeObject::currentInstance field.  Setting this value\n   // to 0 and forcing another garbage collection will now\n   // cause the object to Finalize permanently.\n   MyFinalizeObject::currentInstance = nullptr;\n   GC::Collect();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.ReregisterForFinalize Example#1\">Imports System\n\nNamespace ReRegisterForFinalizeExample\n    Class MyMainClass\n        Shared Sub Main()\n            &#39;Create a MyFinalizeObject.\n            Dim mfo As New MyFinalizeObject()\n\n            &#39;Release the reference to mfo.\n            mfo = Nothing\n\n            &#39;Force a garbage collection.\n            GC.Collect()\n\n            &#39;At this point mfo will have gone through the first Finalize.\n            &#39;There should now be a reference to mfo in the static\n            &#39;MyFinalizeObject.currentInstance field.  Setting this value\n            &#39;to null and forcing another garbage collection will now\n            &#39;cause the object to Finalize permanently.\n            MyFinalizeObject.currentInstance = Nothing\n            GC.Collect()\n        End Sub\n    End Class\n\n    Class MyFinalizeObject\n        Public Shared currentInstance As MyFinalizeObject = Nothing\n        Private hasFinalized As Boolean = False\n\n        Protected Overrides Sub Finalize()\n            If hasFinalized = False Then\n                Console.WriteLine(&quot;First finalization&quot;)\n\n                &#39;Put this object back into a root by creating\n                &#39;a reference to it.\n                MyFinalizeObject.currentInstance = Me\n\n                &#39;Indicate that this instance has finalized once.\n                hasFinalized = True\n\n                &#39;Place a reference to this object back in the\n                &#39;finalization queue.\n                GC.ReRegisterForFinalize(Me)\n            Else\n                Console.WriteLine(&quot;Second finalization&quot;)\n            End If\n            MyBase.Finalize()\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.ReregisterForFinalize Example#1\">using System;\n\nnamespace ReRegisterForFinalizeExample\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            // Create a MyFinalizeObject.\n            MyFinalizeObject mfo = new MyFinalizeObject();\n\n            // Release the reference to mfo.\n            mfo = null;\n\n            // Force a garbage collection.\n            GC.Collect();\n\n            // At this point mfo will have gone through the first Finalize.\n            // There should now be a reference to mfo in the static\n            // MyFinalizeObject.currentInstance field.  Setting this value\n            // to null and forcing another garbage collection will now\n            // cause the object to Finalize permanently.\n            MyFinalizeObject.currentInstance = null;\n            GC.Collect();\n        }\n    }\n\n    class MyFinalizeObject\n    {\n        public static MyFinalizeObject currentInstance = null;\n        private bool hasFinalized = false;\n\n        ~MyFinalizeObject()\n        {\n            if(hasFinalized == false)\n            {\n                Console.WriteLine(&quot;First finalization&quot;);\n            \n                // Put this object back into a root by creating\n                // a reference to it.\n                MyFinalizeObject.currentInstance = this;\n            \n                // Indicate that this instance has finalized once.\n                hasFinalized = true;\n\n                // Place a reference to this object back in the\n                // finalization queue.\n                GC.ReRegisterForFinalize(this);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Second finalization&quot;);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_SuppressFinalize_System_Object_\">\r\n    \r\n            <a id=\"System_GC_SuppressFinalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SuppressFinalize(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Requests that the common language runtime not call the finalizer for the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SuppressFinalize (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose finalizer must not be executed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sets a bit in the object header of <code>obj</code>, which the runtime checks when calling finalizers. A finalizer, which is represented by the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method, is used to release unmanaged resources before an object is garbage-collected. If <code>obj</code> does not have a finalizer, the call to the SuppressFinalize method has no effect.  </p>\n<p> Objects that implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface can call this method from the object&#39;s <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation to prevent the garbage collector from calling <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> on an object that does not require it. Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the SuppressFinalize method in a resource class to prevent a redundant garbage collection from being called. The example uses the <a href=\"../Topic/Dispose%20Pattern.md\" data-linktype=\"relative-path\">dispose pattern</a> to free both managed resources (that is, objects that implement <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>) and unmanaged resources.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.SuppressFinalize#1\">using System;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\n\npublic class ConsoleMonitor : IDisposable\n{\n   const int STD_INPUT_HANDLE = -10;\n   const int STD_OUTPUT_HANDLE = -11;\n   const int STD_ERROR_HANDLE = -12;\n\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   static extern IntPtr GetStdHandle(int nStdHandle); \n\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   static extern bool WriteConsole(IntPtr hConsoleOutput, string lpBuffer,\n          uint nNumberOfCharsToWrite, out uint lpNumberOfCharsWritten,\n          IntPtr lpReserved);   \n\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   static extern bool CloseHandle(IntPtr handle); \n                    \n   private bool disposed = false;\n   private IntPtr handle;\n   private Component component;\n   \n   public ConsoleMonitor()\n   {\n      handle = GetStdHandle(STD_OUTPUT_HANDLE);\n      if (handle == IntPtr.Zero)\n         throw new InvalidOperationException(&quot;A console handle is not available.&quot;);\n\n      component = new Component();\n      \n      string output = &quot;The ConsoleMonitor class constructor.<br>&quot;;\n      uint written = 0;\n      WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n   }\n\n   // The destructor calls Object.Finalize.\n   ~ConsoleMonitor()\n   {\n      if (handle != IntPtr.Zero) {\n         string output = &quot;The ConsoleMonitor finalizer.<br>&quot;;\n         uint written = 0;\n         WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n      }\n      else {     \n         Console.Error.WriteLine(&quot;Object finalization.&quot;);\n      }\n      // Call Dispose with disposing = false.\n      Dispose(false);\n   }\n\n   public void Write()\n   {\n      string output = &quot;The Write method.<br>&quot;;\n      uint written = 0;\n      WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n   }\n\n   public void Dispose()\n   {\n      string output = &quot;The Dispose method.<br>&quot;;\n      uint written = 0;\n      WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n\n      Dispose(true);\n      GC.SuppressFinalize(this); \n   }\n\n   private void Dispose(bool disposing)\n   {\n      string output = String.Format(&quot;The Dispose({0}) method.<br>&quot;, disposing);\n      uint written = 0;\n      WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n\n      // Execute if resources have not already been disposed.\n      if (! disposed) {\n         // If the call is from Dispose, free managed resources.\n         if (disposing) {\n            Console.Error.WriteLine(&quot;Disposing of managed resources.&quot;);\n            if (component != null)\n               component.Dispose();\n         }\n         // Free unmanaged resources.\n         output = &quot;Disposing of unmanaged resources.&quot;;\n         WriteConsole(handle, output, (uint) output.Length, out written, IntPtr.Zero);\n         \n         if (handle != IntPtr.Zero) {\n            if (! CloseHandle(handle))\n               Console.Error.WriteLine(&quot;Handle cannot be closed.&quot;); \n         }      \n      }\n      disposed = true;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;ConsoleMonitor instance....&quot;);\n      ConsoleMonitor monitor = new ConsoleMonitor();\n      monitor.Write();\n      monitor.Dispose();\n   }\n}\n// If the monitor.Dispose method is not called, the example displays the following output:\n//       ConsoleMonitor instance....\n//       The ConsoleMonitor class constructor.\n//       The Write method.\n//       The ConsoleMonitor finalizer.\n//       The Dispose(False) method.\n//       Disposing of unmanaged resources.\n//       \n// If the monitor.Dispose method is called, the example displays the following output:\n//       ConsoleMonitor instance....\n//       The ConsoleMonitor class constructor.\n//       The Write method.\n//       The Dispose method.\n//       The Dispose(True) method.\n//       Disposing of managed resources.\n//       Disposing of unmanaged resources.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.SuppressFinalize#1\">Imports System.ComponentModel\nImports System.Runtime.InteropServices\n\nPublic Class ConsoleMonitor\n   Private Const STD_INPUT_HANDLE As Integer = -10\n   Private Const STD_OUTPUT_HANDLE As Integer = -11\n   Private Const STD_ERROR_HANDLE As Integer = -12\n\n   Private Declare Function GetStdHandle Lib &quot;kernel32&quot; _\n                            (nStdHandle As Integer) As IntPtr\n\n   Private Declare Function WriteConsole Lib &quot;kernel32&quot; _\n                            Alias &quot;WriteConsoleA&quot; _\n                            (hConsoleOutput As IntPtr, lpBuffer As String,\n                            nNumberOfCharsToWrite As UInteger, \n                            ByRef lpNumberOfCharsWritten As UInteger,\n                            lpReserved As IntPtr) As Boolean \n\n   Private Declare Function CloseHandle Lib &quot;kernel32&quot; _ \n                           (handle As IntPtr) As Boolean\n                    \n   Private disposed As Boolean = False\n   Private handle As IntPtr\n   Private component As Component\n   \n   Public Sub New()\n      handle = GetStdHandle(STD_OUTPUT_HANDLE)\n      If handle = IntPtr.Zero Then\n         Throw New InvalidOperationException(&quot;A console handle is not available.&quot;)\n      End If\n      \n      component = new Component()\n      \n      Dim output As String = &quot;The ConsoleMonitor class constructor.&quot; + vbCrLf\n      Dim written As UInteger = 0\n      WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n   End Sub\n\n   Protected Overrides Sub Finalize()\n      If handle &lt;&gt; IntPtr.Zero Then\n         Dim output As String = &quot;The ConsoleMonitor finalizer.&quot; + vbCrLf\n         Dim written As UInteger = 0\n         WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n      Else     \n         Console.Error.WriteLine(&quot;Object finalization.&quot;)\n      End If\n      &#39; Call Dispose with disposing = false.\n      Dispose(false)\n   End Sub\n\n   Public Sub Write()\n      Dim output As String = &quot;The Write method.&quot; + vbCrLf\n      Dim written As UInteger = 0\n      WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n   End Sub\n\n   Public Sub Dispose()\n      Dim output As String =  &quot;The Dispose method.&quot; + vbCrLf\n      Dim written As UInteger = 0\n      WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n\n      Dispose(True)\n      GC.SuppressFinalize(Me) \n   End Sub\n\n   Private Sub Dispose(disposing As Boolean)\n      Dim output As String =  String.Format(&quot;The Dispose({0}) method.{1}&quot;, \n                                            disposing, vbCrLf)\n      Dim written As UInteger = 0\n      WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n\n      &#39; Execute if resources have not already been disposed.\n      If Not disposed Then\n         &#39; If the call is from Dispose, free managed resources.\n         If disposing Then\n            Console.Error.WriteLine(&quot;Disposing of managed resources.&quot;)\n            If component IsNot Nothing Then component.Dispose()\n         End If\n         &#39; Free unmanaged resources.\n         output = &quot;Disposing of unmanaged resources.&quot;\n         WriteConsole(handle, output, CUInt(output.Length), written, IntPtr.Zero)\n         \n         If handle &lt;&gt; IntPtr.Zero Then\n            If Not CloseHandle(handle) Then\n               Console.Error.WriteLine(&quot;Handle cannot be closed.&quot;)\n            End If    \n         End If   \n      End If\n      disposed = True\n   End Sub\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(&quot;ConsoleMonitor instance....&quot;)\n      Dim monitor As New ConsoleMonitor\n      monitor.Write()\n      monitor.Dispose()\n   End Sub\nEnd Module\n&#39; If the monitor.Dispose method is not called, the example displays the following output:\n&#39;       ConsoleMonitor instance....\n&#39;       The ConsoleMonitor class constructor.\n&#39;       The Write method.\n&#39;       The ConsoleMonitor finalizer.\n&#39;       The Dispose(False) method.\n&#39;       Disposing of unmanaged resources.\n&#39;       \n&#39; If the monitor.Dispose method is called, the example displays the following output:\n&#39;       ConsoleMonitor instance....\n&#39;       The ConsoleMonitor class constructor.\n&#39;       The Write method.\n&#39;       The Dispose method.\n&#39;       The Dispose(True) method.\n&#39;       Disposing of managed resources.\n&#39;       Disposing of unmanaged resources.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_TryStartNoGCRegion_System_Int64_\">\r\n    \r\n            <a id=\"System_GC_TryStartNoGCRegion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryStartNoGCRegion(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryStartNoGCRegion (long totalSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalSize</code> exceeds the ephemeral segment size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process is already in no GC region latency mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory. The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 * <code>totalSize</code> bytes (it attempts to allocate <code>totalSize</code> bytes for the small object heap and <code>totalSize</code> bytes for the large object heap).  </p>\n<p> <code>totalSize</code> must be large enough to handle all memory allocations that occur in the critical path. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Boolean_\">\r\n    \r\n            <a id=\"System_GC_TryStartNoGCRegion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryStartNoGCRegion(Int64,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>disallowFullBlockingGC</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <code>totalSize</code> bytes; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalSize</code> exceeds the ephemeral segment size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process is already in no GC region latency mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory and the <code>disallowFullBlockingGC</code> argument is <code>false</code>, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns <code>false</code>. The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 * <code>totalSize</code> (it attempts to allocate <code>totalSize</code> for the small object heap and <code>totalSize</code> for the large object heap).  </p>\n<p> <code>totalSize</code> must be large enough to handle all memory allocations that occur in the critical path. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<p> Setting <code>disallowFullBlockingGC</code> to <code>true</code> to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns <code>true</code>, and have the load balancer redirect requests to other systems if it returns <code>false</code>. It can then do a full blocking garbage collection when it&#39;s not handling requests by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_GC_TryStartNoGCRegion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryStartNoGCRegion(Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryStartNoGCRegion (long totalSize, long lohSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of memory in bytes to allocate without triggering a garbage collection. <code>totalSize</code> â€“<code>lohSize</code> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lohSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in <code>totalSize</code> to use for large object heap (LOH) allocations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalSize</code> â€“ <code>lohSize</code> exceeds the ephemeral segment size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process is already in no GC region latency mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory. The garbage collector enters no GC region latency mode if it is able to allocate <code>lohSize</code> for the LOH and <code>totalSize</code> â€“ <code>lohSize</code> for the small object heap (SOH).  </p>\n<p> <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the LOH, and <code>totalSize</code> â€“ <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the SOH. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Int64_System_Boolean_\">\r\n    \r\n            <a id=\"System_GC_TryStartNoGCRegion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryStartNoGCRegion(Int64,Int64,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of memory in bytes to allocate without triggering a garbage collection. <code>totalSize</code> â€“<code>lohSize</code> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lohSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in <code>totalSize</code> to use for large object heap (LOH) allocations.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>disallowFullBlockingGC</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalSize</code> â€“ <code>lohSize</code> exceeds the ephemeral segment size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process is already in no GC region latency mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory and the <code>disallowFullBlockingGC</code> argument is <code>false</code>, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns <code>false</code>. The garbage collector enters no GC region latency mode if it is able to allocate <code>lohSize</code> for the LOH and <code>totalSize</code> â€“ <code>lohSize</code> for the small object heap (SOH).  </p>\n<p> <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the LOH, and <code>totalSize</code> â€“ <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the SOH. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<p> Setting <code>disallowFullBlockingGC</code> to <code>true</code> to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns <code>true</code>, and have the load balancer redirect requests to other systems if it returns <code>false</code>. It can then do a full blocking garbage collection when it&#39;s not handling requests by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_WaitForFullGCApproach\">\r\n    \r\n            <a id=\"System_GC_WaitForFullGCApproach_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForFullGCApproach()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static GCNotificationStatus WaitForFullGCApproach ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></div>\r\n                  </div>\r\n                  <p>The status of the registered garbage collection notification.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to determine whether the full garbage collection has completed.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.  </p>\n<p> This method waits indefinitely for a garbage collection notification to be obtained. If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_System_Int32_\" data-linktype=\"relative-path\">System.GC.WaitForFullGCApproach(Int32)</a> method overload. If you call this method without specifying a time-out, you can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method if you are waiting longer than preferred.  </p>\n<p> You should follow this method with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to make sure that you have had a full garbage collection. Calling this method alone causes indeterminate results.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching. Whenever the status of the notification is <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, the user method <code>OnFullGCApproachNotify</code> is called to perform actions in response to the approaching collection. This code example is part of a larger example provided for <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a> topic.  </p>\n<pre><code class=\"lang-cpp\" name=\"GCNotification#3\">                    // Check for a notification of an approaching collection.\n                    GCNotificationStatus s = GC::WaitForFullGCApproach();\n                    if (s == GCNotificationStatus::Succeeded)\n                    {\n                        Console::WriteLine(&quot;GC Notifiction raised.&quot;);\n                        OnFullGCApproachNotify();\n                    }\n                    else if (s == GCNotificationStatus::Canceled)\n                    {\n                        Console::WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // This can occur if a timeout period\n                        // is specified for WaitForFullGCApproach(Timeout)\n                        // or WaitForFullGCComplete(Timeout)\n                        // and the time out period has elapsed.\n                        Console::WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n</code></pre><pre><code class=\"lang-cs\" name=\"GCNotification#3\">                    // Check for a notification of an approaching collection.\n                    GCNotificationStatus s = GC.WaitForFullGCApproach();\n                    if (s == GCNotificationStatus.Succeeded)\n                    {\n                        Console.WriteLine(&quot;GC Notification raised.&quot;);\n                        OnFullGCApproachNotify();\n                    }\n                    else if (s == GCNotificationStatus.Canceled)\n                    {\n                        Console.WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // This can occur if a timeout period\n                        // is specified for WaitForFullGCApproach(Timeout) \n                        // or WaitForFullGCComplete(Timeout)  \n                        // and the time out period has elapsed. \n                        Console.WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n</code></pre><pre><code class=\"lang-vb\" name=\"GCNotification#3\">                &#39; Check for a notification of an approaching collection.\n                Dim s As GCNotificationStatus = GC.WaitForFullGCApproach\n                If (s = GCNotificationStatus.Succeeded) Then\n                    Console.WriteLine(&quot;GC Notification raised.&quot;)\n                    OnFullGCApproachNotify()\n                ElseIf (s = GCNotificationStatus.Canceled) Then\n                    Console.WriteLine(&quot;GC Notification cancelled.&quot;)\n                    Exit While\n                Else\n                    &#39; This can occur if a timeout period\n                    &#39; is specified for WaitForFullGCApproach(Timeout) \n                    &#39; or WaitForFullGCComplete(Timeout)  \n                    &#39; and the time out period has elapsed. \n                    Console.WriteLine(&quot;GC Notification not applicable.&quot;)\n                    Exit While\n                End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_WaitForFullGCApproach_System_Int32_\">\r\n    \r\n            <a id=\"System_GC_WaitForFullGCApproach_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForFullGCApproach(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></div>\r\n                  </div>\r\n                  <p>The status of the registered garbage collection notification.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> must be either non-negative or less than or equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to determine whether the full garbage collection has completed.  </p>\n<p> Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by <code>millisecondsTimeout</code>. If a garbage collection notification status is not obtained before <code>millisecondsTimeout</code> times out, this method returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.  </p>\n<p> You can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method when you cannot wait for the time-out period to elapse.  </p>\n<p> You should follow this method with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to make sure that you have had a full garbage collection. Calling this method alone causes indeterminate results.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_WaitForFullGCComplete\">\r\n    \r\n            <a id=\"System_GC_WaitForFullGCComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForFullGCComplete()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static GCNotificationStatus WaitForFullGCComplete ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></div>\r\n                  </div>\r\n                  <p>The status of the registered garbage collection notification.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to determine whether a full garbage collection is imminent.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as resuming work and obtaining a collection count with the <a class=\"xref\" href=\"system.gc#System_GC_CollectionCount_\" data-linktype=\"relative-path\">CollectionCount</a> property.  </p>\n<p> This method waits indefinitely for a garbage collection notification to be obtained. If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_System_Int32_\" data-linktype=\"relative-path\">System.GC.WaitForFullGCApproach(Int32)</a> method overload. If you call this method without specifying a time-out, you can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method if you are waiting longer than preferred.  </p>\n<p> This method call should be preceded with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to make sure that you have had a full garbage collection. Calling this method alone can produce indeterminate results.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to determine whether a full garbage collection has completed. Whenever the status of the notification is <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, the user method <code>OnFullGCCompletedNotify</code> is called to perform actions in response to the completed collection. This code example is part of a larger example provided for <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a> topic.  </p>\n<pre><code class=\"lang-cpp\" name=\"GCNotification#4\">                    // Check for a notification of a completed collection.\n                    s = GC::WaitForFullGCComplete();\n                    if (s == GCNotificationStatus::Succeeded)\n                    {\n                        Console::WriteLine(&quot;GC Notification raised.&quot;);\n                        OnFullGCCompleteEndNotify();\n                    }\n                    else if (s == GCNotificationStatus::Canceled)\n                    {\n                        Console::WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // Could be a time out.\n                        Console::WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n</code></pre><pre><code class=\"lang-cs\" name=\"GCNotification#4\">                    // Check for a notification of a completed collection.\n                    s = GC.WaitForFullGCComplete();\n                    if (s == GCNotificationStatus.Succeeded)\n                    {\n                        Console.WriteLine(&quot;GC Notifiction raised.&quot;);\n                        OnFullGCCompleteEndNotify();\n                    }\n                    else if (s == GCNotificationStatus.Canceled)\n                    {\n                        Console.WriteLine(&quot;GC Notification cancelled.&quot;);\n                        break;\n                    }\n                    else\n                    {\n                        // Could be a time out.\n                        Console.WriteLine(&quot;GC Notification not applicable.&quot;);\n                        break;\n                    }\n</code></pre><pre><code class=\"lang-vb\" name=\"GCNotification#4\">                &#39; Check for a notification of a completed collection.\n                s = GC.WaitForFullGCComplete\n                If (s = GCNotificationStatus.Succeeded) Then\n                    Console.WriteLine(&quot;GC Notifiction raised.&quot;)\n                    OnFullGCCompleteEndNotify()\n                ElseIf (s = GCNotificationStatus.Canceled) Then\n                    Console.WriteLine(&quot;GC Notification cancelled.&quot;)\n                    Exit While\n                Else\n                    &#39; Could be a time out.\n                    Console.WriteLine(&quot;GC Notification not applicable.&quot;)\n                    Exit While\n                End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_WaitForFullGCComplete_System_Int32_\">\r\n    \r\n            <a id=\"System_GC_WaitForFullGCComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForFullGCComplete(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></div>\r\n                  </div>\r\n                  <p>The status of the registered garbage collection notification.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> must be either non-negative or less than or equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to determine whether a full garbage collection is imminent.  </p>\n<p> Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by <code>millisecondsTimeout</code>. If a garbage collection notification status is not obtained before <code>millisecondsTimeout</code> times out, this method returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as resuming work and obtaining a collection count with the <a class=\"xref\" href=\"system.gc#System_GC_CollectionCount_\" data-linktype=\"relative-path\">CollectionCount</a> property.  </p>\n<p> You can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method when you cannot wait for the time-out period to elapse.  </p>\n<p> This method call should be preceded with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to make sure that you have had a full garbage collection. Calling this method alone can produce indeterminate results.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_GC_WaitForPendingFinalizers\">\r\n    \r\n            <a id=\"System_GC_WaitForPendingFinalizers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForPendingFinalizers()</div>        \r\n          </div>\r\n    \r\n            <p>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WaitForPendingFinalizers ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object&#39;s finalization requirements. If an object implements a finalizer and has not disabled finalization by calling <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a>, the object is placed in a list of objects that are marked as ready for finalization. The garbage collector calls the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> methods for the objects in this list and removes the entries from the list. This method blocks until all finalizers have run to completion.  </p>\n<p> The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate. However, this thread can be interrupted by another thread while the WaitForPendingFinalizers method is in progress. For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the WaitForPendingFinalizers method to suspend the current thread until finalization of all the collected objects is complete.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.GC.WaitForPendingFinalizers Example#1\">using namespace System;\nref class MyFinalizeObject\n{\nprivate:\n\n   // Make this number very large to cause the finalizer to\n   // do more work.\n   literal int maxIterations = 10000;\n   ~MyFinalizeObject()\n   {\n      Console::WriteLine( &quot;Finalizing a MyFinalizeObject&quot; );\n      \n      // Do some work.\n      for ( int i = 0; i &lt; maxIterations; i++ )\n      {\n         \n         // This method performs no operation on i, but prevents\n         // the JIT compiler from optimizing away the code inside\n         // the loop.\n         GC::KeepAlive( i );\n\n      }\n   }\n\n};\n\n\n// You can increase this number to fill up more memory.\nconst int numMfos = 1000;\n\n// You can increase this number to cause more\n// post-finalization work to be done.\nconst int maxIterations = 100;\nint main()\n{\n   MyFinalizeObject^ mfo = nullptr;\n   \n   // Create and release a large number of objects\n   // that require finalization.\n   for ( int j = 0; j &lt; numMfos; j++ )\n   {\n      mfo = gcnew MyFinalizeObject;\n\n   }\n   \n   //Release the last object created in the loop.\n   mfo = nullptr;\n   \n   //Force garbage collection.\n   GC::Collect();\n   \n   // Wait for all finalizers to complete before continuing.\n   // Without this call to GC::WaitForPendingFinalizers,\n   // the worker loop below might execute at the same time\n   // as the finalizers.\n   // With this call, the worker loop executes only after\n   // all finalizers have been called.\n   GC::WaitForPendingFinalizers();\n   \n   // Worker loop to perform post-finalization code.\n   for ( int i = 0; i &lt; maxIterations; i++ )\n   {\n      Console::WriteLine( &quot;Doing some post-finalize work&quot; );\n\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.WaitForPendingFinalizers Example#1\">using System;\n\nnamespace WaitForPendingFinalizersExample\n{\n   class MyWaitForPendingFinalizersClass\n   {\n\t// You can increase this number to fill up more memory.\n\tconst int numMfos = 1000;\n\t// You can increase this number to cause more\n\t// post-finalization work to be done.\n\tconst int maxIterations = 100;\n\n\tstatic void Main(string[] args)\n\t{\n\t   MyFinalizeObject mfo = null;\n         \n\t   // Create and release a large number of objects\n\t   // that require finalization.\n\t   for(int j = 0; j &lt; numMfos; j++)\n\t   {\n\t      mfo = new MyFinalizeObject();\n\t   }\n         \n\t   //Release the last object created in the loop.\n\t   mfo = null;\n\n\t   //Force garbage collection.\n\t   GC.Collect();\n         \n\t   // Wait for all finalizers to complete before continuing.\n\t   // Without this call to GC.WaitForPendingFinalizers, \n\t   // the worker loop below might execute at the same time \n\t   // as the finalizers.\n\t   // With this call, the worker loop executes only after\n\t   // all finalizers have been called.\n\t   GC.WaitForPendingFinalizers();\n\n\t   // Worker loop to perform post-finalization code.\n\t   for(int i = 0; i &lt; maxIterations; i++)\n\t   {\n\t      Console.WriteLine(&quot;Doing some post-finalize work&quot;);\n\t   }\n\t}\n   }\n\n   class MyFinalizeObject\n   {\n\t// Make this number very large to cause the finalizer to\n\t// do more work.\n\tprivate const int maxIterations = 10000;\n      \n\t~MyFinalizeObject()\n\t{\n\t   Console.WriteLine(&quot;Finalizing a MyFinalizeObject&quot;);\n\t\t\t\n\t   // Do some work.\n\t   for(int i = 0; i &lt; maxIterations; i++)\n\t   {\n\t      // This method performs no operation on i, but prevents \n\t      // the JIT compiler from optimizing away the code inside \n\t      // the loop.\n\t      GC.KeepAlive(i);\n\t   }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.WaitForPendingFinalizers Example#1\">Imports System\n\nNamespace WaitForPendingFinalizersExample\n   Class MyWaitForPendingFinalizersClass\n  \n    &#39; You can increase this number to fill up more memory.\n      Private Const numMfos As Integer = 1000\n      &#39; You can increase this number to cause more\n      &#39; post-finalization work to be done.\n      Private Const maxIterations As Integer = 100\n     \n      Overloads Shared Sub Main()\n         Dim mfo As MyFinalizeObject = Nothing\n      \n         &#39; Create and release a large number of objects\n         &#39; that require finalization.\n         Dim j As Integer\n         For j = 0 To numMfos - 1\n            mfo = New MyFinalizeObject()\n         Next j\n      \n         &#39;Release the last object created in the loop.\n         mfo = Nothing\n      \n         &#39;Force garbage collection.\n         GC.Collect()\n      \n         &#39; Wait for all finalizers to complete before continuing.\n         &#39; Without this call to GC.WaitForPendingFinalizers, \n         &#39; the worker loop below might execute at the same time \n         &#39; as the finalizers.\n         &#39; With this call, the worker loop executes only after\n         &#39; all finalizers have been called.\n         GC.WaitForPendingFinalizers()\n      \n         &#39; Worker loop to perform post-finalization code.\n         Dim i As Integer\n         For i = 0 To maxIterations - 1\n            Console.WriteLine(&quot;Doing some post-finalize work&quot;)\n         Next i\n      End Sub\n   End Class\n\n\n   Class MyFinalizeObject\n      &#39; Make this number very large to cause the finalizer to\n      &#39; do more work.\n      Private maxIterations As Integer = 10000\n      \n      Protected Overrides Sub Finalize()\n         Console.WriteLine(&quot;Finalizing a MyFinalizeObject&quot;)\n      \n         &#39; Do some work.\n         Dim i As Integer\n         For i = 0 To maxIterations - 1\n            &#39; This method performs no operation on i, but prevents \n            &#39; the JIT compiler from optimizing away the code inside \n            &#39; the loop.\n            GC.KeepAlive(i)\n         Next i\n         MyBase.Finalize()\n      End Sub\n   End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.GC.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.GC.yml\">\r\n<meta name=\"APIName\" content=\"System.GC\">\r\n<meta name=\"APIName\" content=\"System.GC.AddMemoryPressure\">\r\n<meta name=\"APIName\" content=\"System.GC.CancelFullGCNotification\">\r\n<meta name=\"APIName\" content=\"System.GC.Collect\">\r\n<meta name=\"APIName\" content=\"System.GC.CollectionCount\">\r\n<meta name=\"APIName\" content=\"System.GC.EndNoGCRegion\">\r\n<meta name=\"APIName\" content=\"System.GC.GetGeneration\">\r\n<meta name=\"APIName\" content=\"System.GC.GetTotalMemory\">\r\n<meta name=\"APIName\" content=\"System.GC.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.GC.MaxGeneration\">\r\n<meta name=\"APIName\" content=\"System.GC.RegisterForFullGCNotification\">\r\n<meta name=\"APIName\" content=\"System.GC.RemoveMemoryPressure\">\r\n<meta name=\"APIName\" content=\"System.GC.ReRegisterForFinalize\">\r\n<meta name=\"APIName\" content=\"System.GC.SuppressFinalize\">\r\n<meta name=\"APIName\" content=\"System.GC.TryStartNoGCRegion\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForFullGCApproach\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForFullGCComplete\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForPendingFinalizers\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"96a0455c-c162-c3ca-3fe4-39bb109eec16\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls the system garbage collector, a service that automatically reclaims unused memory.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.GC\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.GC.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.GC.yml","open_to_public_contributors":true,"api_name":["System.GC","System.GC.AddMemoryPressure","System.GC.CancelFullGCNotification","System.GC.Collect","System.GC.CollectionCount","System.GC.EndNoGCRegion","System.GC.GetGeneration","System.GC.GetTotalMemory","System.GC.KeepAlive","System.GC.MaxGeneration","System.GC.RegisterForFullGCNotification","System.GC.RemoveMemoryPressure","System.GC.ReRegisterForFinalize","System.GC.SuppressFinalize","System.GC.TryStartNoGCRegion","System.GC.WaitForFullGCApproach","System.GC.WaitForFullGCComplete","System.GC.WaitForPendingFinalizers"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.GC","System::GC","System.GC.AddMemoryPressure","System::GC::AddMemoryPressure","System.GC.CancelFullGCNotification","System::GC::CancelFullGCNotification","System.GC.Collect","System::GC::Collect","System.GC.CollectionCount","System::GC::CollectionCount","System.GC.EndNoGCRegion","System::GC::EndNoGCRegion","System.GC.GetGeneration","System::GC::GetGeneration","System.GC.GetTotalMemory","System::GC::GetTotalMemory","System.GC.KeepAlive","System::GC::KeepAlive","System.GC.MaxGeneration","System::GC::MaxGeneration","System.GC.RegisterForFullGCNotification","System::GC::RegisterForFullGCNotification","System.GC.RemoveMemoryPressure","System::GC::RemoveMemoryPressure","System.GC.ReRegisterForFinalize","System::GC::ReRegisterForFinalize","System.GC.SuppressFinalize","System::GC::SuppressFinalize","System.GC.TryStartNoGCRegion","System::GC::TryStartNoGCRegion","System.GC.WaitForFullGCApproach","System::GC::WaitForFullGCApproach","System.GC.WaitForFullGCComplete","System::GC::WaitForFullGCComplete","System.GC.WaitForPendingFinalizers","System::GC::WaitForPendingFinalizers"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"96a0455c-c162-c3ca-3fe4-39bb109eec16","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/GC.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GC class | Microsoft Docs","_op_ogTitle":"GC class","description":"Controls the system garbage collector, a service that automatically reclaims unused memory.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.GC","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.gc","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.gc","fileRelativePath":"System.GC.html"},"themesRelativePathToOutputRoot":"_themes/"}