{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">GC</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Controls the system garbage collector, a service that automatically reclaims unused memory.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public static class GC</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">GC</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The garbage collector is a common language runtime component that controls the allocation and release of managed memory. The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released. Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.  </p>\n<p> The garbage collector tracks and reclaims objects allocated in managed memory. Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references. Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory. Alternatively, an application can force garbage collection using the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method.  </p>\n<p> Garbage collection consists of the following steps:  </p>\n<ol>\n<li><p>The garbage collector searches for managed objects that are referenced in managed code.  </p>\n</li>\n<li><p>The garbage collector tries to finalize objects that are not referenced.  </p>\n</li>\n<li><p>The garbage collector frees objects that are not referenced and reclaims their memory.  </p>\n<p>This topic includes the following sections:  </p>\n<p><a href=\"#unmanaged\" data-linktype=\"self-bookmark\">The garbage collector and unmanaged resources</a><br><a href=\"#generations\" data-linktype=\"self-bookmark\">Object aging and generations</a><br><a href=\"#NoGCRegion\" data-linktype=\"self-bookmark\">Disallowing garbage collection</a>  </p>\n</li>\n</ol>\n<p><a name=\"unmanaged\"></a>   </p>\n<h2 id=\"the-garbage-collector-and-unmanaged-resources\">The garbage collector and unmanaged resources</h2>\n<p> During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code. However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so. The <a class=\"xref\" href=\"system.gc#System_GC_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.  </p>\n<p> Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections. When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.  </p>\n<p> In most cases, finalizers are implemented by overriding the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a>. In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object. However, the garbage collector is not required to call finalizers in all situations; for example, the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method explicitly prevents an object&#39;s finalizer from being called. Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.  </p>\n<p> In scenarios where resources must be released at a specific time, classes can implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface, which contains the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method that performs resource management and cleanup tasks. Classes that implement <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> must specify, as part of their class contract, if and when class consumers call the method to clean up the object. The garbage collector does not, by default, call the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method; however, implementations of the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method can call methods in the GC class to customize the finalization behavior of the garbage collector.  </p>\n<p> For more information on object finalization and the dispose pattern, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.  </p>\n<p><a name=\"generations\"></a>   </p>\n<h2 id=\"object-aging-and-generations\">Object aging and generations</h2>\n<p> The garbage collector in the common language runtime supports object aging using generations. A generation is a unit of measure of the relative age of objects in memory. The generation number, or age, of an object indicates the generation to which an object belongs. Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle. Objects in the most recent generation are in generation 0. This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2. You can retrieve the value of the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum generation number supported by the system.  </p>\n<p> Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations. Overloads of the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method that include a <code>generation</code> parameter allow you to specify the oldest generation to be garbage collected.  </p>\n<p><a name=\"NoGCRegion\"></a>   </p>\n<h2 id=\"disallowing-garbage-collection\">Disallowing garbage collection</h2>\n<p> Starting with the .NET Framework 4.6, the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app&#39;s performance. The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector. If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.  </p>\n<p> You define the beginning of the critical path of the no GC region by calling one of the overloads of the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a>. You specify the end of its critical path by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.  </p>\n<p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_MaxGeneration\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxGeneration</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the maximum number of generations that the system currently supports.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int MaxGeneration { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that ranges from zero to the maximum number of supported generations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The generation number, or age, of an object is an implementation-defined relative measure of an object&#39;s lifespan. The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the MaxGeneration property.  </p>\n<p> The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory. Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the MaxGeneration property value can grow over time.  </p>\n<p> If object aging is implemented, the MaxGeneration property returns the maximum generation number used by the system; otherwise, this property returns zero.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_AddMemoryPressure_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddMemoryPressure(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void AddMemoryPressure (long bytesAllocated);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytesAllocated</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The incremental amount of unmanaged memory that has been allocated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytesAllocated</code> is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> On a 32-bit computer, <code>bytesAllocated</code> is larger than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated. If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection. The AddMemoryPressure method informs the runtime of this additional pressure on system memory.  </p>\n<p> In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the <code>Dispose</code> or <code>Finalize</code> method. Call the AddMemoryPressure method after allocating the unmanaged memory, and call the <a class=\"xref\" href=\"system.gc#System_GC_RemoveMemoryPressure_\" data-linktype=\"relative-path\">RemoveMemoryPressure</a> method after releasing it.  </p>\n<p> In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the AddMemoryPressure and <a class=\"xref\" href=\"system.gc#System_GC_RemoveMemoryPressure_\" data-linktype=\"relative-path\">RemoveMemoryPressure</a> methods to communicate these incremental changes to the runtime.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must ensure that you remove exactly the amount of pressure you add. Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_CancelFullGCNotification\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CancelFullGCNotification()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Cancels the registration of a garbage collection notification.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void CancelFullGCNotification ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This member is not available when concurrent garbage collection is enabled. See the <a href=\"../Topic/%3CgcConcurrent%3E%20Element.md\" data-linktype=\"relative-path\"><gcconcurrent></gcconcurrent></a> runtime setting for information about how to disable concurrent garbage collection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method cancels a garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_Collect\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Collect()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Forces an immediate garbage collection of all generations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Collect ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to try to reclaim all memory that is inaccessible. It performs a blocking garbage collection of all generations.  </p>\n<p> All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected. Use this method to force the system to try to reclaim the maximum amount of available memory.  </p>\n<p> Starting with the .NET Framework 4.5.1, you can compact the large object heap (LOH) by setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> before calling the Collect method, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.GCSettings#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce\n      GC.Collect()      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.GCSettings#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n      GC.Collect();      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_Collect_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Collect(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Forces an immediate garbage collection from generation 0 through a specified generation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Collect (int generation);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the oldest generation to be garbage collected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>generation</code> is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to try to reclaim memory that is inaccessible. However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.  </p>\n<p> If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation. If object aging is not implemented, the garbage collector considers all objects during the garbage collection.  </p>\n<p> Use the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum valid value of the <code>generation</code> parameter.  </p>\n<p> To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters. To have the garbage collector reclaim objects based on a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> setting, use the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_\" data-linktype=\"relative-path\">System.GC.Collect(Int32,GCCollectionMode)</a> method overload.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Collect(Int32,GCCollectionMode)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Collect (int generation, GCCollectionMode mode);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the oldest generation to be garbage collected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>generation</code> is not valid.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is not one of the <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <code>mode</code> parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects. Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.  </p>\n<p> To adjust the intrusiveness of garbage collection during critical periods in your application, set the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LatencyMode_\" data-linktype=\"relative-path\">LatencyMode</a> property.  </p>\n<p> The garbage collector does not collect objects with a generation number higher than specified by the <code>generation</code> parameter. Use the <a class=\"xref\" href=\"system.gc#System_GC_MaxGeneration_\" data-linktype=\"relative-path\">MaxGeneration</a> property to determine the maximum valid value of <code>generation</code>.  </p>\n<p> To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.  </p>\n<p> To have the garbage collector reclaim objects up to a specified generation of objects, use the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_\" data-linktype=\"relative-path\">System.GC.Collect(Int32)</a> method overload. When you specify the maximum generation, all objects are collected.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Collect(Int32,GCCollectionMode,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with a value specifying whether the collection should be blocking.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Collect (int generation, GCCollectionMode mode, bool blocking);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the oldest generation to be garbage collected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>blocking</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to perform a blocking garbage collection; <code>false</code> to perform a background garbage collection where possible.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>generation</code> is not valid.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is not one of the <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The following table summarizes the interaction of the <code>mode</code> and <code>blocking</code> parameters:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mode</code></td>\n<td><code>blocking</code> is <code>true</code></td>\n<td><code>blocking</code> is <code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></td>\n<td>A blocking collection is performed as soon as possible. If a background collection is in progress and <code>generation</code> is 0 or 1, the Collect method immediately triggers a blocking collection and returns when the collection is finished. If a background collection is in progress and <code>generation</code> is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</td>\n<td>A collection is performed as soon as possible. The Collect method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed. If a background collection is already in progress, the method returns immediately.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></td>\n<td>A blocking collection may be performed, depending on the state of the garbage collector and the <code>generation</code> parameter. The garbage collector tries to provide optimal performance.</td>\n<td>A collection may be performed, depending on the state of the garbage collector. The Collect method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed. The garbage collector tries to provide optimal performance. If a background collection is already in progress, the method returns immediately.</td>\n</tr>\n</tbody>\n</table>\n<p> If a call to the Collect method performs a full blocking garbage collection, you can also compact the large object heap by setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> before calling the Collect method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> value, with values that specify whether the collection should be blocking and compacting.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the oldest generation to be garbage collected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumeration value that specifies whether the garbage collection is forced (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a> or <a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>) or optimized (<a class=\"xref\" href=\"system.gccollectionmode\" data-linktype=\"relative-path\">GCCollectionMode</a>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>blocking</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to perform a blocking garbage collection; <code>false</code> to perform a background garbage collection where possible. See the Remarks section for more information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>compacting</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to compact the small object heap; <code>false</code> to sweep only. See the Remarks section for more information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>blocking</code> is <code>false</code>, the GC decides whether to perform a background or a blocking garbage collection. If <code>compacting</code> is <code>true</code>, it performs a blocking garbage collection.  </p>\n<p> If <code>compacting</code> is <code>true</code>, the runtime compacts the small object heap (SOH). The large object heap (LOH) is not compacted unless the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property is set to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a>. Note that this includes all blocking garbage collections, not just full blocking garbage collections.  </p>\n<p> You can call the Collect method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.GC.Collect#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce;\n      GC.Collect(2, GCCollectionMode.Forced, true, true);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.GC.Collect#1\">      GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce\n      GC.Collect(2, GCCollectionMode.Forced, True, True)\n</code></pre><p> Specifying <code>true</code> for the <code>compacting</code> argument guarantees a compacting, full blocking garbage collection. Setting the <a class=\"xref\" href=\"system.runtime.gcsettings#System_Runtime_GCSettings_LargeObjectHeapCompactionMode_\" data-linktype=\"relative-path\">LargeObjectHeapCompactionMode</a> property to <a class=\"xref\" href=\"system.runtime.gclargeobjectheapcompactionmode\" data-linktype=\"relative-path\">System.Runtime.GCLargeObjectHeapCompactionMode</a> ensures that both the LOH and SOH are compacted.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_CollectionCount_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CollectionCount(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the number of times garbage collection has occurred for the specified generation of objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int CollectionCount (int generation);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The generation of objects for which the garbage collection count is to be determined.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of times garbage collection has occurred for the specified generation since the process was started.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>generation</code> is less than 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you implement your own resource management, you might need to force garbage collection periodically by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently. Save the value returned by CollectionCount immediately after calling <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a>. The next time you need to call <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a>, compare the current value returned by CollectionCount to the saved value. If the two values are equal, no collection has occurred in the interim and it is reasonable to call <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> again.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_EndNoGCRegion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndNoGCRegion()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ends the no GC region latency mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void EndNoGCRegion ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The garbage collector is not in no GC region latency mode. See the Remarks section for more information.  </p>\n<p> -or-  </p>\n<p> The no GC region latency mode was ended previously because a garbage collection was induced.  </p>\n<p> -or-  </p>\n<p> A memory allocation exceeded the amount specified in the call to the <span class=\"xref\">stem.GC.TryStartNoGCRegion*</span> method.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The EndNoGCRegion method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if the garbage collector is not in no GC region latency mode. This occurs under any of the following conditions:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method was not called previously.  </p>\n</li>\n<li><p>The call to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method returned <code>false</code>.  </p>\n</li>\n<li><p>The call to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method threw an exception.  </p>\n<p>You can prevent an exception for any of these reasons by using code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.GC.EndNoGCRegion#1\">     If GCSettings.LatencyMode = GCLatencyMode.NoGCRegion Then\n        GC.EndNoGCRegion()\n     End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GC.EndNoGCRegion#1\">     if (GCSettings.LatencyMode == GCLatencyMode.NoGCRegion)\n        GC.EndNoGCRegion();\n</code></pre></li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_GetGeneration_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetGeneration(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the current generation number of the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int GetGeneration (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that generation information is retrieved for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current generation number of <code>obj</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to determine the age of an object, and then use that information with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method to force the garbage collector to collect objects in the same generation. For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_GetGeneration_System_WeakReference_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetGeneration(WeakReference)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the current generation number of the target of a specified weak reference.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int GetGeneration (WeakReference wo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>wo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.weakreference\" data-linktype=\"relative-path\">WeakReference</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.weakreference\" data-linktype=\"relative-path\">WeakReference</a> that refers to the target object whose generation number is to be determined.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current generation number of the target of <code>wo</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Garbage collection has already been performed on <code>wo</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_GetTotalMemory_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetTotalMemory(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long GetTotalMemory (bool forceFullCollection);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>forceFullCollection</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <code>forceFullCollection</code> parameter is <code>true</code>, this method waits a short interval before returning while the system collects garbage and finalizes objects. The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles. The garbage collector does not guarantee that all inaccessible memory is collected.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_KeepAlive_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeepAlive(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void KeepAlive (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to reference.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The purpose of the KeepAlive method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector. A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Win32 APIs, unmanaged DLLs, or methods using COM.  </p>\n<p> This method references the <code>obj</code> parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called. Code this method at the end, not the beginning, of the range of instructions where <code>obj</code> must be available.  </p>\n<p> The KeepAlive method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_RegisterForFullGCNotification_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RegisterForFullGCNotification(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>maxGenerationThreshold</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>largeObjectHeapThreshold</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>maxGenerationThreshold </code>or <code>largeObjectHeapThreshold </code>is not between 1 and 99.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For each generation, the garbage collector sets a threshold for allocations into that generation. When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation. For example, if generation 2’s threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection. Similarly, if the large object heap&#39;s (LOH&#39;s) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).  </p>\n<p> The <code>maxGenerationThreshold</code> and <code>largeObjectHeapThreshold</code> thresholds control how much in advance you are notified before a full garbage collection occurs. The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.  </p>\n<p> If you have situations in which a full garbage collection by the common language runtime would adversely affect your application&#39;s performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method) when conditions are still favorable. In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:  </p>\n<ul>\n<li><p>You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries). As a result, when the garbage collection occurs, it is able to reclaim more memory.  </p>\n</li>\n<li><p>You monitor for the completion of a full garbage collection so that you can collect some statistics.  For example, you might want to measure the size of the heap at GC completion so that you know the size of live data. (After a full GC, the heap is at its smallest size.)  </p>\n<p>For more information about what represents a full garbage collection, see <a href=\"../Topic/Garbage%20Collection%20Notifications.md\" data-linktype=\"relative-path\">Garbage Collection Notifications</a>.  </p>\n<p>When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed. This pattern resembles how the operating system monitors for low memory notifications.  </p>\n<p>Use the following guidelines for specifying the <code>maxGenerationThreshold</code> and <code>largeObjectHeapThreshold</code> parameters:  </p>\n</li>\n<li><p>The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.  </p>\n<p> A larger threshold value provides more opportunities for the runtime to check for an approaching collection. This increases the likelihood that you will be notified. However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.  </p>\n<p> When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime&#39;s next collection.  </p>\n</li>\n<li><p>The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_RemoveMemoryPressure_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveMemoryPressure(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void RemoveMemoryPressure (long bytesAllocated);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytesAllocated</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of unmanaged memory that has been released.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytesAllocated</code> is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> On a 32-bit computer, <code>bytesAllocated</code> is larger than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated. If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection. The <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> method informs the runtime of this additional pressure on system memory, and the RemoveMemoryPressure method informs the runtime that the additional pressure has been released.  </p>\n<p> In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the <code>Dispose</code> or <code>Finalize</code> method. Call the <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> method after allocating the unmanaged memory, and call the RemoveMemoryPressure method after releasing it.  </p>\n<p> In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <a class=\"xref\" href=\"system.gc#System_GC_AddMemoryPressure_\" data-linktype=\"relative-path\">AddMemoryPressure</a> and RemoveMemoryPressure methods to communicate these incremental changes to the runtime.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must ensure that you remove exactly the amount of pressure you add. Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_ReRegisterForFinalize_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReRegisterForFinalize(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Requests that the system call the finalizer for the specified object for which <span class=\"xref\">stem.GC.SuppressFinalize*</span> has previously been called.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void ReRegisterForFinalize (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that a finalizer must be called for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ReRegisterForFinalize method adds the <code>obj</code> parameter to the list of objects that request finalization before the garbage collector frees the object. The <code>obj</code> parameter must be the caller of this method.  </p>\n<p> Calling the ReRegisterForFinalize method does not guarantee that the garbage collector will call an object&#39;s finalizer.  </p>\n<p> By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method.  </p>\n<p> A finalizer can use this method to resurrect itself or an object that it references.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_SuppressFinalize_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SuppressFinalize(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Requests that the common language runtime not call the finalizer for the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void SuppressFinalize (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object whose finalizer must not be executed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method sets a bit in the object header of <code>obj</code>, which the runtime checks when calling finalizers. A finalizer, which is represented by the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method, is used to release unmanaged resources before an object is garbage-collected. If <code>obj</code> does not have a finalizer, the call to the SuppressFinalize method has no effect.  </p>\n<p> Objects that implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface can call this method from the object&#39;s <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation to prevent the garbage collector from calling <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> on an object that does not require it. Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_TryStartNoGCRegion_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryStartNoGCRegion(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryStartNoGCRegion (long totalSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalSize</code> exceeds the ephemeral segment size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The process is already in no GC region latency mode.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory. The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 * <code>totalSize</code> bytes (it attempts to allocate <code>totalSize</code> bytes for the small object heap and <code>totalSize</code> bytes for the large object heap).  </p>\n<p> <code>totalSize</code> must be large enough to handle all memory allocations that occur in the critical path. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryStartNoGCRegion(Int64,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disallowFullBlockingGC</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <code>totalSize</code> bytes; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalSize</code> exceeds the ephemeral segment size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The process is already in no GC region latency mode.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory and the <code>disallowFullBlockingGC</code> argument is <code>false</code>, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns <code>false</code>. The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 * <code>totalSize</code> (it attempts to allocate <code>totalSize</code> for the small object heap and <code>totalSize</code> for the large object heap).  </p>\n<p> <code>totalSize</code> must be large enough to handle all memory allocations that occur in the critical path. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<p> Setting <code>disallowFullBlockingGC</code> to <code>true</code> to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns <code>true</code>, and have the load balancer redirect requests to other systems if it returns <code>false</code>. It can then do a full blocking garbage collection when it&#39;s not handling requests by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryStartNoGCRegion(Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryStartNoGCRegion (long totalSize, long lohSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of memory in bytes to allocate without triggering a garbage collection. <code>totalSize</code> –<code>lohSize</code> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lohSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes in <code>totalSize</code> to use for large object heap (LOH) allocations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalSize</code> – <code>lohSize</code> exceeds the ephemeral segment size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The process is already in no GC region latency mode.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory. The garbage collector enters no GC region latency mode if it is able to allocate <code>lohSize</code> for the LOH and <code>totalSize</code> – <code>lohSize</code> for the small object heap (SOH).  </p>\n<p> <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the LOH, and <code>totalSize</code> – <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the SOH. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_TryStartNoGCRegion_System_Int64_System_Int64_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryStartNoGCRegion(Int64,Int64,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of memory in bytes to allocate without triggering a garbage collection. <code>totalSize</code> –<code>lohSize</code> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segement, see the &quot;Ephemeral generations and segments&quot; section in the <a href=\"../Topic/Fundamentals%20of%20Garbage%20Collection.md\" data-linktype=\"relative-path\">Fundamentals of Garbage Collection</a> article.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lohSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes in <code>totalSize</code> to use for large object heap (LOH) allocations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disallowFullBlockingGC</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalSize</code> – <code>lohSize</code> exceeds the ephemeral segment size.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The process is already in no GC region latency mode.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryStartNoGCRegion method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.  If the runtime is unable to initially allocate the requested amount of memory and the <code>disallowFullBlockingGC</code> argument is <code>false</code>, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns <code>false</code>. The garbage collector enters no GC region latency mode if it is able to allocate <code>lohSize</code> for the LOH and <code>totalSize</code> – <code>lohSize</code> for the small object heap (SOH).  </p>\n<p> <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the LOH, and <code>totalSize</code> – <code>lohSize</code> must be large enough to handle all memory allocations that occur in the critical path for the SOH. This includes allocations by the app, as well as allocations that the runtime makes on the app&#39;s behalf.  </p>\n<p> Setting <code>disallowFullBlockingGC</code> to <code>true</code> to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns <code>true</code>, and have the load balancer redirect requests to other systems if it returns <code>false</code>. It can then do a full blocking garbage collection when it&#39;s not handling requests by calling the <a class=\"xref\" href=\"system.gc#System_GC_Collect_System_Int32_System_GCCollectionMode_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">Collect(Int32,GCCollectionMode,Boolean,Boolean)</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You cannot nest calls to the <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> method, and you should only call the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method if the runtime is currently in no GC region latency mode. In other words, you should not call <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> to succeed just because the first call to <a class=\"xref\" href=\"system.gc#System_GC_TryStartNoGCRegion_\" data-linktype=\"relative-path\">TryStartNoGCRegion</a> succeeded.  </p>\n</div>\n<p> You exit the no GC region latency mode by calling the <a class=\"xref\" href=\"system.gc#System_GC_EndNoGCRegion_\" data-linktype=\"relative-path\">EndNoGCRegion</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_WaitForFullGCApproach\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WaitForFullGCApproach()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static GCNotificationStatus WaitForFullGCApproach ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The status of the registered garbage collection notification.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to determine whether the full garbage collection has completed.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.  </p>\n<p> This method waits indefinitely for a garbage collection notification to be obtained. If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_System_Int32_\" data-linktype=\"relative-path\">System.GC.WaitForFullGCApproach(Int32)</a> method overload. If you call this method without specifying a time-out, you can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method if you are waiting longer than preferred.  </p>\n<p> You should follow this method with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to make sure that you have had a full garbage collection. Calling this method alone causes indeterminate results.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_WaitForFullGCApproach_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WaitForFullGCApproach(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>millisecondsTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The status of the registered garbage collection notification.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>millisecondsTimeout</code> must be either non-negative or less than or equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to determine whether the full garbage collection has completed.  </p>\n<p> Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by <code>millisecondsTimeout</code>. If a garbage collection notification status is not obtained before <code>millisecondsTimeout</code> times out, this method returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <a class=\"xref\" href=\"system.gc#System_GC_Collect_\" data-linktype=\"relative-path\">Collect</a> method. Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.  </p>\n<p> You can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method when you cannot wait for the time-out period to elapse.  </p>\n<p> You should follow this method with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCComplete_\" data-linktype=\"relative-path\">WaitForFullGCComplete</a> method to make sure that you have had a full garbage collection. Calling this method alone causes indeterminate results.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_WaitForFullGCComplete\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WaitForFullGCComplete()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static GCNotificationStatus WaitForFullGCComplete ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The status of the registered garbage collection notification.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to determine whether a full garbage collection is imminent.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as resuming work and obtaining a collection count with the <a class=\"xref\" href=\"system.gc#System_GC_CollectionCount_\" data-linktype=\"relative-path\">CollectionCount</a> property.  </p>\n<p> This method waits indefinitely for a garbage collection notification to be obtained. If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_System_Int32_\" data-linktype=\"relative-path\">System.GC.WaitForFullGCApproach(Int32)</a> method overload. If you call this method without specifying a time-out, you can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method if you are waiting longer than preferred.  </p>\n<p> This method call should be preceded with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to make sure that you have had a full garbage collection. Calling this method alone can produce indeterminate results.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_WaitForFullGCComplete_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WaitForFullGCComplete(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>millisecondsTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The status of the registered garbage collection notification.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>millisecondsTimeout</code> must be either non-negative or less than or equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <a class=\"xref\" href=\"system.gc#System_GC_RegisterForFullGCNotification_\" data-linktype=\"relative-path\">RegisterForFullGCNotification</a> method. You can also use the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to determine whether a full garbage collection is imminent.  </p>\n<p> Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by <code>millisecondsTimeout</code>. If a garbage collection notification status is not obtained before <code>millisecondsTimeout</code> times out, this method returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>.  </p>\n<p> When the enumeration returns <a class=\"xref\" href=\"system.gcnotificationstatus\" data-linktype=\"relative-path\">GCNotificationStatus</a>, you can do tasks such as resuming work and obtaining a collection count with the <a class=\"xref\" href=\"system.gc#System_GC_CollectionCount_\" data-linktype=\"relative-path\">CollectionCount</a> property.  </p>\n<p> You can call the <a class=\"xref\" href=\"system.gc#System_GC_CancelFullGCNotification_\" data-linktype=\"relative-path\">CancelFullGCNotification</a> method when you cannot wait for the time-out period to elapse.  </p>\n<p> This method call should be preceded with a call to the <a class=\"xref\" href=\"system.gc#System_GC_WaitForFullGCApproach_\" data-linktype=\"relative-path\">WaitForFullGCApproach</a> method to make sure that you have had a full garbage collection. Calling this method alone can produce indeterminate results.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_GC_WaitForPendingFinalizers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WaitForPendingFinalizers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void WaitForPendingFinalizers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object&#39;s finalization requirements. If an object implements a finalizer and has not disabled finalization by calling <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a>, the object is placed in a list of objects that are marked as ready for finalization. The garbage collector calls the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> methods for the objects in this list and removes the entries from the list. This method blocks until all finalizers have run to completion.  </p>\n<p> The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate. However, this thread can be interrupted by another thread while the WaitForPendingFinalizers method is in progress. For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.GC.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.GC.yml\">\r\n<meta name=\"APIName\" content=\"System.GC\">\r\n<meta name=\"APIName\" content=\"System.GC.AddMemoryPressure\">\r\n<meta name=\"APIName\" content=\"System.GC.CancelFullGCNotification\">\r\n<meta name=\"APIName\" content=\"System.GC.Collect\">\r\n<meta name=\"APIName\" content=\"System.GC.CollectionCount\">\r\n<meta name=\"APIName\" content=\"System.GC.EndNoGCRegion\">\r\n<meta name=\"APIName\" content=\"System.GC.GetGeneration\">\r\n<meta name=\"APIName\" content=\"System.GC.GetTotalMemory\">\r\n<meta name=\"APIName\" content=\"System.GC.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.GC.MaxGeneration\">\r\n<meta name=\"APIName\" content=\"System.GC.RegisterForFullGCNotification\">\r\n<meta name=\"APIName\" content=\"System.GC.RemoveMemoryPressure\">\r\n<meta name=\"APIName\" content=\"System.GC.ReRegisterForFinalize\">\r\n<meta name=\"APIName\" content=\"System.GC.SuppressFinalize\">\r\n<meta name=\"APIName\" content=\"System.GC.TryStartNoGCRegion\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForFullGCApproach\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForFullGCComplete\">\r\n<meta name=\"APIName\" content=\"System.GC.WaitForPendingFinalizers\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"96a0455c-c162-c3ca-3fe4-39bb109eec16\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls the system garbage collector, a service that automatically reclaims unused memory.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.GC\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.GC.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.GC.yml","open_to_public_contributors":true,"api_name":["System.GC","System.GC.AddMemoryPressure","System.GC.CancelFullGCNotification","System.GC.Collect","System.GC.CollectionCount","System.GC.EndNoGCRegion","System.GC.GetGeneration","System.GC.GetTotalMemory","System.GC.KeepAlive","System.GC.MaxGeneration","System.GC.RegisterForFullGCNotification","System.GC.RemoveMemoryPressure","System.GC.ReRegisterForFinalize","System.GC.SuppressFinalize","System.GC.TryStartNoGCRegion","System.GC.WaitForFullGCApproach","System.GC.WaitForFullGCComplete","System.GC.WaitForPendingFinalizers"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.GC","System::GC","System.GC.AddMemoryPressure","System::GC::AddMemoryPressure","System.GC.CancelFullGCNotification","System::GC::CancelFullGCNotification","System.GC.Collect","System::GC::Collect","System.GC.CollectionCount","System::GC::CollectionCount","System.GC.EndNoGCRegion","System::GC::EndNoGCRegion","System.GC.GetGeneration","System::GC::GetGeneration","System.GC.GetTotalMemory","System::GC::GetTotalMemory","System.GC.KeepAlive","System::GC::KeepAlive","System.GC.MaxGeneration","System::GC::MaxGeneration","System.GC.RegisterForFullGCNotification","System::GC::RegisterForFullGCNotification","System.GC.RemoveMemoryPressure","System::GC::RemoveMemoryPressure","System.GC.ReRegisterForFinalize","System::GC::ReRegisterForFinalize","System.GC.SuppressFinalize","System::GC::SuppressFinalize","System.GC.TryStartNoGCRegion","System::GC::TryStartNoGCRegion","System.GC.WaitForFullGCApproach","System::GC::WaitForFullGCApproach","System.GC.WaitForFullGCComplete","System::GC::WaitForFullGCComplete","System.GC.WaitForPendingFinalizers","System::GC::WaitForPendingFinalizers"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"96a0455c-c162-c3ca-3fe4-39bb109eec16","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/GC.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GC class | Microsoft Docs","_op_ogTitle":"GC class","description":"Controls the system garbage collector, a service that automatically reclaims unused memory.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.GC","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.gc","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.gc","fileRelativePath":"System.GC.html"},"themesRelativePathToOutputRoot":"_themes/"}