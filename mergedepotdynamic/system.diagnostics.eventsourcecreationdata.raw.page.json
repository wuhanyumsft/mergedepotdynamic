{"content":"    \r\n    <h1 id=\"System_Diagnostics_EventSourceCreationData\">\r\n      <span class=\"lang-csharp\">EventSourceCreationData</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the configuration settings used to create an event log source on the local computer or a remote computer.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class EventSourceCreationData</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EventSourceCreationData</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the EventSourceCreationData class to configure a new source for writing localized entries to an event log. It is not necessary to use this class to read from an event log.  </p>\n<p> This class defines the configuration settings for a new event source and its associated event log. The associated event log can be on the local computer or a remote computer. To create a new source for a new or existing event log on the local computer, set the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_LogName_\" data-linktype=\"relative-path\">LogName</a> and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_Source_\" data-linktype=\"relative-path\">Source</a> properties of an EventSourceCreationData and call the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_System_Diagnostics_EventSourceCreationData_\" data-linktype=\"relative-path\">System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)</a> method. This method creates the event source you specify in the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_Source_\" data-linktype=\"relative-path\">Source</a> property and registers it for the event log specified in <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_LogName_\" data-linktype=\"relative-path\">LogName</a>. This behavior is similar to using the <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a> class to register an event source for an event log.  </p>\n<p> Use the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> and <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEntry_\" data-linktype=\"relative-path\">WriteEntry</a> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  </p>\n<p> Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a>, or using the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_\" data-linktype=\"relative-path\">CreateEventSource</a> method. You must have administrative rights on the computer to create a new event source.  </p>\n<p> You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  </p>\n<p> Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might need multiple sources configured for different event logs or different resource files.  </p>\n<p> To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  </p>\n<p> You can register the event source with localized resources for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a>, <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a>, <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a>, and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_ParameterResourceFile_\" data-linktype=\"relative-path\">ParameterResourceFile</a> properties to configure the source to write localized entries to the event log. If your application writes string values directly to the event log, you do not need to set these properties.  </p>\n<p> The source must be configured either for writing localized entries or for writing direct strings. The <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEntry_\" data-linktype=\"relative-path\">WriteEntry</a> method writes the given string directly to the event log; it does not use a localizable message resource file. Use the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method to write events using a localized message resource file.  </p>\n<p> If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method to write entries using resource identifiers to the event log. Then create a different source without resource files and use that source in the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEntry_\" data-linktype=\"relative-path\">WriteEntry</a> method to write strings directly to the event log using that source.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">EventSourceCreationData(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class with a specified event source and event log name.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_CategoryCount\" data-linktype=\"self-bookmark\">CategoryCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of categories in the category resource file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_CategoryResourceFile\" data-linktype=\"self-bookmark\">CategoryResourceFile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the path of the resource file that contains category strings for the source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_LogName\" data-linktype=\"self-bookmark\">LogName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the event log to which the source writes entries.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_MachineName\" data-linktype=\"self-bookmark\">MachineName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the computer on which to register the event source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_MessageResourceFile\" data-linktype=\"self-bookmark\">MessageResourceFile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the path of the message resource file that contains message formatting strings for the source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_ParameterResourceFile\" data-linktype=\"self-bookmark\">ParameterResourceFile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the path of the resource file that contains message parameter strings for the source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventSourceCreationData_Source\" data-linktype=\"self-bookmark\">Source</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name to register with the event log as an event source.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventSourceCreationData(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class with a specified event source and event log name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EventSourceCreationData (string source, string logName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name to register with the event log as a source of entries.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>logName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the log to which entries from the source are written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To write entries to an event log, you must first create an event source for the event log. To register a new source, initialize an <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> instance, configure the instance properties for your application, and call the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_System_Diagnostics_EventSourceCreationData_\" data-linktype=\"relative-path\">System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)</a> method. After the source is registered, you can write entries from the source using the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> or <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEntry_\" data-linktype=\"relative-path\">WriteEntry</a> methods.  </p>\n<p> You can register the event source with localized resources for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a>, <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a>, <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a>, and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_ParameterResourceFile_\" data-linktype=\"relative-path\">ParameterResourceFile</a> properties to configure the source to write localized entries to the event log. If your application writes string values directly to the event log, you do not need to set these properties.  </p>\n<p> The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method to write entries using resource identifiers to the event log. Then create a different source without resource files and use that source in the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEntry_\" data-linktype=\"relative-path\">WriteEntry</a> method to write strings directly to the event log.  </p>\n<p> The following table shows initial property values for an <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_Source_\" data-linktype=\"relative-path\">Source</a></td>\n<td>The <code>source</code> parameter.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_LogName_\" data-linktype=\"relative-path\">LogName</a></td>\n<td>The <code>logName</code> parameter.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MachineName_\" data-linktype=\"relative-path\">MachineName</a></td>\n<td>The local computer (&quot;.&quot;).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a></td>\n<td>Zero</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a></td>\n<td><code>null</code> (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a></td>\n<td><code>null</code> (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_ParameterResourceFile_\" data-linktype=\"relative-path\">ParameterResourceFile</a></td>\n<td><code>null</code> (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the event source named <code>SampleApplicationSource</code> is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in <code>DisplayNameMsgId</code> and the resource file path in <code>messageFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#6\">void CreateEventSourceSample1( String^ messageFile )\n{\n   String^ myLogName;\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   \n   // Create the event source if it does not exist.\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Create a new event source for the custom event log\n      // named &quot;myNewLog.&quot;  \n      myLogName = &quot;myNewLog&quot;;\n      EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( sourceName,myLogName );\n      \n      // Set the message resource file that the event source references.\n      // All event resource identifiers correspond to text in this file.\n      if (  !System::IO::File::Exists( messageFile ) )\n      {\n         Console::WriteLine( &quot;Input message resource file does not exist - {0}&quot;, messageFile );\n         messageFile = &quot;&quot;;\n      }\n      else\n      {\n         \n         // Set the specified file as the resource\n         // file for message text, category text, and \n         // message parameter strings.  \n         mySourceData-&gt;MessageResourceFile = messageFile;\n         mySourceData-&gt;CategoryResourceFile = messageFile;\n         mySourceData-&gt;CategoryCount = CategoryCount;\n         mySourceData-&gt;ParameterResourceFile = messageFile;\n         Console::WriteLine( &quot;Event source message resource file set to {0}&quot;, messageFile );\n      }\n\n      Console::WriteLine( &quot;Registering new source for event log.&quot; );\n      EventLog::CreateEventSource( mySourceData );\n   }\n   else\n   {\n      \n      // Get the event log corresponding to the existing source.\n      myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   }\n\n   \n   // Register the localized name of the event log.\n   // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n   // the event log name displayed in the Event Viewer might be\n   // &quot;Sample Application Log&quot; or some other application-specific\n   // text.\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   if ( messageFile-&gt;Length &gt; 0 )\n   {\n      myEventLog-&gt;RegisterDisplayName( messageFile, DisplayNameMsgId );\n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#6\">        Public Shared Sub CreateEventSourceSample1(ByVal messageFile As String)\n\n            Dim myLogName As String\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n            \n                &#39; Create a new event source for the custom event log\n                &#39; named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;\n                Dim mySourceData As EventSourceCreationData = New EventSourceCreationData(sourceName, myLogName)\n\n                &#39; Set the message resource file that the event source references.\n                &#39; All event resource identifiers correspond to text in this file.\n                If Not System.IO.File.Exists(messageFile)\n\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, _\n                        messageFile)\n                    messageFile = &quot;&quot;\n                Else \n                    &#39; Set the specified file as the resource\n                    &#39; file for message text, category text and \n                    &#39; message parameters strings.\n\n                    mySourceData.MessageResourceFile = messageFile\n                    mySourceData.CategoryResourceFile = messageFile\n                    mySourceData.CategoryCount = CategoryCount\n                    mySourceData.ParameterResourceFile = messageFile\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, _\n                        messageFile)\n                End If\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;)\n                EventLog.CreateEventSource(mySourceData)\n            Else\n                &#39; Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n            End If\n\n            &#39; Register the localized name of the event log.\n            &#39; For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            &#39; the event log name displayed in the Event Viewer might be\n            &#39; &quot;Sample Application Log&quot; or some other application-specific\n            &#39; text.\n            Dim myEventLog As EventLog = New EventLog(myLogName, &quot;.&quot;, sourceName)\n            \n            If messageFile.Length &gt; 0\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId)\n            End If\n        End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#6\">        static void CreateEventSourceSample1(string messageFile)\n        {\n            string myLogName;\n            string sourceName = &quot;SampleApplicationSource&quot;;\n\n            // Create the event source if it does not exist.\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Create a new event source for the custom event log\n                // named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;;\n                EventSourceCreationData mySourceData = new EventSourceCreationData(sourceName, myLogName);\n\n                // Set the message resource file that the event source references.\n                // All event resource identifiers correspond to text in this file.\n                if (!System.IO.File.Exists(messageFile))\n                {\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, \n                        messageFile);\n                    messageFile = &quot;&quot;;\n                }\n                else \n                {\n                    // Set the specified file as the resource\n                    // file for message text, category text, and \n                    // message parameter strings.  \n\n                    mySourceData.MessageResourceFile = messageFile;\n                    mySourceData.CategoryResourceFile = messageFile;\n                    mySourceData.CategoryCount = CategoryCount;\n                    mySourceData.ParameterResourceFile = messageFile;\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, \n                        messageFile);\n                }\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;);\n                EventLog.CreateEventSource(mySourceData);\n            }\n            else\n            {\n                // Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n            }\n\n            // Register the localized name of the event log.\n            // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            // the event log name displayed in the Event Viewer might be\n            // &quot;Sample Application Log&quot; or some other application-specific\n            // text.\n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n            \n            if (messageFile.Length &gt; 0)\n            {\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId);\n            }\n        }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_CategoryCount\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_CategoryCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CategoryCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of categories in the category resource file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CategoryCount { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of categories in the category resource file. The default value is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a negative value or to a value larger than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CategoryCount and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a> properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide further information on the event. For example, your application can define separate categories for different components or different operations.  </p>\n<p> Event categories are optional; if your application does not use categories, do not set the CategoryCount and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a> properties.  </p>\n<p> For details about defining event messages and building event resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the event source named <code>SampleApplicationSource</code> is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in <code>DisplayNameMsgId</code> and the resource file path in <code>messageFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#6\">void CreateEventSourceSample1( String^ messageFile )\n{\n   String^ myLogName;\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   \n   // Create the event source if it does not exist.\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Create a new event source for the custom event log\n      // named &quot;myNewLog.&quot;  \n      myLogName = &quot;myNewLog&quot;;\n      EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( sourceName,myLogName );\n      \n      // Set the message resource file that the event source references.\n      // All event resource identifiers correspond to text in this file.\n      if (  !System::IO::File::Exists( messageFile ) )\n      {\n         Console::WriteLine( &quot;Input message resource file does not exist - {0}&quot;, messageFile );\n         messageFile = &quot;&quot;;\n      }\n      else\n      {\n         \n         // Set the specified file as the resource\n         // file for message text, category text, and \n         // message parameter strings.  \n         mySourceData-&gt;MessageResourceFile = messageFile;\n         mySourceData-&gt;CategoryResourceFile = messageFile;\n         mySourceData-&gt;CategoryCount = CategoryCount;\n         mySourceData-&gt;ParameterResourceFile = messageFile;\n         Console::WriteLine( &quot;Event source message resource file set to {0}&quot;, messageFile );\n      }\n\n      Console::WriteLine( &quot;Registering new source for event log.&quot; );\n      EventLog::CreateEventSource( mySourceData );\n   }\n   else\n   {\n      \n      // Get the event log corresponding to the existing source.\n      myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   }\n\n   \n   // Register the localized name of the event log.\n   // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n   // the event log name displayed in the Event Viewer might be\n   // &quot;Sample Application Log&quot; or some other application-specific\n   // text.\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   if ( messageFile-&gt;Length &gt; 0 )\n   {\n      myEventLog-&gt;RegisterDisplayName( messageFile, DisplayNameMsgId );\n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#6\">        Public Shared Sub CreateEventSourceSample1(ByVal messageFile As String)\n\n            Dim myLogName As String\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n            \n                &#39; Create a new event source for the custom event log\n                &#39; named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;\n                Dim mySourceData As EventSourceCreationData = New EventSourceCreationData(sourceName, myLogName)\n\n                &#39; Set the message resource file that the event source references.\n                &#39; All event resource identifiers correspond to text in this file.\n                If Not System.IO.File.Exists(messageFile)\n\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, _\n                        messageFile)\n                    messageFile = &quot;&quot;\n                Else \n                    &#39; Set the specified file as the resource\n                    &#39; file for message text, category text and \n                    &#39; message parameters strings.\n\n                    mySourceData.MessageResourceFile = messageFile\n                    mySourceData.CategoryResourceFile = messageFile\n                    mySourceData.CategoryCount = CategoryCount\n                    mySourceData.ParameterResourceFile = messageFile\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, _\n                        messageFile)\n                End If\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;)\n                EventLog.CreateEventSource(mySourceData)\n            Else\n                &#39; Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n            End If\n\n            &#39; Register the localized name of the event log.\n            &#39; For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            &#39; the event log name displayed in the Event Viewer might be\n            &#39; &quot;Sample Application Log&quot; or some other application-specific\n            &#39; text.\n            Dim myEventLog As EventLog = New EventLog(myLogName, &quot;.&quot;, sourceName)\n            \n            If messageFile.Length &gt; 0\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId)\n            End If\n        End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#6\">        static void CreateEventSourceSample1(string messageFile)\n        {\n            string myLogName;\n            string sourceName = &quot;SampleApplicationSource&quot;;\n\n            // Create the event source if it does not exist.\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Create a new event source for the custom event log\n                // named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;;\n                EventSourceCreationData mySourceData = new EventSourceCreationData(sourceName, myLogName);\n\n                // Set the message resource file that the event source references.\n                // All event resource identifiers correspond to text in this file.\n                if (!System.IO.File.Exists(messageFile))\n                {\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, \n                        messageFile);\n                    messageFile = &quot;&quot;;\n                }\n                else \n                {\n                    // Set the specified file as the resource\n                    // file for message text, category text, and \n                    // message parameter strings.  \n\n                    mySourceData.MessageResourceFile = messageFile;\n                    mySourceData.CategoryResourceFile = messageFile;\n                    mySourceData.CategoryCount = CategoryCount;\n                    mySourceData.ParameterResourceFile = messageFile;\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, \n                        messageFile);\n                }\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;);\n                EventLog.CreateEventSource(mySourceData);\n            }\n            else\n            {\n                // Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n            }\n\n            // Register the localized name of the event log.\n            // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            // the event log name displayed in the Event Viewer might be\n            // &quot;Sample Application Log&quot; or some other application-specific\n            // text.\n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n            \n            if (messageFile.Length &gt; 0)\n            {\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId);\n            }\n        }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_CategoryResourceFile\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CategoryResourceFile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the path of the resource file that contains category strings for the source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CategoryResourceFile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path of the category resource file. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a> and CategoryResourceFile properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide further information on the event. For example, your application can define separate categories for different components or different operations.  </p>\n<p> Event categories are optional; if your application does not use categories, do not set the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a> and CategoryResourceFile properties.  </p>\n<p> For details about defining event messages and building event resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the event source named <code>SampleApplicationSource</code> is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in <code>DisplayNameMsgId</code> and the resource file path in <code>messageFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#6\">void CreateEventSourceSample1( String^ messageFile )\n{\n   String^ myLogName;\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   \n   // Create the event source if it does not exist.\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Create a new event source for the custom event log\n      // named &quot;myNewLog.&quot;  \n      myLogName = &quot;myNewLog&quot;;\n      EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( sourceName,myLogName );\n      \n      // Set the message resource file that the event source references.\n      // All event resource identifiers correspond to text in this file.\n      if (  !System::IO::File::Exists( messageFile ) )\n      {\n         Console::WriteLine( &quot;Input message resource file does not exist - {0}&quot;, messageFile );\n         messageFile = &quot;&quot;;\n      }\n      else\n      {\n         \n         // Set the specified file as the resource\n         // file for message text, category text, and \n         // message parameter strings.  \n         mySourceData-&gt;MessageResourceFile = messageFile;\n         mySourceData-&gt;CategoryResourceFile = messageFile;\n         mySourceData-&gt;CategoryCount = CategoryCount;\n         mySourceData-&gt;ParameterResourceFile = messageFile;\n         Console::WriteLine( &quot;Event source message resource file set to {0}&quot;, messageFile );\n      }\n\n      Console::WriteLine( &quot;Registering new source for event log.&quot; );\n      EventLog::CreateEventSource( mySourceData );\n   }\n   else\n   {\n      \n      // Get the event log corresponding to the existing source.\n      myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   }\n\n   \n   // Register the localized name of the event log.\n   // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n   // the event log name displayed in the Event Viewer might be\n   // &quot;Sample Application Log&quot; or some other application-specific\n   // text.\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   if ( messageFile-&gt;Length &gt; 0 )\n   {\n      myEventLog-&gt;RegisterDisplayName( messageFile, DisplayNameMsgId );\n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#6\">        Public Shared Sub CreateEventSourceSample1(ByVal messageFile As String)\n\n            Dim myLogName As String\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n            \n                &#39; Create a new event source for the custom event log\n                &#39; named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;\n                Dim mySourceData As EventSourceCreationData = New EventSourceCreationData(sourceName, myLogName)\n\n                &#39; Set the message resource file that the event source references.\n                &#39; All event resource identifiers correspond to text in this file.\n                If Not System.IO.File.Exists(messageFile)\n\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, _\n                        messageFile)\n                    messageFile = &quot;&quot;\n                Else \n                    &#39; Set the specified file as the resource\n                    &#39; file for message text, category text and \n                    &#39; message parameters strings.\n\n                    mySourceData.MessageResourceFile = messageFile\n                    mySourceData.CategoryResourceFile = messageFile\n                    mySourceData.CategoryCount = CategoryCount\n                    mySourceData.ParameterResourceFile = messageFile\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, _\n                        messageFile)\n                End If\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;)\n                EventLog.CreateEventSource(mySourceData)\n            Else\n                &#39; Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n            End If\n\n            &#39; Register the localized name of the event log.\n            &#39; For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            &#39; the event log name displayed in the Event Viewer might be\n            &#39; &quot;Sample Application Log&quot; or some other application-specific\n            &#39; text.\n            Dim myEventLog As EventLog = New EventLog(myLogName, &quot;.&quot;, sourceName)\n            \n            If messageFile.Length &gt; 0\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId)\n            End If\n        End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#6\">        static void CreateEventSourceSample1(string messageFile)\n        {\n            string myLogName;\n            string sourceName = &quot;SampleApplicationSource&quot;;\n\n            // Create the event source if it does not exist.\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Create a new event source for the custom event log\n                // named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;;\n                EventSourceCreationData mySourceData = new EventSourceCreationData(sourceName, myLogName);\n\n                // Set the message resource file that the event source references.\n                // All event resource identifiers correspond to text in this file.\n                if (!System.IO.File.Exists(messageFile))\n                {\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, \n                        messageFile);\n                    messageFile = &quot;&quot;;\n                }\n                else \n                {\n                    // Set the specified file as the resource\n                    // file for message text, category text, and \n                    // message parameter strings.  \n\n                    mySourceData.MessageResourceFile = messageFile;\n                    mySourceData.CategoryResourceFile = messageFile;\n                    mySourceData.CategoryCount = CategoryCount;\n                    mySourceData.ParameterResourceFile = messageFile;\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, \n                        messageFile);\n                }\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;);\n                EventLog.CreateEventSource(mySourceData);\n            }\n            else\n            {\n                // Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n            }\n\n            // Register the localized name of the event log.\n            // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            // the event log name displayed in the Event Viewer might be\n            // &quot;Sample Application Log&quot; or some other application-specific\n            // text.\n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n            \n            if (messageFile.Length &gt; 0)\n            {\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId);\n            }\n        }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_LogName\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_LogName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LogName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the event log to which the source writes entries.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string LogName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the event log. This can be Application, System, or a custom log name. The default value is &quot;Application.&quot;</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Security log is read-only.  </p>\n</div>\n<p> To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters &#39;*&#39;, &#39;?&#39;, or &#39;\\&#39;. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  </p>\n<p> The operating system stores event logs as files. When you use <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a> or the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_\" data-linktype=\"relative-path\">CreateEventSource</a> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the &quot;.evt&quot; file name extension.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"EventLog_EventSourceCreation_Properties#2\">            Dim mySourceData As EventSourceCreationData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;)\n            Dim registerSource As Boolean = True\n\n            &#39; Process input parameters.\n            If args.Length &gt; 0\n                &#39; Require at least the source name.\n\n                mySourceData.Source = args(0)\n\n                If args.Length &gt; 1\n   \n                    mySourceData.LogName = args(1)\n    \n                End If\n                If args.Length &gt; 2\n   \n                    mySourceData.MachineName = args(2)\n    \n                End If\n                If args.Length &gt; 3 AndAlso args(3).Length &gt; 0\n   \n                    mySourceData.MessageResourceFile = args(3)\n    \n                End If\n\n            Else \n                &#39; Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;)\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;)\n\n                registerSource = False\n            End If\n\n            &#39; Set defaults for parameters missing input.\n            If mySourceData.MachineName.Length = 0\n            \n                &#39; Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;\n            End If\n            If mySourceData.LogName.Length = 0\n                &#39; Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;\n            End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventLog_EventSourceCreation_Properties#2\">   EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( &quot;&quot;,&quot;&quot; );\n   bool registerSource = true;\n   \n   // Process input parameters.\n   if ( args-&gt;Length &gt; 1 )\n   {\n      \n      // Require at least the source name.\n      mySourceData-&gt;Source = args[ 1 ];\n      if ( args-&gt;Length &gt; 2 )\n      {\n         mySourceData-&gt;LogName = args[ 2 ];\n      }\n\n      if ( args-&gt;Length &gt; 3 )\n      {\n         mySourceData-&gt;MachineName = args[ 3 ];\n      }\n\n      if ( (args-&gt;Length &gt; 4) &amp;&amp; (args[ 4 ]-&gt;Length &gt; 0) )\n      {\n         mySourceData-&gt;MessageResourceFile = args[ 4 ];\n      }\n   }\n   else\n   {\n      \n      // Display a syntax help message.\n      Console::WriteLine( &quot;Input:&quot; );\n      Console::WriteLine( &quot; source [event log] [machine name] [resource file]&quot; );\n      registerSource = false;\n   }\n\n   \n   // Set defaults for parameters missing input.\n   if ( mySourceData-&gt;MachineName-&gt;Length == 0 )\n   {\n      \n      // Default to the local computer.\n      mySourceData-&gt;MachineName = &quot;.&quot;;\n   }\n\n   if ( mySourceData-&gt;LogName-&gt;Length == 0 )\n   {\n      \n      // Default to the Application log.\n      mySourceData-&gt;LogName = &quot;Application&quot;;\n   }\n\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_EventSourceCreation_Properties#2\">            EventSourceCreationData mySourceData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;);\n            bool registerSource = true;\n\n            // Process input parameters.\n            if (args.Length &gt; 0)\n            {\n                // Require at least the source name.\n\n                mySourceData.Source = args[0];\n\n                if (args.Length &gt; 1)\n                {\n                    mySourceData.LogName = args[1];\n                }\n\n                if (args.Length &gt; 2)\n                {\n                    mySourceData.MachineName = args[2];\n                }\n                if ((args.Length &gt; 3) &amp;&amp; (args[3].Length &gt; 0))\n                {\n                    mySourceData.MessageResourceFile = args[3];\n                }\n            }\n            else \n            {\n                // Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;);\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;);\n\n                registerSource = false;\n            }\n\n            // Set defaults for parameters missing input.\n            if (mySourceData.MachineName.Length == 0)\n            {\n                // Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;;\n            }\n            if (mySourceData.LogName.Length == 0)\n            {\n                // Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;;\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_MachineName\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_MachineName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MachineName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the computer on which to register the event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MachineName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the system on which to register the event source. The default is the local computer (&quot;.&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The computer name is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MachineName value cannot be an empty string. If the machine name is not explicitly set, it defaults to the local computer (&quot;.&quot;).  </p>\n<p> When registering a source on a remote computer, you must have administrative rights on that computer to write the registry values with sufficient permissions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"EventLog_EventSourceCreation_Properties#2\">            Dim mySourceData As EventSourceCreationData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;)\n            Dim registerSource As Boolean = True\n\n            &#39; Process input parameters.\n            If args.Length &gt; 0\n                &#39; Require at least the source name.\n\n                mySourceData.Source = args(0)\n\n                If args.Length &gt; 1\n   \n                    mySourceData.LogName = args(1)\n    \n                End If\n                If args.Length &gt; 2\n   \n                    mySourceData.MachineName = args(2)\n    \n                End If\n                If args.Length &gt; 3 AndAlso args(3).Length &gt; 0\n   \n                    mySourceData.MessageResourceFile = args(3)\n    \n                End If\n\n            Else \n                &#39; Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;)\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;)\n\n                registerSource = False\n            End If\n\n            &#39; Set defaults for parameters missing input.\n            If mySourceData.MachineName.Length = 0\n            \n                &#39; Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;\n            End If\n            If mySourceData.LogName.Length = 0\n                &#39; Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;\n            End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventLog_EventSourceCreation_Properties#2\">   EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( &quot;&quot;,&quot;&quot; );\n   bool registerSource = true;\n   \n   // Process input parameters.\n   if ( args-&gt;Length &gt; 1 )\n   {\n      \n      // Require at least the source name.\n      mySourceData-&gt;Source = args[ 1 ];\n      if ( args-&gt;Length &gt; 2 )\n      {\n         mySourceData-&gt;LogName = args[ 2 ];\n      }\n\n      if ( args-&gt;Length &gt; 3 )\n      {\n         mySourceData-&gt;MachineName = args[ 3 ];\n      }\n\n      if ( (args-&gt;Length &gt; 4) &amp;&amp; (args[ 4 ]-&gt;Length &gt; 0) )\n      {\n         mySourceData-&gt;MessageResourceFile = args[ 4 ];\n      }\n   }\n   else\n   {\n      \n      // Display a syntax help message.\n      Console::WriteLine( &quot;Input:&quot; );\n      Console::WriteLine( &quot; source [event log] [machine name] [resource file]&quot; );\n      registerSource = false;\n   }\n\n   \n   // Set defaults for parameters missing input.\n   if ( mySourceData-&gt;MachineName-&gt;Length == 0 )\n   {\n      \n      // Default to the local computer.\n      mySourceData-&gt;MachineName = &quot;.&quot;;\n   }\n\n   if ( mySourceData-&gt;LogName-&gt;Length == 0 )\n   {\n      \n      // Default to the Application log.\n      mySourceData-&gt;LogName = &quot;Application&quot;;\n   }\n\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_EventSourceCreation_Properties#2\">            EventSourceCreationData mySourceData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;);\n            bool registerSource = true;\n\n            // Process input parameters.\n            if (args.Length &gt; 0)\n            {\n                // Require at least the source name.\n\n                mySourceData.Source = args[0];\n\n                if (args.Length &gt; 1)\n                {\n                    mySourceData.LogName = args[1];\n                }\n\n                if (args.Length &gt; 2)\n                {\n                    mySourceData.MachineName = args[2];\n                }\n                if ((args.Length &gt; 3) &amp;&amp; (args[3].Length &gt; 0))\n                {\n                    mySourceData.MessageResourceFile = args[3];\n                }\n            }\n            else \n            {\n                // Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;);\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;);\n\n                registerSource = false;\n            }\n\n            // Set defaults for parameters missing input.\n            if (mySourceData.MachineName.Length == 0)\n            {\n                // Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;;\n            }\n            if (mySourceData.LogName.Length == 0)\n            {\n                // Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;;\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_MessageResourceFile\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_MessageResourceFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageResourceFile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the path of the message resource file that contains message formatting strings for the source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MessageResourceFile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path of the message resource file. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the MessageResourceFile property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  </p>\n<p> Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the MessageResourceFile. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized message resource file based on current language settings.  </p>\n<p> The event source must be configured either for writing localized entries or for writing direct strings. Use the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method to write localized entries for a source configured with a message resource file.  </p>\n<p> If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the MessageResourceFile property.  </p>\n<p> For details about defining event messages and building event resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the event source named <code>SampleApplicationSource</code> is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in <code>DisplayNameMsgId</code> and the resource file path in <code>messageFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#6\">void CreateEventSourceSample1( String^ messageFile )\n{\n   String^ myLogName;\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   \n   // Create the event source if it does not exist.\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Create a new event source for the custom event log\n      // named &quot;myNewLog.&quot;  \n      myLogName = &quot;myNewLog&quot;;\n      EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( sourceName,myLogName );\n      \n      // Set the message resource file that the event source references.\n      // All event resource identifiers correspond to text in this file.\n      if (  !System::IO::File::Exists( messageFile ) )\n      {\n         Console::WriteLine( &quot;Input message resource file does not exist - {0}&quot;, messageFile );\n         messageFile = &quot;&quot;;\n      }\n      else\n      {\n         \n         // Set the specified file as the resource\n         // file for message text, category text, and \n         // message parameter strings.  \n         mySourceData-&gt;MessageResourceFile = messageFile;\n         mySourceData-&gt;CategoryResourceFile = messageFile;\n         mySourceData-&gt;CategoryCount = CategoryCount;\n         mySourceData-&gt;ParameterResourceFile = messageFile;\n         Console::WriteLine( &quot;Event source message resource file set to {0}&quot;, messageFile );\n      }\n\n      Console::WriteLine( &quot;Registering new source for event log.&quot; );\n      EventLog::CreateEventSource( mySourceData );\n   }\n   else\n   {\n      \n      // Get the event log corresponding to the existing source.\n      myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   }\n\n   \n   // Register the localized name of the event log.\n   // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n   // the event log name displayed in the Event Viewer might be\n   // &quot;Sample Application Log&quot; or some other application-specific\n   // text.\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   if ( messageFile-&gt;Length &gt; 0 )\n   {\n      myEventLog-&gt;RegisterDisplayName( messageFile, DisplayNameMsgId );\n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#6\">        Public Shared Sub CreateEventSourceSample1(ByVal messageFile As String)\n\n            Dim myLogName As String\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n            \n                &#39; Create a new event source for the custom event log\n                &#39; named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;\n                Dim mySourceData As EventSourceCreationData = New EventSourceCreationData(sourceName, myLogName)\n\n                &#39; Set the message resource file that the event source references.\n                &#39; All event resource identifiers correspond to text in this file.\n                If Not System.IO.File.Exists(messageFile)\n\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, _\n                        messageFile)\n                    messageFile = &quot;&quot;\n                Else \n                    &#39; Set the specified file as the resource\n                    &#39; file for message text, category text and \n                    &#39; message parameters strings.\n\n                    mySourceData.MessageResourceFile = messageFile\n                    mySourceData.CategoryResourceFile = messageFile\n                    mySourceData.CategoryCount = CategoryCount\n                    mySourceData.ParameterResourceFile = messageFile\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, _\n                        messageFile)\n                End If\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;)\n                EventLog.CreateEventSource(mySourceData)\n            Else\n                &#39; Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n            End If\n\n            &#39; Register the localized name of the event log.\n            &#39; For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            &#39; the event log name displayed in the Event Viewer might be\n            &#39; &quot;Sample Application Log&quot; or some other application-specific\n            &#39; text.\n            Dim myEventLog As EventLog = New EventLog(myLogName, &quot;.&quot;, sourceName)\n            \n            If messageFile.Length &gt; 0\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId)\n            End If\n        End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#6\">        static void CreateEventSourceSample1(string messageFile)\n        {\n            string myLogName;\n            string sourceName = &quot;SampleApplicationSource&quot;;\n\n            // Create the event source if it does not exist.\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Create a new event source for the custom event log\n                // named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;;\n                EventSourceCreationData mySourceData = new EventSourceCreationData(sourceName, myLogName);\n\n                // Set the message resource file that the event source references.\n                // All event resource identifiers correspond to text in this file.\n                if (!System.IO.File.Exists(messageFile))\n                {\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, \n                        messageFile);\n                    messageFile = &quot;&quot;;\n                }\n                else \n                {\n                    // Set the specified file as the resource\n                    // file for message text, category text, and \n                    // message parameter strings.  \n\n                    mySourceData.MessageResourceFile = messageFile;\n                    mySourceData.CategoryResourceFile = messageFile;\n                    mySourceData.CategoryCount = CategoryCount;\n                    mySourceData.ParameterResourceFile = messageFile;\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, \n                        messageFile);\n                }\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;);\n                EventLog.CreateEventSource(mySourceData);\n            }\n            else\n            {\n                // Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n            }\n\n            // Register the localized name of the event log.\n            // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            // the event log name displayed in the Event Viewer might be\n            // &quot;Sample Application Log&quot; or some other application-specific\n            // text.\n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n            \n            if (messageFile.Length &gt; 0)\n            {\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId);\n            }\n        }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_ParameterResourceFile\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_ParameterResourceFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParameterResourceFile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the path of the resource file that contains message parameter strings for the source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ParameterResourceFile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path of the parameter resource file. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ParameterResourceFile property to configure an event log source to write localized event messages with inserted parameter strings. Each localized event message specified in the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a> property can contain placeholders for insertion strings. These placeholders are used to specify the position and resource identifier for a language-independent string within the event message. The Event Viewer fills in the placeholders using the corresponding strings from the ParameterResourceFile and formats the event log message for the localized event entry.  </p>\n<p> For example, the following section of a message text file defines a string with a parameter placeholder:  </p>\n<pre><code>\nMessageId = 1501  \nSeverity = Success  \nFacility = Application  \nSymbolicName = COMPONENT_STARTING  \nLanguage=English  \nComponent %%6050 is starting.  \n.  \n</code></pre><p> Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:  </p>\n<pre><code>MessageId = 6050  \nSeverity = Success  \nFacility = Application  \nSymbolicName = COMPONENT_NAME_MSGID  \nLanguage=English  \nTRIGGER.EXE  \n.  \n</code></pre><p> The event source must be configured either for writing localized entries or for writing direct strings. Use the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method to write localized entries for a source configured with a message resource file.  </p>\n<p> If your application writes event message strings directly to the event log, or if your <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a> property does not contain messages with parameter insertion placeholders, do not set the ParameterResourceFile property.  </p>\n<p> For details about defining event messages and building event resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the event source named <code>SampleApplicationSource</code> is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in <code>DisplayNameMsgId</code> and the resource file path in <code>messageFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#6\">void CreateEventSourceSample1( String^ messageFile )\n{\n   String^ myLogName;\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   \n   // Create the event source if it does not exist.\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Create a new event source for the custom event log\n      // named &quot;myNewLog.&quot;  \n      myLogName = &quot;myNewLog&quot;;\n      EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( sourceName,myLogName );\n      \n      // Set the message resource file that the event source references.\n      // All event resource identifiers correspond to text in this file.\n      if (  !System::IO::File::Exists( messageFile ) )\n      {\n         Console::WriteLine( &quot;Input message resource file does not exist - {0}&quot;, messageFile );\n         messageFile = &quot;&quot;;\n      }\n      else\n      {\n         \n         // Set the specified file as the resource\n         // file for message text, category text, and \n         // message parameter strings.  \n         mySourceData-&gt;MessageResourceFile = messageFile;\n         mySourceData-&gt;CategoryResourceFile = messageFile;\n         mySourceData-&gt;CategoryCount = CategoryCount;\n         mySourceData-&gt;ParameterResourceFile = messageFile;\n         Console::WriteLine( &quot;Event source message resource file set to {0}&quot;, messageFile );\n      }\n\n      Console::WriteLine( &quot;Registering new source for event log.&quot; );\n      EventLog::CreateEventSource( mySourceData );\n   }\n   else\n   {\n      \n      // Get the event log corresponding to the existing source.\n      myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   }\n\n   \n   // Register the localized name of the event log.\n   // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n   // the event log name displayed in the Event Viewer might be\n   // &quot;Sample Application Log&quot; or some other application-specific\n   // text.\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   if ( messageFile-&gt;Length &gt; 0 )\n   {\n      myEventLog-&gt;RegisterDisplayName( messageFile, DisplayNameMsgId );\n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#6\">        Public Shared Sub CreateEventSourceSample1(ByVal messageFile As String)\n\n            Dim myLogName As String\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n            \n                &#39; Create a new event source for the custom event log\n                &#39; named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;\n                Dim mySourceData As EventSourceCreationData = New EventSourceCreationData(sourceName, myLogName)\n\n                &#39; Set the message resource file that the event source references.\n                &#39; All event resource identifiers correspond to text in this file.\n                If Not System.IO.File.Exists(messageFile)\n\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, _\n                        messageFile)\n                    messageFile = &quot;&quot;\n                Else \n                    &#39; Set the specified file as the resource\n                    &#39; file for message text, category text and \n                    &#39; message parameters strings.\n\n                    mySourceData.MessageResourceFile = messageFile\n                    mySourceData.CategoryResourceFile = messageFile\n                    mySourceData.CategoryCount = CategoryCount\n                    mySourceData.ParameterResourceFile = messageFile\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, _\n                        messageFile)\n                End If\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;)\n                EventLog.CreateEventSource(mySourceData)\n            Else\n                &#39; Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n            End If\n\n            &#39; Register the localized name of the event log.\n            &#39; For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            &#39; the event log name displayed in the Event Viewer might be\n            &#39; &quot;Sample Application Log&quot; or some other application-specific\n            &#39; text.\n            Dim myEventLog As EventLog = New EventLog(myLogName, &quot;.&quot;, sourceName)\n            \n            If messageFile.Length &gt; 0\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId)\n            End If\n        End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#6\">        static void CreateEventSourceSample1(string messageFile)\n        {\n            string myLogName;\n            string sourceName = &quot;SampleApplicationSource&quot;;\n\n            // Create the event source if it does not exist.\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Create a new event source for the custom event log\n                // named &quot;myNewLog.&quot;  \n\n                myLogName = &quot;myNewLog&quot;;\n                EventSourceCreationData mySourceData = new EventSourceCreationData(sourceName, myLogName);\n\n                // Set the message resource file that the event source references.\n                // All event resource identifiers correspond to text in this file.\n                if (!System.IO.File.Exists(messageFile))\n                {\n                    Console.WriteLine(&quot;Input message resource file does not exist - {0}&quot;, \n                        messageFile);\n                    messageFile = &quot;&quot;;\n                }\n                else \n                {\n                    // Set the specified file as the resource\n                    // file for message text, category text, and \n                    // message parameter strings.  \n\n                    mySourceData.MessageResourceFile = messageFile;\n                    mySourceData.CategoryResourceFile = messageFile;\n                    mySourceData.CategoryCount = CategoryCount;\n                    mySourceData.ParameterResourceFile = messageFile;\n\n                    Console.WriteLine(&quot;Event source message resource file set to {0}&quot;, \n                        messageFile);\n                }\n\n                Console.WriteLine(&quot;Registering new source for event log.&quot;);\n                EventLog.CreateEventSource(mySourceData);\n            }\n            else\n            {\n                // Get the event log corresponding to the existing source.\n                myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n            }\n\n            // Register the localized name of the event log.\n            // For example, the actual name of the event log is &quot;myNewLog,&quot; but\n            // the event log name displayed in the Event Viewer might be\n            // &quot;Sample Application Log&quot; or some other application-specific\n            // text.\n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n            \n            if (messageFile.Length &gt; 0)\n            {\n                myEventLog.RegisterDisplayName(messageFile, DisplayNameMsgId);\n            }\n        }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventSourceCreationData_Source\">\r\n    \r\n            <a id=\"System_Diagnostics_EventSourceCreationData_Source_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Source</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name to register with the event log as an event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Source { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name to register with the event log as a source of entries. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source name is often the name of the application, or the name of a component within a large application. The <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_System_Diagnostics_EventSourceCreationData_\" data-linktype=\"relative-path\">System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)</a> method uses the Source, <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_LogName_\" data-linktype=\"relative-path\">LogName</a>, and <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MachineName_\" data-linktype=\"relative-path\">MachineName</a> properties to create registry values on the target computer for the new source and its associated event log. A new source name cannot match an existing source name or an existing event log name on the target computer.  </p>\n<p> After the registry values for the source are created, your application can use the source to write entries to the configured event log.  </p>\n<p> Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"EventLog_EventSourceCreation_Properties#2\">            Dim mySourceData As EventSourceCreationData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;)\n            Dim registerSource As Boolean = True\n\n            &#39; Process input parameters.\n            If args.Length &gt; 0\n                &#39; Require at least the source name.\n\n                mySourceData.Source = args(0)\n\n                If args.Length &gt; 1\n   \n                    mySourceData.LogName = args(1)\n    \n                End If\n                If args.Length &gt; 2\n   \n                    mySourceData.MachineName = args(2)\n    \n                End If\n                If args.Length &gt; 3 AndAlso args(3).Length &gt; 0\n   \n                    mySourceData.MessageResourceFile = args(3)\n    \n                End If\n\n            Else \n                &#39; Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;)\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;)\n\n                registerSource = False\n            End If\n\n            &#39; Set defaults for parameters missing input.\n            If mySourceData.MachineName.Length = 0\n            \n                &#39; Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;\n            End If\n            If mySourceData.LogName.Length = 0\n                &#39; Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;\n            End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventLog_EventSourceCreation_Properties#2\">   EventSourceCreationData ^ mySourceData = gcnew EventSourceCreationData( &quot;&quot;,&quot;&quot; );\n   bool registerSource = true;\n   \n   // Process input parameters.\n   if ( args-&gt;Length &gt; 1 )\n   {\n      \n      // Require at least the source name.\n      mySourceData-&gt;Source = args[ 1 ];\n      if ( args-&gt;Length &gt; 2 )\n      {\n         mySourceData-&gt;LogName = args[ 2 ];\n      }\n\n      if ( args-&gt;Length &gt; 3 )\n      {\n         mySourceData-&gt;MachineName = args[ 3 ];\n      }\n\n      if ( (args-&gt;Length &gt; 4) &amp;&amp; (args[ 4 ]-&gt;Length &gt; 0) )\n      {\n         mySourceData-&gt;MessageResourceFile = args[ 4 ];\n      }\n   }\n   else\n   {\n      \n      // Display a syntax help message.\n      Console::WriteLine( &quot;Input:&quot; );\n      Console::WriteLine( &quot; source [event log] [machine name] [resource file]&quot; );\n      registerSource = false;\n   }\n\n   \n   // Set defaults for parameters missing input.\n   if ( mySourceData-&gt;MachineName-&gt;Length == 0 )\n   {\n      \n      // Default to the local computer.\n      mySourceData-&gt;MachineName = &quot;.&quot;;\n   }\n\n   if ( mySourceData-&gt;LogName-&gt;Length == 0 )\n   {\n      \n      // Default to the Application log.\n      mySourceData-&gt;LogName = &quot;Application&quot;;\n   }\n\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_EventSourceCreation_Properties#2\">            EventSourceCreationData mySourceData = new EventSourceCreationData(&quot;&quot;, &quot;&quot;);\n            bool registerSource = true;\n\n            // Process input parameters.\n            if (args.Length &gt; 0)\n            {\n                // Require at least the source name.\n\n                mySourceData.Source = args[0];\n\n                if (args.Length &gt; 1)\n                {\n                    mySourceData.LogName = args[1];\n                }\n\n                if (args.Length &gt; 2)\n                {\n                    mySourceData.MachineName = args[2];\n                }\n                if ((args.Length &gt; 3) &amp;&amp; (args[3].Length &gt; 0))\n                {\n                    mySourceData.MessageResourceFile = args[3];\n                }\n            }\n            else \n            {\n                // Display a syntax help message.\n                Console.WriteLine(&quot;Input:&quot;);\n                Console.WriteLine(&quot; source [event log] [machine name] [resource file]&quot;);\n\n                registerSource = false;\n            }\n\n            // Set defaults for parameters missing input.\n            if (mySourceData.MachineName.Length == 0)\n            {\n                // Default to the local computer.\n                mySourceData.MachineName = &quot;.&quot;;\n            }\n            if (mySourceData.LogName.Length == 0)\n            {\n                // Default to the Application log.\n                mySourceData.LogName = &quot;Application&quot;;\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EventSourceCreationData.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EventSourceCreationData.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.CategoryCount\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.CategoryResourceFile\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.LogName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.MachineName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.MessageResourceFile\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.ParameterResourceFile\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventSourceCreationData.Source\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d173f72c-115a-2d49-72b1-3601176b06f2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the configuration settings used to create an event log source on the local computer or a remote computer.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.EventSourceCreationData\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EventSourceCreationData.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EventSourceCreationData.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.EventSourceCreationData","System.Diagnostics.EventSourceCreationData..ctor","System.Diagnostics.EventSourceCreationData.CategoryCount","System.Diagnostics.EventSourceCreationData.CategoryResourceFile","System.Diagnostics.EventSourceCreationData.LogName","System.Diagnostics.EventSourceCreationData.MachineName","System.Diagnostics.EventSourceCreationData.MessageResourceFile","System.Diagnostics.EventSourceCreationData.ParameterResourceFile","System.Diagnostics.EventSourceCreationData.Source"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.EventSourceCreationData","System::Diagnostics::EventSourceCreationData","System.Diagnostics.EventSourceCreationData.#ctor","System::Diagnostics::EventSourceCreationData::#ctor","System.Diagnostics.EventSourceCreationData.CategoryCount","System::Diagnostics::EventSourceCreationData::CategoryCount","System.Diagnostics.EventSourceCreationData.CategoryResourceFile","System::Diagnostics::EventSourceCreationData::CategoryResourceFile","System.Diagnostics.EventSourceCreationData.LogName","System::Diagnostics::EventSourceCreationData::LogName","System.Diagnostics.EventSourceCreationData.MachineName","System::Diagnostics::EventSourceCreationData::MachineName","System.Diagnostics.EventSourceCreationData.MessageResourceFile","System::Diagnostics::EventSourceCreationData::MessageResourceFile","System.Diagnostics.EventSourceCreationData.ParameterResourceFile","System::Diagnostics::EventSourceCreationData::ParameterResourceFile","System.Diagnostics.EventSourceCreationData.Source","System::Diagnostics::EventSourceCreationData::Source"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d173f72c-115a-2d49-72b1-3601176b06f2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/EventSourceCreationData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventSourceCreationData class | Microsoft Docs","_op_ogTitle":"EventSourceCreationData class","description":"Represents the configuration settings used to create an event log source on the local computer or a remote computer.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.EventSourceCreationData","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.eventsourcecreationdata","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.eventsourcecreationdata","fileRelativePath":"System.Diagnostics.EventSourceCreationData.html"},"themesRelativePathToOutputRoot":"_themes/"}