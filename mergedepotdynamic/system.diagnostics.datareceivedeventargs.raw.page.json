{"content":"    \r\n    <h1 id=\"System_Diagnostics_DataReceivedEventArgs\">\r\n      <span class=\"lang-csharp\">DataReceivedEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"relative-path\">ErrorDataReceived</a> events.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DataReceivedEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataReceivedEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To asynchronously collect the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream output of a process, you must create a method that handles the redirected stream output events. The event-handler method is called when the process writes to the redirected stream. The event delegate calls your event handler with an instance of DataReceivedEventArgs. The <a class=\"xref\" href=\"system.diagnostics.datareceivedeventargs#System_Diagnostics_DataReceivedEventArgs_Data_\" data-linktype=\"relative-path\">Data</a> property contains the text line that the process wrote to the redirected stream.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_DataReceivedEventArgs_Data\" data-linktype=\"self-bookmark\">Data</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the line of characters that was written to a redirected <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_DataReceivedEventArgs_Data\">\r\n    \r\n            <a id=\"System_Diagnostics_DataReceivedEventArgs_Data_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Data</div>        \r\n          </div>\r\n    \r\n            <p>Gets the line of characters that was written to a redirected <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Data { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The line that was written by an associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> or <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> to your event handler, an event is raised each time the process writes a line to the redirected stream. The Data property is the line that the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> wrote to the redirected output stream. Your event handler can use the Data property to filter process output or write output to an alternate location. For example, you might create an event handler that stores all error output lines into a designated error log file.  </p>\n<p> A line is defined as a sequence of characters followed by a line feed (&quot;\\n&quot;) or a carriage return immediately followed by a line feed (&quot;\\r\\n&quot;). The line characters are encoded using the default system ANSI code page. The Data property does not include the terminating carriage return or line feed.  </p>\n<p> When the redirected stream is closed, a null line is sent to the event handler. Ensure your event handler checks the Data property appropriately before accessing it. For example, you can use the static method <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> to validate the Data property in your event handler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a simple event handler associated with the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event. The event handler receives text lines from the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, formats the text, and writes the text to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#4\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Text;\n\nref class StandardAsyncOutputExample\n{\nprivate:\n    static int lineCount = 0;\n    static StringBuilder^ output = nullptr;\n\npublic:\n    static void Run()\n    {\n        Process^ process = gcnew Process();\n        process-&gt;StartInfo-&gt;FileName = &quot;ipconfig.exe&quot;;\n        process-&gt;StartInfo-&gt;UseShellExecute = false;\n        process-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n        output = gcnew StringBuilder();\n        process-&gt;OutputDataReceived += gcnew DataReceivedEventHandler(OutputHandler);\n        process-&gt;Start();\n\n        // Asynchronously read the standard output of the spawned process. \n        // This raises OutputDataReceived events for each line of output.\n        process-&gt;BeginOutputReadLine();\n        process-&gt;WaitForExit();\n\n        // Write the redirected output to this application&#39;s window.\n        Console::WriteLine(output);\n\n        process-&gt;WaitForExit();\n        process-&gt;Close();\n\n        Console::WriteLine(&quot;<br><br>Press any key to exit&quot;);\n        Console::ReadLine();\n    }\n\nprivate:\n    static void OutputHandler(Object^ sender, DataReceivedEventArgs^ e)\n    {\n        // Prepend line numbers to each line of the output.\n        if (!String::IsNullOrEmpty(e-&gt;Data))\n        {\n            lineCount++;\n            output-&gt;Append(&quot;<br>[&quot; + lineCount + &quot;]: &quot; + e-&gt;Data);\n        }\n    }\n};\n\nint main()\n{\n    StandardAsyncOutputExample::Run();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#4\">using System;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\n\nclass StandardAsyncOutputExample\n{\n    private static int lineCount = 0;\n    private static StringBuilder output = new StringBuilder();\n\n    public static void Main()\n    {\n        Process process = new Process();\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;;\n        process.StartInfo.UseShellExecute = false;\n        process.StartInfo.RedirectStandardOutput = true;\n        process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =&gt;\n        {\n            // Prepend line numbers to each line of the output.\n            if (!String.IsNullOrEmpty(e.Data))\n            {\n                lineCount++;\n                output.Append(&quot;<br>[&quot; + lineCount + &quot;]: &quot; + e.Data);\n            }\n        });\n\n        process.Start();\n\n        // Asynchronously read the standard output of the spawned process. \n        // This raises OutputDataReceived events for each line of output.\n        process.BeginOutputReadLine();\n        process.WaitForExit();\n\n        // Write the redirected output to this application&#39;s window.\n        Console.WriteLine(output);\n\n        process.WaitForExit();\n        process.Close();\n\n        Console.WriteLine(&quot;<br><br>Press any key to exit.&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#4\">Imports System\nImports System.IO\nImports System.Diagnostics\nImports System.Text\n\nModule Module1\n    Dim lineCount As Integer = 0\n    Dim output As StringBuilder = New StringBuilder()\n\n    Sub Main()\n        Dim process As New Process()\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;\n        process.StartInfo.UseShellExecute = False\n        process.StartInfo.RedirectStandardOutput = True\n        AddHandler process.OutputDataReceived, AddressOf OutputHandler\n        process.Start()\n\n        &#39; Asynchronously read the standard output of the spawned process. \n        &#39; This raises OutputDataReceived events for each line of output.\n        process.BeginOutputReadLine()\n        process.WaitForExit()\n\n        Console.WriteLine(output)\n\n        process.WaitForExit()\n        process.Close()\n\n        Console.WriteLine(Environment.NewLine + Environment.NewLine + &quot;Press any key to exit.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Sub OutputHandler(sender As Object, e As DataReceivedEventArgs)\n        If Not String.IsNullOrEmpty(e.Data) Then\n            lineCount += 1\n\n            &#39; Add the text to the collected output.\n            output.Append(Environment.NewLine + &quot;[&quot; + lineCount.ToString() + &quot;]: &quot; + e.Data)\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.DataReceivedEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.DataReceivedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventArgs.Data\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7c97be5e-3286-afb0-3b00-b71638bd92e7\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\DataReceivedEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  and  events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.DataReceivedEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.DataReceivedEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.DataReceivedEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.DataReceivedEventArgs","System.Diagnostics.DataReceivedEventArgs.Data"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.DataReceivedEventArgs","System::Diagnostics::DataReceivedEventArgs","System.Diagnostics.DataReceivedEventArgs.Data","System::Diagnostics::DataReceivedEventArgs::Data"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7c97be5e-3286-afb0-3b00-b71638bd92e7","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\DataReceivedEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/DataReceivedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataReceivedEventArgs class | Microsoft Docs","_op_ogTitle":"DataReceivedEventArgs class","description":"Provides data for the  and  events.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.DataReceivedEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.datareceivedeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.datareceivedeventargs","fileRelativePath":"System.Diagnostics.DataReceivedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}