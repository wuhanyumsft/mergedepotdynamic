{"content":"    \r\n    <h1 id=\"System_Data_SqlClient_SqlCommand\">\r\n      <span class=\"lang-csharp\">SqlCommand</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;RecordsAffected&quot;)]\n[System.ComponentModel.Designer(&quot;Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.ToolboxItem(true)]\npublic sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand\" data-linktype=\"relative-path\">System.Data.Common.DbCommand</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SqlCommand</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_ExecuteNonQueryAsync\" data-linktype=\"relative-path\">ExecuteNonQueryAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_ExecuteScalarAsync\" data-linktype=\"relative-path\">ExecuteScalarAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_Connection\" data-linktype=\"relative-path\">IDbCommand.Connection</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_CreateParameter\" data-linktype=\"relative-path\">IDbCommand.CreateParameter()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_ExecuteReader\" data-linktype=\"relative-path\">IDbCommand.ExecuteReader()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_ExecuteReader_System_Data_CommandBehavior_\" data-linktype=\"relative-path\">IDbCommand.ExecuteReader(CommandBehavior)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_Parameters\" data-linktype=\"relative-path\">IDbCommand.Parameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbcommand#System_Data_Common_DbCommand_System_Data_IDbCommand_Transaction\" data-linktype=\"relative-path\">IDbCommand.Transaction</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>When an instance of SqlCommand is created, the read/write properties are set to their initial values. For a list of these values, see the SqlCommand constructor.  </p>\n<p> SqlCommand features the following methods for executing commands at a SQL Server database:  </p>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a></td>\n<td>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand, generally executing commands such as INSERT, DELETE, UPDATE, and SET statements. Each call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> must be paired with a call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> which finishes the operation, typically on a separate thread.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a></td>\n<td>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand and retrieves one or more results sets from the server. Each call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> must be paired with a call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> which finishes the operation, typically on a separate thread.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a></td>\n<td>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand. Each call to <code>BeginExecuteXmlReader</code> must be paired with a call to <code>EndExecuteXmlReader</code>, which finishes the operation, typically on a separate thread, and returns an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a></td>\n<td>Executes commands that return rows. For increased performance, <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> invokes commands using the Transact-SQL <code>sp_executesql</code> system stored procedure. Therefore, <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> might not have the effect that you want if used to execute commands such as Transact-SQL SET statements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteNonQuery_\" data-linktype=\"relative-path\">ExecuteNonQuery</a></td>\n<td>Executes commands such as Transact-SQL INSERT, DELETE, UPDATE, and SET statements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteScalar_\" data-linktype=\"relative-path\">ExecuteScalar</a></td>\n<td>Retrieves a single value (for example, an aggregate value) from a database.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a></td>\n<td>Sends the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> to the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Connection_\" data-linktype=\"relative-path\">Connection</a> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</td>\n</tr>\n</tbody>\n</table>\n<p> You can reset the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property and reuse the SqlCommand object. However, you must close the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> before you can execute a new or previous command.  </p>\n<p> If a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is generated by the method executing a SqlCommand, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. However, the user can reopen the connection and continue.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Nameless, also called ordinal, parameters are not supported by the .NET Framework Data Provider for SQL Server.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand__ctor\" data-linktype=\"self-bookmark\">SqlCommand()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand__ctor_System_String_\" data-linktype=\"self-bookmark\">SqlCommand(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_\" data-linktype=\"self-bookmark\">SqlCommand(String,SqlConnection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query and a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlTransaction_\" data-linktype=\"self-bookmark\">SqlCommand(String,SqlConnection,SqlTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query, a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>, and the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlTransaction_System_Data_SqlClient_SqlCommandColumnEncryptionSetting_\" data-linktype=\"self-bookmark\">SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with specified command text, connection, transaction, and encryption setting.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ColumnEncryptionSetting\" data-linktype=\"self-bookmark\">ColumnEncryptionSetting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the column encryption setting for this command.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_CommandText\" data-linktype=\"self-bookmark\">CommandText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the Transact-SQL statement, table name or stored procedure to execute at the data source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_CommandTimeout\" data-linktype=\"self-bookmark\">CommandTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_CommandType\" data-linktype=\"self-bookmark\">CommandType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating how the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> property is to be interpreted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Connection\" data-linktype=\"self-bookmark\">Connection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> used by this instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_DbConnection\" data-linktype=\"self-bookmark\">DbConnection</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_DbParameterCollection\" data-linktype=\"self-bookmark\">DbParameterCollection</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_DbTransaction\" data-linktype=\"self-bookmark\">DbTransaction</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_DesignTimeVisible\" data-linktype=\"self-bookmark\">DesignTimeVisible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the command object should be visible in a Windows Form Designer control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Notification\" data-linktype=\"self-bookmark\">Notification</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies the <a class=\"xref\" href=\"system.data.sql.sqlnotificationrequest\" data-linktype=\"relative-path\">SqlNotificationRequest</a> object bound to this command.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_NotificationAutoEnlist\" data-linktype=\"self-bookmark\">NotificationAutoEnlist</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the application should automatically receive query notifications from a common <a class=\"xref\" href=\"system.data.sqlclient.sqldependency\" data-linktype=\"relative-path\">SqlDependency</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Parameters\" data-linktype=\"self-bookmark\">Parameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.data.sqlclient.sqlparametercollection\" data-linktype=\"relative-path\">SqlParameterCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Transaction\" data-linktype=\"self-bookmark\">Transaction</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> within which the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> executes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_UpdatedRowSource\" data-linktype=\"self-bookmark\">UpdatedRowSource</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets how command results are applied to the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> when used by the <strong>Update</strong> method of the <a class=\"xref\" href=\"system.data.common.dbdataadapter\" data-linktype=\"relative-path\">DbDataAdapter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery\" data-linktype=\"self-bookmark\">BeginExecuteNonQuery()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginExecuteNonQuery(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, given a callback procedure and state information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteReader\" data-linktype=\"self-bookmark\">BeginExecuteReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, and retrieves one or more result sets from the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_Data_CommandBehavior_\" data-linktype=\"self-bookmark\">BeginExecuteReader(CommandBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> using one of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginExecuteReader(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and retrieves one or more result sets from the server, given a callback procedure and state information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_AsyncCallback_System_Object_System_Data_CommandBehavior_\" data-linktype=\"self-bookmark\">BeginExecuteReader(AsyncCallback,Object,CommandBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, using one of the <code>CommandBehavior</code> values, and retrieving one or more result sets from the server, given a callback procedure and state information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader\" data-linktype=\"self-bookmark\">BeginExecuteXmlReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and returns results as an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginExecuteXmlReader(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and returns results as an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object, using a callback procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Cancel\" data-linktype=\"self-bookmark\">Cancel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to cancel the execution of a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_CreateDbParameter\" data-linktype=\"self-bookmark\">CreateDbParameter()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_CreateParameter\" data-linktype=\"self-bookmark\">CreateParameter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of a <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter\" data-linktype=\"relative-path\">SqlParameter</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndExecuteNonQuery(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finishes asynchronous execution of a Transact-SQL statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_EndExecuteReader_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndExecuteReader(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finishes asynchronous execution of a Transact-SQL statement, returning the requested <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndExecuteXmlReader(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finishes asynchronous execution of a Transact-SQL statement, returning the requested data as XML.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteDbDataReader_System_Data_CommandBehavior_\" data-linktype=\"self-bookmark\">ExecuteDbDataReader(CommandBehavior)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteDbDataReaderAsync_System_Data_CommandBehavior_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteNonQuery\" data-linktype=\"self-bookmark\">ExecuteNonQuery()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a Transact-SQL statement against the connection and returns the number of rows affected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteNonQueryAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteNonQueryAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteNonQuery*</span>, which executes a Transact-SQL statement against the connection and returns the number of rows affected. The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReader\" data-linktype=\"self-bookmark\">ExecuteReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReader_System_Data_CommandBehavior_\" data-linktype=\"self-bookmark\">ExecuteReader(CommandBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> using one of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReaderAsync\" data-linktype=\"self-bookmark\">ExecuteReaderAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>. Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Data_CommandBehavior_\" data-linktype=\"self-bookmark\">ExecuteReaderAsync(CommandBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>. Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteReaderAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Data_CommandBehavior_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteReaderAsync(CommandBehavior,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteScalar\" data-linktype=\"self-bookmark\">ExecuteScalar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteScalarAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteScalarAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteScalar*</span>, which executes the query asynchronously and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteXmlReader\" data-linktype=\"self-bookmark\">ExecuteXmlReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync\" data-linktype=\"self-bookmark\">ExecuteXmlReaderAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteXmlReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.  </p>\n<p> Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ExecuteXmlReaderAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteXmlReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_Prepare\" data-linktype=\"self-bookmark\">Prepare()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a prepared version of the command on an instance of SQL Server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_ResetCommandTimeout\" data-linktype=\"self-bookmark\">ResetCommandTimeout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandTimeout*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_StatementCompleted\" data-linktype=\"self-bookmark\">StatementCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the execution of a Transact-SQL statement completes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlCommand_System_ICloneable_Clone\" data-linktype=\"self-bookmark\">ICloneable.Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand__ctor\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlCommand()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlCommand ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a></td>\n<td>30</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a></td>\n<td><code>CommandType.Text</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Connection_\" data-linktype=\"relative-path\">Connection</a></td>\n<td>Null</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for any of these properties through a separate call to the property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and sets the <code>CommandTimeout</code> property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData IDbCommand.CommandTimeout Example#1\"> Public Sub CreateSqlCommand()\n     Dim command As New SqlCommand()\n     command.CommandTimeout = 15\n     command.CommandType = CommandType.Text\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData IDbCommand.CommandTimeout Example#1\"> public void CreateSqlCommand() \n {\n    SqlCommand command = new SqlCommand();\n    command.CommandTimeout = 15;\n    command.CommandType = CommandType.Text;\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlCommand(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlCommand (string cmdText);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cmdText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text of the query.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> is created, the following read/write properties are set to initial values.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a></td>\n<td><code>cmdText</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a></td>\n<td>30</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a></td>\n<td><code>CommandType.Text</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Connection_\" data-linktype=\"relative-path\">Connection</a></td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for any of these properties through a separate call to the property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, passing in the connection string and command text.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.SqlCommand1 Example#1\">    Public Sub CreateCommand()\n        Dim queryString As String = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;\n        Dim command As New SqlCommand(queryString)\n        command.CommandTimeout = 15\n        command.CommandType = CommandType.Text\n    End Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.SqlCommand1 Example#1\">public void CreateCommand() \n {\n    string queryString = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;;\n    SqlCommand command = new SqlCommand(queryString);\n    command.CommandTimeout = 15;\n    command.CommandType = CommandType.Text;\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlCommand(String,SqlConnection)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query and a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cmdText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text of the query.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> that represents the connection to an instance of SQL Server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a></td>\n<td><code>cmdText</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a></td>\n<td>30</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a></td>\n<td><code>CommandType.Text</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Connection_\" data-linktype=\"relative-path\">Connection</a></td>\n<td>A new <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> that is the value for the <code>connection</code> parameter.</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for any of these parameters by setting the related property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and sets some of its properties.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.SqlCommand2 Example#1\">        private static void CreateCommand(string queryString,\n            string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(\n                       connectionString))\n            {\n                SqlCommand command = new SqlCommand(\n                    queryString, connection);\n                connection.Open();\n                SqlDataReader reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    Console.WriteLine(String.Format(&quot;{0}, {1}&quot;,\n                        reader[0], reader[1]));\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.SqlCommand2 Example#1\">    Public Sub CreateCommand(ByVal queryString As String, _\n      ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            connection.Open()\n            Dim reader As SqlDataReader = command.ExecuteReader()\n                While reader.Read()\n                Console.WriteLine(String.Format(&quot;{0}, {1}&quot;, _\n                    reader(0), reader(1)))\n            End While\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlTransaction_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlCommand(String,SqlConnection,SqlTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with the text of the query, a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>, and the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cmdText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text of the query.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> that represents the connection to an instance of SQL Server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> in which the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> executes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a></td>\n<td><code>cmdText</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a></td>\n<td>30</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a></td>\n<td><code>CommandType.Text</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Connection_\" data-linktype=\"relative-path\">Connection</a></td>\n<td>A new <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> that is the value for the <code>connection</code> parameter.</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for any of these parameters by setting the related property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand__ctor_System_String_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlTransaction_System_Data_SqlClient_SqlCommandColumnEncryptionSetting_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> class with specified command text, connection, transaction, and encryption setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cmdText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text of the query.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> that represents the connection to an instance of SQL Server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> in which the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> executes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnEncryptionSetting</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcommandcolumnencryptionsetting\" data-linktype=\"relative-path\">SqlCommandColumnEncryptionSetting</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encryption setting. For more information, see <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ColumnEncryptionSetting\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ColumnEncryptionSetting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnEncryptionSetting</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the column encryption setting for this command.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcommandcolumnencryptionsetting\" data-linktype=\"relative-path\">SqlCommandColumnEncryptionSetting</a></div>\r\n                  </div>\r\n                  <p>The column encryption setting for this command.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_CommandText\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_CommandText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the Transact-SQL statement, table name or stored procedure to execute at the data source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string CommandText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a> property is set to <code>StoredProcedure</code>, the CommandText property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the <code>Execute</code> methods.  </p>\n<p> The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a Transact-SQL statement or a stored procedure called by a command of <code>CommandType.Text</code>. In this case, named parameters must be used. For example:  </p>\n<pre><code>SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  \n</code></pre><p> For more information, see <a href=\"../Topic/Configuring%20Parameters%20and%20Parameter%20Data%20Types.md\" data-linktype=\"relative-path\">Configuring Parameters and Parameter Data Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and sets some of its properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.CommandText Example#1\">    Public Sub CreateCommand()\n        Dim command As New SqlCommand()\n        command.CommandText = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;\n        command.CommandTimeout = 15\n        command.CommandType = CommandType.Text\n    End Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.CommandText Example#1\">public void CreateCommand() \n {\n    SqlCommand command = new SqlCommand();\n    command.CommandText = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;;\n    command.CommandTimeout = 15;\n    command.CommandType = CommandType.Text;\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_CommandTimeout\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_CommandTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int CommandTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The time in seconds to wait for the command to execute. The default is 30 seconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The CommandTimeout property will be ignored during asynchronous method calls such as <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a>.  </p>\n</div>\n<p> CommandTimeout has no effect when the command is executed against a context connection (a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> opened with &quot;context connection=true&quot; in the connection string).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is the cumulative time-out (for all network packets that are read during the invocation of a method) for all network reads during command execution or processing of the results. A time-out can still occur after the first row is returned, and does not include user processing time, only network read time.  </p>\n<p> For example, with a 30 second time out, if <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> requires two network packets, then it has 30 seconds to read both network packets. If you call <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> again, it will have another 30 seconds to read any data that it requires.  </p>\n</div>\n<pre><code>using System;  \nusing System.Data.SqlClient;  \n///   \npublic class A {  \n   ///   \n   public static void Main() {  \n      string connectionString = &quot;&quot;;  \n      // Wait for 5 second delay in the command  \n      string queryString = &quot;waitfor delay &#39;00:00:05&#39;&quot;;  \n      using (SqlConnection connection = new SqlConnection(connectionString)) {  \n         connection.Open();  \n         SqlCommand command = new SqlCommand(queryString, connection);  \n         // Setting command timeout to 1 second  \n         command.CommandTimeout = 1;  \n         try {  \n            command.ExecuteNonQuery();  \n         }  \n         catch (SqlException e) {  \n            Console.WriteLine(&quot;Got expected SqlException due to command timeout &quot;);  \n            Console.WriteLine(e);  \n         }  \n      }  \n   }  \n}  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_CommandType\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_CommandType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating how the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> property is to be interpreted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.CommandType CommandType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandtype\" data-linktype=\"relative-path\">CommandType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.commandtype\" data-linktype=\"relative-path\">CommandType</a> values. The default is <code>Text</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value was not a valid <a class=\"xref\" href=\"system.data.commandtype\" data-linktype=\"relative-path\">CommandType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you set the CommandType property to <code>StoredProcedure</code>, you should set the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.  </p>\n<p> The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called with a CommandType of <a class=\"xref\" href=\"system.data.commandtype\" data-linktype=\"relative-path\">CommandType</a>. In this case, named parameters must be used. For example:  </p>\n<p> SELECT * FROM Customers WHERE CustomerID = @CustomerID  </p>\n<p> For more information, see <a href=\"../Topic/Configuring%20Parameters%20and%20Parameter%20Data%20Types.md\" data-linktype=\"relative-path\">Configuring Parameters and Parameter Data Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and sets some of its properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData IDbCommand.CommandTimeout Example#1\"> Public Sub CreateSqlCommand()\n     Dim command As New SqlCommand()\n     command.CommandTimeout = 15\n     command.CommandType = CommandType.Text\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData IDbCommand.CommandTimeout Example#1\"> public void CreateSqlCommand() \n {\n    SqlCommand command = new SqlCommand();\n    command.CommandTimeout = 15;\n    command.CommandType = CommandType.Text;\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Connection\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Connection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connection</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> used by this instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlConnection Connection { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </div>\r\n                  <p>The connection to a data source. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The Connection property was changed while the command was enlisted in a transaction..</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command is enlisted in an existing transaction, and the connection is changed, trying to execute the command will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Transaction_\" data-linktype=\"relative-path\">Transaction</a> property is not null and the transaction has already been committed or rolled back, <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_Transaction_\" data-linktype=\"relative-path\">Transaction</a> is set to null.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and sets some of its properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.Connection Example#1\">    Public Sub CreateCommand(ByVal queryString As String, _\n      ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand()\n            command.Connection = connection\n            command.CommandTimeout = 15\n            command.CommandType = CommandType.Text\n            command.CommandText = queryString\n\n            connection.Open()\n            Dim reader As SqlDataReader = command.ExecuteReader()\n                While reader.Read()\n                Console.WriteLine(String.Format(&quot;{0}, {1}&quot;, _\n                    reader(0), reader(1)))\n            End While\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.Connection Example#1\">        private static void CreateCommand(string queryString,\n            string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(\n                       connectionString))\n            {\n                SqlCommand command = new SqlCommand();\n                command.Connection = connection;\n                command.CommandTimeout = 15;\n                command.CommandType = CommandType.Text;\n                command.CommandText = queryString;\n\n                connection.Open();\n                SqlDataReader reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    Console.WriteLine(String.Format(&quot;{0}, {1}&quot;,\n                        reader[0], reader[1]));\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_DbConnection\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_DbConnection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DbConnection</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbConnection DbConnection { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbconnection\" data-linktype=\"relative-path\">DbConnection</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_DbParameterCollection\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_DbParameterCollection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DbParameterCollection</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbparametercollection\" data-linktype=\"relative-path\">DbParameterCollection</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_DbTransaction\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_DbTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DbTransaction</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbTransaction DbTransaction { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbtransaction\" data-linktype=\"relative-path\">DbTransaction</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_DesignTimeVisible\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_DesignTimeVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DesignTimeVisible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the command object should be visible in a Windows Form Designer control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool DesignTimeVisible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A value indicating whether the command object should be visible in a control. The default is <strong>true</strong>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Notification\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Notification_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Notification</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies the <a class=\"xref\" href=\"system.data.sql.sqlnotificationrequest\" data-linktype=\"relative-path\">SqlNotificationRequest</a> object bound to this command.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.Sql.SqlNotificationRequest Notification { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sql.sqlnotificationrequest\" data-linktype=\"relative-path\">SqlNotificationRequest</a></div>\r\n                  </div>\r\n                  <p>When set to null (default), no notification should be requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must set the value for this property before the command is executed for it to take effect.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_NotificationAutoEnlist\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_NotificationAutoEnlist_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotificationAutoEnlist</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the application should automatically receive query notifications from a common <a class=\"xref\" href=\"system.data.sqlclient.sqldependency\" data-linktype=\"relative-path\">SqlDependency</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool NotificationAutoEnlist { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><strong>true</strong> if the application should automatically receive query notifications; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This feature is used in ASP.NET applications to receive notifications for all commands executed in an ASP page against SQL Server. This enables ASP.NET to cache the page until the queries used to render the page would produce a different result. Automatic enlistment.  </p>\n<p> This property applies only to versions of SQL Server that support query notifications. For earlier versions, setting this property to <strong>true</strong> has no effect on the application.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Parameters\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Parameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.data.sqlclient.sqlparametercollection\" data-linktype=\"relative-path\">SqlParameterCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlParameterCollection Parameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlparametercollection\" data-linktype=\"relative-path\">SqlParameterCollection</a></div>\r\n                  </div>\r\n                  <p>The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called by a command of <code>CommandType.Text</code>. In this case, named parameters must be used. For example:  </p>\n<p> SELECT * FROM Customers WHERE CustomerID = @CustomerID  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the parameters in the collection do not match the requirements of the query to be executed, an error may result.  </p>\n</div>\n<p> For more information, see <a href=\"../Topic/Configuring%20Parameters%20and%20Parameter%20Data%20Types.md\" data-linktype=\"relative-path\">Configuring Parameters and Parameter Data Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and add parameters to the <a class=\"xref\" href=\"system.data.sqlclient.sqlparametercollection\" data-linktype=\"relative-path\">SqlParameterCollection</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlParameterCollection.AddWithValue#1\">    Private Sub UpdateDemographics(ByVal customerID As Integer, _\n        ByVal demoXml As String, _\n        ByVal connectionString As String)\n\n        &#39; Update the demographics for a store, which is stored \n        &#39; in an xml column.\n        Dim commandText As String = _\n         &quot;UPDATE Sales.Store SET Demographics = @demographics &quot; _\n         &amp; &quot;WHERE CustomerID = @ID;&quot;\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(commandText, connection)\n\n            &#39; Add CustomerID parameter for WHERE clause.\n            command.Parameters.Add(&quot;@ID&quot;, SqlDbType.Int)\n            command.Parameters(&quot;@ID&quot;).Value = customerID\n\n            &#39; Use AddWithValue to assign Demographics.\n            &#39; SQL Server will implicitly convert strings into XML.\n            command.Parameters.AddWithValue(&quot;@demographics&quot;, demoXml)\n\n            Try\n                connection.Open()\n                Dim rowsAffected As Integer = command.ExecuteNonQuery()\n                Console.WriteLine(&quot;RowsAffected: {0}&quot;, rowsAffected)\n\n            Catch ex As Exception\n                Console.WriteLine(ex.Message)\n            End Try\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlParameterCollection.AddWithValue#1\">    private static void UpdateDemographics(Int32 customerID,\n        string demoXml, string connectionString)\n    {\n        // Update the demographics for a store, which is stored \n        // in an xml column. \n        string commandText = &quot;UPDATE Sales.Store SET Demographics = @demographics &quot;\n            + &quot;WHERE CustomerID = @ID;&quot;;\n\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(commandText, connection);\n            command.Parameters.Add(&quot;@ID&quot;, SqlDbType.Int);\n            command.Parameters[&quot;@ID&quot;].Value = customerID;\n\n            // Use AddWithValue to assign Demographics.\n            // SQL Server will implicitly convert strings into XML.\n            command.Parameters.AddWithValue(&quot;@demographics&quot;, demoXml);\n\n            try\n            {\n                connection.Open();\n                Int32 rowsAffected = command.ExecuteNonQuery();\n                Console.WriteLine(&quot;RowsAffected: {0}&quot;, rowsAffected);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Transaction\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Transaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transaction</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> within which the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> executes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlTransaction Transaction { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> object that is not connected to the same <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> as the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object, an exception is thrown the next time that you attempt to execute a statement.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_UpdatedRowSource\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_UpdatedRowSource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdatedRowSource</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets how command results are applied to the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> when used by the <strong>Update</strong> method of the <a class=\"xref\" href=\"system.data.common.dbdataadapter\" data-linktype=\"relative-path\">DbDataAdapter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.updaterowsource\" data-linktype=\"relative-path\">UpdateRowSource</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.updaterowsource\" data-linktype=\"relative-path\">UpdateRowSource</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default <a class=\"xref\" href=\"system.data.updaterowsource\" data-linktype=\"relative-path\">UpdateRowSource</a> value is <strong>Both</strong> unless the command is automatically generated (as in the case of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommandbuilder\" data-linktype=\"relative-path\">SqlCommandBuilder</a>), in which case the default is <strong>None</strong>.  </p>\n<p> For more information about using the <strong>UpdatedRowSource</strong> property, see <a href=\"../Topic/DataAdapter%20Parameters.md\" data-linktype=\"relative-path\">DataAdapter Parameters</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteNonQuery()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteNonQuery ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll or wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteNonQuery*</span>, which returns the number of affected rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginExecuteNonQuery method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that does not return rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> method to finish the operation. The BeginExecuteNonQuery method returns immediately (<a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a> has no effect on BeginExecuteNonQuery), but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  </p>\n<p> Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the BeginExecuteNonQuery method; or wait for the completion of one or more commands using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the returned <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates updates data within the <strong>AdventureWorks</strong> sample database, doing its work asynchronously. In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text. Normally, you would not take efforts to make your commands run slower, but doing this in this case makes it easier to demonstrate the asynchronous behavior.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteNonQuery#1\">Imports System.Data.SqlClient\n\nModule Module1\n\n    Sub Main()\n        &#39; This is a simple example that demonstrates the usage of the \n        &#39; BeginExecuteNonQuery functionality.\n        &#39; The WAITFOR statement simply adds enough time to prove the \n        &#39; asynchronous nature of the command.\n        Dim commandText As String = _\n         &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint + 1 &quot; &amp; _\n         &quot;WHERE ReorderPoint Is Not Null;&quot; &amp; _\n         &quot;WAITFOR DELAY &#39;0:0:3&#39;;&quot; &amp; _\n         &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint - 1 &quot; &amp; _\n         &quot;WHERE ReorderPoint Is Not Null&quot;\n\n        RunCommandAsynchronously(commandText, GetConnectionString())\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub RunCommandAsynchronously( _\n     ByVal commandText As String, ByVal connectionString As String)\n\n        &#39; Given command text and connection string, asynchronously execute\n        &#39; the specified command against the connection. For this example,\n        &#39; the code displays an indicator as it is working, verifying the \n        &#39; asynchronous behavior. \n        Using connection As New SqlConnection(connectionString)\n            Try\n                Dim count As Integer = 0\n                Dim command As New SqlCommand(commandText, connection)\n                connection.Open()\n                Dim result As IAsyncResult = command.BeginExecuteNonQuery()\n                While Not result.IsCompleted\n                    Console.WriteLine(&quot;Waiting ({0})&quot;, count)\n                    &#39; Wait for 1/10 second, so the counter\n                    &#39; does not consume all available resources \n                    &#39; on the main thread.\n                    Threading.Thread.Sleep(100)\n                    count += 1\n                End While\n                Console.WriteLine(&quot;Command complete. Affected {0} rows.&quot;, _\n                    command.EndExecuteNonQuery(result))\n            Catch ex As SqlException\n                Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message)\n            Catch ex As InvalidOperationException\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            Catch ex As Exception\n                &#39; You might want to pass these errors\n                &#39; back out to the caller.\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            End Try\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,            \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=SSPI;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteNonQuery#1\">using System.Data.SqlClient;\n\nclass Class1\n{\n    static void Main()\n    {\n        // This is a simple example that demonstrates the usage of the \n        // BeginExecuteNonQuery functionality.\n        // The WAITFOR statement simply adds enough time to prove the \n        // asynchronous nature of the command.\n      \n        string commandText = \n            &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint + 1 &quot; + \n            &quot;WHERE ReorderPoint Is Not Null;&quot; + \n            &quot;WAITFOR DELAY &#39;0:0:3&#39;;&quot; + \n            &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint - 1 &quot; + \n            &quot;WHERE ReorderPoint Is Not Null&quot;;\n\n        RunCommandAsynchronously(commandText, GetConnectionString());\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void RunCommandAsynchronously(\n        string commandText, string connectionString)\n    {\n        // Given command text and connection string, asynchronously execute\n        // the specified command against the connection. For this example,\n        // the code displays an indicator as it is working, verifying the \n        // asynchronous behavior. \n        using (SqlConnection connection = \n                   new SqlConnection(connectionString))\n        {\n            try\n            {\n                int count = 0;\n                SqlCommand command = new SqlCommand(commandText, connection);\n                connection.Open();\n\n                IAsyncResult result = command.BeginExecuteNonQuery();\n                while (!result.IsCompleted)\n                {\n                    Console.WriteLine(&quot;Waiting ({0})&quot;, count++);\n                    // Wait for 1/10 second, so the counter\n                    // does not consume all available resources \n                    // on the main thread.\n                    System.Threading.Thread.Sleep(100);\n                }\n                Console.WriteLine(&quot;Command complete. Affected {0} rows.&quot;, \n                    command.EndExecuteNonQuery(result));\n            }\n            catch (SqlException ex)\n            {\n                Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n            }\n            catch (Exception ex)\n            {\n                // You might want to pass these errors\n                // back out to the caller.\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code,            \n        // you can retrieve it from a configuration file. \n\n        // If you have not included &quot;Asynchronous Processing=true&quot; in the\n        // connection string, the command is not able\n        // to execute asynchronously.\n        return &quot;Data Source=(local);Integrated Security=SSPI;&quot; +\n            &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n    } \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteNonQuery(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, given a callback procedure and state information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is invoked when the command&#39;s execution has completed. Pass <code>null</code> (<code>Nothing</code> in Microsoft Visual Basic) to indicate that no callback is required.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <span class=\"xref\">stem.IAsyncResult.AsyncState*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll or wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteNonQuery*</span>, which returns the number of affected rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that does not return rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> method to finish the operation. The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> method returns immediately (<a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a> has no effect on BeginExecuteNonQuery), but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <code>callback</code> parameter lets you specify an <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is called when the statement has completed. You can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\" data-linktype=\"relative-path\">EndExecuteNonQuery</a> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the <code>asyncStateObject</code> parameter, and your callback procedure can retrieve this information using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  </p>\n<p> Because the callback procedure executes from within a background thread supplied by the Microsoft .NET common language runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form&#39;s contents from within your callback procedure; should you have to update the form, you must switch back to the form&#39;s thread in order to do your work. The example in this topic demonstrates this behavior.  </p>\n<p> All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Windows application demonstrates the use of the BeginExecuteNonQuery method, executing a Transact-SQL statement that includes a delay of several seconds (emulating a long-running command).  </p>\n<p> This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  </p>\n<p> To set up this example, create a new Windows application. Put a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control on the form (accepting the default name for each control). Add the following code to the form&#39;s class, modifying the connection string as needed for your environment.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteNonQueryForm#1\">using System.Data.SqlClient;\n\nnamespace Microsoft.AdoDotNet.CodeSamples\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        // Hook up the form&#39;s Load event handler (you can double-click on \n        // the form&#39;s design surface in Visual Studio), and then add \n        // this code to the form&#39;s class:\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            this.button1.Click += new System.EventHandler(this.button1_Click);\n            this.FormClosing += new System.Windows.Forms.\n                FormClosingEventHandler(this.Form1_FormClosing);\n\n        }\n\n        // You need this delegate in order to display text from a thread\n        // other than the form&#39;s thread. See the HandleCallback\n        // procedure for more information.\n        // This same delegate matches both the DisplayStatus \n        // and DisplayResults methods.\n        private delegate void DisplayInfoDelegate(string Text);\n\n        // This flag ensures that the user does not attempt\n        // to restart the command or close the form while the \n        // asynchronous command is executing.\n        private bool isExecuting;\n\n        // This example maintains the connection object \n        // externally, so that it is available for closing.\n        private SqlConnection connection;\n\n        private static string GetConnectionString()\n        {\n            // To avoid storing the connection string in your code,            \n            // you can retrieve it from a configuration file. \n\n            // If you have not included &quot;Asynchronous Processing=true&quot; in the\n            // connection string, the command is not able\n            // to execute asynchronously.\n            return &quot;Data Source=(local);Integrated Security=true;&quot; +\n                &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n        }\n\n        private void DisplayStatus(string Text)\n        {\n            this.label1.Text = Text;\n        }\n\n        private void DisplayResults(string Text)\n        {\n            this.label1.Text = Text;\n            DisplayStatus(&quot;Ready&quot;);\n        }\n\n        private void Form1_FormClosing(object sender,\n            System.Windows.Forms.FormClosingEventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this, &quot;Cannot close the form until &quot; +\n                    &quot;the pending asynchronous command has completed. Please wait...&quot;);\n                e.Cancel = true;\n            }\n        }\n\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this,\n                    &quot;Already executing. Please wait until the current query &quot; +\n                    &quot;has completed.&quot;);\n            }\n            else\n            {\n                SqlCommand command = null;\n                try\n                {\n                    DisplayResults(&quot;&quot;);\n                    DisplayStatus(&quot;Connecting...&quot;);\n                    connection = new SqlConnection(GetConnectionString());\n                    // To emulate a long-running query, wait for \n                    // a few seconds before working with the data.\n                    // This command does not do much, but that&#39;s the point--\n                    // it does not change your data, in the long run.\n                    string commandText =\n                        &quot;WAITFOR DELAY &#39;0:0:05&#39;;&quot; +\n                        &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint + 1 &quot; +\n                        &quot;WHERE ReorderPoint Is Not Null;&quot; +\n                        &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint - 1 &quot; +\n                        &quot;WHERE ReorderPoint Is Not Null&quot;;\n\n                    command = new SqlCommand(commandText, connection);\n                    connection.Open();\n\n                    DisplayStatus(&quot;Executing...&quot;);\n                    isExecuting = true;\n                    // Although it is not required that you pass the \n                    // SqlCommand object as the second parameter in the \n                    // BeginExecuteNonQuery call, doing so makes it easier\n                    // to call EndExecuteNonQuery in the callback procedure.\n                    AsyncCallback callback = new AsyncCallback(HandleCallback);\n                    command.BeginExecuteNonQuery(callback, command);\n\n                }\n                catch (Exception ex)\n                {\n                    isExecuting = false;\n                    DisplayStatus(string.Format(&quot;Ready (last error: {0})&quot;, ex.Message));\n                    if (connection != null)\n                    {\n                        connection.Close();\n                    }\n                }\n            }\n        }\n\n        private void HandleCallback(IAsyncResult result)\n        {\n            try\n            {\n                // Retrieve the original command object, passed\n                // to this procedure in the AsyncState property\n                // of the IAsyncResult parameter.\n                SqlCommand command = (SqlCommand)result.AsyncState;\n                int rowCount = command.EndExecuteNonQuery(result);\n                string rowText = &quot; rows affected.&quot;;\n                if (rowCount == 1)\n                {\n                    rowText = &quot; row affected.&quot;;\n                }\n                rowText = rowCount + rowText;\n\n                // You may not interact with the form and its contents\n                // from a different thread, and this callback procedure\n                // is all but guaranteed to be running from a different thread\n                // than the form. Therefore you cannot simply call code that \n                // displays the results, like this:\n                // DisplayResults(rowText)\n\n                // Instead, you must call the procedure from the form&#39;s thread.\n                // One simple way to accomplish this is to call the Invoke\n                // method of the form, which calls the delegate you supply\n                // from the form&#39;s thread. \n                DisplayInfoDelegate del = new DisplayInfoDelegate(DisplayResults);\n                this.Invoke(del, rowText);\n\n            }\n            catch (Exception ex)\n            {\n                // Because you are now running code in a separate thread, \n                // if you do not handle the exception here, none of your other\n                // code catches the exception. Because none of \n                // your code is on the call stack in this thread, there is nothing\n                // higher up the stack to catch the exception if you do not \n                // handle it here. You can either log the exception or \n                // invoke a delegate (as in the non-error case in this \n                // example) to display the error on the form. In no case\n                // can you simply display the error without executing a delegate\n                // as in the try block here. \n\n                // You can create the delegate instance as you \n                // invoke it, like this:\n                this.Invoke(new DisplayInfoDelegate(DisplayStatus),\n                    String.Format(&quot;Ready(last error: {0}&quot;, ex.Message));\n            }\n            finally\n            {\n                isExecuting = false;\n                if (connection != null)\n                {\n                    connection.Close();\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteNonQueryForm#1\">Imports System.Data.SqlClient\n\nPublic Class Form1\n    &#39; Add this code to the form&#39;s class:\n    &#39; You need this delegate in order to display text from a thread\n    &#39; other than the form&#39;s thread. See the HandleCallback\n    &#39; procedure for more information.\n    &#39; This same delegate matches both the DisplayStatus \n    &#39; and DisplayResults methods.\n    Private Delegate Sub DisplayInfoDelegate(ByVal Text As String)\n\n    &#39; This flag ensures that the user does not attempt\n    &#39; to restart the command or close the form while the \n    &#39; asynchronous command is executing.\n    Private isExecuting As Boolean\n\n    &#39; This example maintains the connection object \n    &#39; externally, so that it is available for closing.\n    Private connection As SqlConnection\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,            \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\n\n    Private Sub DisplayStatus(ByVal Text As String)\n        Me.Label1.Text = Text\n    End Sub\n\n    Private Sub DisplayResults(ByVal Text As String)\n        Me.Label1.Text = Text\n        DisplayStatus(&quot;Ready&quot;)\n    End Sub\n\n    Private Sub Form1_FormClosing(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.FormClosingEventArgs) _\n        Handles Me.FormClosing\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Cannot close the form until &quot; &amp; _\n                &quot;the pending asynchronous command has completed. Please wait...&quot;)\n            e.Cancel = True\n        End If\n    End Sub\n\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        If isExecuting Then\n            MessageBox.Show(Me, _\n               &quot;Already executing. Please wait until the current query &quot; &amp; _\n                &quot;has completed.&quot;)\n        Else\n            Dim command As SqlCommand\n            Try\n                DisplayResults(&quot;&quot;)\n                DisplayStatus(&quot;Connecting...&quot;)\n                connection = New SqlConnection(GetConnectionString())\n                &#39; To emulate a long-running query, wait for \n                &#39; a few seconds before working with the data.\n                &#39; This command does not do much, but that&#39;s the point--\n                &#39; it does not change your data, in the long run.\n                Dim commandText As String = _\n                    &quot;WAITFOR DELAY &#39;0:0:05&#39;;&quot; &amp; _\n                    &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint + 1 &quot; &amp; _\n                    &quot;WHERE ReorderPoint Is Not Null;&quot; &amp; _\n                    &quot;UPDATE Production.Product SET ReorderPoint = ReorderPoint - 1 &quot; &amp; _\n                    &quot;WHERE ReorderPoint Is Not Null&quot;\n\n                command = New SqlCommand(commandText, connection)\n                connection.Open()\n\n                DisplayStatus(&quot;Executing...&quot;)\n                isExecuting = True\n                &#39; Although it is not required that you pass the \n                &#39; SqlCommand object as the second parameter in the \n                &#39; BeginExecuteNonQuery call, doing so makes it easier\n                &#39; to call EndExecuteNonQuery in the callback procedure.\n                Dim callback As New AsyncCallback(AddressOf HandleCallback)\n                command.BeginExecuteNonQuery(callback, command)\n\n            Catch ex As Exception\n                isExecuting = False\n                DisplayStatus(String.Format(&quot;Ready (last error: {0})&quot;, ex.Message))\n                If connection IsNot Nothing Then\n                    connection.Close()\n                End If\n            End Try\n        End If\n    End Sub\n\n    Private Sub HandleCallback(ByVal result As IAsyncResult)\n        Try\n            &#39; Retrieve the original command object, passed\n            &#39; to this procedure in the AsyncState property\n            &#39; of the IAsyncResult parameter.\n            Dim command As SqlCommand = CType(result.AsyncState, SqlCommand)\n            Dim rowCount As Integer = command.EndExecuteNonQuery(result)\n            Dim rowText As String = &quot; rows affected.&quot;\n            If rowCount = 1 Then\n                rowText = &quot; row affected.&quot;\n            End If\n            rowText = rowCount &amp; rowText\n\n            &#39; You may not interact with the form and its contents\n            &#39; from a different thread, and this callback procedure\n            &#39; is all but guaranteed to be running from a different thread\n            &#39; than the form. Therefore you cannot simply call code that \n            &#39; displays the results, like this:\n            &#39; DisplayResults(rowText)\n\n            &#39; Instead, you must call the procedure from the form&#39;s thread.\n            &#39; One simple way to accomplish this is to call the Invoke\n            &#39; method of the form, which calls the delegate you supply\n            &#39; from the form&#39;s thread. \n            Dim del As New DisplayInfoDelegate(AddressOf DisplayResults)\n            Me.Invoke(del, rowText)\n\n        Catch ex As Exception\n            &#39; Because you are now running code in a separate thread, \n            &#39; if you do not handle the exception here, none of your other\n            &#39; code catches the exception. Because none of your code\n            &#39; is on the call stack in this thread, there is nothing\n            &#39; higher up the stack to catch the exception if you do not \n            &#39; handle it here. You can either log the exception or \n            &#39; invoke a delegate (as in the non-error case in this \n            &#39; example) to display the error on the form. In no case\n            &#39; can you simply display the error without executing a delegate\n            &#39; as in the Try block here. \n\n            &#39; You can create the delegate instance as you \n            &#39; invoke it, like this:\n            Me.Invoke(New DisplayInfoDelegate(AddressOf DisplayStatus), _\n                String.Format(&quot;Ready(last error: {0}&quot;, ex.Message))\n        Finally\n            isExecuting = False\n            If connection IsNot Nothing Then\n                connection.Close()\n            End If\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteReader()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, and retrieves one or more result sets from the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll or wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteReader*</span>, which returns a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance that can be used to retrieve the returned rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginExecuteReader method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method to finish the operation and retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> returned by the command. The BeginExecuteReader method returns immediately, but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> may block if more data is required and the underlying network&#39;s read operation blocks.  </p>\n<p> Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the BeginExecuteReader method; or wait for the completion of one or more commands using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the returned <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a>.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or BeginExecuteReader to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property value. As soon as the process has completed, the code retrieves the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> and displays its contents.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteReader#1\">using System.Data.SqlClient;\n\nclass Class1\n{\n    static void Main()\n    {\n        // This is a simple example that demonstrates the usage of the \n        // BeginExecuteReader functionality\n        // The WAITFOR statement simply adds enough time to prove the \n        // asynchronous nature of the command.\n        string commandText =\n            &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; +\n            &quot;SELECT LastName, FirstName FROM Person.Contact &quot; +\n            &quot;WHERE LastName LIKE &#39;M%&#39;&quot;;\n\n        RunCommandAsynchronously(commandText, GetConnectionString());\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void RunCommandAsynchronously(\n        string commandText, string connectionString)\n    {\n        // Given command text and connection string, asynchronously execute\n        // the specified command against the connection. For this example,\n        // the code displays an indicator as it is working, verifying the \n        // asynchronous behavior. \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            try\n            {\n                SqlCommand command = new SqlCommand(commandText, connection);\n\n                connection.Open();\n                IAsyncResult result = command.BeginExecuteReader();\n\n                // Although it is not necessary, the following code\n                // displays a counter in the console window, indicating that \n                // the main thread is not blocked while awaiting the command \n                // results.\n                int count = 0;\n                while (!result.IsCompleted)\n                {\n                    count += 1;\n                    Console.WriteLine(&quot;Waiting ({0})&quot;, count);\n                    // Wait for 1/10 second, so the counter\n                    // does not consume all available resources \n                    // on the main thread.\n                    System.Threading.Thread.Sleep(100);\n                }\n\n                using (SqlDataReader reader = command.EndExecuteReader(result))\n                {\n                    DisplayResults(reader);\n                }\n            }\n            catch (SqlException ex)\n            {\n                Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n            }\n            catch (Exception ex)\n            {\n                // You might want to pass these errors\n                // back out to the caller.\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n            }\n        }\n    }\n\n    private static void DisplayResults(SqlDataReader reader)\n    {\n        // Display the data within the reader.\n        while (reader.Read())\n        {\n            // Display all the columns. \n            for (int i = 0; i &lt; reader.FieldCount; i++)\n                Console.Write(&quot;{0} &quot;, reader.GetValue(i));\n            Console.WriteLine();\n        }\n    }\n\n    private static string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code,            \n        // you can retrieve it from a configuration file. \n\n        // If you have not included &quot;Asynchronous Processing=true&quot; in the\n        // connection string, the command is not able\n        // to execute asynchronously.\n        return &quot;Data Source=(local);Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteReader#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        &#39; This is a simple example that demonstrates the usage of the \n        &#39; BeginExecuteReader functionality.\n        &#39; The WAITFOR statement simply adds enough time to prove the \n        &#39; asynchronous nature of the command.\n        Dim commandText As String = _\n         &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; &amp; _\n         &quot;SELECT LastName, FirstName FROM Person.Contact &quot; &amp; _\n         &quot;WHERE LastName LIKE &#39;M%&#39;&quot;\n\n        RunCommandAsynchronously(commandText, GetConnectionString())\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub RunCommandAsynchronously( _\n     ByVal commandText As String, ByVal connectionString As String)\n\n        &#39; Given command text and connection string, asynchronously execute\n        &#39; the specified command against the connection. For this example,\n        &#39; the code displays an indicator as it is working, verifying the \n        &#39; asynchronous behavior. \n        Using connection As New SqlConnection(connectionString)\n            Try\n                Dim command As New SqlCommand(commandText, connection)\n\n                connection.Open()\n                Dim result As IAsyncResult = command.BeginExecuteReader()\n\n                &#39; Although it is not necessary, the following procedure\n                &#39; displays a counter in the console window, indicating that \n                &#39; the main thread is not blocked while awaiting the command \n                &#39; results.\n                Dim count As Integer\n                While Not result.IsCompleted\n                    count += 1\n                    Console.WriteLine(&quot;Waiting ({0})&quot;, count)\n                    &#39; Wait for 1/10 second, so the counter\n                    &#39; does not consume all available resources \n                    &#39; on the main thread.\n                    Threading.Thread.Sleep(100)\n                End While\n\n                &#39; Once the IAsyncResult object signals that it is done\n                &#39; waiting for results, you can retrieve the results.\n                Using reader As SqlDataReader = command.EndExecuteReader(result)\n                    DisplayResults(reader)\n                End Using\n            Catch ex As SqlException\n                Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message)\n            Catch ex As InvalidOperationException\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            Catch ex As Exception\n                &#39; You might want to pass these errors\n                &#39; back out to the caller.\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            End Try\n        End Using\n    End Sub\n\n    Private Sub DisplayResults(ByVal reader As SqlDataReader)\n        &#39; Display the data within the reader.\n        While reader.Read()\n            &#39; Display all the columns.\n            For i As Integer = 0 To reader.FieldCount - 1\n                Console.Write(&quot;{0} &quot;, reader.GetValue(i))\n            Next\n            Console.WriteLine()\n        End While\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_Data_CommandBehavior_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteReader(CommandBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> using one of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values, indicating options for statement execution and data retrieval.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll, wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteReader*</span>, which returns a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance that can be used to retrieve the returned rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method to finish the operation and retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> returned by the command. The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method returns immediately, but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <code>behavior</code> parameter lets you specify options that control the behavior of the command and its connection. These values can be combined together (using the programming language&#39;s <code>OR</code> operator); generally, developers use the <code>CommandBehavior.CloseConnection</code> value to make sure that the connection is closed by the runtime when the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> is closed.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> may block if more data is required and the underlying network&#39;s read operation blocks.  </p>\n<p> Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> method; or wait for the completion of one or more commands using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the returned <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a>.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property value. Once the process has completed, the code retrieves the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> and displays its contents.  </p>\n<p> This example also passes the <code>CommandBehavior.CloseConnection</code> and <code>CommandBehavior.SingleRow</code> values in the behavior parameter, causing the connection to be closed with the returned <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> is closed, and to optimize for a single row result.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        &#39; This example is not terribly useful, but it proves a point.\n        &#39; The WAITFOR statement simply adds enough time to prove the \n        &#39; asynchronous nature of the command.\n        Dim commandText As String = _\n         &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; &amp; _\n         &quot;SELECT ProductID, Name FROM Production.Product WHERE ListPrice &lt; 100&quot;\n\n        RunCommandAsynchronously(commandText, GetConnectionString())\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub RunCommandAsynchronously( _\n     ByVal commandText As String, ByVal connectionString As String)\n\n        &#39; Given command text and connection string, asynchronously execute\n        &#39; the specified command against the connection. For this example,\n        &#39; the code displays an indicator as it is working, verifying the \n        &#39; asynchronous behavior. \n        Try\n            &#39; The code does not need to handle closing the connection explicitly--\n            &#39; the use of the CommandBehavior.CloseConnection option takes care\n            &#39; of that for you. \n            Dim connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(commandText, connection)\n\n            connection.Open()\n            Dim result As IAsyncResult = _\n              command.BeginExecuteReader(CommandBehavior.CloseConnection)\n\n            &#39; Although it is not necessary, the following code\n            &#39; displays a counter in the console window, indicating that \n            &#39; the main thread is not blocked while awaiting the command \n            &#39; results.\n            Dim count As Integer = 0\n            While Not result.IsCompleted\n                count += 1\n                Console.WriteLine(&quot;Waiting ({0})&quot;, count)\n                &#39; Wait for 1/10 second, so the counter\n                &#39; does not consume all available resources \n                &#39; on the main thread.\n                Threading.Thread.Sleep(100)\n            End While\n\n            &#39; The &quot;using&quot; statement closes the SqlDataReader when it is \n            &#39; done executing.\n            Using reader As SqlDataReader = command.EndExecuteReader(result)\n                DisplayResults(reader)\n            End Using\n        Catch ex As SqlException\n            Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message)\n        Catch ex As InvalidOperationException\n            Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n        Catch ex As Exception\n            &#39; You might want to pass these errors\n            &#39; back out to the caller.\n            Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n        End Try\n    End Sub\n\n    Private Sub DisplayResults(ByVal reader As SqlDataReader)\n        &#39; Display the data within the reader.\n        While reader.Read()\n            &#39; Display all the columns. \n            For i As Integer = 0 To reader.FieldCount - 1\n                Console.Write(&quot;{0} &quot;, reader.GetValue(i))\n            Next\n            Console.WriteLine()\n        End While\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,            \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1\">using System.Data.SqlClient;\nclass Class1\n{\n    static void Main()\n    {\n        // This example is not terribly useful, but it proves a point.\n        // The WAITFOR statement simply adds enough time to prove the \n        // asynchronous nature of the command.\n        string commandText = &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; +\n            &quot;SELECT ProductID, Name FROM Production.Product WHERE ListPrice &lt; 100&quot;;\n\n        RunCommandAsynchronously(commandText, GetConnectionString());\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void RunCommandAsynchronously(\n        string commandText, string connectionString)\n    {\n        // Given command text and connection string, asynchronously execute\n        // the specified command against the connection. For this example,\n        // the code displays an indicator as it is working, verifying the \n        // asynchronous behavior. \n\n        try\n        {\n            // The code does not need to handle closing the connection explicitly--\n            // the use of the CommandBehavior.CloseConnection option takes care\n            // of that for you. \n            SqlConnection connection = new SqlConnection(connectionString);\n            SqlCommand command = new SqlCommand(commandText, connection);\n\n            connection.Open();\n            IAsyncResult result = command.BeginExecuteReader(\n                CommandBehavior.CloseConnection);\n\n            // Although it is not necessary, the following code\n            // displays a counter in the console window, indicating that \n            // the main thread is not blocked while awaiting the command \n            // results.\n            int count = 0;\n            while (!result.IsCompleted)\n            {\n                Console.WriteLine(&quot;Waiting ({0})&quot;, count++);\n                // Wait for 1/10 second, so the counter\n                // does not consume all available resources \n                // on the main thread.\n                System.Threading.Thread.Sleep(100);\n            }\n\n            using (SqlDataReader reader = command.EndExecuteReader(result))\n            {\n                DisplayResults(reader);\n            }\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message);\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n        }\n        catch (Exception ex)\n        {\n            // You might want to pass these errors\n            // back out to the caller.\n            Console.WriteLine(&quot;Error: {0}&quot;, ex.Message);\n        }\n    }\n\n    private static void DisplayResults(SqlDataReader reader)\n    {\n        // Display the data within the reader.\n        while (reader.Read())\n        {\n            // Display all the columns. \n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;&quot;, reader.GetValue(i));\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code,            \n        // you can retrieve it from a configuration file. \n\n        // If you have not included &quot;Asynchronous Processing=true&quot; in the\n        // connection string, the command is not able\n        // to execute asynchronously.\n        return &quot;Data Source=(local);Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteReader(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and retrieves one or more result sets from the server, given a callback procedure and state information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is invoked when the command&#39;s execution has completed. Pass <code>null</code> (<code>Nothing</code> in Microsoft Visual Basic) to indicate that no callback is required.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <span class=\"xref\">stem.IAsyncResult.AsyncState*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll, wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteReader*</span>, which returns a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance which can be used to retrieve the returned rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method to finish the operation and retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> returned by the command. The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method returns immediately, but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> before the command&#39;s execution is completed cause the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <code>callback</code> parameter lets you specify an <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is called when the statement has completed. You can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the <code>stateObject</code> parameter, and your callback procedure can retrieve this information using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> may block if more data is required and the underlying network&#39;s read operation blocks.  </p>\n<p> Because the callback procedure executes from within a background thread supplied by the Microsoft .NET runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form&#39;s contents from within your callback procedure; should you have to update the form, you must switch back to the form&#39;s thread in order to do your work. The example in this topic demonstrates this behavior.  </p>\n<p> All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Windows application demonstrates the use of the BeginExecuteReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object as the <code>stateObject</code> parameter; doing so makes it simple to retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object from within the callback procedure, so that the code can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method corresponding to the initial call to BeginExecuteReader.  </p>\n<p> This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  </p>\n<p> To set up this example, create a new Windows application. Put a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control, a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control, and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control on the form (accepting the default name for each control). Add the following code to the form&#39;s class, modifying the connection string as needed for your environment.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsync#1\">using System.Data.SqlClient;\n\nnamespace Microsoft.AdoDotNet.CodeSamples\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        // Hook up the form&#39;s Load event handler (you can double-click on \n        // the form&#39;s design surface in Visual Studio), and then add \n        // this code to the form&#39;s class:\n\n        // You need this delegate in order to fill the grid from\n        // a thread other than the form&#39;s thread. See the HandleCallback\n        // procedure for more information.\n        private delegate void FillGridDelegate(SqlDataReader reader);\n\n        // You need this delegate to update the status bar.\n        private delegate void DisplayStatusDelegate(string Text);\n\n        // This flag ensures that the user does not attempt\n        // to restart the command or close the form while the \n        // asynchronous command is executing.\n        private bool isExecuting = false;\n\n        // Because the overloaded version of BeginExecuteReader\n        // demonstrated here does not allow you to have the connection\n        // closed automatically, this example maintains the \n        // connection object externally, so that it is available for closing.\n        private SqlConnection connection = null;\n\n        private void DisplayStatus(string Text)\n        {\n            this.label1.Text = Text;\n        }\n\n        private void FillGrid(SqlDataReader reader)\n        {\n            try\n            {\n                DataTable table = new DataTable();\n                table.Load(reader);\n                this.dataGridView1.DataSource = table;\n                DisplayStatus(&quot;Ready&quot;);\n            }\n            catch (Exception ex)\n            {\n                // Because you are guaranteed this procedure\n                // is running from within the form&#39;s thread,\n                // it can directly interact with members of the form.\n                DisplayStatus(string.Format(&quot;Ready (last attempt failed: {0})&quot;,\n                    ex.Message));\n            }\n            finally\n            {\n                // Do not forget to close the connection, as well.\n                if (reader != null)\n                {\n                    reader.Close();\n                }\n                if (connection != null)\n                {\n                    connection.Close();\n                }\n            }\n        }\n\n        private void HandleCallback(IAsyncResult result)\n        {\n            try\n            {\n                // Retrieve the original command object, passed\n                // to this procedure in the AsyncState property\n                // of the IAsyncResult parameter.\n                SqlCommand command = (SqlCommand)result.AsyncState;\n                SqlDataReader reader = command.EndExecuteReader(result);\n                // You may not interact with the form and its contents\n                // from a different thread, and this callback procedure\n                // is all but guaranteed to be running from a different thread\n                // than the form. Therefore you cannot simply call code that \n                // fills the grid, like this:\n                // FillGrid(reader);\n                // Instead, you must call the procedure from the form&#39;s thread.\n                // One simple way to accomplish this is to call the Invoke\n                // method of the form, which calls the delegate you supply\n                // from the form&#39;s thread. \n                FillGridDelegate del = new FillGridDelegate(FillGrid);\n                this.Invoke(del, reader);\n                // Do not close the reader here, because it is being used in \n                // a separate thread. Instead, have the procedure you have\n                // called close the reader once it is done with it.\n            }\n            catch (Exception ex)\n            {\n                // Because you are now running code in a separate thread, \n                // if you do not handle the exception here, none of your other\n                // code catches the exception. Because there is none of \n                // your code on the call stack in this thread, there is nothing\n                // higher up the stack to catch the exception if you do not \n                // handle it here. You can either log the exception or \n                // invoke a delegate (as in the non-error case in this \n                // example) to display the error on the form. In no case\n                // can you simply display the error without executing a delegate\n                // as in the try block here. \n                // You can create the delegate instance as you \n                // invoke it, like this:\n                this.Invoke(new DisplayStatusDelegate(DisplayStatus),\n                    &quot;Error: &quot; + ex.Message);\n            }\n            finally\n            {\n                isExecuting = false;\n            }\n        }\n\n        private string GetConnectionString()\n        {\n            // To avoid storing the connection string in your code, \n            // you can retrieve it from a configuration file. \n\n            // If you do not include the Asynchronous Processing=true name/value pair,\n            // you wo not be able to execute the command asynchronously.\n            return &quot;Data Source=(local);Integrated Security=true;&quot; +\n                &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n        }\n\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this,\n                    &quot;Already executing. Please wait until the current query &quot; +\n                    &quot;has completed.&quot;);\n            }\n            else\n            {\n                SqlCommand command = null;\n                try\n                {\n                    DisplayStatus(&quot;Connecting...&quot;);\n                    connection = new SqlConnection(GetConnectionString());\n                    // To emulate a long-running query, wait for \n                    // a few seconds before retrieving the real data.\n                    command = new SqlCommand(&quot;WAITFOR DELAY &#39;0:0:5&#39;;&quot; +\n                        &quot;SELECT ProductID, Name, ListPrice, Weight FROM Production.Product&quot;,\n                        connection);\n                    connection.Open();\n\n                    DisplayStatus(&quot;Executing...&quot;);\n                    isExecuting = true;\n                    // Although it is not required that you pass the \n                    // SqlCommand object as the second parameter in the \n                    // BeginExecuteReader call, doing so makes it easier\n                    // to call EndExecuteReader in the callback procedure.\n                    AsyncCallback callback = new AsyncCallback(HandleCallback);\n                    command.BeginExecuteReader(callback, command);\n                }\n                catch (Exception ex)\n                {\n                    DisplayStatus(&quot;Error: &quot; + ex.Message);\n                    if (connection != null)\n                    {\n                        connection.Close();\n                    }\n                }\n            }\n        }\n\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            this.button1.Click += new System.EventHandler(this.button1_Click);\n            this.FormClosing += new FormClosingEventHandler(Form1_FormClosing);\n        }\n\n        void Form1_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this, &quot;Cannot close the form until &quot; +\n                    &quot;the pending asynchronous command has completed. Please wait...&quot;);\n                e.Cancel = true;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsync#1\">Imports System.Data.SqlClient\n\nPublic Class Form1\n    &#39; Add this code to the form&#39;s class:\n    &#39; You need this delegate in order to fill the grid from\n    &#39; a thread other than the form&#39;s thread. See the HandleCallback\n    &#39; procedure for more information.\n    Private Delegate Sub FillGridDelegate(ByVal reader As SqlDataReader)\n\n    &#39; You need this delegate to update the status bar.\n    Private Delegate Sub DisplayStatusDelegate(ByVal Text As String)\n\n    &#39; This flag ensures that the user does not attempt\n    &#39; to restart the command or close the form while the \n    &#39; asynchronous command is executing.\n    Private isExecuting As Boolean\n\n    &#39; Because the overloaded version of BeginExecuteReader\n    &#39; demonstrated here does not allow you to have the connection\n    &#39; closed automatically, this example maintains the \n    &#39; connection object externally, so that it is available for closing.\n    Private connection As SqlConnection\n\n    Private Sub DisplayStatus(ByVal Text As String)\n        Me.Label1.Text = Text\n    End Sub\n\n    Private Sub FillGrid(ByVal reader As SqlDataReader)\n        Try\n            Dim table As New DataTable\n            table.Load(reader)\n            Me.DataGridView1.DataSource = table\n            DisplayStatus(&quot;Ready&quot;)\n\n        Catch ex As Exception\n            &#39; Because you are guaranteed this procedure\n            &#39; is running from within the form&#39;s thread,\n            &#39; it can directly interact with members of the form.\n            DisplayStatus(String.Format(&quot;Ready (last attempt failed: {0})&quot;, ex.Message))\n        Finally\n            &#39; Do not forget to close the connection, as well.\n            If Not reader Is Nothing Then\n                reader.Close()\n            End If\n            If Not connection Is Nothing Then\n                connection.Close()\n            End If\n        End Try\n    End Sub\n\n    Private Sub HandleCallback(ByVal result As IAsyncResult)\n        Try\n            &#39; Retrieve the original command object, passed\n            &#39; to this procedure in the AsyncState property\n            &#39; of the IAsyncResult parameter.\n            Dim command As SqlCommand = CType(result.AsyncState, SqlCommand)\n            Dim reader As SqlDataReader = command.EndExecuteReader(result)\n\n            &#39; You may not interact with the form and its contents\n            &#39; from a different thread, and this callback procedure\n            &#39; is all but guaranteed to be running from a different thread\n            &#39; than the form. Therefore you cannot simply call code that \n            &#39; fills the grid, like this:\n            &#39; FillGrid(reader)\n\n            &#39; Instead, you must call the procedure from the form&#39;s thread.\n            &#39; One simple way to accomplish this is to call the Invoke\n            &#39; method of the form, which calls the delegate you supply\n            &#39; from the form&#39;s thread. \n            Dim del As New FillGridDelegate(AddressOf FillGrid)\n            Me.Invoke(del, reader)\n            &#39; Do not close the reader here, because it is being used in \n            &#39; a separate thread. Instead, have the procedure you have\n            &#39; called close the reader once it is done with it.\n\n        Catch ex As Exception\n            &#39; Because you are now running code in a separate thread, \n            &#39; if you do not handle the exception here, none of your other\n            &#39; code catches the exception. Because there is none of \n            &#39; your code on the call stack in this thread, there is nothing\n            &#39; higher up the stack to catch the exception if you do not \n            &#39; handle it here. You can either log the exception or \n            &#39; invoke a delegate (as in the non-error case in this \n            &#39; example) to display the error on the form. In no case\n            &#39; can you simply display the error without executing a delegate\n            &#39; as in the Try block here. \n\n            &#39; You can create the delegate instance as you \n            &#39; invoke it, like this:\n            Me.Invoke(New DisplayStatusDelegate(AddressOf DisplayStatus), _\n             &quot;Error: &quot; &amp; ex.Message)\n        Finally\n            isExecuting = False\n        End Try\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,\n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you do not include the Asynchronous Processing=true name/value pair,\n        &#39; you wo not be able to execute the command asynchronously.\n\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n        &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\n\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        If isExecuting Then\n            MessageBox.Show(Me, _\n                &quot;Already executing. Please wait until the current query &quot; &amp; _\n                &quot;has completed.&quot;)\n        Else\n            Dim command As SqlCommand\n            Try\n                DisplayStatus(&quot;Connecting...&quot;)\n                connection = New SqlConnection(GetConnectionString())\n                &#39; To emulate a long-running query, wait for \n                &#39; a few seconds before retrieving the real data.\n                command = New SqlCommand( _\n                 &quot;WAITFOR DELAY &#39;0:0:5&#39;;&quot; &amp; _\n                 &quot;SELECT ProductID, Name, ListPrice, Weight FROM Production.Product&quot;, _\n                 connection)\n                connection.Open()\n\n                DisplayStatus(&quot;Executing...&quot;)\n                isExecuting = True\n                &#39; Although it is not required that you pass the \n                &#39; SqlCommand object as the second parameter in the \n                &#39; BeginExecuteReader call, doing so makes it easier\n                &#39; to call EndExecuteReader in the callback procedure.\n                Dim callback As New AsyncCallback(AddressOf HandleCallback)\n                command.BeginExecuteReader(callback, command)\n\n            Catch ex As Exception\n                DisplayStatus(&quot;Error: &quot; &amp; ex.Message)\n                If connection IsNot Nothing Then\n                    connection.Close()\n                End If\n            End Try\n        End If\n    End Sub\n\n    Private Sub Form1_FormClosing(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.FormClosingEventArgs) _\n        Handles Me.FormClosing\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Cannot close the form until &quot; &amp; _\n              &quot;the pending asynchronous command has completed. Please wait...&quot;)\n            e.Cancel = True\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_AsyncCallback_System_Object_System_Data_CommandBehavior_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteReader(AsyncCallback,Object,CommandBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, using one of the <code>CommandBehavior</code> values, and retrieving one or more result sets from the server, given a callback procedure and state information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is invoked when the command&#39;s execution has completed. Pass <code>null</code> (<code>Nothing</code> in Microsoft Visual Basic) to indicate that no callback is required.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <span class=\"xref\">stem.IAsyncResult.AsyncState*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values, indicating options for statement execution and data retrieval.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll or wait for results, or both; this value is also needed when invoking <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteReader*</span>, which returns a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance which can be used to retrieve the returned rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method to finish the operation and retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> returned by the command. The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method returns immediately, but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <code>callback</code> parameter lets you specify an <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is called when the statement has completed. You can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the <code>stateObject</code> parameter, and your callback procedure can retrieve this information using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property.  </p>\n<p> The <code>behavior</code> parameter lets you specify options that control the behavior of the command and its connection. These values can be combined together (using the programming language&#39;s <code>Or</code> operator); generally, developers use the <code>CloseConnection</code> value to make sure that the connection is closed by the runtime when the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> is closed. Developers can also optimize the behavior of the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> by specifying the <code>SingleRow</code> value when it is known in advance that the Transact-SQL statement or stored procedure only returns a single row.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> may block if more data is required and the underlying network&#39;s read operation blocks.  </p>\n<p> Because the callback procedure executes from within a background thread supplied by the Microsoft .NET common language runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form&#39;s contents from within your callback procedure--should you have to update the form, you must switch back to the form&#39;s thread in order to do your work. The example in this topic demonstrates this behavior.  </p>\n<p> All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Windows application demonstrates the use of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object as the <code>stateObject</code> parameter; doing so makes it simple to retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object from within the callback procedure, so that the code can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteReader_\" data-linktype=\"relative-path\">EndExecuteReader</a> method corresponding to the initial call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a>.  </p>\n<p> This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  </p>\n<p> To set up this example, create a new Windows application. Put a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control, a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control, and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control on the form (accepting the default name for each control). Add the following code to the form&#39;s class, modifying the connection string as needed for your environment.  </p>\n<p> This example passes the <code>CommandBehavior.CloseConnection</code> value in the <code>behavior</code> parameter, causing the returned <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> to automatically close its connection when it is closed.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1\">using System.Data.SqlClient;\n\nnamespace Microsoft.AdoDotNet.CodeSamples\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        // Hook up the form&#39;s Load event handler (you can double-click on \n        // the form&#39;s design surface in Visual Studio), and then add \n        // this code to the form&#39;s class:\n        // You need this delegate in order to fill the grid from\n        // a thread other than the form&#39;s thread. See the HandleCallback\n        // procedure for more information.\n        private delegate void FillGridDelegate(SqlDataReader reader);\n\n        // You need this delegate to update the status bar.\n        private delegate void DisplayStatusDelegate(string Text);\n\n        // This flag ensures that the user does not attempt\n        // to restart the command or close the form while the \n        // asynchronous command is executing.\n        private bool isExecuting;\n\n        private void DisplayStatus(string Text)\n        {\n            this.label1.Text = Text;\n        }\n\n        private void FillGrid(SqlDataReader reader)\n        {\n            try\n            {\n                DataTable table = new DataTable();\n                table.Load(reader);\n                this.dataGridView1.DataSource = table;\n                DisplayStatus(&quot;Ready&quot;);\n            }\n            catch (Exception ex)\n            {\n                // Because you are guaranteed this procedure\n                // is running from within the form&#39;s thread,\n                // it can directly interact with members of the form.\n                DisplayStatus(string.Format(&quot;Ready (last attempt failed: {0})&quot;,\n                    ex.Message));\n            }\n            finally\n            {\n                // Closing the reader also closes the connection,\n                // because this reader was created using the \n                // CommandBehavior.CloseConnection value.\n                if (reader != null)\n                {\n                    reader.Close();\n                }\n            }\n        }\n\n        private void HandleCallback(IAsyncResult result)\n        {\n            try\n            {\n                // Retrieve the original command object, passed\n                // to this procedure in the AsyncState property\n                // of the IAsyncResult parameter.\n                SqlCommand command = (SqlCommand)result.AsyncState;\n                SqlDataReader reader = command.EndExecuteReader(result);\n                // You may not interact with the form and its contents\n                // from a different thread, and this callback procedure\n                // is all but guaranteed to be running from a different thread\n                // than the form. Therefore you cannot simply call code that \n                // fills the grid, like this:\n                // FillGrid(reader);\n                // Instead, you must call the procedure from the form&#39;s thread.\n                // One simple way to accomplish this is to call the Invoke\n                // method of the form, which calls the delegate you supply\n                // from the form&#39;s thread. \n                FillGridDelegate del = new FillGridDelegate(FillGrid);\n                this.Invoke(del, reader);\n                // Do not close the reader here, because it is being used in \n                // a separate thread. Instead, have the procedure you have\n                // called close the reader once it is done with it.\n            }\n            catch (Exception ex)\n            {\n                // Because you are now running code in a separate thread, \n                // if you do not handle the exception here, none of your other\n                // code catches the exception. Because there is none of \n                // your code on the call stack in this thread, there is nothing\n                // higher up the stack to catch the exception if you do not \n                // handle it here. You can either log the exception or \n                // invoke a delegate (as in the non-error case in this \n                // example) to display the error on the form. In no case\n                // can you simply display the error without executing a delegate\n                // as in the try block here. \n                // You can create the delegate instance as you \n                // invoke it, like this:\n                this.Invoke(new DisplayStatusDelegate(DisplayStatus), &quot;Error: &quot; +\n                    ex.Message);\n            }\n            finally\n            {\n                isExecuting = false;\n            }\n        }\n\n        private string GetConnectionString()\n        {\n            // To avoid storing the connection string in your code, \n            // you can retrieve it from a configuration file. \n\n            // If you do not include the Asynchronous Processing=true name/value pair,\n            // you wo not be able to execute the command asynchronously.\n            return &quot;Data Source=(local);Integrated Security=true;&quot; +\n                &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n        }\n\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this,\n                    &quot;Already executing. Please wait until the current query &quot; +\n                    &quot;has completed.&quot;);\n            }\n            else\n            {\n                SqlCommand command = null;\n                SqlConnection connection = null;\n                try\n                {\n                    DisplayStatus(&quot;Connecting...&quot;);\n                    connection = new SqlConnection(GetConnectionString());\n                    // To emulate a long-running query, wait for \n                    // a few seconds before retrieving the real data.\n                    command = new SqlCommand(&quot;WAITFOR DELAY &#39;0:0:5&#39;;&quot; +\n                        &quot;SELECT ProductID, Name, ListPrice, Weight FROM Production.Product&quot;,\n                        connection);\n                    connection.Open();\n\n                    DisplayStatus(&quot;Executing...&quot;);\n                    isExecuting = true;\n                    // Although it is not required that you pass the \n                    // SqlCommand object as the second parameter in the \n                    // BeginExecuteReader call, doing so makes it easier\n                    // to call EndExecuteReader in the callback procedure.\n                    AsyncCallback callback = new AsyncCallback(HandleCallback);\n                    command.BeginExecuteReader(callback, command,\n                        CommandBehavior.CloseConnection);\n                }\n                catch (Exception ex)\n                {\n                    DisplayStatus(&quot;Error: &quot; + ex.Message);\n                    if (connection != null)\n                    {\n                        connection.Close();\n                    }\n                }\n            }\n        }\n\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            this.button1.Click += new System.EventHandler(this.button1_Click);\n            this.FormClosing += new FormClosingEventHandler(Form1_FormClosing);\n        }\n\n        void Form1_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this, &quot;Cannot close the form until &quot; +\n                    &quot;the pending asynchronous command has completed. Please wait...&quot;);\n                e.Cancel = true;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1\">Imports System.Data.SqlClient\n\nPublic Class Form1\n    &#39; Add this code to the form&#39;s class:\n    &#39; You this delegate in order to fill the grid from\n    &#39; a thread other than the form&#39;s thread. See the HandleCallback\n    &#39; procedure for more information.\n    Private Delegate Sub FillGridDelegate(ByVal reader As SqlDataReader)\n\n    &#39; You need this delegate to update the status bar.\n    Private Delegate Sub DisplayStatusDelegate(ByVal Text As String)\n\n    &#39; This flag ensures that the user does not attempt\n    &#39; to restart the command or close the form while the \n    &#39; asynchronous command is executing.\n    Private isExecuting As Boolean\n\n    Private Sub DisplayStatus(ByVal Text As String)\n        Me.Label1.Text = Text\n    End Sub\n\n    Private Sub FillGrid(ByVal reader As SqlDataReader)\n        Try\n            Dim table As New DataTable\n            table.Load(reader)\n            Me.DataGridView1.DataSource = table\n            DisplayStatus(&quot;Ready&quot;)\n\n        Catch ex As Exception\n            &#39; Because you are guaranteed this procedure\n            &#39; is running from within the form&#39;s thread,\n            &#39; it can directly interact with members of the form.\n            DisplayStatus(String.Format(&quot;Ready (last attempt failed: {0})&quot;, ex.Message))\n        Finally\n            &#39; Closing the reader also closes the connection,\n            &#39; because this reader was created using the \n            &#39; CommandBehavior.CloseConnection value.\n            If reader IsNot Nothing Then\n                reader.Close()\n            End If\n        End Try\n    End Sub\n\n    Private Sub HandleCallback(ByVal result As IAsyncResult)\n        Try\n            &#39; Retrieve the original command object, passed\n            &#39; to this procedure in the AsyncState property\n            &#39; of the IAsyncResult parameter.\n            Dim command As SqlCommand = CType(result.AsyncState, SqlCommand)\n            Dim reader As SqlDataReader = command.EndExecuteReader(result)\n\n            &#39; You may not interact with the form and its contents\n            &#39; from a different thread, and this callback procedure\n            &#39; is all but guaranteed to be running from a different thread\n            &#39; than the form. Therefore you cannot simply call code that \n            &#39; fills the grid, like this:\n            &#39; FillGrid(reader)\n\n            &#39; Instead, you must call the procedure from the form&#39;s thread.\n            &#39; One simple way to accomplish this is to call the Invoke\n            &#39; method of the form, which calls the delegate you supply\n            &#39; from the form&#39;s thread. \n            Dim del As New FillGridDelegate(AddressOf FillGrid)\n            Me.Invoke(del, reader)\n\n            &#39; Do not close the reader here, because it is being used in \n            &#39; a separate thread. Instead, have the procedure you have\n            &#39; called close the reader once it is done with it.\n\n        Catch ex As Exception\n            &#39; Because you are now running code in a separate thread, \n            &#39; if you do not handle the exception here, none of your other\n            &#39; code catches the exception. Because there is none of \n            &#39; your code on the call stack in this thread, there is nothing\n            &#39; higher up the stack to catch the exception if you do not \n            &#39; handle it here. You can either log the exception or \n            &#39; invoke a delegate (as in the non-error case in this \n            &#39; example) to display the error on the form. In no case\n            &#39; can you simply display the error without executing a delegate\n            &#39; as in the Try block here. \n\n            &#39; You can create the delegate instance as you \n            &#39; invoke it, like this:\n            Me.Invoke(New DisplayStatusDelegate(AddressOf DisplayStatus), _\n             &quot;Error: &quot; &amp; ex.Message)\n        Finally\n            isExecuting = False\n        End Try\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,\n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you do not include the Asynchronous Processing=true name/value pair,\n        &#39; you wo not be able to execute the command asynchronously.\n\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n        &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\n\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Already executing. Please wait until the current query &quot; &amp; _\n             &quot;has completed.&quot;)\n        Else\n            Dim connection As SqlConnection\n            Dim command As SqlCommand\n            Try\n                DisplayStatus(&quot;Connecting...&quot;)\n                connection = New SqlConnection(GetConnectionString())\n                &#39; To emulate a long-running query, wait for \n                &#39; a few seconds before retrieving the real data.\n                command = New SqlCommand( _\n                 &quot;WAITFOR DELAY &#39;0:0:5&#39;;&quot; &amp; _\n                 &quot;SELECT ProductID, Name, ListPrice, Weight FROM Production.Product&quot;, _\n                 connection)\n                connection.Open()\n\n                DisplayStatus(&quot;Executing...&quot;)\n                isExecuting = True\n                &#39; Although it is not required that you pass the \n                &#39; SqlCommand object as the second parameter in the \n                &#39; BeginExecuteReader call, doing so makes it easier\n                &#39; to call EndExecuteReader in the callback procedure.\n                Dim callback As New AsyncCallback(AddressOf HandleCallback)\n                command.BeginExecuteReader(callback, command, _\n                  CommandBehavior.CloseConnection)\n\n            Catch ex As Exception\n                DisplayStatus(&quot;Error: &quot; &amp; ex.Message)\n                If connection IsNot Nothing Then\n                    connection.Close()\n                End If\n            End Try\n        End If\n    End Sub\n\n    Private Sub Form1_FormClosing(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Cannot close the form until &quot; &amp; _\n             &quot;the pending asynchronous command has completed. Please wait...&quot;)\n            e.Cancel = True\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteXmlReader()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and returns results as an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteXmlReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll or wait for results, or both; this value is also needed when invoking <code>EndExecuteXmlReader</code>, which returns a single XML value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginExecuteXmlReader method starts the process of asynchronously executing a Transact-SQL statement that returns rows as XML, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <code>EndExecuteXmlReader</code> method to finish the operation and retrieve the XML returned by the command. The BeginExecuteXmlReader method returns immediately, but until the code executes the corresponding <code>EndExecuteXmlReader</code> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <code>EndExecuteXmlReader</code> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, <code>CommandText</code> can also specify a statement that returns <code>ntext</code> data that contains valid XML.  </p>\n<p> A typical <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> query can be formatted as in the following C# example:  </p>\n<pre><code>SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);  \n</code></pre><p> This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the <code>EndExecuteXmlReader</code> method attaches the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the value on the first row, and discards the rest of the result set.  </p>\n<p> The multiple active result set (MARS) feature lets multiple actions use the same connection.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous.  </p>\n<p> Because this overload does not support a callback procedure, developers need to either poll to determine whether the command has completed, using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the BeginExecuteXmlReader method; or wait for the completion of one or more commands using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the returned <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a>.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application starts the process of retrieving XML data asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property value. Once the process has completed, the code retrieves the XML and displays its contents.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteXmlReader#1\">using System.Data.SqlClient;\nusing System.Xml;\n\nclass Class1\n{\n    static void Main()\n    {\n        // This example is not terribly effective, but it proves a point.\n        // The WAITFOR statement simply adds enough time to prove the \n        // asynchronous nature of the command.\n        string commandText =\n            &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; +\n            &quot;SELECT Name, ListPrice FROM Production.Product &quot; +\n            &quot;WHERE ListPrice &lt; 100 &quot; +\n            &quot;FOR XML AUTO, XMLDATA&quot;;\n\n        RunCommandAsynchronously(commandText, GetConnectionString());\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void RunCommandAsynchronously(\n        string commandText, string connectionString)\n    {\n        // Given command text and connection string, asynchronously execute\n        // the specified command against the connection. For this example,\n        // the code displays an indicator as it is working, verifying the \n        // asynchronous behavior. \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(commandText, connection);\n\n            connection.Open();\n            IAsyncResult result = command.BeginExecuteXmlReader();\n\n            // Although it is not necessary, the following procedure\n            // displays a counter in the console window, indicating that \n            // the main thread is not blocked while awaiting the command \n            // results.\n            int count = 0;\n            while (!result.IsCompleted)\n            {\n                Console.WriteLine(&quot;Waiting ({0})&quot;, count++);\n                // Wait for 1/10 second, so the counter\n                // does not consume all available resources \n                // on the main thread.\n                System.Threading.Thread.Sleep(100);\n            }\n\n            XmlReader reader = command.EndExecuteXmlReader(result);\n            DisplayProductInfo(reader);\n        }\n    }\n\n    private static void DisplayProductInfo(XmlReader reader)\n    {\n        // Display the data within the reader.\n        while (reader.Read())\n        {\n            // Skip past items that are not from the correct table.\n            if (reader.LocalName.ToString() == &quot;Production.Product&quot;)\n            {\n                Console.WriteLine(&quot;{0}: {1:C}&quot;,\n                    reader[&quot;Name&quot;], Convert.ToSingle(reader[&quot;ListPrice&quot;]));\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code,            \n        // you can retrieve it from a configuration file. \n\n        // If you have not included &quot;Asynchronous Processing=true&quot; in the\n        // connection string, the command is not able\n        // to execute asynchronously.\n        return &quot;Data Source=(local);Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteXmlReader#1\">Imports System.Data.SqlClient\nImports System.Xml\n\nModule Module1\n\n    Sub Main()\n        &#39; This example is not terribly effective, but it proves a point.\n        &#39; The WAITFOR statement simply adds enough time to prove the \n        &#39; asynchronous nature of the command.\n        Dim commandText As String = _\n         &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; &amp; _\n         &quot;SELECT Name, ListPrice FROM Production.Product &quot; &amp; _\n         &quot;WHERE ListPrice &lt; 100 &quot; &amp; _\n         &quot;FOR XML AUTO, XMLDATA&quot;\n\n        RunCommandAsynchronously(commandText, GetConnectionString())\n\n        Console.WriteLine(&quot;Press ENTER to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub RunCommandAsynchronously( _\n     ByVal commandText As String, ByVal connectionString As String)\n\n        &#39; Given command text and connection string, asynchronously execute\n        &#39; the specified command against the connection. For this example,\n        &#39; the code displays an indicator as it is working, verifying the \n        &#39; asynchronous behavior. \n        Using connection As New SqlConnection(connectionString)\n            Try\n                Dim command As New SqlCommand(commandText, connection)\n                connection.Open()\n                Dim result As IAsyncResult = command.BeginExecuteXmlReader()\n\n                &#39; Although it is not necessary, the following procedure\n                &#39; displays a counter in the console window, indicating that \n                &#39; the main thread is not blocked while awaiting the command \n                &#39; results.\n                Dim count As Integer = 0\n                While Not result.IsCompleted\n                    count += 1\n                    Console.WriteLine(&quot;Waiting ({0})&quot;, count)\n                    &#39; Wait for 1/10 second, so the counter\n                    &#39; does not consume all available resources \n                    &#39; on the main thread.\n                    Threading.Thread.Sleep(100)\n                End While\n\n                Using reader As XmlReader = command.EndExecuteXmlReader(result)\n                    DisplayProductInfo(reader)\n                End Using\n            Catch ex As SqlException\n                Console.WriteLine(&quot;Error ({0}): {1}&quot;, ex.Number, ex.Message)\n            Catch ex As InvalidOperationException\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            Catch ex As Exception\n                &#39; You might want to pass these errors\n                &#39; back out to the caller.\n                Console.WriteLine(&quot;Error: {0}&quot;, ex.Message)\n            End Try\n        End Using\n    End Sub\n\n    Private Sub DisplayProductInfo(ByVal reader As XmlReader)\n        &#39; Display the data within the reader.\n        While reader.Read()\n            &#39; Skip past items that are not from the correct table.\n            If reader.LocalName.ToString = &quot;Production.Product&quot; Then\n                Console.WriteLine(&quot;{0}: {1:C}&quot;, _\n                 reader(&quot;Name&quot;), CSng(reader(&quot;ListPrice&quot;)))\n            End If\n        End While\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,            \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginExecuteXmlReader(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and returns results as an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object, using a callback procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is invoked when the command&#39;s execution has completed. Pass <code>null</code> (<code>Nothing</code> in Microsoft Visual Basic) to indicate that no callback is required.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <span class=\"xref\">stem.IAsyncResult.AsyncState*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that can be used to poll, wait for results, or both; this value is also needed when the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.EndExecuteXmlReader*</span> is called, which returns the results of the command as XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error that occurred while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name/value pair &quot;Asynchronous Processing=true&quot; was not included within the connection string defining the connection for this <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows as XML, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method to finish the operation and retrieve the requested XML data. The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> method returns immediately, but until the code executes the corresponding <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object. Calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> before the command&#39;s execution is completed causes the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object to block until the execution is finished.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, <code>CommandText</code> can also specify a statement that returns data that contains valid XML. This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method attaches the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the value on the first row, and discards the rest of the result set.  </p>\n<p> A typical BeginExecuteXmlReader query can be formatted as in the following C# example:  </p>\n<pre><code>SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);  \n</code></pre><p> This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method attaches the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the value on the first row, and discards the rest of the result set.  </p>\n<p> The multiple active result set (MARS) feature lets multiple actions use the same connection.  </p>\n<p> The <code>callback</code> parameter lets you specify an <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that is called when the statement has completed. You can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the <code>stateObject</code> parameter, and your callback procedure can retrieve this information using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property.  </p>\n<p> Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters is sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  </p>\n<p> All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Windows application demonstrates the use of the BeginExecuteXmlReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). This example passes the executing <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object as the <code>stateObject</code> parameter--doing so makes it simple to retrieve the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object from within the callback procedure, so that the code can call the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\" data-linktype=\"relative-path\">EndExecuteXmlReader</a> method corresponding to the initial call to BeginExecuteXmlReader.  </p>\n<p> This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  </p>\n<p> To set up this example, create a new Windows application. Put a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control, a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control, and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control on the form (accepting the default name for each control). Add the following code to the form&#39;s class, modifying the connection string as needed for your environment.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1\">using System.Data.SqlClient;\nusing System.Xml;\n\nnamespace Microsoft.AdoDotNet.CodeSamples\n{\n    public partial class Form1 : Form\n    {\n        // Hook up the form&#39;s Load event handler and then add \n        // this code to the form&#39;s class:\n        // You need these delegates in order to display text from a thread\n        // other than the form&#39;s thread. See the HandleCallback\n        // procedure for more information.\n        private delegate void DisplayInfoDelegate(string Text);\n        private delegate void DisplayReaderDelegate(XmlReader reader);\n\n        private bool isExecuting;\n\n        // This example maintains the connection object \n        // externally, so that it is available for closing.\n        private SqlConnection connection;\n\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private string GetConnectionString()\n        {\n            // To avoid storing the connection string in your code, \n            // you can retrieve it from a configuration file. \n\n            // If you do not include the Asynchronous Processing=true name/value pair,\n            // you wo not be able to execute the command asynchronously.\n            return &quot;Data Source=(local);Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;;\n        }\n\n        private void DisplayStatus(string Text)\n        {\n            this.label1.Text = Text;\n        }\n\n        private void ClearProductInfo()\n        {\n            // Clear the list box.\n            this.listBox1.Items.Clear();\n        }\n\n        private void DisplayProductInfo(XmlReader reader)\n        {\n            // Display the data within the reader.\n            while (reader.Read())\n            {\n                // Skip past items that are not from the correct table.\n                if (reader.LocalName.ToString() == &quot;Production.Product&quot;)\n                {\n                    this.listBox1.Items.Add(String.Format(&quot;{0}: {1:C}&quot;,\n                        reader[&quot;Name&quot;], Convert.ToDecimal(reader[&quot;ListPrice&quot;])));\n                }\n            }\n            DisplayStatus(&quot;Ready&quot;);\n        }\n\n        private void Form1_FormClosing(object sender, \n            System.Windows.Forms.FormClosingEventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this, &quot;Cannot close the form until &quot; +\n                    &quot;the pending asynchronous command has completed. Please wait...&quot;);\n                e.Cancel = true;\n            }\n        }\n\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            if (isExecuting)\n            {\n                MessageBox.Show(this, \n                    &quot;Already executing. Please wait until the current query &quot; +\n                    &quot;has completed.&quot;);\n            }\n            else\n            {\n                SqlCommand command = null;\n                try\n                {\n                    ClearProductInfo();\n                    DisplayStatus(&quot;Connecting...&quot;);\n                    connection = new SqlConnection(GetConnectionString());\n\n                    // To emulate a long-running query, wait for \n                    // a few seconds before working with the data.\n                    string commandText =\n                        &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; +\n                        &quot;SELECT Name, ListPrice FROM Production.Product &quot; +\n                        &quot;WHERE ListPrice &lt; 100 &quot; +\n                        &quot;FOR XML AUTO, XMLDATA&quot;;\n\n                    command = new SqlCommand(commandText, connection);\n                    connection.Open();\n\n                    DisplayStatus(&quot;Executing...&quot;);\n                    isExecuting = true;\n                    // Although it is not required that you pass the \n                    // SqlCommand object as the second parameter in the \n                    // BeginExecuteXmlReader call, doing so makes it easier\n                    // to call EndExecuteXmlReader in the callback procedure.\n                    AsyncCallback callback = new AsyncCallback(HandleCallback);\n                    command.BeginExecuteXmlReader(callback, command);\n\n                }\n                catch (Exception ex)\n                {\n                    isExecuting = false;\n                    DisplayStatus(string.Format(&quot;Ready (last error: {0})&quot;, ex.Message));\n                    if (connection != null)\n                    {\n                        connection.Close();\n                    }\n                }\n            }\n        }\n\n        private void HandleCallback(IAsyncResult result)\n        {\n            try\n            {\n                // Retrieve the original command object, passed\n                // to this procedure in the AsyncState property\n                // of the IAsyncResult parameter.\n                SqlCommand command = (SqlCommand)result.AsyncState;\n                XmlReader reader = command.EndExecuteXmlReader(result);\n\n                // You may not interact with the form and its contents\n                // from a different thread, and this callback procedure\n                // is all but guaranteed to be running from a different thread\n                // than the form. \n\n                // Instead, you must call the procedure from the form&#39;s thread.\n                // One simple way to accomplish this is to call the Invoke\n                // method of the form, which calls the delegate you supply\n                // from the form&#39;s thread. \n                DisplayReaderDelegate del = new DisplayReaderDelegate(DisplayProductInfo);\n                this.Invoke(del, reader);\n\n            }\n            catch (Exception ex)\n            {\n                // Because you are now running code in a separate thread, \n                // if you do not handle the exception here, none of your other\n                // code catches the exception. Because none of \n                // your code is on the call stack in this thread, there is nothing\n                // higher up the stack to catch the exception if you do not \n                // handle it here. You can either log the exception or \n                // invoke a delegate (as in the non-error case in this \n                // example) to display the error on the form. In no case\n                // can you simply display the error without executing a delegate\n                // as in the try block here. \n\n                // You can create the delegate instance as you \n                // invoke it, like this:\n                this.Invoke(new DisplayInfoDelegate(DisplayStatus),\n                String.Format(&quot;Ready(last error: {0}&quot;, ex.Message));\n            }\n            finally\n            {\n                isExecuting = false;\n                if (connection != null)\n                {\n                    connection.Close();\n                }\n            }\n        }\n\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            this.button1.Click += new System.EventHandler(this.button1_Click);\n            this.FormClosing += new System.Windows.Forms.\n                FormClosingEventHandler(this.Form1_FormClosing);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1\">Imports System.Data.SqlClient\nImports System.Xml\n\nPublic Class Form1\n    &#39; Add this code to the form&#39;s class:\n    &#39; You need these delegates in order to display text from a thread\n    &#39; other than the form&#39;s thread. See the HandleCallback\n    &#39; procedure for more information.\n    Private Delegate Sub DisplayInfoDelegate(ByVal Text As String)\n    Private Delegate Sub DisplayReaderDelegate(ByVal reader As XmlReader)\n\n    Private isExecuting As Boolean\n\n    &#39; This example maintains the connection object \n    &#39; externally, so that it is available for closing.\n    Private connection As SqlConnection\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,            \n        &#39; you can retrieve it from a configuration file. \n\n        &#39; If you have not included &quot;Asynchronous Processing=true&quot; in the\n        &#39; connection string, the command is not able\n        &#39; to execute asynchronously.\n        Return &quot;Data Source=(local);Integrated Security=true;&quot; &amp; _\n          &quot;Initial Catalog=AdventureWorks; Asynchronous Processing=true&quot;\n    End Function\n\n    Private Sub DisplayStatus(ByVal Text As String)\n        Me.Label1.Text = Text\n    End Sub\n\n    Private Sub ClearProductInfo()\n        &#39; Clear the list box.\n        Me.ListBox1.Items.Clear()\n    End Sub\n\n    Private Sub DisplayProductInfo(ByVal reader As XmlReader)\n        &#39; Display the data within the reader.\n        While reader.Read()\n            &#39; Skip past items that are not from the correct table.\n            If reader.LocalName.ToString = &quot;Production.Product&quot; Then\n                Me.ListBox1.Items.Add(String.Format(&quot;{0}: {1:C}&quot;, _\n                    reader(&quot;Name&quot;), CSng(reader(&quot;ListPrice&quot;))))\n            End If\n        End While\n        DisplayStatus(&quot;Ready&quot;)\n    End Sub\n\n    Private Sub Form1_FormClosing(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Cannot close the form until &quot; &amp; _\n                &quot;the pending asynchronous command has completed. Please wait...&quot;)\n            e.Cancel = True\n        End If\n    End Sub\n\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        If isExecuting Then\n            MessageBox.Show(Me, &quot;Already executing. Please wait until the current query &quot; &amp; _\n                &quot;has completed.&quot;)\n        Else\n            Dim command As SqlCommand\n            Try\n                ClearProductInfo()\n                DisplayStatus(&quot;Connecting...&quot;)\n                connection = New SqlConnection(GetConnectionString())\n                &#39; To emulate a long-running query, wait for \n                &#39; a few seconds before working with the data.\n                Dim commandText As String = _\n                    &quot;WAITFOR DELAY &#39;00:00:03&#39;;&quot; &amp; _\n                    &quot;SELECT Name, ListPrice &quot; &amp; _\n                    &quot;FROM Production.Product WHERE ListPrice &lt; 100 &quot; &amp; _\n                    &quot;FOR XML AUTO, XMLDATA&quot;\n\n                command = New SqlCommand(commandText, connection)\n                connection.Open()\n\n                DisplayStatus(&quot;Executing...&quot;)\n                isExecuting = True\n                &#39; Although it is not required that you pass the \n                &#39; SqlCommand object as the second parameter in the \n                &#39; BeginExecuteXmlReader call, doing so makes it easier\n                &#39; to call EndExecuteXmlReader in the callback procedure.\n                Dim callback As New AsyncCallback(AddressOf HandleCallback)\n                command.BeginExecuteXmlReader(callback, command)\n\n            Catch ex As Exception\n                isExecuting = False\n                DisplayStatus(String.Format(&quot;Ready (last error: {0})&quot;, ex.Message))\n                If connection IsNot Nothing Then\n                    connection.Close()\n                End If\n            End Try\n        End If\n    End Sub\n\n    Private Sub HandleCallback(ByVal result As IAsyncResult)\n        Try\n            &#39; Retrieve the original command object, passed\n            &#39; to this procedure in the AsyncState property\n            &#39; of the IAsyncResult parameter.\n            Dim command As SqlCommand = CType(result.AsyncState, SqlCommand)\n            Dim reader As XmlReader = command.EndExecuteXmlReader(result)\n\n            &#39; You may not interact with the form and its contents\n            &#39; from a different thread, and this callback procedure\n            &#39; is all but guaranteed to be running from a different thread\n            &#39; than the form. \n\n            &#39; Instead, you must call the procedure from the form&#39;s thread.\n            &#39; One simple way to accomplish this is to call the Invoke\n            &#39; method of the form, which calls the delegate you supply\n            &#39; from the form&#39;s thread. \n            Dim del As New DisplayReaderDelegate(AddressOf DisplayProductInfo)\n            Me.Invoke(del, reader)\n\n        Catch ex As Exception\n            &#39; Because you are now running code in a separate thread, \n            &#39; if you do not handle the exception here, none of your other\n            &#39; code catches the exception. Because none of \n            &#39; your code is on the call stack in this thread, there is nothing\n            &#39; higher up the stack to catch the exception if you do not \n            &#39; handle it here. You can either log the exception or \n            &#39; invoke a delegate (as in the non-error case in this \n            &#39; example) to display the error on the form. In no case\n            &#39; can you simply display the error without executing a delegate\n            &#39; as in the Try block here. \n\n            &#39; You can create the delegate instance as you \n            &#39; invoke it, like this:\n            Me.Invoke(New DisplayInfoDelegate(AddressOf DisplayStatus), _\n                String.Format(&quot;Ready(last error: {0}&quot;, ex.Message))\n        Finally\n            isExecuting = False\n            If connection IsNot Nothing Then\n                connection.Close()\n            End If\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Cancel\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Cancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cancel()</div>        \r\n          </div>\r\n    \r\n            <p>Tries to cancel the execution of a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Cancel ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is nothing to cancel, nothing occurs. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.  </p>\n<p> In some, rare, cases, if you call <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> then call <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Close_\" data-linktype=\"relative-path\">Close</a> (implicitily or explicitly) before calling Cancel, and then call Cancel, the cancel command will not be sent to SQL Server and the result set can continue to stream after you call <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a>. To avoid this, make sure that you call Cancel before closing the reader or connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the Cancel method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.Cancel#1\">Imports System\nImports System.Data\nImports System.Data.SqlClient\nImports System.Threading\n\nModule Module1\n    Private m_rCommand As SqlCommand\n\n    Public Property Command() As SqlCommand\n        Get\n            Return m_rCommand\n        End Get\n        Set(ByVal value As SqlCommand)\n            m_rCommand = value\n        End Set\n    End Property\n\n    Public Sub Thread_Cancel()\n        Command.Cancel()\n    End Sub\n\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        Try\n            Using connection As New SqlConnection(connectionString)\n\n                connection.Open()\n\n                Command = connection.CreateCommand()\n                Command.CommandText = &quot;DROP TABLE TestCancel&quot;\n                Try\n                    Command.ExecuteNonQuery()\n                Catch\n                End Try\n\n                Command.CommandText = &quot;CREATE TABLE TestCancel(co1 int, co2 char(10))&quot;\n                Command.ExecuteNonQuery()\n                Command.CommandText = &quot;INSERT INTO TestCancel VALUES (1, &#39;1&#39;)&quot;\n                Command.ExecuteNonQuery()\n\n                Command.CommandText = &quot;SELECT * FROM TestCancel&quot;\n                Dim reader As SqlDataReader = Command.ExecuteReader()\n\n                Dim rThread2 As Thread = New Thread( _\n                    New ThreadStart(AddressOf Thread_Cancel))\n\n                rThread2.Start()\n                rThread2.Join()\n\n                reader.Read()\n                Console.WriteLine(reader.FieldCount)\n                reader.Close()\n            End Using\n\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n        End Try\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file.\n        Return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot; _\n           &amp; &quot;Integrated Security=SSPI;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.Cancel#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Threading;\n\nclass Program\n{\n    private static SqlCommand m_rCommand;\n\n    public static SqlCommand Command\n    {\n        get { return m_rCommand; }\n        set { m_rCommand = value; }\n    }\n\n    public static void Thread_Cancel()\n    {\n        Command.Cancel();\n    }\n\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        try\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                Command = connection.CreateCommand();\n                Command.CommandText = &quot;DROP TABLE TestCancel&quot;;\n                try\n                {\n                    Command.ExecuteNonQuery();\n                }\n                catch { }\n\n                Command.CommandText = &quot;CREATE TABLE TestCancel(co1 int, co2 char(10))&quot;;\n                Command.ExecuteNonQuery();\n                Command.CommandText = &quot;INSERT INTO TestCancel VALUES (1, &#39;1&#39;)&quot;;\n                Command.ExecuteNonQuery();\n\n                Command.CommandText = &quot;SELECT * FROM TestCancel&quot;;\n                SqlDataReader reader = Command.ExecuteReader();\n\n                Thread rThread2 = new Thread(new ThreadStart(Thread_Cancel));\n                rThread2.Start();\n                rThread2.Join();\n\n                reader.Read();\n                System.Console.WriteLine(reader.FieldCount);\n                reader.Close();\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Clone\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlCommand Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_CreateDbParameter\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_CreateDbParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDbParameter()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbParameter CreateDbParameter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbparameter\" data-linktype=\"relative-path\">DbParameter</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_CreateParameter\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_CreateParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateParameter()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of a <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter\" data-linktype=\"relative-path\">SqlParameter</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlParameter CreateParameter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlparameter\" data-linktype=\"relative-path\">SqlParameter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter\" data-linktype=\"relative-path\">SqlParameter</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateParameter method is a strongly-typed version of <a class=\"xref\" href=\"system.data.idbcommand#System_Data_IDbCommand_CreateParameter_\" data-linktype=\"relative-path\">CreateParameter</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_EndExecuteNonQuery_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndExecuteNonQuery(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Finishes asynchronous execution of a Transact-SQL statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int EndExecuteNonQuery (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of rows affected (the same behavior as <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteNonQuery*</span>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> parameter is null (<code>Nothing</code> in Microsoft Visual Basic)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>EndExecuteNonQuery was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteNonQuery to complete execution of a call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>The amount of time specified in <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandTimeout*</span> elapsed and the asynchronous operation specified with <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*</span> is not complete.  </p>\n<p> In some situations, <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> can be set to <code>IsCompleted</code> incorrectly. If this occurs and EndExecuteNonQuery is called, EndExecuteNonQuery could raise a SqlException error if the amount of time specified in <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandTimeout*</span> elapsed and the asynchronous operation specified with <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*</span> is not complete. To correct this situation, you should either increase the value of CommandTimeout or reduce the work being done by the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> to execute a Transact-SQL statement, you must call EndExecuteNonQuery in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a> method. If a callback procedure was specified in the call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a>, this method must be called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>For examples demonstrating the use of the EndExecuteNonQuery method, see <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteNonQuery_\" data-linktype=\"relative-path\">BeginExecuteNonQuery</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_EndExecuteReader_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_EndExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndExecuteReader(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Finishes asynchronous execution of a Transact-SQL statement, returning the requested <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteReader*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> object that can be used to retrieve the requested rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> parameter is null (<code>Nothing</code> in Microsoft Visual Basic)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>EndExecuteReader was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteReader to complete execution of a call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to execute a Transact-SQL statement, you must call EndExecuteReader in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> method. If a callback procedure was specified in the call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a>, this method must be called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>For examples demonstrating the use of the EndExecuteReader method, see <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_EndExecuteXmlReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndExecuteXmlReader(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Finishes asynchronous execution of a Transact-SQL statement, returning the requested data as XML.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by the call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that can be used to fetch the resulting XML data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> parameter is null (<code>Nothing</code> in Microsoft Visual Basic)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>EndExecuteXmlReader was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteXmlReader to complete execution of a call to <span class=\"xref\">stem.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to execute a Transact-SQL statement, you must call EndExecuteXmlReader in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> method. If a callback procedure was specified in the call to <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a>, this method must be called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>For examples demonstrating the use of the EndExecuteXmlReader method, see <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteDbDataReader_System_Data_CommandBehavior_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteDbDataReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteDbDataReader(CommandBehavior)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteDbDataReaderAsync_System_Data_CommandBehavior_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteDbDataReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteNonQuery\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteNonQuery_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteNonQuery()</div>        \r\n          </div>\r\n    \r\n            <p>Executes a Transact-SQL statement against the connection and returns the number of rows affected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ExecuteNonQuery ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of rows affected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> by executing UPDATE, INSERT, or DELETE statements.  </p>\n<p> Although the ExecuteNonQuery returns no rows, any output parameters or return values mapped to parameters are populated with data.  </p>\n<p> For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. When a trigger exists on a table being inserted or updated, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and then executes it using ExecuteNonQuery. The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.ExecuteNonQuery Example#1\">        private static void CreateCommand(string queryString,\n            string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(\n                       connectionString))\n            {\n                SqlCommand command = new SqlCommand(queryString, connection);\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.ExecuteNonQuery Example#1\">    Public Sub CreateCommand(ByVal queryString As String, _\n      ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n            command.Connection.Open()\n            command.ExecuteNonQuery()\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteNonQueryAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteNonQueryAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteNonQueryAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteNonQuery*</span>, which executes a Transact-SQL statement against the connection and returns the number of rows affected. The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling ExecuteNonQueryAsync more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReader\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReader()</div>        \r\n          </div>\r\n    \r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlDataReader ExecuteReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current state of the connection is closed. ExecuteReader requires an open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a> property is set to <code>StoredProcedure</code>, the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property should be set to the name of the stored procedure. The command executes this stored procedure when you call ExecuteReader.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a transaction is deadlocked, an exception may not be thrown until <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> is called.  </p>\n</div>\n<p> The multiple active result set (MARS) feature allows for multiple actions using the same connection.  </p>\n<p> If you use ExecuteReader or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.ExecuteReader Example#1\">    private static void CreateCommand(string queryString,\n        string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(\n                   connectionString))\n        {\n            connection.Open();\n\n            SqlCommand command = new SqlCommand(queryString, connection);\n            SqlDataReader reader = command.ExecuteReader();\n            while (reader.Read())\n            {\n                Console.WriteLine(String.Format(&quot;{0}&quot;, reader[0]));\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.ExecuteReader Example#1\">    Public Sub CreateCommand(ByVal queryString As String, _\n      ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As New SqlCommand(queryString, connection)\n            Dim reader As SqlDataReader = command.ExecuteReader()\n            While reader.Read()\n                Console.WriteLine(&quot;{0}&quot;, reader(0))\n            End While\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReader_System_Data_CommandBehavior_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReader(CommandBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> using one of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a> property is set to <code>StoredProcedure</code>, the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> to retrieve large values and binary data. Otherwise, an <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> might occur and the connection will be closed.  </p>\n</div>\n<p> The multiple active result set (MARS) feature allows for multiple actions using the same connection.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\" data-linktype=\"relative-path\">ExecuteXmlReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source. <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> is set to <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.ExecuteReader2#1\">    private static void CreateCommand(string queryString,\n        string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(\n                   connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            connection.Open();\n            SqlDataReader reader =\n                command.ExecuteReader(CommandBehavior.CloseConnection);\n            while (reader.Read())\n            {\n                Console.WriteLine(String.Format(&quot;{0}&quot;, reader[0]));\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.ExecuteReader2#1\">    Public Sub CreateCommand(ByVal queryString As String, _\n      ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n            connection.Open()\n            Dim reader As SqlDataReader = _\n                command.ExecuteReader(CommandBehavior.CloseConnection)\n            While reader.Read()\n                Console.WriteLine(&quot;{0}&quot;, reader(0))\n            End While\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReaderAsync()</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>. Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An invalid <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling ExecuteReaderAsync more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Data_CommandBehavior_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReaderAsync(CommandBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>. Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for statement execution and data retrieval.  When is set to <code>Default</code>, <span class=\"xref\">stem.Data.SqlClient.SqlDataReader.ReadAsync*</span> reads the entire row before returning a complete Task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An invalid <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling ExecuteReaderAsync more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReaderAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An invalid <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReaderAsync*</span> more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_System_Data_CommandBehavior_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteReaderAsync(CommandBehavior,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span>, and builds a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>behavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for statement execution and data retrieval.  When is set to <code>Default</code>, <span class=\"xref\">stem.Data.SqlClient.SqlDataReader.ReadAsync*</span> reads the entire row before returning a complete Task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An invalid <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling ExecuteReaderAsync more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteScalar\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteScalar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteScalar()</div>        \r\n          </div>\r\n    \r\n            <p>Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object ExecuteScalar ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The first column of the first row in the result set, or a null reference (<code>Nothing</code> in Visual Basic) if the result set is empty. Returns a maximum of 2033 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> method, and then performing the operations that you need to generate the single value using the data returned by a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>.  </p>\n<p> A typical ExecuteScalar query can be formatted as in the following C# example:  </p>\n<pre><code>cmd.CommandText = &quot;SELECT COUNT(*) FROM dbo.region&quot;;  \nInt32 count = (Int32) cmd.ExecuteScalar();  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and then executes it using ExecuteScalar. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new <strong>Identity</strong> column value if a new row was inserted, 0 on failure.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlCommand.ExecuteScalar#1\">    Public Function AddProductCategory( _\n      ByVal newName As String, ByVal connString As String) As Integer\n        Dim newProdID As Int32 = 0\n        Dim sql As String = _\n         &quot;INSERT INTO Production.ProductCategory (Name) VALUES (@Name); &quot; _\n           &amp; &quot;SELECT CAST(scope_identity() AS int);&quot;\n\n        Using conn As New SqlConnection(connString)\n            Dim cmd As New SqlCommand(sql, conn)\n            cmd.Parameters.Add(&quot;@Name&quot;, SqlDbType.VarChar)\n            cmd.Parameters(&quot;@Name&quot;).Value = newName\n            Try\n                conn.Open()\n                newProdID = Convert.ToInt32(cmd.ExecuteScalar())\n            Catch ex As Exception\n                Console.WriteLine(ex.Message)\n            End Try\n        End Using\n\n        Return newProdID\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlCommand.ExecuteScalar#1\">    static public int AddProductCategory(string newName, string connString)\n    {\n        Int32 newProdID = 0;\n        string sql =\n            &quot;INSERT INTO Production.ProductCategory (Name) VALUES (@Name); &quot;\n            + &quot;SELECT CAST(scope_identity() AS int)&quot;;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            SqlCommand cmd = new SqlCommand(sql, conn);\n            cmd.Parameters.Add(&quot;@Name&quot;, SqlDbType.VarChar);\n            cmd.Parameters[&quot;@name&quot;].Value = newName;\n            try\n            {\n                conn.Open();\n                newProdID = (Int32)cmd.ExecuteScalar();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n        return (int)newProdID;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteScalarAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteScalarAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteScalarAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteScalar*</span>, which executes the query asynchronously and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling ExecuteScalarAsync more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReader\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteXmlReader()</div>        \r\n          </div>\r\n    \r\n            <p>Sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlReader ExecuteXmlReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandText_\" data-linktype=\"relative-path\">CommandText</a> can also specify a statement that returns <code>ntext</code> or <code>nvarchar</code> data that contains valid XML, or the contents of a column defined with the <code>xml</code> data type.  </p>\n<p> A typical ExecuteXmlReader query can be formatted as in the following Microsoft Visual C# example:  </p>\n<pre><code>SqlCommand command = new SqlCommand(&quot;SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA&quot;, SqlConn);  \n</code></pre><p> This method can also be used to retrieve a single-row, single-column result set that contains XML data. In this case, if more than one row is returned, the ExecuteXmlReader method attaches the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the value on the first row, and discards the rest of the result set.  </p>\n<p> The multiple active result set (MARS) feature allows for multiple actions using the same connection.  </p>\n<p> If you use <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteReader_\" data-linktype=\"relative-path\">BeginExecuteReader</a> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use ExecuteXmlReader or <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_BeginExecuteXmlReader_\" data-linktype=\"relative-path\">BeginExecuteXmlReader</a> to read FOR XML queries. For more information, see article Q310378, &quot;PRB: XML Data Is Truncated When You Use SqlDataReader,&quot; in the Microsoft Knowledge Base at <a href=\"http://support.microsoft.com\" data-linktype=\"external\">http://support.microsoft.com</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> and then executes it using ExecuteXmlReader. The example is passed a string that is a Transact-SQL FOR XML SELECT statement, and a string to use to connect to the data source.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.ExecuteXmlReader#1\">    private static void CreateXMLReader(string queryString,\n        string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(\n                   connectionString))\n        {\n            connection.Open();\n            SqlCommand command = new SqlCommand(queryString, connection);\n            System.Xml.XmlReader reader = command.ExecuteXmlReader();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.ExecuteXmlReader#1\">    Public Sub CreateXMLReader(ByVal queryString As String, _\n        ByVal connectionString As String)\n\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As New SqlCommand(queryString, connection)\n            Dim reader As System.Xml.XmlReader = command.ExecuteXmlReader\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteXmlReaderAsync()</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteXmlReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.  </p>\n<p> Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteScalarAsync*</span> more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ExecuteXmlReaderAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteXmlReaderAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteXmlReader*</span>, which sends the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandText*</span> to the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.Connection*</span> and builds an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Binary</strong> or <strong>VarBinary</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Char</strong>, <strong>NChar</strong>, <strong>NVarChar</strong>, <strong>VarChar</strong>, or  <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> A <span class=\"xref\">stem.Data.SqlClient.SqlParameter.SqlDbType*</span> other than <strong>Xml</strong> was used when <span class=\"xref\">stem.Data.SqlClient.SqlParameter.Value*</span> was set to <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlCommand.ExecuteScalarAsync*</span> more than once for the same instance before task completion.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> closed or dropped during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>SQL Server returned an error while executing the command text.  </p>\n<p> A timeout occurred during a streaming operation. For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred in a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> or <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object was closed during a streaming operation.  For more information about streaming, see <a href=\"../Topic/SqlClient%20Streaming%20Support.md\" data-linktype=\"relative-path\">SqlClient Streaming Support</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_Prepare\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_Prepare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prepare()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a prepared version of the command on an instance of SQL Server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Prepare ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandType_\" data-linktype=\"relative-path\">CommandType</a> is set to <code>StoredProcedure</code>, the call to Prepare should succeed, although it may cause a no-op.  </p>\n<p> Before you call Prepare, specify the data type of each parameter in the statement to be prepared. For each parameter that has a variable length data type, you must set the <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter#System_Data_SqlClient_SqlParameter_Size_\" data-linktype=\"relative-path\">Size</a> property to the maximum size needed. Prepare returns an error if these conditions are not met.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the database context is changed by executing the Transact-SQL <code>USE &lt;database&gt;</code> statement, or by calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ChangeDatabase_\" data-linktype=\"relative-path\">ChangeDatabase</a> method, then Prepare must be called a second time.  </p>\n</div>\n<p> If you call an <code>Execute</code> method after calling Prepare, any parameter value that is larger than the value specified by the <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter#System_Data_SqlClient_SqlParameter_Size_\" data-linktype=\"relative-path\">Size</a> property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.  </p>\n<p> Output parameters (whether prepared or not) must have a user-specified data type. If you specify a variable length data type, you must also specify the maximum <a class=\"xref\" href=\"system.data.sqlclient.sqlparameter#System_Data_SqlClient_SqlParameter_Size_\" data-linktype=\"relative-path\">Size</a>.  </p>\n<p> Prior to Visual Studio 2010, Prepare threw an exception.  Beginning in Visual Studio 2010, this method does not throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the Prepare method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlCommand.Prepare#1\">    Private Sub SqlCommandPrepareEx(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Dim command As SqlCommand = New SqlCommand(&quot;&quot;, connection)\n\n            &#39; Create and prepare an SQL statement.\n            command.CommandText = _\n               &quot;INSERT INTO Region (RegionID, RegionDescription) &quot; &amp; _\n               &quot;VALUES (@id, @desc)&quot;\n            Dim idParam As SqlParameter = _\n                New SqlParameter(&quot;@id&quot;, SqlDbType.Int, 0)\n            Dim descParam As SqlParameter = _\n                New SqlParameter(&quot;@desc&quot;, SqlDbType.Text, 100)\n            idParam.Value = 20\n            descParam.Value = &quot;First Region&quot;\n            command.Parameters.Add(idParam)\n            command.Parameters.Add(descParam)\n\n            &#39; Call Prepare after setting the Commandtext and Parameters.\n            command.Prepare()\n            command.ExecuteNonQuery()\n\n            &#39; Change parameter values and call ExecuteNonQuery.\n            command.Parameters(0).Value = 21\n            command.Parameters(1).Value = &quot;Second Region&quot;\n            command.ExecuteNonQuery()\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlCommand.Prepare#1\">        private static void SqlCommandPrepareEx(string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                SqlCommand command = new SqlCommand(null, connection);\n\n                // Create and prepare an SQL statement.\n                command.CommandText =\n                    &quot;INSERT INTO Region (RegionID, RegionDescription) &quot; +\n                    &quot;VALUES (@id, @desc)&quot;;\n                SqlParameter idParam = new SqlParameter(&quot;@id&quot;, SqlDbType.Int, 0);\n                SqlParameter descParam = \n                    new SqlParameter(&quot;@desc&quot;, SqlDbType.Text, 100);\n                idParam.Value = 20;\n                descParam.Value = &quot;First Region&quot;;\n                command.Parameters.Add(idParam);\n                command.Parameters.Add(descParam);\n\n                // Call Prepare after setting the Commandtext and Parameters.\n                command.Prepare();\n                command.ExecuteNonQuery();\n\n                // Change parameter values and call ExecuteNonQuery.\n                command.Parameters[0].Value = 21;\n                command.Parameters[1].Value = &quot;Second Region&quot;;\n                command.ExecuteNonQuery();\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_ResetCommandTimeout\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_ResetCommandTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetCommandTimeout()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Data.SqlClient.SqlCommand.CommandTimeout*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetCommandTimeout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand#System_Data_SqlClient_SqlCommand_CommandTimeout_\" data-linktype=\"relative-path\">CommandTimeout</a> is 30 seconds.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_StatementCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatementCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the execution of a Transact-SQL statement completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.StatementCompletedEventHandler StatementCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlCommand_System_ICloneable_Clone\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlCommand_System_ICloneable_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICloneable.Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object ICloneable.Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object that is a copy of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlCommand.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlCommand.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.BeginExecuteReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Cancel\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Clone\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.CommandText\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.CommandTimeout\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.CommandType\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Connection\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.CreateDbParameter\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.CreateParameter\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.DbConnection\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.DbParameterCollection\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.DbTransaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.DesignTimeVisible\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.EndExecuteNonQuery\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.EndExecuteReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.EndExecuteXmlReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteDbDataReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteReaderAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteScalar\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteScalarAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReader\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Notification\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.NotificationAutoEnlist\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Parameters\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Prepare\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ResetCommandTimeout\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.StatementCompleted\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.add_StatementCompleted\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.remove_StatementCompleted\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.ICloneable.Clone\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.Transaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlCommand.UpdatedRowSource\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ad1772bd-c279-eb6c-c9db-6beb61306646\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data.SqlClient/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlCommand\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlCommand.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlCommand.yml","open_to_public_contributors":true,"api_name":["System.Data.SqlClient.SqlCommand","System.Data.SqlClient.SqlCommand..ctor","System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery","System.Data.SqlClient.SqlCommand.BeginExecuteReader","System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader","System.Data.SqlClient.SqlCommand.Cancel","System.Data.SqlClient.SqlCommand.Clone","System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting","System.Data.SqlClient.SqlCommand.CommandText","System.Data.SqlClient.SqlCommand.CommandTimeout","System.Data.SqlClient.SqlCommand.CommandType","System.Data.SqlClient.SqlCommand.Connection","System.Data.SqlClient.SqlCommand.CreateDbParameter","System.Data.SqlClient.SqlCommand.CreateParameter","System.Data.SqlClient.SqlCommand.DbConnection","System.Data.SqlClient.SqlCommand.DbParameterCollection","System.Data.SqlClient.SqlCommand.DbTransaction","System.Data.SqlClient.SqlCommand.DesignTimeVisible","System.Data.SqlClient.SqlCommand.Dispose","System.Data.SqlClient.SqlCommand.EndExecuteNonQuery","System.Data.SqlClient.SqlCommand.EndExecuteReader","System.Data.SqlClient.SqlCommand.EndExecuteXmlReader","System.Data.SqlClient.SqlCommand.ExecuteDbDataReader","System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync","System.Data.SqlClient.SqlCommand.ExecuteNonQuery","System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync","System.Data.SqlClient.SqlCommand.ExecuteReader","System.Data.SqlClient.SqlCommand.ExecuteReaderAsync","System.Data.SqlClient.SqlCommand.ExecuteScalar","System.Data.SqlClient.SqlCommand.ExecuteScalarAsync","System.Data.SqlClient.SqlCommand.ExecuteXmlReader","System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync","System.Data.SqlClient.SqlCommand.Notification","System.Data.SqlClient.SqlCommand.NotificationAutoEnlist","System.Data.SqlClient.SqlCommand.Parameters","System.Data.SqlClient.SqlCommand.Prepare","System.Data.SqlClient.SqlCommand.ResetCommandTimeout","System.Data.SqlClient.SqlCommand.StatementCompleted","System.Data.SqlClient.SqlCommand.add_StatementCompleted","System.Data.SqlClient.SqlCommand.remove_StatementCompleted","System.Data.SqlClient.SqlCommand.ICloneable.Clone","System.Data.SqlClient.SqlCommand.Transaction","System.Data.SqlClient.SqlCommand.UpdatedRowSource"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlCommand","System::Data::SqlClient::SqlCommand","System.Data.SqlClient.SqlCommand.#ctor","System::Data::SqlClient::SqlCommand::#ctor","System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery","System::Data::SqlClient::SqlCommand::BeginExecuteNonQuery","System.Data.SqlClient.SqlCommand.BeginExecuteReader","System::Data::SqlClient::SqlCommand::BeginExecuteReader","System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader","System::Data::SqlClient::SqlCommand::BeginExecuteXmlReader","System.Data.SqlClient.SqlCommand.Cancel","System::Data::SqlClient::SqlCommand::Cancel","System.Data.SqlClient.SqlCommand.Clone","System::Data::SqlClient::SqlCommand::Clone","System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting","System::Data::SqlClient::SqlCommand::ColumnEncryptionSetting","System.Data.SqlClient.SqlCommand.CommandText","System::Data::SqlClient::SqlCommand::CommandText","System.Data.SqlClient.SqlCommand.CommandTimeout","System::Data::SqlClient::SqlCommand::CommandTimeout","System.Data.SqlClient.SqlCommand.CommandType","System::Data::SqlClient::SqlCommand::CommandType","System.Data.SqlClient.SqlCommand.Connection","System::Data::SqlClient::SqlCommand::Connection","System.Data.SqlClient.SqlCommand.CreateDbParameter","System::Data::SqlClient::SqlCommand::CreateDbParameter","System.Data.SqlClient.SqlCommand.CreateParameter","System::Data::SqlClient::SqlCommand::CreateParameter","System.Data.SqlClient.SqlCommand.DbConnection","System::Data::SqlClient::SqlCommand::DbConnection","System.Data.SqlClient.SqlCommand.DbParameterCollection","System::Data::SqlClient::SqlCommand::DbParameterCollection","System.Data.SqlClient.SqlCommand.DbTransaction","System::Data::SqlClient::SqlCommand::DbTransaction","System.Data.SqlClient.SqlCommand.DesignTimeVisible","System::Data::SqlClient::SqlCommand::DesignTimeVisible","System.Data.SqlClient.SqlCommand.Dispose","System::Data::SqlClient::SqlCommand::Dispose","System.Data.SqlClient.SqlCommand.EndExecuteNonQuery","System::Data::SqlClient::SqlCommand::EndExecuteNonQuery","System.Data.SqlClient.SqlCommand.EndExecuteReader","System::Data::SqlClient::SqlCommand::EndExecuteReader","System.Data.SqlClient.SqlCommand.EndExecuteXmlReader","System::Data::SqlClient::SqlCommand::EndExecuteXmlReader","System.Data.SqlClient.SqlCommand.ExecuteDbDataReader","System::Data::SqlClient::SqlCommand::ExecuteDbDataReader","System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync","System::Data::SqlClient::SqlCommand::ExecuteDbDataReaderAsync","System.Data.SqlClient.SqlCommand.ExecuteNonQuery","System::Data::SqlClient::SqlCommand::ExecuteNonQuery","System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync","System::Data::SqlClient::SqlCommand::ExecuteNonQueryAsync","System.Data.SqlClient.SqlCommand.ExecuteReader","System::Data::SqlClient::SqlCommand::ExecuteReader","System.Data.SqlClient.SqlCommand.ExecuteReaderAsync","System::Data::SqlClient::SqlCommand::ExecuteReaderAsync","System.Data.SqlClient.SqlCommand.ExecuteScalar","System::Data::SqlClient::SqlCommand::ExecuteScalar","System.Data.SqlClient.SqlCommand.ExecuteScalarAsync","System::Data::SqlClient::SqlCommand::ExecuteScalarAsync","System.Data.SqlClient.SqlCommand.ExecuteXmlReader","System::Data::SqlClient::SqlCommand::ExecuteXmlReader","System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync","System::Data::SqlClient::SqlCommand::ExecuteXmlReaderAsync","System.Data.SqlClient.SqlCommand.Notification","System::Data::SqlClient::SqlCommand::Notification","System.Data.SqlClient.SqlCommand.NotificationAutoEnlist","System::Data::SqlClient::SqlCommand::NotificationAutoEnlist","System.Data.SqlClient.SqlCommand.Parameters","System::Data::SqlClient::SqlCommand::Parameters","System.Data.SqlClient.SqlCommand.Prepare","System::Data::SqlClient::SqlCommand::Prepare","System.Data.SqlClient.SqlCommand.ResetCommandTimeout","System::Data::SqlClient::SqlCommand::ResetCommandTimeout","System.Data.SqlClient.SqlCommand.StatementCompleted","System::Data::SqlClient::SqlCommand::StatementCompleted","System.Data.SqlClient.SqlCommand.System#ICloneable#Clone","System::Data::SqlClient::SqlCommand::System#ICloneable#Clone","System.Data.SqlClient.SqlCommand.Transaction","System::Data::SqlClient::SqlCommand::Transaction","System.Data.SqlClient.SqlCommand.UpdatedRowSource","System::Data::SqlClient::SqlCommand::UpdatedRowSource"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ad1772bd-c279-eb6c-c9db-6beb61306646","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data.SqlClient/SqlCommand.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlCommand class | Microsoft Docs","_op_ogTitle":"SqlCommand class","description":"Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlCommand","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlcommand","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlcommand","fileRelativePath":"System.Data.SqlClient.SqlCommand.html"},"themesRelativePathToOutputRoot":"_themes/"}