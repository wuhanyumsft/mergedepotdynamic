{"content":"    \r\n    <h1 id=\"System_Xml_Linq_Extensions\">\r\n      <span class=\"lang-csharp\">Extensions</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains the LINQ to XML extension methods.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Extensions</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Extensions</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Most of the LINQ to XML extension methods are axis methods that are used in LINQ queries. The methods in this class operate on collections and return collections. These methods enumerate the source collection, call the appropriate axis method on each item in the collection, and concatenate the results.  </p>\n<p> The two <a class=\"xref\" href=\"system.xml.linq.extensions#System_Xml_Linq_Extensions_Remove_\" data-linktype=\"relative-path\">Remove</a> extension methods are not axis methods, however. These methods remove attributes or nodes from the XML tree.  </p>\n<p> Note that there is another category of axis methods, implemented in the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, and <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> classes. These other axis methods operate on a single object, and return a collection of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, or <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> objects.  </p>\n<p> All of the axis extension methods use deferred execution.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Ancestors__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contains the ancestors of every node in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Ancestors__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_AncestorsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\" data-linktype=\"self-bookmark\">AncestorsAndSelf(IEnumerable&lt;XElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_AncestorsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">AncestorsAndSelf(IEnumerable&lt;XElement&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Attributes_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\" data-linktype=\"self-bookmark\">Attributes(IEnumerable&lt;XElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the attributes of every element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Attributes_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Attributes(IEnumerable&lt;XElement&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_DescendantNodes__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">DescendantNodes&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the descendant nodes of every document and element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_DescendantNodesAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\" data-linktype=\"self-bookmark\">DescendantNodesAndSelf(IEnumerable&lt;XElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Descendants__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Descendants&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Descendants__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Descendants&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_DescendantsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\" data-linktype=\"self-bookmark\">DescendantsAndSelf(IEnumerable&lt;XElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_DescendantsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">DescendantsAndSelf(IEnumerable&lt;XElement&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Elements__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Elements&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the child elements of every element and document in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Elements__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Elements&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_InDocumentOrder__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">InDocumentOrder&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Nodes__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Nodes&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the child nodes of every document and element in the source collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Remove_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute__\" data-linktype=\"self-bookmark\">Remove(IEnumerable&lt;XAttribute&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes every attribute in the source collection from its parent element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_Extensions_Remove__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Remove&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes every node in the source collection from its parent node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Ancestors__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Ancestors_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contains the ancestors of every node in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the ancestors of every node in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection. To avoid this, use the &lt;xref:System.Linq.Enumerable.Distinct%2A&gt; method.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of the great grandchildren elements. It then uses this axis method to retrieve all ancestors of all elements in the collection.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;,  \n        new XElement(&quot;GrandChild1&quot;,  \n            new XElement(&quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XElement(&quot;GrandChild2&quot;,  \n            new XElement(&quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.Ancestors().Distinct()  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child1&gt;  \n            &lt;GrandChild1&gt;  \n                &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n            &lt;/GrandChild1&gt;  \n        &lt;/Child1&gt;  \n        &lt;Child2&gt;  \n            &lt;GrandChild2&gt;  \n                &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n            &lt;/GrandChild2&gt;  \n        &lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\nDim greatGrandChildren = From el In xmlTree.Descendants _  \n                         Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                         Select el  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In greatGrandChildren  \n    Console.WriteLine(de.Name)  \nNext  \n\nDim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  \n                   Select el  \n\nConsole.WriteLine(&quot;&quot;)  \nConsole.WriteLine(&quot;Ancestors&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In allAncestors  \n    Console.WriteLine(de.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \nGreatGrandChild1  \nGreatGrandChild2  \n\nAncestors  \n----  \nGrandChild1  \nChild1  \nRoot  \nGrandChild2  \nChild2  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child1&quot;,  \n        new XElement(aw + &quot;GrandChild1&quot;,  \n            new XElement(aw + &quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(aw + &quot;Child2&quot;,  \n        new XElement(aw + &quot;GrandChild2&quot;,  \n            new XElement(aw + &quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.Ancestors().Distinct()  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child1&gt;  \n                    &lt;GrandChild1&gt;  \n                        &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n                    &lt;/GrandChild1&gt;  \n                &lt;/Child1&gt;  \n                &lt;Child2&gt;  \n                    &lt;GrandChild2&gt;  \n                        &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n                    &lt;/GrandChild2&gt;  \n                &lt;/Child2&gt;  \n            &lt;/Root&gt;  \n\n        Dim greatGrandChildren = From el In xmlTree.Descendants _  \n                                 Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                                 Select el  \n\n        Console.WriteLine(&quot;Great Grand Children Elements&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In greatGrandChildren  \n            Console.WriteLine(de.Name)  \n        Next  \n\n        Dim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  \n                           Select el  \n\n        Console.WriteLine(&quot;&quot;)  \n        Console.WriteLine(&quot;Ancestors&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In allAncestors  \n            Console.WriteLine(de.Name)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n{http://www.adventure-works.com}GreatGrandChild2  \n\nAncestors  \n----  \n{http://www.adventure-works.com}GrandChild1  \n{http://www.adventure-works.com}Child1  \n{http://www.adventure-works.com}Root  \n{http://www.adventure-works.com}GrandChild2  \n{http://www.adventure-works.com}Child2  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Ancestors__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Ancestors_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XNode;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the ancestors of every node in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If multiple nodes in the source collection have the same ancestor with a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, the ancestor will be included multiple times in the result collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of the great grandchildren elements. It then uses this axis method to retrieve all ancestors of all elements in the collection that match a specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;,  \n        new XElement(&quot;GrandChild1&quot;,  \n            new XElement(&quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XElement(&quot;GrandChild2&quot;,  \n            new XElement(&quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.Ancestors(&quot;Child1&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child1&gt;  \n            &lt;GrandChild1&gt;  \n                &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n            &lt;/GrandChild1&gt;  \n        &lt;/Child1&gt;  \n        &lt;Child2&gt;  \n            &lt;GrandChild2&gt;  \n                &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n            &lt;/GrandChild2&gt;  \n        &lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\nDim greatGrandChildren = From el In xmlTree.Descendants _  \n                         Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                         Select el  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In greatGrandChildren  \n    Console.WriteLine(de.Name)  \nNext  \n\nDim allAncestors = From el In greatGrandChildren.Ancestors(&quot;Child1&quot;) _  \n                   Select el  \n\nConsole.WriteLine(&quot;&quot;)  \nConsole.WriteLine(&quot;Ancestors&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In allAncestors  \n    Console.WriteLine(de.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \nGreatGrandChild1  \nGreatGrandChild2  \n\nAncestors  \n----  \nChild1  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child1&quot;,  \n        new XElement(aw + &quot;GrandChild1&quot;,  \n            new XElement(aw + &quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(aw + &quot;Child2&quot;,  \n        new XElement(aw + &quot;GrandChild2&quot;,  \n            new XElement(aw + &quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.Ancestors(aw + &quot;Child1&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child1&gt;  \n                    &lt;GrandChild1&gt;  \n                        &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n                    &lt;/GrandChild1&gt;  \n                &lt;/Child1&gt;  \n                &lt;Child2&gt;  \n                    &lt;GrandChild2&gt;  \n                        &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n                    &lt;/GrandChild2&gt;  \n                &lt;/Child2&gt;  \n            &lt;/Root&gt;  \n\n        Dim greatGrandChildren = From el In xmlTree.Descendants _  \n                                 Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                                 Select el  \n\n        Console.WriteLine(&quot;Great Grand Children Elements&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In greatGrandChildren  \n            Console.WriteLine(de.Name)  \n        Next  \n\n        Dim allAncestors = From el In greatGrandChildren.Ancestors(GetXmlNamespace() + &quot;Child1&quot;) _  \n                           Select el  \n\n        Console.WriteLine(&quot;&quot;)  \n        Console.WriteLine(&quot;Ancestors&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In allAncestors  \n            Console.WriteLine(de.Name)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n{http://www.adventure-works.com}GreatGrandChild2  \n\nAncestors  \n----  \n{http://www.adventure-works.com}Child1  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_AncestorsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_AncestorsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AncestorsAndSelf(IEnumerable&lt;XElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection. To avoid this, use the &lt;xref:System.Linq.Enumerable.Distinct%2A&gt; method.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of the great grandchildren elements. It then uses this axis method to retrieve all ancestors and self of all elements in the collection.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;,  \n        new XElement(&quot;GrandChild1&quot;,  \n            new XElement(&quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XElement(&quot;GrandChild2&quot;,  \n            new XElement(&quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors and Self&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child1&gt;  \n            &lt;GrandChild1&gt;  \n                &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n            &lt;/GrandChild1&gt;  \n        &lt;/Child1&gt;  \n        &lt;Child2&gt;  \n            &lt;GrandChild2&gt;  \n                &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n            &lt;/GrandChild2&gt;  \n        &lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\nDim greatGrandChildren = From el In xmlTree.Descendants _  \n                         Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                         Select el  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In greatGrandChildren  \n    Console.WriteLine(de.Name)  \nNext  \n\nDim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  \n                   Select el  \n\nConsole.WriteLine(&quot;&quot;)  \nConsole.WriteLine(&quot;Ancestors and Self&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In allAncestors  \n    Console.WriteLine(de.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \nGreatGrandChild1  \nGreatGrandChild2  \n\nAncestors and Self  \n----  \nGreatGrandChild1  \nGrandChild1  \nChild1  \nRoot  \nGreatGrandChild2  \nGrandChild2  \nChild2  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child1&quot;,  \n        new XElement(aw + &quot;GrandChild1&quot;,  \n            new XElement(aw + &quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(aw + &quot;Child2&quot;,  \n        new XElement(aw + &quot;GrandChild2&quot;,  \n            new XElement(aw + &quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors and Self&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child1&gt;  \n                    &lt;GrandChild1&gt;  \n                        &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n                    &lt;/GrandChild1&gt;  \n                &lt;/Child1&gt;  \n                &lt;Child2&gt;  \n                    &lt;GrandChild2&gt;  \n                        &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n                    &lt;/GrandChild2&gt;  \n                &lt;/Child2&gt;  \n            &lt;/Root&gt;  \n\n        Dim greatGrandChildren = From el In xmlTree.Descendants _  \n                                 Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                                 Select el  \n\n        Console.WriteLine(&quot;Great Grand Children Elements&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In greatGrandChildren  \n            Console.WriteLine(de.Name)  \n        Next  \n\n        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  \n                           Select el  \n\n        Console.WriteLine(&quot;&quot;)  \n        Console.WriteLine(&quot;Ancestors and Self&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In allAncestors  \n            Console.WriteLine(de.Name)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n{http://www.adventure-works.com}GreatGrandChild2  \n\nAncestors and Self  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n{http://www.adventure-works.com}GrandChild1  \n{http://www.adventure-works.com}Child1  \n{http://www.adventure-works.com}Root  \n{http://www.adventure-works.com}GreatGrandChild2  \n{http://www.adventure-works.com}GrandChild2  \n{http://www.adventure-works.com}Child2  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_AncestorsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_AncestorsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AncestorsAndSelf(IEnumerable&lt;XElement&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If multiple nodes in the source collection have the same ancestor with a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, the ancestor will be included multiple times in the result collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of the great grandchildren elements. It then uses this axis method to retrieve all self and ancestors of all elements in the collection that match a specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;,  \n        new XElement(&quot;GrandChild1&quot;,  \n            new XElement(&quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XElement(&quot;GrandChild2&quot;,  \n            new XElement(&quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.AncestorsAndSelf(&quot;GreatGrandChild1&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors and Self&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child1&gt;  \n            &lt;GrandChild1&gt;  \n                &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n            &lt;/GrandChild1&gt;  \n        &lt;/Child1&gt;  \n        &lt;Child2&gt;  \n            &lt;GrandChild2&gt;  \n                &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n            &lt;/GrandChild2&gt;  \n        &lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\nDim greatGrandChildren = From el In xmlTree.Descendants _  \n                         Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                         Select el  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In greatGrandChildren  \n    Console.WriteLine(de.Name)  \nNext  \n\nDim allAncestors = From el In greatGrandChildren.AncestorsAndSelf(&quot;GreatGrandChild1&quot;) _  \n                   Select el  \n\nConsole.WriteLine(&quot;&quot;)  \nConsole.WriteLine(&quot;Ancestors and Self&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \n\nFor Each de As XElement In allAncestors  \n    Console.WriteLine(de.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \nGreatGrandChild1  \nGreatGrandChild2  \n\nAncestors and Self  \n----  \nGreatGrandChild1  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child1&quot;,  \n        new XElement(aw + &quot;GrandChild1&quot;,  \n            new XElement(aw + &quot;GreatGrandChild1&quot;, &quot;content&quot;)  \n        )  \n    ),  \n    new XElement(aw + &quot;Child2&quot;,  \n        new XElement(aw + &quot;GrandChild2&quot;,  \n            new XElement(aw + &quot;GreatGrandChild2&quot;, &quot;content&quot;)  \n        )  \n    )  \n);  \nIEnumerable&lt;XElement&gt; greatGrandChildren =  \n    from el in xmlTree.Descendants()  \n    where el.Name.LocalName.StartsWith(&quot;Great&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;Great Grand Children Elements&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in greatGrandChildren)  \n    Console.WriteLine(de.Name);  \n\nIEnumerable&lt;XElement&gt; allAncestors =  \n    from el in greatGrandChildren.AncestorsAndSelf(aw + &quot;GreatGrandChild1&quot;)  \n    select el;  \n\nConsole.WriteLine(&quot;&quot;);  \nConsole.WriteLine(&quot;Ancestors and Self&quot;);  \nConsole.WriteLine(&quot;----&quot;);  \nforeach (XElement de in allAncestors)  \n    Console.WriteLine(de.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child1&gt;  \n                    &lt;GrandChild1&gt;  \n                        &lt;GreatGrandChild1&gt;content&lt;/GreatGrandChild1&gt;  \n                    &lt;/GrandChild1&gt;  \n                &lt;/Child1&gt;  \n                &lt;Child2&gt;  \n                    &lt;GrandChild2&gt;  \n                        &lt;GreatGrandChild2&gt;content&lt;/GreatGrandChild2&gt;  \n                    &lt;/GrandChild2&gt;  \n                &lt;/Child2&gt;  \n            &lt;/Root&gt;  \n\n        Dim greatGrandChildren = From el In xmlTree.Descendants _  \n                                 Where el.Name.LocalName.StartsWith(&quot;Great&quot;) _  \n                                 Select el  \n\n        Console.WriteLine(&quot;Great Grand Children Elements&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In greatGrandChildren  \n            Console.WriteLine(de.Name)  \n        Next  \n\n        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf(GetXmlNamespace() + &quot;GreatGrandChild1&quot;) _  \n                           Select el  \n\n        Console.WriteLine(&quot;&quot;)  \n        Console.WriteLine(&quot;Ancestors and Self&quot;)  \n        Console.WriteLine(&quot;----&quot;)  \n\n        For Each de As XElement In allAncestors  \n            Console.WriteLine(de.Name)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Great Grand Children Elements  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n{http://www.adventure-works.com}GreatGrandChild2  \n\nAncestors and Self  \n----  \n{http://www.adventure-works.com}GreatGrandChild1  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Attributes_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes(IEnumerable&lt;XElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the attributes of every element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains the attributes of every element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that unlike some other XML programming interfaces, in LINQ to XML, namespaces are surfaced as attributes.  </p>\n<p> Although Visual Basic users can use the integrated attribute axis to retrieve attributes with a specified name from a collection of elements, there is no integrated Visual Basic axis to retrieve all attributes of all elements in a collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of elements, and then retrieves a collection of all attributes of all elements in the collection. Note that the resulting collection includes only the attributes of the <code>Child1</code> and <code>Child2</code> elements, and not the attributes of the <code>Root</code> element.  </p>\n<p> Note that the namespace attribute is returned by this method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XAttribute(&quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(&quot;Att2&quot;, &quot;content2&quot;),  \n    new XElement(&quot;Child1&quot;,  \n        new XAttribute(&quot;Att1&quot;, &quot;content3&quot;),  \n        new XAttribute(&quot;Att2&quot;, &quot;content4&quot;)  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XAttribute(&quot;Att1&quot;, &quot;content5&quot;),  \n        new XAttribute(&quot;Att2&quot;, &quot;content6&quot;)  \n    )  \n);  \nConsole.WriteLine(xmlTree);  \nConsole.WriteLine(&quot;-----&quot;);  \n\nIEnumerable&lt;XAttribute&gt; attList =  \n    from att in xmlTree.DescendantsAndSelf().Attributes()  \n    select att;  \n\nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root xmlns:aw=&quot;http://www.adventure-works.com&quot; Att1=&quot;content1&quot; Att2=&quot;content2&quot;&gt;  \n        &lt;Child1 Att1=&quot;content3&quot; Att2=&quot;content4&quot;/&gt;  \n        &lt;Child2 Att1=&quot;content5&quot; Att2=&quot;content6&quot;/&gt;  \n    &lt;/Root&gt;  \n\nDim attList = _  \n    From att In xmlTree.DescendantsAndSelf.Attributes _  \n    Select att  \n\nConsole.WriteLine(xmlTree)  \nConsole.WriteLine(&quot;-----&quot;)  \n\nFor Each att As XAttribute In attList  \n    Console.WriteLine(att)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns:aw=&quot;http://www.adventure-works.com&quot; Att1=&quot;content1&quot; Att2=&quot;content2&quot;&gt;  \n  &lt;Child1 Att1=&quot;content3&quot; Att2=&quot;content4&quot; /&gt;  \n  &lt;Child2 Att1=&quot;content5&quot; Att2=&quot;content6&quot; /&gt;  \n&lt;/Root&gt;  \n-----  \nxmlns:aw=&quot;http://www.adventure-works.com&quot;  \nAtt1=&quot;content1&quot;  \nAtt2=&quot;content2&quot;  \nAtt1=&quot;content3&quot;  \nAtt2=&quot;content4&quot;  \nAtt1=&quot;content5&quot;  \nAtt2=&quot;content6&quot;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>. Note that the namespace attribute is included in the returned collection.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XAttribute(aw + &quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(aw + &quot;Att2&quot;, &quot;content2&quot;),  \n    new XElement(aw + &quot;Child1&quot;,  \n        new XAttribute(aw + &quot;Att1&quot;, &quot;content3&quot;),  \n        new XAttribute(aw + &quot;Att2&quot;, &quot;content4&quot;)  \n    ),  \n    new XElement(aw + &quot;Child2&quot;,  \n        new XAttribute(aw + &quot;Att1&quot;, &quot;content5&quot;),  \n        new XAttribute(aw + &quot;Att2&quot;, &quot;content6&quot;)  \n    )  \n);  \nConsole.WriteLine(xmlTree);  \nConsole.WriteLine(&quot;-----&quot;);  \n\nIEnumerable&lt;XAttribute&gt; attList =  \n    from att in xmlTree.DescendantsAndSelf().Attributes()  \n    select att;  \n\nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot; aw:Att1=&quot;content1&quot; aw:Att2=&quot;content2&quot;&gt;  \n                &lt;aw:Child1 aw:Att1=&quot;content3&quot; aw:Att2=&quot;content4&quot;/&gt;  \n                &lt;aw:Child2 aw:Att1=&quot;content5&quot; aw:Att2=&quot;content6&quot;/&gt;  \n            &lt;/aw:Root&gt;  \n\n        Dim attList = _  \n            From att In xmlTree.DescendantsAndSelf.Attributes _  \n            Select att  \n\n        Console.WriteLine(xmlTree)  \n        Console.WriteLine(&quot;-----&quot;)  \n\n        For Each att As XAttribute In attList  \n            Console.WriteLine(att)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot; aw:Att1=&quot;content1&quot; aw:Att2=&quot;content2&quot;&gt;  \n  &lt;aw:Child1 aw:Att1=&quot;content3&quot; aw:Att2=&quot;content4&quot; /&gt;  \n  &lt;aw:Child2 aw:Att1=&quot;content5&quot; aw:Att2=&quot;content6&quot; /&gt;  \n&lt;/aw:Root&gt;  \n-----  \nxmlns:aw=&quot;http://www.adventure-works.com&quot;  \naw:Att1=&quot;content1&quot;  \naw:Att2=&quot;content2&quot;  \naw:Att1=&quot;content3&quot;  \naw:Att2=&quot;content4&quot;  \naw:Att1=&quot;content5&quot;  \naw:Att2=&quot;content6&quot;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Attributes_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes(IEnumerable&lt;XElement&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that unlike some other XML programming interfaces, in LINQ to XML, namespaces are surfaced as attributes.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of elements, which in this case includes the <code>Child1</code> and <code>Child2</code> elements. It then retrieves all attributes of that child collection with a name of <code>Att1</code>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(&quot;Att2&quot;, &quot;content2&quot;),  \n    new XElement(&quot;Child1&quot;,  \n        new XAttribute(&quot;Att1&quot;, &quot;content3&quot;),  \n        new XAttribute(&quot;Att2&quot;, &quot;content4&quot;)  \n    ),  \n    new XElement(&quot;Child2&quot;,  \n        new XAttribute(&quot;Att1&quot;, &quot;content5&quot;),  \n        new XAttribute(&quot;Att2&quot;, &quot;content6&quot;)  \n    )  \n);  \n\nIEnumerable&lt;XAttribute&gt; attList = from att in xmlTree.Elements().Attributes(&quot;Att1&quot;)  \n                                  select att;  \n\nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root Att1=&quot;content1&quot; Att2=&quot;content2&quot;&gt;  \n        &lt;Child1 Att1=&quot;content3&quot; Att2=&quot;content4&quot;&gt;  \n        &lt;/Child1&gt;  \n        &lt;Child2 Att1=&quot;content5&quot; Att2=&quot;content6&quot;&gt;  \n        &lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\nDim attList = From att In xmlTree.Elements.Attributes(&quot;Att1&quot;) _  \n                          Select att  \n\nFor Each att As XAttribute In attList  \n    Console.WriteLine(att)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Att1=&quot;content3&quot;  \nAtt1=&quot;content5&quot;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_DescendantNodes__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_DescendantNodes_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantNodes&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the descendant nodes of every document and element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> of the descendant nodes of every document and element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This axis extension method is used on <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> and <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects. Both of these types derive from <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, so this method operates on an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that contains the source collection.  </p>\n<p> Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of two elements, and then retrieves a collection of all descendant nodes for every element in the source collection. Note that the attribute of the <code>GrandChild</code> element is not surfaced as a node.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root&gt;  \n    &lt;Child&gt;aaa&lt;GrandChild anAttribute=&#39;xyz&#39;&gt;Text&lt;/GrandChild&gt;  \n        &lt;!--a comment--&gt;  \n        &lt;?xml-stylesheet type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;?&gt;  \n    &lt;/Child&gt;  \n    &lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;  \n&lt;/Root&gt;&quot;);  \nIEnumerable&lt;XNode&gt; nodes =  \n    from node in xmlTree.Elements(&quot;Child&quot;).DescendantNodes()  \n    select node;  \n\nforeach (XNode node in nodes)  \n{  \n    switch (node.NodeType)  \n    {  \n        case XmlNodeType.Element:  \n            Console.WriteLine(&quot;Element: {0}&quot;, ((XElement)node).Name);  \n            break;  \n        case XmlNodeType.Text:  \n            Console.WriteLine(&quot;Text: {0}&quot;, ((XText)node).Value);  \n            break;  \n        case XmlNodeType.Comment:  \n            Console.WriteLine(&quot;Comment: {0}&quot;, ((XComment)node).Value);  \n            break;  \n        case XmlNodeType.ProcessingInstruction:  \n            Console.WriteLine(&quot;PI: {0}&quot;, ((XProcessingInstruction)node).Data);  \n            break;  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n&lt;Root&gt;  \n    &lt;Child&gt;aaa&lt;GrandChild anAttribute=&#39;xyz&#39;&gt;Text&lt;/GrandChild&gt;  \n        &lt;!--a comment--&gt;  \n        &lt;?xml-stylesheet type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;?&gt;  \n    &lt;/Child&gt;  \n    &lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;  \n&lt;/Root&gt;  \n\nDim nodes As IEnumerable(Of XNode) = _  \n    From node In xmlTree.&lt;Child&gt;.DescendantNodes _  \n    Select node  \n\nFor Each node As XNode In nodes  \n    Select Case node.NodeType  \n        Case XmlNodeType.Element  \n            Console.WriteLine(&quot;Element: {0}&quot;, DirectCast(node, XElement).Name)  \n        Case XmlNodeType.Text  \n            Console.WriteLine(&quot;Text: {0}&quot;, DirectCast(node, XText).Value)  \n        Case XmlNodeType.Comment  \n            Console.WriteLine(&quot;Comment: {0}&quot;, DirectCast(node, XComment).Value)  \n        Case XmlNodeType.ProcessingInstruction  \n            Console.WriteLine(&quot;PI: {0}&quot;, DirectCast(node, XProcessingInstruction).Data)  \n    End Select  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Text: aaa  \nElement: GrandChild  \nText: Text  \nComment: a comment  \nPI: type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;  \nText: ccc  \nElement: GrandChild  \nText: Text  \nText: ddd  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n    &lt;Child&gt;aaa&lt;GrandChild anAttribute=&#39;xyz&#39;&gt;Text&lt;/GrandChild&gt;  \n        &lt;!--a comment--&gt;  \n        &lt;?xml-stylesheet type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;?&gt;  \n    &lt;/Child&gt;  \n    &lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;  \n&lt;/Root&gt;&quot;);  \nIEnumerable&lt;XNode&gt; nodes =  \n    from node in xmlTree.Elements(aw + &quot;Child&quot;).DescendantNodes()  \n    select node;  \n\nforeach (XNode node in nodes)  \n{  \n    switch (node.NodeType)  \n    {  \n        case XmlNodeType.Element:  \n            Console.WriteLine(&quot;Element: {0}&quot;, ((XElement)node).Name);  \n            break;  \n        case XmlNodeType.Text:  \n            Console.WriteLine(&quot;Text: {0}&quot;, ((XText)node).Value);  \n            break;  \n        case XmlNodeType.Comment:  \n            Console.WriteLine(&quot;Comment: {0}&quot;, ((XComment)node).Value);  \n            break;  \n        case XmlNodeType.ProcessingInstruction:  \n            Console.WriteLine(&quot;PI: {0}&quot;, ((XProcessingInstruction)node).Data);  \n            break;  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child&gt;aaa&lt;GrandChild anAttribute=&#39;xyz&#39;&gt;Text&lt;/GrandChild&gt;  \n                &lt;!--a comment--&gt;  \n                &lt;?xml-stylesheet type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;?&gt;  \n            &lt;/Child&gt;  \n            &lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;  \n        &lt;/Root&gt;  \n\n        Dim nodes As IEnumerable(Of XNode) = _  \n            From node In xmlTree.&lt;Child&gt;.DescendantNodes _  \n            Select node  \n\n        For Each node As XNode In nodes  \n            Select Case node.NodeType  \n                Case XmlNodeType.Element  \n                    Console.WriteLine(&quot;Element: {0}&quot;, DirectCast(node, XElement).Name)  \n                Case XmlNodeType.Text  \n                    Console.WriteLine(&quot;Text: {0}&quot;, DirectCast(node, XText).Value)  \n                Case XmlNodeType.Comment  \n                    Console.WriteLine(&quot;Comment: {0}&quot;, DirectCast(node, XComment).Value)  \n                Case XmlNodeType.ProcessingInstruction  \n                    Console.WriteLine(&quot;PI: {0}&quot;, DirectCast(node, XProcessingInstruction).Data)  \n            End Select  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Text: aaa  \nElement: {http://www.adventure-works.com}GrandChild  \nText: Text  \nComment: a comment  \nPI: type=&#39;text/xsl&#39; href=&#39;test.xsl&#39;  \nText: ccc  \nElement: {http://www.adventure-works.com}GrandChild  \nText: Text  \nText: ddd  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_DescendantNodesAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_DescendantNodesAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantNodesAndSelf(IEnumerable&lt;XElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Descendants__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Descendants_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Descendants&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the descendant elements of every element and document in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection. However, the integrated axis only retrieves descendants with a specified name. If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of elements, and then uses this axis method to retrieve all descendent elements of every item in the collection of elements.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is some text &lt;/t&gt;  \n        &lt;b&gt;  \n            &lt;t&gt;where&lt;/t&gt;  \n        &lt;/b&gt;  \n        &lt;t&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n    &lt;/Para&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n    &lt;/Para&gt;  \n&lt;/Root&gt;&quot;);  \n\nIEnumerable&lt;XElement&gt; elList =  \n    from el in xmlTree.Elements(&quot;Para&quot;).Descendants()  \n    select el;  \n\nforeach (XElement el in elList)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Para&gt;  \n            &lt;t&gt;This is some text &lt;/t&gt;  \n            &lt;b&gt;  \n                &lt;t&gt;where&lt;/t&gt;  \n            &lt;/b&gt;  \n            &lt;t&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n        &lt;/Para&gt;  \n\n        &lt;Para&gt;  \n            &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n        &lt;/Para&gt;  \n    &lt;/Root&gt;  \n\nDim elList = From el In xmlTree.&lt;Para&gt;.Descendants _  \n                        Select el  \n\nFor Each el As XElement In elList  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;t&gt;This is some text &lt;/t&gt;  \n&lt;b&gt;  \n  &lt;t&gt;where&lt;/t&gt;  \n&lt;/b&gt;  \n&lt;t&gt;where&lt;/t&gt;  \n&lt;t&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n&lt;t&gt;This is a second sentence.&lt;/t&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is some text &lt;/t&gt;  \n        &lt;b&gt;  \n            &lt;t&gt;where&lt;/t&gt;  \n        &lt;/b&gt;  \n        &lt;t&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n    &lt;/Para&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n    &lt;/Para&gt;  \n&lt;/Root&gt;&quot;);  \n\nIEnumerable&lt;XElement&gt; elList =  \n    from el in xmlTree.Elements(aw + &quot;Para&quot;).Descendants()  \n    select el;  \n\nforeach (XElement el in elList)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Para&gt;  \n                    &lt;t&gt;This is some text &lt;/t&gt;  \n                    &lt;b&gt;  \n                        &lt;t&gt;where&lt;/t&gt;  \n                    &lt;/b&gt;  \n                    &lt;t&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n                &lt;/Para&gt;  \n\n                &lt;Para&gt;  \n                    &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n                &lt;/Para&gt;  \n            &lt;/Root&gt;  \n\n        Dim elList = From el In xmlTree.&lt;Para&gt;.Descendants _  \n                                Select el  \n\n        For Each el As XElement In elList  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;t xmlns=&quot;http://www.adventure-works.com&quot;&gt;This is some text &lt;/t&gt;  \n&lt;b xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;t&gt;where&lt;/t&gt;  \n&lt;/b&gt;  \n&lt;t xmlns=&quot;http://www.adventure-works.com&quot;&gt;where&lt;/t&gt;  \n&lt;t xmlns=&quot;http://www.adventure-works.com&quot;&gt; all of the nodes must be concatenated. &lt;/t&gt;  \n&lt;t xmlns=&quot;http://www.adventure-works.com&quot;&gt;This is a second sentence.&lt;/t&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Descendants__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Descendants_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Descendants&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Visual Basic users can use the <a href=\"../Topic/Language-Integrated%20Axes%20in%20Visual%20Basic%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Language-Integrated Axes in Visual Basic (LINQ to XML)</a> instead of using this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of two elements, and then retrieves a collection of all descendants of the two elements that have the specified element name.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is some text &lt;/t&gt;  \n        &lt;b&gt;  \n            &lt;t&gt;where&lt;/t&gt;  \n        &lt;/b&gt;  \n        &lt;t&gt; all of the text nodes must be concatenated. &lt;/t&gt;  \n    &lt;/Para&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n    &lt;/Para&gt;  \n&lt;/Root&gt;&quot;);  \n\nstring str =  \n    (from el in xmlTree.Elements(&quot;Para&quot;).Descendants(&quot;t&quot;)  \n    select (string)el)  \n    .Aggregate(new StringBuilder(),  \n        (sb, i) =&gt; sb.Append(i),  \n        sb =&gt; sb.ToString());  \n\nConsole.WriteLine(str);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Para&gt;  \n            &lt;t&gt;This is some text &lt;/t&gt;  \n            &lt;b&gt;  \n                &lt;t&gt;where&lt;/t&gt;  \n            &lt;/b&gt;  \n            &lt;t&gt; all of the text nodes must be concatenated. &lt;/t&gt;  \n        &lt;/Para&gt;  \n        &lt;Para&gt;  \n            &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n        &lt;/Para&gt;  \n    &lt;/Root&gt;  \n\nDim str As String = _  \n    ( _  \n        From el In xmlTree.&lt;Para&gt;...&lt;t&gt; _  \n        Select CStr(el) _  \n    ) _  \n    .Aggregate(New StringBuilder(), _  \n               Function(ByVal sb, ByVal i) sb.Append(i), _  \n               Function(ByVal sb) sb.ToString())  \n\nConsole.WriteLine(str)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>This is some text where all of the text nodes must be concatenated. This is a second sentence.  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = XElement.Parse(  \n@&quot;&lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is some text &lt;/t&gt;  \n        &lt;b&gt;  \n            &lt;t&gt;where&lt;/t&gt;  \n        &lt;/b&gt;  \n        &lt;t&gt; all of the text nodes must be concatenated. &lt;/t&gt;  \n    &lt;/Para&gt;  \n    &lt;Para&gt;  \n        &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n    &lt;/Para&gt;  \n&lt;/Root&gt;&quot;);  \n\nstring str =  \n    (from el in xmlTree.Elements(aw + &quot;Para&quot;).Descendants(aw + &quot;t&quot;)  \n     select (string)el)  \n    .Aggregate(new StringBuilder(),  \n        (sb, i) =&gt; sb.Append(i),  \n        sb =&gt; sb.ToString());  \n\nConsole.WriteLine(str);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Para&gt;  \n                    &lt;t&gt;This is some text &lt;/t&gt;  \n                    &lt;b&gt;  \n                        &lt;t&gt;where&lt;/t&gt;  \n                    &lt;/b&gt;  \n                    &lt;t&gt; all of the text nodes must be concatenated. &lt;/t&gt;  \n                &lt;/Para&gt;  \n                &lt;Para&gt;  \n                    &lt;t&gt;This is a second sentence.&lt;/t&gt;  \n                &lt;/Para&gt;  \n            &lt;/Root&gt;  \n\n        Dim str As String = _  \n            ( _  \n                From el In xmlTree.&lt;Para&gt;...&lt;t&gt; _  \n                Select CStr(el) _  \n            ) _  \n            .Aggregate(New StringBuilder(), _  \n                       Function(sb, i) sb.Append(i), _  \n                       Function(sb) sb.ToString())  \n\n        Console.WriteLine(str)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>This is some text where all of the text nodes must be concatenated. This is a second sentence.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_DescendantsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_DescendantsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantsAndSelf(IEnumerable&lt;XElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_DescendantsAndSelf_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_DescendantsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantsAndSelf(IEnumerable&lt;XElement&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Elements__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Elements_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Elements&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the child elements of every element and document in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> of the child elements of every element or document in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> for every element in the source collection, there is no integrated elements axis that allows you to retrieve a collection of every child element for every element in the source collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of elements with the element name of <code>Child</code>. It then uses this axis method to retrieve all child elements of the collection.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild1&quot;, 1),  \n        new XElement(&quot;GrandChild2&quot;, 2)  \n    ),  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild3&quot;, 3),  \n        new XElement(&quot;GrandChild4&quot;, 4)  \n    ),  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild5&quot;, 5),  \n        new XElement(&quot;GrandChild6&quot;, 6)  \n    )  \n);  \n\nIEnumerable&lt;XElement&gt; allGrandChildren =  \n    from el in xmlTree.Elements(&quot;Child&quot;).Elements()  \n    select el;  \n\nforeach (XElement el in allGrandChildren)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n     &lt;Root&gt;  \n          &lt;Child&gt;  \n              &lt;GrandChild1&gt;1&lt;/GrandChild1&gt;  \n              &lt;GrandChild2&gt;2&lt;/GrandChild2&gt;  \n          &lt;/Child&gt;  \n\n          &lt;Child&gt;  \n              &lt;GrandChild3&gt;3&lt;/GrandChild3&gt;  \n              &lt;GrandChild4&gt;4&lt;/GrandChild4&gt;  \n          &lt;/Child&gt;  \n\n          &lt;Child&gt;  \n              &lt;GrandChild5&gt;5&lt;/GrandChild5&gt;  \n              &lt;GrandChild6&gt;6&lt;/GrandChild6&gt;  \n          &lt;/Child&gt;  \n      &lt;/Root&gt;  \n\nDim allGrandChildren = From el In xmlTree.&lt;Child&gt;.Elements _  \n                       Select el  \n\nFor Each el As XElement In allGrandChildren  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;GrandChild1&gt;1&lt;/GrandChild1&gt;  \n&lt;GrandChild2&gt;2&lt;/GrandChild2&gt;  \n&lt;GrandChild3&gt;3&lt;/GrandChild3&gt;  \n&lt;GrandChild4&gt;4&lt;/GrandChild4&gt;  \n&lt;GrandChild5&gt;5&lt;/GrandChild5&gt;  \n&lt;GrandChild6&gt;6&lt;/GrandChild6&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child&quot;,  \n        new XElement(aw + &quot;GrandChild1&quot;, 1),  \n        new XElement(aw + &quot;GrandChild2&quot;, 2)  \n    ),  \n    new XElement(aw + &quot;Child&quot;,  \n        new XElement(aw + &quot;GrandChild3&quot;, 3),  \n        new XElement(aw + &quot;GrandChild4&quot;, 4)  \n    ),  \n    new XElement(aw + &quot;Child&quot;,  \n        new XElement(aw + &quot;GrandChild5&quot;, 5),  \n        new XElement(aw + &quot;GrandChild6&quot;, 6)  \n    )  \n);  \n\nIEnumerable&lt;XElement&gt; allGrandChildren =  \n    from el in xmlTree.Elements(aw + &quot;Child&quot;).Elements()  \n    select el;  \n\nforeach (XElement el in allGrandChildren)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n             &lt;Root&gt;  \n                 &lt;Child&gt;  \n                     &lt;GrandChild1&gt;1&lt;/GrandChild1&gt;  \n                     &lt;GrandChild2&gt;2&lt;/GrandChild2&gt;  \n                 &lt;/Child&gt;  \n\n                 &lt;Child&gt;  \n                     &lt;GrandChild3&gt;3&lt;/GrandChild3&gt;  \n                     &lt;GrandChild4&gt;4&lt;/GrandChild4&gt;  \n                 &lt;/Child&gt;  \n\n                 &lt;Child&gt;  \n                     &lt;GrandChild5&gt;5&lt;/GrandChild5&gt;  \n                     &lt;GrandChild6&gt;6&lt;/GrandChild6&gt;  \n                 &lt;/Child&gt;  \n             &lt;/Root&gt;  \n\n        Dim allGrandChildren = From el In xmlTree.&lt;Child&gt;.Elements _  \n                               Select el  \n\n        For Each el As XElement In allGrandChildren  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;GrandChild1 xmlns=&quot;http://www.adventure-works.com&quot;&gt;1&lt;/GrandChild1&gt;  \n&lt;GrandChild2 xmlns=&quot;http://www.adventure-works.com&quot;&gt;2&lt;/GrandChild2&gt;  \n&lt;GrandChild3 xmlns=&quot;http://www.adventure-works.com&quot;&gt;3&lt;/GrandChild3&gt;  \n&lt;GrandChild4 xmlns=&quot;http://www.adventure-works.com&quot;&gt;4&lt;/GrandChild4&gt;  \n&lt;GrandChild5 xmlns=&quot;http://www.adventure-works.com&quot;&gt;5&lt;/GrandChild5&gt;  \n&lt;GrandChild6 xmlns=&quot;http://www.adventure-works.com&quot;&gt;6&lt;/GrandChild6&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Elements__1_System_Collections_Generic_IEnumerable___0__System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Elements_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Elements&lt;T&gt;(IEnumerable&lt;T&gt;,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the source collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> of the child elements of every element and document in the source collection. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Visual Basic users can use the integrated elements axis to retrieve the child elements of every element in a collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This extension method is useful when you want to retrieve all elements with a specified name at a particular depth. This is easy if the document is very regular, but if the document is irregular, it can be a bit more difficult. In the following example, we want to retrieve all <code>aaa</code> elements that are children of <code>Item</code> elements. A given <code>Item</code> element may or may not contain an <code>aaa</code> element. This is easily accomplished using this extension method, as follows:  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;aaa&quot;, 1),  \n        new XElement(&quot;bbb&quot;, 2)  \n    ),  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;ccc&quot;, 3),  \n        new XElement(&quot;aaa&quot;, 4)  \n    ),  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;ddd&quot;, 5),  \n        new XElement(&quot;eee&quot;, 6)  \n    )  \n);  \n\nIEnumerable&lt;XElement&gt; allGrandChildren =  \n    from el in xmlTree.Elements(&quot;Item&quot;).Elements(&quot;aaa&quot;)  \n    select el;  \n\nforeach (XElement el in allGrandChildren)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Item&gt;  \n            &lt;aaa&gt;1&lt;/aaa&gt;  \n            &lt;bbb&gt;2&lt;/bbb&gt;  \n        &lt;/Item&gt;  \n\n        &lt;Item&gt;  \n            &lt;ccc&gt;3&lt;/ccc&gt;  \n            &lt;aaa&gt;4&lt;/aaa&gt;  \n        &lt;/Item&gt;  \n\n        &lt;Item&gt;  \n            &lt;ddd&gt;5&lt;/ddd&gt;  \n            &lt;eee&gt;6&lt;/eee&gt;  \n        &lt;/Item&gt;  \n    &lt;/Root&gt;  \n\nDim allGrandChildren = From el In xmlTree.&lt;Item&gt;.&lt;aaa&gt; _  \n                       Select el  \n\nFor Each el As XElement In allGrandChildren  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aaa&gt;1&lt;/aaa&gt;  \n&lt;aaa&gt;4&lt;/aaa&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Item&quot;,  \n        new XElement(aw + &quot;aaa&quot;, 1),  \n        new XElement(aw + &quot;bbb&quot;, 2)  \n    ),  \n    new XElement(aw + &quot;Item&quot;,  \n        new XElement(aw + &quot;ccc&quot;, 3),  \n        new XElement(aw + &quot;aaa&quot;, 4)  \n    ),  \n    new XElement(aw + &quot;Item&quot;,  \n        new XElement(aw + &quot;ddd&quot;, 5),  \n        new XElement(aw + &quot;eee&quot;, 6)  \n    )  \n);  \n\nIEnumerable&lt;XElement&gt; allGrandChildren =  \n    from el in xmlTree.Elements(aw + &quot;Item&quot;).Elements(aw + &quot;aaa&quot;)  \n    select el;  \n\nforeach (XElement el in allGrandChildren)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;Root&gt;  \n                &lt;Item&gt;  \n                    &lt;aaa&gt;1&lt;/aaa&gt;  \n                    &lt;bbb&gt;2&lt;/bbb&gt;  \n                &lt;/Item&gt;  \n\n                &lt;Item&gt;  \n                    &lt;ccc&gt;3&lt;/ccc&gt;  \n                    &lt;aaa&gt;4&lt;/aaa&gt;  \n                &lt;/Item&gt;  \n\n                &lt;Item&gt;  \n                    &lt;ddd&gt;5&lt;/ddd&gt;  \n                    &lt;eee&gt;6&lt;/eee&gt;  \n                &lt;/Item&gt;  \n            &lt;/Root&gt;  \n\n        Dim allGrandChildren = From el In xmlTree.&lt;Item&gt;.&lt;aaa&gt; _  \n                               Select el  \n\n        For Each el As XElement In allGrandChildren  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aaa xmlns=&quot;http://www.adventure-works.com&quot;&gt;1&lt;/aaa&gt;  \n&lt;aaa xmlns=&quot;http://www.adventure-works.com&quot;&gt;4&lt;/aaa&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_InDocumentOrder__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_InDocumentOrder_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InDocumentOrder&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;T&gt; InDocumentOrder&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains all nodes in the source collection, sorted in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This axis method uses deferred execution. However, it first enumerates its source collection, the sorts the nodes in document order, and then yields the results.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a collection of nodes that are not in document order, and then uses this axis to create a new collection where the nodes are in document order.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;aaa&quot;, 1),  \n        new XElement(&quot;bbb&quot;, 2)  \n    ),  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;ccc&quot;, 3),  \n        new XElement(&quot;aaa&quot;, 4)  \n    ),  \n    new XElement(&quot;Item&quot;,  \n        new XElement(&quot;ddd&quot;, 5),  \n        new XElement(&quot;eee&quot;, 6)  \n    )  \n);  \n\nXElement[] elementList = {  \n    xmlTree.Descendants(&quot;ddd&quot;).First(),  \n    xmlTree.Descendants(&quot;ccc&quot;).First(),  \n    xmlTree.Descendants(&quot;aaa&quot;).First()  \n};  \n\nIEnumerable&lt;XElement&gt; inDocOrder = elementList.InDocumentOrder();  \n\nforeach (XElement el in inDocOrder)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Item&gt;  \n            &lt;aaa&gt;1&lt;/aaa&gt;  \n            &lt;bbb&gt;2&lt;/bbb&gt;  \n        &lt;/Item&gt;  \n\n        &lt;Item&gt;  \n            &lt;ccc&gt;3&lt;/ccc&gt;  \n            &lt;aaa&gt;4&lt;/aaa&gt;  \n        &lt;/Item&gt;  \n\n        &lt;Item&gt;  \n            &lt;ddd&gt;5&lt;/ddd&gt;  \n            &lt;eee&gt;6&lt;/eee&gt;  \n        &lt;/Item&gt;  \n    &lt;/Root&gt;  \n\nDim elementList() As XElement = _  \n    { _  \n        xmlTree...&lt;ddd&gt;(0), _  \n        xmlTree...&lt;ccc&gt;(0), _  \n        xmlTree...&lt;aaa&gt;(0) _  \n    }  \n\nDim inDocOrder = elementList.InDocumentOrder  \n\nFor Each el As XElement In inDocOrder  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aaa&gt;1&lt;/aaa&gt;  \n&lt;ccc&gt;3&lt;/ccc&gt;  \n&lt;ddd&gt;5&lt;/ddd&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Nodes__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Nodes_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Nodes&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the child nodes of every document and element in the source collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> of the child nodes of every document and element in the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves all of the child nodes for every node in a collection of elements with the name of <code>Child</code>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(  \n    @&quot;&lt;Root&gt;&lt;Child&gt;aaa&lt;GrandChild&gt;Text&lt;/GrandChild&gt;bbb&lt;/Child&gt;&quot; +  \n    @&quot;&lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;&lt;/Root&gt;&quot;);  \nIEnumerable&lt;XNode&gt; nodes = xmlTree.Elements(&quot;Child&quot;).Nodes();  \n\nforeach (XNode node in nodes)  \n{  \n    switch (node.NodeType)  \n    {  \n        case XmlNodeType.Element:  \n            Console.WriteLine(&quot;Element: {0}&quot;, ((XElement)node).Name);  \n            break;  \n        case XmlNodeType.Text:  \n            Console.WriteLine(&quot;Text: {0}&quot;, ((XText)node).Value);  \n            break;  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;aaa&lt;GrandChild&gt;Text&lt;/GrandChild&gt;bbb&lt;/Child&gt;  \n        &lt;Child&gt;ccc&lt;GrandChild&gt;Text&lt;/GrandChild&gt;ddd&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim nodes = xmlTree.&lt;Child&gt;.Nodes()  \n\n&#39; Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  \nFor Each node As XNode In nodes  \n    Select Case node.NodeType  \n        Case XmlNodeType.Element  \n            Console.WriteLine(&quot;Element: {0}&quot;, DirectCast(node, XElement).Name)  \n        Case XmlNodeType.Text  \n            Console.WriteLine(&quot;Text: {0}&quot;, DirectCast(node, XText).Value)  \n    End Select  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Text: aaa  \nElement: GrandChild  \nText: bbb  \nText: ccc  \nElement: GrandChild  \nText: ddd  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Remove_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(IEnumerable&lt;XAttribute&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Removes every attribute in the source collection from its parent element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Remove (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses snapshot semantics—that is, it copies the attributes in the source collection to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;</a> before disconnecting them from their parents. This is required to avoid issues with mixed imperative/declarative code. For more information, see <a href=\"../Topic/Mixed%20Declarative%20Code-Imperative%20Code%20Bugs%20(LINQ%20to%20XML).md\" data-linktype=\"relative-path\">Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of attributes, and then calls this method to remove them from their parent elements.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3),  \n    new XAttribute(&quot;Att4&quot;, 4),  \n    new XAttribute(&quot;Att5&quot;, 5)  \n);  \n\nIEnumerable&lt;XAttribute&gt; atList =  \n    from at in root.Attributes()  \n    where (int)at &gt;= 3  \n    select at;  \n\natList.Remove();  \n\nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot; Att4=&quot;4&quot; Att5=&quot;5&quot;/&gt;  \n\nDim atList = From at In root.Attributes _  \n             Where at.Value &gt;= 3 _  \n             Select at  \n\natList.Remove()  \n\nConsole.WriteLine(root)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; /&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_Extensions_Remove__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Xml_Linq_Extensions_Remove_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Removes every node in the source collection from its parent node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Remove&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contains the source collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses snapshot semantics—that is, it copies the attributes in the source collection to a <code>List&lt;T&gt;</code> before disconnecting them from their parents. This is required to avoid issues with mixed imperative/declarative code. For more information, see <a href=\"../Topic/Mixed%20Declarative%20Code-Imperative%20Code%20Bugs%20(LINQ%20to%20XML).md\" data-linktype=\"relative-path\">Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves a collection of elements. It then calls this method to remove the elements from their parent element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Data&quot;, 1),  \n    new XElement(&quot;Data&quot;, 2),  \n    new XElement(&quot;Data&quot;, 3),  \n    new XElement(&quot;Data&quot;, 4),  \n    new XElement(&quot;Data&quot;, 5)  \n);  \n\nIEnumerable&lt;XElement&gt; elList =  \n    from el in root.Elements()  \n    where (int)el &gt;= 3  \n    select el;  \n\nelList.Remove();  \n\nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _  \n    &lt;Root&gt;  \n        &lt;Data&gt;1&lt;/Data&gt;  \n        &lt;Data&gt;2&lt;/Data&gt;  \n        &lt;Data&gt;3&lt;/Data&gt;  \n        &lt;Data&gt;4&lt;/Data&gt;  \n        &lt;Data&gt;5&lt;/Data&gt;  \n    &lt;/Root&gt;  \n\nDim elList = From el In root.Elements _  \n             Where el.Value &gt;= 3 _  \n             Select el  \n\nelList.Remove()  \n\nConsole.WriteLine(root)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root&gt;  \n  &lt;Data&gt;1&lt;/Data&gt;  \n  &lt;Data&gt;2&lt;/Data&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.Extensions.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.Extensions.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Ancestors&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.AncestorsAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.DescendantNodes&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.DescendantNodesAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Descendants&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.DescendantsAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Elements&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.InDocumentOrder&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Nodes&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Remove\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.Extensions.Remove&lt;T&gt;\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d5377dbc-6527-fe80-13fd-76da2707c833\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains the LINQ to XML extension methods.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.Extensions\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.Extensions.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.Extensions.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.Extensions","System.Xml.Linq.Extensions.Ancestors<T>","System.Xml.Linq.Extensions.AncestorsAndSelf","System.Xml.Linq.Extensions.Attributes","System.Xml.Linq.Extensions.DescendantNodes<T>","System.Xml.Linq.Extensions.DescendantNodesAndSelf","System.Xml.Linq.Extensions.Descendants<T>","System.Xml.Linq.Extensions.DescendantsAndSelf","System.Xml.Linq.Extensions.Elements<T>","System.Xml.Linq.Extensions.InDocumentOrder<T>","System.Xml.Linq.Extensions.Nodes<T>","System.Xml.Linq.Extensions.Remove","System.Xml.Linq.Extensions.Remove<T>"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.Extensions","System::Xml::Linq::Extensions","System.Xml.Linq.Extensions.Ancestors``1","System::Xml::Linq::Extensions::Ancestors``1","System.Xml.Linq.Extensions.AncestorsAndSelf","System::Xml::Linq::Extensions::AncestorsAndSelf","System.Xml.Linq.Extensions.Attributes","System::Xml::Linq::Extensions::Attributes","System.Xml.Linq.Extensions.DescendantNodes``1","System::Xml::Linq::Extensions::DescendantNodes``1","System.Xml.Linq.Extensions.DescendantNodesAndSelf","System::Xml::Linq::Extensions::DescendantNodesAndSelf","System.Xml.Linq.Extensions.Descendants``1","System::Xml::Linq::Extensions::Descendants``1","System.Xml.Linq.Extensions.DescendantsAndSelf","System::Xml::Linq::Extensions::DescendantsAndSelf","System.Xml.Linq.Extensions.Elements``1","System::Xml::Linq::Extensions::Elements``1","System.Xml.Linq.Extensions.InDocumentOrder``1","System::Xml::Linq::Extensions::InDocumentOrder``1","System.Xml.Linq.Extensions.Nodes``1","System::Xml::Linq::Extensions::Nodes``1","System.Xml.Linq.Extensions.Remove","System::Xml::Linq::Extensions::Remove","System.Xml.Linq.Extensions.Remove``1","System::Xml::Linq::Extensions::Remove``1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d5377dbc-6527-fe80-13fd-76da2707c833","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/Extensions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Extensions class | Microsoft Docs","_op_ogTitle":"Extensions class","description":"Contains the LINQ to XML extension methods.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.Extensions","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.extensions","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.extensions","fileRelativePath":"System.Xml.Linq.Extensions.html"},"themesRelativePathToOutputRoot":"_themes/"}