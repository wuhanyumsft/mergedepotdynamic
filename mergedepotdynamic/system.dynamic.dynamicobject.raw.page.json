{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DynamicObject</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">DynamicObject</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <code>DynamicObject</code> class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.  </p>\n<p> This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like <code>Scriptobj.SetProperty(&quot;Count&quot;, 1)</code>, you can provide the ability to use much simpler syntax, like <code>scriptobj.Count = 1</code>.  </p>\n<p> You cannot directly create an instance of the <code>DynamicObject</code> class. To implement the dynamic behavior, you may want to inherit from the <code>DynamicObject</code> class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods.  </p>\n<p> In C#, to enable dynamic behavior for instances of classes derived from the <code>DynamicObject</code> class, you must use the <code>dynamic</code> keyword. For more information, see <a href=\"../Topic/Using%20Type%20dynamic%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Using Type dynamic</a>.  </p>\n<p> In Visual Basic, dynamic operations are supported by late binding. For more information, see <a href=\"../Topic/Early%20and%20Late%20Binding%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Early and Late Binding</a>.  </p>\n<p> The following code example demonstrates how to create an instance of a class that is derived from the <code>DynamicObject</code> class.  </p>\n<pre><code class=\"lang-c#\">public class SampleDynamicObject : DynamicObject {}  \n//...  \ndynamic sampleObject = new SampleDynamicObject ();  \n</code></pre><pre><code class=\"lang-vb#\">Public Class SampleDynamicObject   \n    Inherits DynamicObject  \n&#39;...  \nDim sampleObject As Object = New SampleDynamicObject()  \n</code></pre><p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method.  </p>\n<p> The <code>DynamicObject</code> class implements the DLR interface <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a>, which enables you to share instances of the <code>DynamicObject</code> class between languages that support the DLR interoperability model. For example, you can create an instance of the <code>DynamicObject</code> class in C# and then pass it to an IronPython function. For more information, see <a href=\"../Topic/Dynamic%20Language%20Runtime%20Overview.md\" data-linktype=\"relative-path\">Dynamic Language Runtime Overview</a> and documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <a class=\"xref\" href=\"system.dynamic.expandoobject\" data-linktype=\"relative-path\">ExpandoObject</a> class.  </p>\n<p> If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> interface.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DynamicObject()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Enables derived types to initialize a new instance of the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected DynamicObject ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You cannot directly create an instance of the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. To implement dynamic behavior, you have to inherit from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class and override necessary methods.  </p>\n<p> In C#, to enable dynamic behavior for instances of the classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, you must use the <code>dynamic</code> keyword. For more information, see <a href=\"../Topic/Using%20Type%20dynamic%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Using Type dynamic</a>.  </p>\n<p> In Visual Basic, dynamic operations are supported by late binding. For more information, see <a href=\"../Topic/Early%20and%20Late%20Binding%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Early and Late Binding</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_GetDynamicMemberNames\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDynamicMemberNames()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the enumeration of all dynamic member names.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A sequence that contains dynamic member names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method exists for debugging purposes only.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_GetMetaObject_System_Linq_Expressions_Expression_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMetaObject(Expression)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides a <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The expression that represents <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> to dispatch to the dynamic virtual methods.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object of the <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryBinaryOperation_System_Dynamic_BinaryOperationBinder_System_Object_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryBinaryOperation(BinaryOperationBinder,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides implementation for binary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.binaryoperationbinder\" data-linktype=\"relative-path\">BinaryOperationBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the binary operation. The <code>binder.Operation</code> property returns an <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <code>DynamicObject</code> class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <code>DynamicObject</code> class, <code>arg</code> is equal to <code>second</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the binary operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have binary operations such as addition or multiplication. For example, if the TryBinaryOperation method is overridden, it is automatically invoked for statements like <code>sum = first + second</code> or <code>multiply = first*second</code>, where <code>first</code> is derived from the <code>DynamicObject</code> class.  </p>\n<p> You can get information about the type of the binary operation by using the <code>Operation</code> property of the <code>binder</code> parameter.  </p>\n<p> If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, see documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>C#</th>\n<th>Visual Basic</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Add</code></td>\n<td>An addition operation without overflow checking, for numeric operands.</td>\n<td><code>a + b</code></td>\n<td><code>a + b</code></td>\n</tr>\n<tr>\n<td><code>AddAssign</code></td>\n<td>An addition compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a += b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>And</code></td>\n<td>A bitwise <code>AND</code> operation.</td>\n<td><code>a &amp; b</code></td>\n<td><code>a And b</code></td>\n</tr>\n<tr>\n<td><code>AndAssign</code></td>\n<td>A bitwise <code>AND</code> compound assignment operation.</td>\n<td><code>a &amp;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Divide</code></td>\n<td>An arithmetic division operation.</td>\n<td><code>a / b</code></td>\n<td><code>a / b</code></td>\n</tr>\n<tr>\n<td><code>DivideAssign</code></td>\n<td>An arithmetic division compound assignment operation.</td>\n<td><code>a /= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>ExclusiveOr</code></td>\n<td>A bitwise <code>XOR</code> operation.</td>\n<td><code>a ^ b</code></td>\n<td><code>a Xor b</code></td>\n</tr>\n<tr>\n<td><code>ExclusiveOrAssign</code></td>\n<td>A bitwise <code>XOR</code> compound assignment operation.</td>\n<td><code>a ^= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>GreaterThan</code></td>\n<td>A &quot;greater than&quot; comparison.</td>\n<td><code>a &gt; b</code></td>\n<td><code>a &gt; b</code></td>\n</tr>\n<tr>\n<td><code>GreaterThanOrEqual</code></td>\n<td>A &quot;greater than or equal to&quot; comparison.</td>\n<td><code>a &gt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>LeftShift</code></td>\n<td>A bitwise left-shift operation.</td>\n<td><code>a &lt;&lt; b</code></td>\n<td><code>a &lt;&lt; b</code></td>\n</tr>\n<tr>\n<td><code>LeftShiftAssign</code></td>\n<td>A bitwise left-shift compound assignment operation.</td>\n<td><code>a &lt;&lt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>LessThan</code></td>\n<td>A &quot;less than&quot; comparison.</td>\n<td><code>a &lt; b</code></td>\n<td><code>a &lt; b</code></td>\n</tr>\n<tr>\n<td><code>LessThanOrEqual</code></td>\n<td>A &quot;less than or equal to&quot; comparison.</td>\n<td><code>a &lt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Modulo</code></td>\n<td>An arithmetic remainder operation.</td>\n<td><code>a % b</code></td>\n<td><code>a Mod b</code></td>\n</tr>\n<tr>\n<td><code>ModuloAssign</code></td>\n<td>An arithmetic remainder compound assignment operation.</td>\n<td><code>a %= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Multiply</code></td>\n<td>A multiplication operation without overflow checking, for numeric operands.</td>\n<td><code>a * b</code></td>\n<td><code>a * b</code></td>\n</tr>\n<tr>\n<td><code>MultiplyAssign</code></td>\n<td>A multiplication compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a *= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>NotEqual</code></td>\n<td>An inequality comparison.</td>\n<td><code>a != b</code></td>\n<td><code>a &lt;&gt; b</code></td>\n</tr>\n<tr>\n<td><code>Or</code></td>\n<td>A bitwise or logical <code>OR</code> operation.</td>\n<td><code>a &amp;#124; b</code></td>\n<td><code>a Or b</code></td>\n</tr>\n<tr>\n<td><code>OrAssign</code></td>\n<td>A bitwise or logical <code>OR</code> compound assignment.</td>\n<td><code>a &amp;#124;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Power</code></td>\n<td>A mathematical operation of raising a number to a power.</td>\n<td>Not supported.</td>\n<td><code>a ^ b</code></td>\n</tr>\n<tr>\n<td><code>RightShift</code></td>\n<td>A bitwise right-shift operation.</td>\n<td><code>a &gt;&gt; b</code></td>\n<td><code>a &gt;&gt; b</code></td>\n</tr>\n<tr>\n<td><code>RightShiftAssign</code></td>\n<td>A bitwise right-shift compound assignment operation.</td>\n<td><code>a &gt;&gt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Subtract</code></td>\n<td>A subtraction operation without overflow checking, for numeric operands.</td>\n<td><code>a - b</code></td>\n<td><code>a - b</code></td>\n</tr>\n<tr>\n<td><code>SubtractAssign</code></td>\n<td>A subtraction compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a -= b</code></td>\n<td>Not supported.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> To implement <code>OrElse</code> (<code>a || b</code>) and <code>AndAlso</code> (<code>a &amp;&amp; b</code>) operations for dynamic objects in C#, you may want to implement both the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryUnaryOperation_\" data-linktype=\"relative-path\">TryUnaryOperation</a> method and the TryBinaryOperation method.  </p>\n<p> The <code>OrElse</code> operation consists of the unary <code>IsTrue</code> operation and the binary <code>Or</code> operation. The <code>Or</code> operation is performed only if the result of the <code>IsTrue</code> operation is <code>false</code>.  </p>\n<p> The <code>AndAlso</code> operation consists of the unary <code>IsFalse</code> operation and the binary <code>And</code> operation. The <code>And</code> operation is performed only if the result of the <code>IsFalse</code> operation is <code>false</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryConvert_System_Dynamic_ConvertBinder_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryConvert(ConvertBinder,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides implementation for type conversion operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.convertbinder\" data-linktype=\"relative-path\">ConvertBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Type</code> returns the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns <code>true</code> for explicit conversion and <code>false</code> for implicit conversion.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the type conversion operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.  </p>\n<p> In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <a class=\"xref\" href=\"microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_CTypeDynamic_\" data-linktype=\"relative-path\">CTypeDynamic</a> or <a class=\"xref\" href=\"microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_CTypeDynamic_\" data-linktype=\"relative-path\">CTypeDynamic</a> functions.  </p>\n<codecontentplaceholder>0</codecontentplaceholder><br><codecontentplaceholder>1</codecontentplaceholder>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryCreateInstance_System_Dynamic_CreateInstanceBinder_System_Object___System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryCreateInstance(CreateInstanceBinder,Object[],Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.createinstancebinder\" data-linktype=\"relative-path\">CreateInstanceBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the initialization operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the initialization.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like <code>dynamic new</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryDeleteIndex_System_Dynamic_DeleteIndexBinder_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryDeleteIndex(DeleteIndexBinder,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.deleteindexbinder\" data-linktype=\"relative-path\">DeleteIndexBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the deletion.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The indexes to be deleted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as <code>del sampleObject[1,2]</code> in Python.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryDeleteMember_System_Dynamic_DeleteMemberBinder_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryDeleteMember(DeleteMemberBinder)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.deletememberbinder\" data-linktype=\"relative-path\">DeleteMemberBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the deletion.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as <code>del sampleObject.SampleMember</code> in Python.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryGetIndex_System_Dynamic_GetIndexBinder_System_Object___System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryGetIndex(GetIndexBinder,Object[],Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that get a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for indexing operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.getindexbinder\" data-linktype=\"relative-path\">GetIndexBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the <code>DynamicObject</code> class, <code>indexes[0]</code> is equal to 3.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the index operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3]</code> in C# or <code>sampleObject(3)</code> in Visual Basic, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryGetMember_System_Dynamic_GetMemberBinder_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryGetMember(GetMemberBinder,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that get member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.getmemberbinder\" data-linktype=\"relative-path\">GetMemberBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleProperty&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the get operation. For example, if the method is called for a property, you can assign the property value to <code>result</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> This method is called when you have statements like <code>Console.WriteLine(sampleObject.SampleProperty)</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryInvoke_System_Dynamic_InvokeBinder_System_Object___System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryInvoke(InvokeBinder,Object[],Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that invoke an object. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.invokebinder\" data-linktype=\"relative-path\">InvokeBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the invoke operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the object invocation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject(100)</code>, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <code>sampleObject(100)</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryInvokeMember_System_Dynamic_InvokeMemberBinder_System_Object___System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryInvokeMember(InvokeMemberBinder,Object[],Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that invoke a member. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.invokememberbinder\" data-linktype=\"relative-path\">InvokeMemberBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleMethod&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the member invocation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you perform an operation like <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <code>DynamicObject</code> class.  </p>\n<p> You can also add your own methods to classes that are derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. For example, if you override the TryInvokeMember method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the TryInvokeMember implementation.  </p>\n<p> This method does not support <code>ref</code> and <code>out</code> parameters. All parameters in the <code>args</code> array are passed by value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TrySetIndex_System_Dynamic_SetIndexBinder_System_Object___System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrySetIndex(SetIndexBinder,Object[],Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that set a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.setindexbinder\" data-linktype=\"relative-path\">SetIndexBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>indexes[0]</code> is equal to 3.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>value</code> is equal to 10.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3] = 10</code> in C# or <code>sampleObject(3) = 10</code> in Visual Basic, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TrySetMember_System_Dynamic_SetMemberBinder_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrySetMember(SetMemberBinder,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides the implementation for operations that set member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.setmemberbinder\" data-linktype=\"relative-path\">SetMemberBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleProperty&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to set to the member. For example, for <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, the <code>value</code> is &quot;Test&quot;.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have statements like <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class that is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the TrySetMember method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the TrySetMember method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Dynamic_DynamicObject_TryUnaryOperation_System_Dynamic_UnaryOperationBinder_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryUnaryOperation(UnaryOperationBinder,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides implementation for unary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>binder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.unaryoperationbinder\" data-linktype=\"relative-path\">UnaryOperationBinder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Provides information about the unary operation. The <code>binder.Operation</code> property returns an <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the <code>DynamicObject</code> class, <code>binder.Operation</code> returns &quot;Negate&quot;.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the unary operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have unary operations such as negation, increment, or decrement. For example, if the TryUnaryOperation method is overridden, this method is automatically invoked for statements like <code>negativeNumber = -number</code>, where <code>number</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can get information about the type of the unary operation by using the <code>Operation</code> property of the <code>binder</code> parameter.  </p>\n<p> If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, see documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>C#</th>\n<th>Visual Basic</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Decrement</code></td>\n<td>A unary decrement operation.</td>\n<td><code>a--</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Increment</code></td>\n<td>A unary increment operation.</td>\n<td><code>a++</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Negate</code></td>\n<td>An arithmetic negation.</td>\n<td><code>-a</code></td>\n<td><code>-a</code></td>\n</tr>\n<tr>\n<td><code>Not</code></td>\n<td>A logical negation.</td>\n<td><code>!a</code></td>\n<td><code>Not a</code></td>\n</tr>\n<tr>\n<td><code>OnesComplement</code></td>\n<td>A ones complement.</td>\n<td><code>~a</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>IsFalse</code></td>\n<td>A false condition value.</td>\n<td><code>a &amp;&amp; b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>IsTrue</code></td>\n<td>A true condition value.</td>\n<td><code>a &amp;#124;&amp;#124; b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>UnaryPlus</code></td>\n<td>A unary plus.</td>\n<td><code>+a</code></td>\n<td><code>+a</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> To implement <code>OrElse</code> (<code>a || b</code>) and <code>AndAlso</code> (<code>a &amp;&amp; b</code>) operations for dynamic objects in C#, you may want to implement both the TryUnaryOperation method and the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryBinaryOperation_\" data-linktype=\"relative-path\">TryBinaryOperation</a> method.  </p>\n<p> The <code>OrElse</code> operation consists of the unary <code>IsTrue</code> operation and the binary <code>Or</code> operation. The <code>Or</code> operation is performed only if the result of the <code>IsTrue</code> operation is <code>false</code>.  </p>\n<p> The <code>AndAlso</code> operation consists of the unary <code>IsFalse</code> operation and the binary <code>And</code> operation. The <code>And</code> operation is performed only if the result of the <code>IsFalse</code> operation is <code>false</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Dynamic.DynamicObject.yml\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject..ctor\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.GetDynamicMemberNames\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.GetMetaObject\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryBinaryOperation\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryConvert\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryCreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryDeleteIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryDeleteMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryGetIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryGetMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryInvoke\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryInvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TrySetIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TrySetMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryUnaryOperation\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-20 08:28 AM\">\r\n<meta name=\"document_id\" content=\"8a2df2c6-a0e7-78eb-f5d3-834d70d124c1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Dynamic/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Dynamic.DynamicObject\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Dynamic.DynamicObject.yml","open_to_public_contributors":true,"api_name":["System.Dynamic.DynamicObject","System.Dynamic.DynamicObject..ctor","System.Dynamic.DynamicObject.GetDynamicMemberNames","System.Dynamic.DynamicObject.GetMetaObject","System.Dynamic.DynamicObject.TryBinaryOperation","System.Dynamic.DynamicObject.TryConvert","System.Dynamic.DynamicObject.TryCreateInstance","System.Dynamic.DynamicObject.TryDeleteIndex","System.Dynamic.DynamicObject.TryDeleteMember","System.Dynamic.DynamicObject.TryGetIndex","System.Dynamic.DynamicObject.TryGetMember","System.Dynamic.DynamicObject.TryInvoke","System.Dynamic.DynamicObject.TryInvokeMember","System.Dynamic.DynamicObject.TrySetIndex","System.Dynamic.DynamicObject.TrySetMember","System.Dynamic.DynamicObject.TryUnaryOperation"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Dynamic.DynamicObject","System::Dynamic::DynamicObject","System.Dynamic.DynamicObject.#ctor","System::Dynamic::DynamicObject::#ctor","System.Dynamic.DynamicObject.GetDynamicMemberNames","System::Dynamic::DynamicObject::GetDynamicMemberNames","System.Dynamic.DynamicObject.GetMetaObject","System::Dynamic::DynamicObject::GetMetaObject","System.Dynamic.DynamicObject.TryBinaryOperation","System::Dynamic::DynamicObject::TryBinaryOperation","System.Dynamic.DynamicObject.TryConvert","System::Dynamic::DynamicObject::TryConvert","System.Dynamic.DynamicObject.TryCreateInstance","System::Dynamic::DynamicObject::TryCreateInstance","System.Dynamic.DynamicObject.TryDeleteIndex","System::Dynamic::DynamicObject::TryDeleteIndex","System.Dynamic.DynamicObject.TryDeleteMember","System::Dynamic::DynamicObject::TryDeleteMember","System.Dynamic.DynamicObject.TryGetIndex","System::Dynamic::DynamicObject::TryGetIndex","System.Dynamic.DynamicObject.TryGetMember","System::Dynamic::DynamicObject::TryGetMember","System.Dynamic.DynamicObject.TryInvoke","System::Dynamic::DynamicObject::TryInvoke","System.Dynamic.DynamicObject.TryInvokeMember","System::Dynamic::DynamicObject::TryInvokeMember","System.Dynamic.DynamicObject.TrySetIndex","System::Dynamic::DynamicObject::TrySetIndex","System.Dynamic.DynamicObject.TrySetMember","System::Dynamic::DynamicObject::TrySetMember","System.Dynamic.DynamicObject.TryUnaryOperation","System::Dynamic::DynamicObject::TryUnaryOperation"],"dev_langs":["csharp"],"updated_at":"2017-03-20 08:28 AM","document_id":"8a2df2c6-a0e7-78eb-f5d3-834d70d124c1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Dynamic/DynamicObject.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DynamicObject class | Microsoft Docs","_op_ogTitle":"DynamicObject class","description":"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\n","toc_asset_id":"_splitted/System.Dynamic/toc.json","toc_rel":"_splitted/System.Dynamic/toc.json","source_url":"","ms.assetid":"System.Dynamic.DynamicObject","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.dynamic.dynamicobject","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.dynamic.dynamicobject","fileRelativePath":"System.Dynamic.DynamicObject.html"},"themesRelativePathToOutputRoot":"_themes/"}