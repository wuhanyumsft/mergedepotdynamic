{"content":"    \r\n    <h1 id=\"System_Dynamic_DynamicObject\">\r\n      <span class=\"lang-csharp\">DynamicObject</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DynamicObject</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <code>DynamicObject</code> class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.  </p>\n<p> This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like <code>Scriptobj.SetProperty(&quot;Count&quot;, 1)</code>, you can provide the ability to use much simpler syntax, like <code>scriptobj.Count = 1</code>.  </p>\n<p> You cannot directly create an instance of the <code>DynamicObject</code> class. To implement the dynamic behavior, you may want to inherit from the <code>DynamicObject</code> class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods.  </p>\n<p> In C#, to enable dynamic behavior for instances of classes derived from the <code>DynamicObject</code> class, you must use the <code>dynamic</code> keyword. For more information, see <a href=\"../Topic/Using%20Type%20dynamic%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Using Type dynamic</a>.  </p>\n<p> In Visual Basic, dynamic operations are supported by late binding. For more information, see <a href=\"../Topic/Early%20and%20Late%20Binding%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Early and Late Binding</a>.  </p>\n<p> The following code example demonstrates how to create an instance of a class that is derived from the <code>DynamicObject</code> class.  </p>\n<pre><code class=\"lang-c#\">public class SampleDynamicObject : DynamicObject {}  \n//...  \ndynamic sampleObject = new SampleDynamicObject ();  \n</code></pre><pre><code class=\"lang-vb#\">Public Class SampleDynamicObject   \n    Inherits DynamicObject  \n&#39;...  \nDim sampleObject As Object = New SampleDynamicObject()  \n</code></pre><p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method.  </p>\n<p> The <code>DynamicObject</code> class implements the DLR interface <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a>, which enables you to share instances of the <code>DynamicObject</code> class between languages that support the DLR interoperability model. For example, you can create an instance of the <code>DynamicObject</code> class in C# and then pass it to an IronPython function. For more information, see <a href=\"../Topic/Dynamic%20Language%20Runtime%20Overview.md\" data-linktype=\"relative-path\">Dynamic Language Runtime Overview</a> and documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <a class=\"xref\" href=\"system.dynamic.expandoobject\" data-linktype=\"relative-path\">ExpandoObject</a> class.  </p>\n<p> If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> interface.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject__ctor\" data-linktype=\"self-bookmark\">DynamicObject()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables derived types to initialize a new instance of the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_GetDynamicMemberNames\" data-linktype=\"self-bookmark\">GetDynamicMemberNames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the enumeration of all dynamic member names.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_GetMetaObject_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">GetMetaObject(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryBinaryOperation_System_Dynamic_BinaryOperationBinder_System_Object_System_Object__\" data-linktype=\"self-bookmark\">TryBinaryOperation(BinaryOperationBinder,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides implementation for binary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryConvert_System_Dynamic_ConvertBinder_System_Object__\" data-linktype=\"self-bookmark\">TryConvert(ConvertBinder,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides implementation for type conversion operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryCreateInstance_System_Dynamic_CreateInstanceBinder_System_Object___System_Object__\" data-linktype=\"self-bookmark\">TryCreateInstance(CreateInstanceBinder,Object[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryDeleteIndex_System_Dynamic_DeleteIndexBinder_System_Object___\" data-linktype=\"self-bookmark\">TryDeleteIndex(DeleteIndexBinder,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryDeleteMember_System_Dynamic_DeleteMemberBinder_\" data-linktype=\"self-bookmark\">TryDeleteMember(DeleteMemberBinder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryGetIndex_System_Dynamic_GetIndexBinder_System_Object___System_Object__\" data-linktype=\"self-bookmark\">TryGetIndex(GetIndexBinder,Object[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that get a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for indexing operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryGetMember_System_Dynamic_GetMemberBinder_System_Object__\" data-linktype=\"self-bookmark\">TryGetMember(GetMemberBinder,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that get member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryInvoke_System_Dynamic_InvokeBinder_System_Object___System_Object__\" data-linktype=\"self-bookmark\">TryInvoke(InvokeBinder,Object[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that invoke an object. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryInvokeMember_System_Dynamic_InvokeMemberBinder_System_Object___System_Object__\" data-linktype=\"self-bookmark\">TryInvokeMember(InvokeMemberBinder,Object[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that invoke a member. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TrySetIndex_System_Dynamic_SetIndexBinder_System_Object___System_Object_\" data-linktype=\"self-bookmark\">TrySetIndex(SetIndexBinder,Object[],Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that set a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TrySetMember_System_Dynamic_SetMemberBinder_System_Object_\" data-linktype=\"self-bookmark\">TrySetMember(SetMemberBinder,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the implementation for operations that set member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Dynamic_DynamicObject_TryUnaryOperation_System_Dynamic_UnaryOperationBinder_System_Object__\" data-linktype=\"self-bookmark\">TryUnaryOperation(UnaryOperationBinder,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides implementation for unary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject__ctor\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicObject()</div>        \r\n          </div>\r\n    \r\n            <p>Enables derived types to initialize a new instance of the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected DynamicObject ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot directly create an instance of the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. To implement dynamic behavior, you have to inherit from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class and override necessary methods.  </p>\n<p> In C#, to enable dynamic behavior for instances of the classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, you must use the <code>dynamic</code> keyword. For more information, see <a href=\"../Topic/Using%20Type%20dynamic%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Using Type dynamic</a>.  </p>\n<p> In Visual Basic, dynamic operations are supported by late binding. For more information, see <a href=\"../Topic/Early%20and%20Late%20Binding%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Early and Late Binding</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to create an instance of classes that are derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<pre><code class=\"lang-c#\">public class SampleDynamicObject : DynamicObject {}  \n//...  \ndynamic sampleObject = new SampleDynamicObject ();  \n</code></pre><pre><code class=\"lang-vb#\">Public Class SampleDynamicObject   \n    Inherits DynamicObject  \n&#39;...  \nDim sampleObject As Object = New SampleDynamicObject()  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_GetDynamicMemberNames\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_GetDynamicMemberNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDynamicMemberNames()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the enumeration of all dynamic member names.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains dynamic member names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method exists for debugging purposes only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_GetMetaObject_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_GetMetaObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMetaObject(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Provides a <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expression that represents <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> to dispatch to the dynamic virtual methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a></div>\r\n                  </div>\r\n                  <p>An object of the <a class=\"xref\" href=\"system.dynamic.dynamicmetaobject\" data-linktype=\"relative-path\">DynamicMetaObject</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryBinaryOperation_System_Dynamic_BinaryOperationBinder_System_Object_System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryBinaryOperation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryBinaryOperation(BinaryOperationBinder,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides implementation for binary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.binaryoperationbinder\" data-linktype=\"relative-path\">BinaryOperationBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the binary operation. The <code>binder.Operation</code> property returns an <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <code>DynamicObject</code> class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <code>DynamicObject</code> class, <code>arg</code> is equal to <code>second</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the binary operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have binary operations such as addition or multiplication. For example, if the TryBinaryOperation method is overridden, it is automatically invoked for statements like <code>sum = first + second</code> or <code>multiply = first*second</code>, where <code>first</code> is derived from the <code>DynamicObject</code> class.  </p>\n<p> You can get information about the type of the binary operation by using the <code>Operation</code> property of the <code>binder</code> parameter.  </p>\n<p> If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, see documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>C#</th>\n<th>Visual Basic</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Add</code></td>\n<td>An addition operation without overflow checking, for numeric operands.</td>\n<td><code>a + b</code></td>\n<td><code>a + b</code></td>\n</tr>\n<tr>\n<td><code>AddAssign</code></td>\n<td>An addition compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a += b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>And</code></td>\n<td>A bitwise <code>AND</code> operation.</td>\n<td><code>a &amp; b</code></td>\n<td><code>a And b</code></td>\n</tr>\n<tr>\n<td><code>AndAssign</code></td>\n<td>A bitwise <code>AND</code> compound assignment operation.</td>\n<td><code>a &amp;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Divide</code></td>\n<td>An arithmetic division operation.</td>\n<td><code>a / b</code></td>\n<td><code>a / b</code></td>\n</tr>\n<tr>\n<td><code>DivideAssign</code></td>\n<td>An arithmetic division compound assignment operation.</td>\n<td><code>a /= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>ExclusiveOr</code></td>\n<td>A bitwise <code>XOR</code> operation.</td>\n<td><code>a ^ b</code></td>\n<td><code>a Xor b</code></td>\n</tr>\n<tr>\n<td><code>ExclusiveOrAssign</code></td>\n<td>A bitwise <code>XOR</code> compound assignment operation.</td>\n<td><code>a ^= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>GreaterThan</code></td>\n<td>A &quot;greater than&quot; comparison.</td>\n<td><code>a &gt; b</code></td>\n<td><code>a &gt; b</code></td>\n</tr>\n<tr>\n<td><code>GreaterThanOrEqual</code></td>\n<td>A &quot;greater than or equal to&quot; comparison.</td>\n<td><code>a &gt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>LeftShift</code></td>\n<td>A bitwise left-shift operation.</td>\n<td><code>a &lt;&lt; b</code></td>\n<td><code>a &lt;&lt; b</code></td>\n</tr>\n<tr>\n<td><code>LeftShiftAssign</code></td>\n<td>A bitwise left-shift compound assignment operation.</td>\n<td><code>a &lt;&lt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>LessThan</code></td>\n<td>A &quot;less than&quot; comparison.</td>\n<td><code>a &lt; b</code></td>\n<td><code>a &lt; b</code></td>\n</tr>\n<tr>\n<td><code>LessThanOrEqual</code></td>\n<td>A &quot;less than or equal to&quot; comparison.</td>\n<td><code>a &lt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Modulo</code></td>\n<td>An arithmetic remainder operation.</td>\n<td><code>a % b</code></td>\n<td><code>a Mod b</code></td>\n</tr>\n<tr>\n<td><code>ModuloAssign</code></td>\n<td>An arithmetic remainder compound assignment operation.</td>\n<td><code>a %= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Multiply</code></td>\n<td>A multiplication operation without overflow checking, for numeric operands.</td>\n<td><code>a * b</code></td>\n<td><code>a * b</code></td>\n</tr>\n<tr>\n<td><code>MultiplyAssign</code></td>\n<td>A multiplication compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a *= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>NotEqual</code></td>\n<td>An inequality comparison.</td>\n<td><code>a != b</code></td>\n<td><code>a &lt;&gt; b</code></td>\n</tr>\n<tr>\n<td><code>Or</code></td>\n<td>A bitwise or logical <code>OR</code> operation.</td>\n<td><code>a &amp;#124; b</code></td>\n<td><code>a Or b</code></td>\n</tr>\n<tr>\n<td><code>OrAssign</code></td>\n<td>A bitwise or logical <code>OR</code> compound assignment.</td>\n<td><code>a &amp;#124;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Power</code></td>\n<td>A mathematical operation of raising a number to a power.</td>\n<td>Not supported.</td>\n<td><code>a ^ b</code></td>\n</tr>\n<tr>\n<td><code>RightShift</code></td>\n<td>A bitwise right-shift operation.</td>\n<td><code>a &gt;&gt; b</code></td>\n<td><code>a &gt;&gt; b</code></td>\n</tr>\n<tr>\n<td><code>RightShiftAssign</code></td>\n<td>A bitwise right-shift compound assignment operation.</td>\n<td><code>a &gt;&gt;= b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Subtract</code></td>\n<td>A subtraction operation without overflow checking, for numeric operands.</td>\n<td><code>a - b</code></td>\n<td><code>a - b</code></td>\n</tr>\n<tr>\n<td><code>SubtractAssign</code></td>\n<td>A subtraction compound assignment operation without overflow checking, for numeric operands.</td>\n<td><code>a -= b</code></td>\n<td>Not supported.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> To implement <code>OrElse</code> (<code>a || b</code>) and <code>AndAlso</code> (<code>a &amp;&amp; b</code>) operations for dynamic objects in C#, you may want to implement both the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryUnaryOperation_\" data-linktype=\"relative-path\">TryUnaryOperation</a> method and the TryBinaryOperation method.  </p>\n<p> The <code>OrElse</code> operation consists of the unary <code>IsTrue</code> operation and the binary <code>Or</code> operation. The <code>Or</code> operation is performed only if the result of the <code>IsTrue</code> operation is <code>false</code>.  </p>\n<p> The <code>AndAlso</code> operation consists of the unary <code>IsFalse</code> operation and the binary <code>And</code> operation. The <code>And</code> operation is performed only if the result of the <code>IsFalse</code> operation is <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.  </p>\n<p> The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. <code>DynamicNumber</code> overrides the TryBinaryOperation method to enable mathematical operations. It also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access to the elements.  </p>\n<p> In this example, only addition and subtraction operations are supported. If you try to write a statement like <code>resultNumber = firstNumber*secondNumber</code>, a run-time exception is thrown.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#2\">    &#39; Add Imports System.Linq.Expressions\n    &#39; to the beginning of the file.\n    &#39; The class derived from DynamicObject.\n    Public Class DynamicNumber\n        Inherits DynamicObject\n\n        &#39; The inner dictionary to store field names and values.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Get the property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n\n        End Function\n\n        &#39; Set the property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n\n        End Function\n\n        &#39; Perform the binary operation. \n        Public Overrides Function TryBinaryOperation(\n            ByVal binder As System.Dynamic.BinaryOperationBinder,\n            ByVal arg As Object, ByRef result As Object) As Boolean\n\n            &#39; The Textual property contains the textual representaion \n            &#39; of two numbers, in addition to the name of the binary operation.\n            Dim resultTextual As String =\n                dictionary(&quot;Textual&quot;) &amp; &quot; &quot; &amp;\n                binder.Operation.ToString() &amp; &quot; &quot; &amp;\n            CType(arg, DynamicNumber).dictionary(&quot;Textual&quot;)\n\n            Dim resultNumeric As Integer\n\n            &#39; Checking what type of operation is being performed.\n            Select Case binder.Operation\n                &#39; Proccessing mathematical addition (a + b).\n                Case ExpressionType.Add\n                    resultNumeric =\n                    CInt(dictionary(&quot;Numeric&quot;)) +\n                    CInt((CType(arg, DynamicNumber)).dictionary(&quot;Numeric&quot;))\n\n                    &#39; Processing mathematical substraction (a - b).\n                Case ExpressionType.Subtract\n                    resultNumeric =\n                    CInt(dictionary(&quot;Numeric&quot;)) -\n                    CInt((CType(arg, DynamicNumber)).dictionary(&quot;Numeric&quot;))\n\n                Case Else\n                    &#39; In case of any other binary operation,\n                    &#39; print out the type of operation and return false,\n                    &#39; which means that the language should determine \n                    &#39; what to do.\n                    &#39; (Usually the language just throws an exception.)\n                    Console.WriteLine(\n                        binder.Operation.ToString() &amp;\n                        &quot;: This binary operation is not implemented&quot;)\n                    result = Nothing\n                    Return False\n            End Select\n\n            Dim finalResult As Object = New DynamicNumber()\n            finalResult.Textual = resultTextual\n            finalResult.Numeric = resultNumeric\n            result = finalResult\n            Return True\n        End Function\n    End Class\n\n    Sub Test()\n        &#39; Creating the first dynamic number.\n        Dim firstNumber As Object = New DynamicNumber()\n\n        &#39; Creating properties and setting their values\n        &#39; for the first dynamic number. \n        &#39; The TrySetMember method is called.\n        firstNumber.Textual = &quot;One&quot;\n        firstNumber.Numeric = 1\n\n        &#39; Printing out properties. The TryGetMember method is called.\n        Console.WriteLine(\n            firstNumber.Textual &amp; &quot; &quot; &amp; firstNumber.Numeric)\n\n        &#39; Creating the second dynamic number.\n        Dim secondNumber As Object = New DynamicNumber()\n        secondNumber.Textual = &quot;Two&quot;\n        secondNumber.Numeric = 2\n        Console.WriteLine(\n            secondNumber.Textual &amp; &quot; &quot; &amp; secondNumber.Numeric)\n\n        Dim resultNumber As Object = New DynamicNumber()\n\n        &#39; Adding two numbers. TryBinaryOperation is called.\n        resultNumber = firstNumber + secondNumber\n        Console.WriteLine(\n            resultNumber.Textual &amp; &quot; &quot; &amp; resultNumber.Numeric)\n\n        &#39; Subtracting two numbers. TryBinaryOperation is called.\n        resultNumber = firstNumber - secondNumber\n        Console.WriteLine(\n            resultNumber.Textual &amp; &quot; &quot; &amp; resultNumber.Numeric)\n\n        &#39; The following statement produces a run-time exception\n        &#39; because the multiplication operation is not implemented.\n        &#39; resultNumber = firstNumber * secondNumber\n    End Sub\n\n    &#39; This code example produces the following output:\n\n    &#39; One 1\n    &#39; Two 2\n    &#39; One Add Two 3\n    &#39; One Subtract Two -1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#2\">    // Add using System.Linq.Expressions;\n    // to the beginning of the file.\n\n    // The class derived from DynamicObject.\n    public class DynamicNumber : DynamicObject\n    {\n        // The inner dictionary to store field names and values.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Get the property value.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Set the property value.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Perform the binary operation. \n        public override bool TryBinaryOperation(\n            BinaryOperationBinder binder, object arg, out object result)\n        {\n            // The Textual property contains the textual representaion \n            // of two numbers, in addition to the name \n            // of the binary operation.\n            string resultTextual =\n                dictionary[&quot;Textual&quot;].ToString() + &quot; &quot;\n                + binder.Operation + &quot; &quot; +\n                ((DynamicNumber)arg).dictionary[&quot;Textual&quot;].ToString();\n\n            int resultNumeric;\n\n            // Checking what type of operation is being performed.\n            switch (binder.Operation)\n            {\n                // Proccessing mathematical addition (a + b).\n                case ExpressionType.Add:\n                    resultNumeric =\n                        (int)dictionary[&quot;Numeric&quot;] +\n                        (int)((DynamicNumber)arg).dictionary[&quot;Numeric&quot;];\n                    break;\n\n                // Processing mathematical substraction (a - b).\n                case ExpressionType.Subtract:\n                    resultNumeric =\n                        (int)dictionary[&quot;Numeric&quot;] -\n                        (int)((DynamicNumber)arg).dictionary[&quot;Numeric&quot;];\n                    break;\n\n                // In case of any other binary operation,\n                // print out the type of operation and return false,\n                // which means that the language should determine \n                // what to do.\n                // (Usually the language just throws an exception.)\n                default:\n                    Console.WriteLine(\n                        binder.Operation +\n                        &quot;: This binary operation is not implemented&quot;);\n                    result = null;\n                    return false;\n            }\n\n            dynamic finalResult = new DynamicNumber();\n            finalResult.Textual = resultTextual;\n            finalResult.Numeric = resultNumeric;\n            result = finalResult;\n            return true;\n        }\n    }\n\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating the first dynamic number.\n            dynamic firstNumber = new DynamicNumber();\n\n            // Creating properties and setting their values\n            // for the first dynamic number.\n            // The TrySetMember method is called.\n            firstNumber.Textual = &quot;One&quot;;\n            firstNumber.Numeric = 1;\n\n            // Printing out properties. The TryGetMember method is called.\n            Console.WriteLine(\n                firstNumber.Textual + &quot; &quot; + firstNumber.Numeric);\n\n            // Creating the second dynamic number.\n            dynamic secondNumber = new DynamicNumber();\n            secondNumber.Textual = &quot;Two&quot;;\n            secondNumber.Numeric = 2;\n            Console.WriteLine(\n                secondNumber.Textual + &quot; &quot; + secondNumber.Numeric);\n\n\n            dynamic resultNumber = new DynamicNumber();\n\n            // Adding two numbers. The TryBinaryOperation is called.\n            resultNumber = firstNumber + secondNumber;\n\n            Console.WriteLine(\n                resultNumber.Textual + &quot; &quot; + resultNumber.Numeric);\n\n            // Subtracting two numbers. TryBinaryOperation is called.\n            resultNumber = firstNumber - secondNumber;\n\n            Console.WriteLine(\n                resultNumber.Textual + &quot; &quot; + resultNumber.Numeric);\n\n            // The following statement produces a run-time exception\n            // because the multiplication operation is not implemented.\n            // resultNumber = firstNumber * secondNumber;\n        }\n    }\n\n    // This code example produces the following output:\n\n    // One 1\n    // Two 2\n    // One Add Two 3\n    // One Subtract Two -1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryConvert_System_Dynamic_ConvertBinder_System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryConvert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryConvert(ConvertBinder,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides implementation for type conversion operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.convertbinder\" data-linktype=\"relative-path\">ConvertBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Type</code> returns the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns <code>true</code> for explicit conversion and <code>false</code> for implicit conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the type conversion operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.  </p>\n<p> In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <a class=\"xref\" href=\"microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_CTypeDynamic_\" data-linktype=\"relative-path\">CTypeDynamic</a> or <a class=\"xref\" href=\"microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_CTypeDynamic_\" data-linktype=\"relative-path\">CTypeDynamic</a> functions.  </p>\n<codecontentplaceholder>0</codecontentplaceholder><br><codecontentplaceholder>1</codecontentplaceholder>\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.  </p>\n<p> The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. <code>DynamicNumber</code> overrides the TryConvert method to enable type conversion. It also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access to the data elements.  </p>\n<p> In this example, only conversion to strings and integers is supported. If you try to convert an object to any other type, a run-time exception is thrown.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#3\">    &#39; Add Imports System.Linq.Expressions\n    &#39; to the beginning of the file.\n    &#39; The class derived from DynamicObject.\n    Public Class DynamicNumber\n        Inherits DynamicObject\n\n        &#39; The inner dictionary to store field names and values.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Get the property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n\n        End Function\n\n        &#39; Set the property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n\n        End Function\n\n        Public Overrides Function TryConvert(ByVal binder As System.Dynamic.ConvertBinder, ByRef result As Object) As Boolean\n            &#39; Converting to string. \n            If binder.Type = GetType(String) Then\n                result = dictionary(&quot;Textual&quot;)\n                Return True\n            End If\n\n            &#39; Converting to integer.\n            If binder.Type = GetType(Integer) Then\n                result = dictionary(&quot;Numeric&quot;)\n                Return True\n            End If\n            &#39; In case of any other type, the binder \n            &#39; attempts to perform the conversion itself.\n            &#39; In most cases, a run-time exception is thrown.\n            Return MyBase.TryConvert(binder, result)\n        End Function\n    End Class\n\n    Sub Main()\n        &#39; Creating the first dynamic number.\n        Dim number As Object = New DynamicNumber()\n\n        &#39; Creating properties and setting their values\n        &#39; for the dynamic number.\n        &#39; The TrySetMember method is called.\n        number.Textual = &quot;One&quot;\n        number.Numeric = 1\n\n\n        &#39; Explicit conversion to string.\n        Dim testString = CTypeDynamic(Of String)(number)\n        Console.WriteLine(testString)\n\n        &#39; Explicit conversion to integer.\n        Dim testInteger = CTypeDynamic(number, GetType(Integer))\n        Console.WriteLine(testInteger)\n\n        &#39; The following statement produces a run-time exception\n        &#39; because the conversion to double is not implemented.\n        &#39; Dim testDouble = CTypeDynamic(Of Double)(number)\n\n    End Sub\n    &#39; This example has the following output:\n\n    &#39; One\n    &#39; 1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#3\">    // The class derived from DynamicObject.\n    public class DynamicNumber : DynamicObject\n    {\n        // The inner dictionary.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Getting a property.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Setting a property.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Converting an object to a specified type.\n        public override bool TryConvert(\n            ConvertBinder binder, out object result)\n        {\n            // Converting to string. \n            if (binder.Type == typeof(String))\n            {\n                result = dictionary[&quot;Textual&quot;];\n                return true;\n            }\n\n            // Converting to integer.\n            if (binder.Type == typeof(int))\n            {\n                result = dictionary[&quot;Numeric&quot;];\n                return true;\n            }\n\n            // In case of any other type, the binder \n            // attempts to perform the conversion itself.\n            // In most cases, a run-time exception is thrown.\n            return base.TryConvert(binder, out result);\n        }\n    }\n\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating the first dynamic number.\n            dynamic number = new DynamicNumber();\n\n            // Creating properties and setting their values\n            // for the dynamic number.\n            // The TrySetMember method is called.\n            number.Textual = &quot;One&quot;;\n            number.Numeric = 1;\n\n            // Implicit conversion to integer.\n            int testImplicit = number;\n\n            // Explicit conversion to string.\n            string testExplicit = (String)number;\n\n            Console.WriteLine(testImplicit);\n            Console.WriteLine(testExplicit);\n\n            // The following statement produces a run-time exception\n            // because the conversion to double is not implemented.\n            // double test = number;\n        }\n    }\n\n    // This example has the following output:\n\n    // 1\n    // One\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryCreateInstance_System_Dynamic_CreateInstanceBinder_System_Object___System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryCreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryCreateInstance(CreateInstanceBinder,Object[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.createinstancebinder\" data-linktype=\"relative-path\">CreateInstanceBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the initialization operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the initialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like <code>dynamic new</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryDeleteIndex_System_Dynamic_DeleteIndexBinder_System_Object___\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryDeleteIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryDeleteIndex(DeleteIndexBinder,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.deleteindexbinder\" data-linktype=\"relative-path\">DeleteIndexBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the deletion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The indexes to be deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as <code>del sampleObject[1,2]</code> in Python.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryDeleteMember_System_Dynamic_DeleteMemberBinder_\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryDeleteMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryDeleteMember(DeleteMemberBinder)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.deletememberbinder\" data-linktype=\"relative-path\">DeleteMemberBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the deletion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as <code>del sampleObject.SampleMember</code> in Python.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryGetIndex_System_Dynamic_GetIndexBinder_System_Object___System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryGetIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetIndex(GetIndexBinder,Object[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that get a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for indexing operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.getindexbinder\" data-linktype=\"relative-path\">GetIndexBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the <code>DynamicObject</code> class, <code>indexes[0]</code> is equal to 3.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the index operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3]</code> in C# or <code>sampleObject(3)</code> in Visual Basic, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you want to create an object in which properties can be accessed either by names such as <code>Property0</code>, <code>Property1</code>, and so on, or by index, so that, for example, <code>sampleObject.Property0</code> is equivalent to <code>sampleObject[0]</code> in C# or <code>sampleObject(0)</code> in Visual Basic.  </p>\n<p> The following code example demonstrates the <code>SampleDynamicObject</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <code>SampleDynamicObject</code> class contains an object of the <code>Dictionary&lt;string, object&gt;</code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. <code>SampleDynamicObject</code> overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetIndex_\" data-linktype=\"relative-path\">TrySetIndex</a> and TryGetIndex methods to enable access by index. It overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access by property name.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#4\">    &#39; The class derived from DynamicObject.\n    Public Class SampleDynamicObject\n        Inherits DynamicObject\n\n        &#39; The inner dictionary to store field names and values.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Get the property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n\n        End Function\n\n        &#39; Set the property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n\n        End Function\n\n        &#39; Set the property value by index.\n        Public Overrides Function TrySetIndex(\n            ByVal binder As System.Dynamic.SetIndexBinder,\n            ByVal indexes() As Object, ByVal value As Object) As Boolean\n\n            Dim index As Integer = CInt(indexes(0))\n            &#39; If a corresponding property already exists, set the value.\n            If (dictionary.ContainsKey(&quot;Property&quot; &amp; index)) Then\n                dictionary(&quot;Property&quot; &amp; index) = value\n            Else\n                &#39; If a property does not exist, create it.\n                dictionary.Add(&quot;Property&quot; &amp; index, value)\n            End If\n            Return True\n        End Function\n\n        &#39; Get the property value by index.\n        Public Overrides Function TryGetIndex(\n            ByVal binder As System.Dynamic.GetIndexBinder,\n            ByVal indexes() As Object, ByRef result As Object) As Boolean\n\n            Dim index = CInt(indexes(0))\n            Return dictionary.TryGetValue(&quot;Property&quot; &amp; index, result)\n        End Function\n    End Class\n\n    Sub Test()\n        &#39; Creating a dynamic object.\n        Dim sampleObject As Object = New SampleDynamicObject()\n\n        &#39; Creating Property0.\n        &#39; The TrySetMember method is called.\n        sampleObject.Property0 = &quot;Zero&quot;\n\n        &#39; Getting the value by index.\n        &#39; The TryGetIndex method is called.\n        Console.WriteLine(sampleObject(0))\n\n        &#39; Setting the property value by index.\n        &#39; The TrySetIndex method is called.\n        &#39; (This method also creates Property1.)\n        sampleObject(1) = 1\n\n        &#39; Getting the Property1 value.\n        &#39; The TryGetMember method is called.\n        Console.WriteLine(sampleObject.Property1)\n\n        &#39; The following statement produces a run-time exception\n        &#39; because there is no corresponding property.\n        &#39; Console.WriteLine(sampleObject(2))\n    End Sub\n\n    &#39; This code example produces the following output:\n\n    &#39; Zero\n    &#39; 1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#4\">    // The class derived from DynamicObject.\n    public class SampleDynamicObject : DynamicObject\n    {\n        // The inner dictionary to store field names and values.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Get the property value.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Set the property value.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Set the property value by index.\n        public override bool TrySetIndex(\n            SetIndexBinder binder, object[] indexes, object value)\n        {\n            int index = (int)indexes[0];\n\n            // If a corresponding property already exists, set the value.\n            if (dictionary.ContainsKey(&quot;Property&quot; + index))\n                dictionary[&quot;Property&quot; + index] = value;\n            else\n                // If a corresponding property does not exist, create it.\n                dictionary.Add(&quot;Property&quot; + index, value);\n            return true;\n        }\n\n        // Get the property value by index.\n        public override bool TryGetIndex(\n            GetIndexBinder binder, object[] indexes, out object result)\n        {\n\n            int index = (int)indexes[0];\n            return dictionary.TryGetValue(&quot;Property&quot; + index, out result);\n        }\n    }\n\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating a dynamic object.\n            dynamic sampleObject = new SampleDynamicObject();\n\n            // Creating Property0. \n            // The TrySetMember method is called.\n            sampleObject.Property0 = &quot;Zero&quot;;\n\n            // Getting the value by index.\n            // The TryGetIndex method is called.\n            Console.WriteLine(sampleObject[0]);\n\n            // Setting the property value by index.\n            // The TrySetIndex method is called.\n            // (This method also creates Property1.)\n            sampleObject[1] = 1;\n\n            // Getting the Property1 value.\n            // The TryGetMember method is called.\n            Console.WriteLine(sampleObject.Property1);\n\n            // The following statement produces a run-time exception\n            // because there is no corresponding property.\n            //Console.WriteLine(sampleObject[2]);\n        }\n    }\n\n    // This code example produces the following output:\n\n    // Zero\n    // 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryGetMember_System_Dynamic_GetMemberBinder_System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryGetMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetMember(GetMemberBinder,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that get member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.getmemberbinder\" data-linktype=\"relative-path\">GetMemberBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleProperty&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the get operation. For example, if the method is called for a property, you can assign the property value to <code>result</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> This method is called when you have statements like <code>Console.WriteLine(sampleObject.SampleProperty)</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[&quot;Text&quot;] = &quot;Sample text&quot;</code> (<code>sampleDictionary(&quot;Text&quot;) = &quot;Sample text&quot;</code> in Visual Basic), you can write <code>sampleDictionary.Text = &quot;Sample text&quot;</code>. Also, this syntax must be case-insensitive, so that <code>sampleDictionary.Text</code> is equivalent to <code>sampleDictionary.text</code>.  </p>\n<p> The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary&lt;string, object&gt;</code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs, and overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and TryGetMember methods to support the new syntax. It also provides a <code>Count</code> property, which shows how many dynamic properties the dictionary contains.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#1\">    &#39; The class derived from DynamicObject.\n    Public Class DynamicDictionary\n        Inherits DynamicObject\n\n        &#39; The inner dictionary.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; This property returns the number of elements\n        &#39; in the inner dictionary.\n        ReadOnly Property Count As Integer\n            Get\n                Return dictionary.Count\n            End Get\n        End Property\n\n\n        &#39; If you try to get a value of a property that is\n        &#39; not defined in the class, this method is called.\n\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            &#39; Converting the property name to lowercase\n            &#39; so that property names become case-insensitive.\n            Dim name As String = binder.Name.ToLower()\n\n            &#39; If the property name is found in a dictionary,\n            &#39; set the result parameter to the property value and return true.\n            &#39; Otherwise, return false.\n            Return dictionary.TryGetValue(name, result)\n        End Function\n\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            &#39; Converting the property name to lowercase\n            &#39; so that property names become case-insensitive.\n            dictionary(binder.Name.ToLower()) = value\n\n            &#39; You can always add a value to a dictionary,\n            &#39; so this method always returns true.\n            Return True\n        End Function\n    End Class\n\n    Sub Main()\n        &#39; Creating a dynamic dictionary.\n        Dim person As Object = New DynamicDictionary()\n\n        &#39; Adding new dynamic properties.\n        &#39; The TrySetMember method is called.\n        person.FirstName = &quot;Ellen&quot;\n        person.LastName = &quot;Adams&quot;\n\n        &#39; Getting values of the dynamic properties.\n        &#39; The TryGetMember method is called.\n        &#39; Note that property names are now case-insensitive,\n        &#39; although they are case-sensitive in C#.\n        Console.WriteLine(person.firstname &amp; &quot; &quot; &amp; person.lastname)\n\n        &#39; Getting the value of the Count property.\n        &#39; The TryGetMember is not called, \n        &#39; because the property is defined in the class.\n        Console.WriteLine(&quot;Number of dynamic properties:&quot; &amp; person.Count)\n\n        &#39; The following statement throws an exception at run time.\n        &#39; There is no &quot;address&quot; property,\n        &#39; so the TryGetMember method returns false and this causes\n        &#39; a MissingMemberException.\n        &#39; Console.WriteLine(person.address)\n    End Sub\n    &#39; This examples has the following output:\n    &#39; Ellen Adams\n    &#39; Number of dynamic properties: 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#1\">    // The class derived from DynamicObject.\n    public class DynamicDictionary : DynamicObject\n    {\n        // The inner dictionary.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // This property returns the number of elements\n        // in the inner dictionary.\n        public int Count\n        {\n            get\n            {\n                return dictionary.Count;\n            }\n        }\n\n        // If you try to get a value of a property \n        // not defined in the class, this method is called.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            // Converting the property name to lowercase\n            // so that property names become case-insensitive.\n            string name = binder.Name.ToLower();\n\n            // If the property name is found in a dictionary,\n            // set the result parameter to the property value and return true.\n            // Otherwise, return false.\n            return dictionary.TryGetValue(name, out result);\n        }\n\n        // If you try to set a value of a property that is\n        // not defined in the class, this method is called.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            // Converting the property name to lowercase\n            // so that property names become case-insensitive.\n            dictionary[binder.Name.ToLower()] = value;\n\n            // You can always add a value to a dictionary,\n            // so this method always returns true.\n            return true;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Creating a dynamic dictionary.\n            dynamic person = new DynamicDictionary();\n\n            // Adding new dynamic properties. \n            // The TrySetMember method is called.\n            person.FirstName = &quot;Ellen&quot;;\n            person.LastName = &quot;Adams&quot;;\n\n            // Getting values of the dynamic properties.\n            // The TryGetMember method is called.\n            // Note that property names are case-insensitive.\n            Console.WriteLine(person.firstname + &quot; &quot; + person.lastname);\n\n            // Getting the value of the Count property.\n            // The TryGetMember is not called, \n            // because the property is defined in the class.\n            Console.WriteLine(\n                &quot;Number of dynamic properties:&quot; + person.Count);\n\n            // The following statement throws an exception at run time.\n            // There is no &quot;address&quot; property,\n            // so the TryGetMember method returns false and this causes a\n            // RuntimeBinderException.\n            // Console.WriteLine(person.address);\n        }\n    }\n\n    // This example has the following output:\n    // Ellen Adams\n    // Number of dynamic properties: 2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryInvoke_System_Dynamic_InvokeBinder_System_Object___System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryInvoke(InvokeBinder,Object[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that invoke an object. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.invokebinder\" data-linktype=\"relative-path\">InvokeBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the invoke operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the object invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject(100)</code>, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <code>sampleObject(100)</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you need a data structure to store textual and numeric representations of numbers. You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.  </p>\n<p> The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. <code>DynamicNumber</code> overrides the TryInvoke method to enable initialization of all properties at one time. It also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access to individual object properties.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#5\">    // The class derived from DynamicObject.\n    public class DynamicNumber : DynamicObject\n    {\n        // The inner dictionary to store field names and values.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Get the property value.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Set the property value.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Initializing properties with arguments&#39; values.\n        public override bool TryInvoke(\n            InvokeBinder binder, object[] args, out object result)\n        {\n            // The invoke operation in this case takes two arguments.\n            // The first one is integer and the second one is string.\n            if ((args.Length == 2) &amp;&amp;\n                (args[0].GetType() == typeof(int)) &amp;&amp;\n                (args[1].GetType() == typeof(String)))\n            {\n                // If the property already exists, \n                // its value is changed.\n                // Otherwise, a new property is created.\n                if (dictionary.ContainsKey(&quot;Numeric&quot;))\n                    dictionary[&quot;Numeric&quot;] = args[0];\n                else\n                    dictionary.Add(&quot;Numeric&quot;, args[0]);\n\n                if (dictionary.ContainsKey(&quot;Textual&quot;))\n                    dictionary[&quot;Textual&quot;] = args[1];\n                else\n                    dictionary.Add(&quot;Textual&quot;, args[1]);\n\n                result = true;\n                return true;\n            }\n\n            else\n            {\n                // If the number of arguments is wrong,\n                // or if arguments are of the wrong type,\n                // the method returns false.\n                result = false;\n                return false;\n            }\n        }\n    }\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating a dynamic object.\n            dynamic number = new DynamicNumber();\n\n            // Adding and initializing properties.\n            // The TrySetMember method is called.\n            number.Numeric = 1;\n            number.Textual = &quot;One&quot;;\n\n            // Printing out the result.\n            // The TryGetMember method is called.\n            Console.WriteLine(number.Numeric + &quot; &quot; + number.Textual);\n\n            // Invoking an object.\n            // The TryInvoke method is called.\n            number(2, &quot;Two&quot;);\n            Console.WriteLine(number.Numeric + &quot; &quot; + number.Textual);\n\n            // The following statement produces a run-time exception\n            // because in this example the method invocation \n            // expects two arguments.\n            // number(0);\n        }\n    }\n\n    // This code example produces the following output:\n\n    // 1 One\n    // 2 Two\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryInvokeMember_System_Dynamic_InvokeMemberBinder_System_Object___System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryInvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryInvokeMember(InvokeMemberBinder,Object[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that invoke a member. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.invokememberbinder\" data-linktype=\"relative-path\">InvokeMemberBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleMethod&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>args[0]</code> is equal to 100.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the member invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you perform an operation like <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <code>DynamicObject</code> class.  </p>\n<p> You can also add your own methods to classes that are derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. For example, if you override the TryInvokeMember method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the TryInvokeMember implementation.  </p>\n<p> This method does not support <code>ref</code> and <code>out</code> parameters. All parameters in the <code>args</code> array are passed by value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[&quot;Text&quot;] = &quot;Sample text&quot;</code> (<code>sampleDictionary(&quot;Text&quot;) = &quot;Sample text&quot;</code> in Visual Basic), you can write <code>sampleDictionary.Text = &quot;Sample text&quot;</code>. Also, you want to be able to call all the standard dictionary methods on this dictionary.  </p>\n<p> The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary&lt;string, object&gt;</code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. It overrides the TryInvokeMember method to support methods of the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class and overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to support the new syntax. It also provides a <code>Print</code> method, which prints out all dictionary keys and values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#6\">    &#39; Add Imports System.Reflection\n    &#39; to the beginning of the file.\n\n    &#39; The class derived from DynamicObject.\n    Public Class DynamicDictionary\n        Inherits DynamicObject\n\n        &#39; The inner dictionary.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Getting a property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n        End Function\n\n        &#39; Setting a property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n        End Function\n\n\n        &#39; Calling a method.\n        Public Overrides Function TryInvokeMember(\n            ByVal binder As System.Dynamic.InvokeMemberBinder,\n            ByVal args() As Object, ByRef result As Object) As Boolean\n\n            Dim dictType As Type = GetType(Dictionary(Of String, Object))\n            Try\n                result = dictType.InvokeMember(\n                             binder.Name,\n                             BindingFlags.InvokeMethod,\n                             Nothing, dictionary, args)\n                Return True\n            Catch ex As Exception\n                result = Nothing\n                Return False\n            End Try\n        End Function\n\n        &#39; This method prints out dictionary elements.\n        Public Sub Print()\n            For Each pair In dictionary\n                Console.WriteLine(pair.Key &amp; &quot; &quot; &amp; pair.Value)\n            Next\n            If (dictionary.Count = 0) Then\n                Console.WriteLine(&quot;No elements in the dictionary.&quot;)\n            End If\n        End Sub\n    End Class\n\n    Sub Test()\n        &#39; Creating a dynamic dictionary.\n        Dim person As Object = New DynamicDictionary()\n\n        &#39; Adding new dynamic properties.\n        &#39; The TrySetMember method is called.\n        person.FirstName = &quot;Ellen&quot;\n        person.LastName = &quot;Adams&quot;\n\n        &#39; Calling a method defined in the DynmaicDictionary class.\n        &#39; The Print method is called.\n        person.Print()\n\n        Console.WriteLine(\n            &quot;Removing all the elements from the dictionary.&quot;)\n\n        &#39; Calling a method that is not defined in the DynamicDictionary class.\n        &#39; The TryInvokeMember method is called.\n        person.Clear()\n\n        &#39; Calling the Print method again.\n        person.Print()\n\n        &#39; The following statement throws an exception at run time.\n        &#39; There is no Sample method \n        &#39; in the dictionary or in the DynamicDictionary class.\n        &#39; person.Sample()\n    End Sub\n\n\n    &#39; This example has the following output:\n\n    &#39; FirstName Ellen \n    &#39; LastName Adams\n    &#39; Removing all the elements from the dictionary.\n    &#39; No elements in the dictionary.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#6\">    // Add using System.Reflection;\n    // to the beginning of the file.\n\n    // The class derived from DynamicObject.\n    public class DynamicDictionary : DynamicObject\n    {\n        // The inner dictionary.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Getting a property.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Setting a property.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Calling a method.\n        public override bool TryInvokeMember(\n            InvokeMemberBinder binder, object[] args, out object result)\n        {\n            Type dictType = typeof(Dictionary&lt;string, object&gt;);\n            try\n            {\n                result = dictType.InvokeMember(\n                             binder.Name,\n                             BindingFlags.InvokeMethod,\n                             null, dictionary, args);\n                return true;\n            }\n            catch\n            {\n                result = null;\n                return false;\n            }\n        }\n\n        // This methods prints out dictionary elements.\n        public void Print()\n        {\n            foreach (var pair in dictionary)\n                Console.WriteLine(pair.Key + &quot; &quot; + pair.Value);\n            if (dictionary.Count == 0)\n                Console.WriteLine(&quot;No elements in the dictionary.&quot;);\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Creating a dynamic dictionary.\n            dynamic person = new DynamicDictionary();\n\n            // Adding new dynamic properties.\n            // The TrySetMember method is called.\n            person.FirstName = &quot;Ellen&quot;;\n            person.LastName = &quot;Adams&quot;;\n\n            // Calling a method defined in the DynmaicDictionary class.\n            // The Print method is called.\n            person.Print();\n\n            Console.WriteLine(\n                &quot;Removing all the elements from the dictionary.&quot;);\n\n            // Calling a method that is not defined in the DynamicDictionary class.\n            // The TryInvokeMember method is called.\n            person.Clear();\n\n            // Calling the Print method again.\n            person.Print();\n\n            // The following statement throws an exception at run time.\n            // There is no Sample method \n            // in the dictionary or in the DynamicDictionary class.\n            // person.Sample();        \n        }\n    }\n\n    // This example has the following output:\n\n    // FirstName Ellen \n    // LastName Adams\n    // Removing all the elements from the dictionary.\n    // No elements in the dictionary.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TrySetIndex_System_Dynamic_SetIndexBinder_System_Object___System_Object_\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TrySetIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrySetIndex(SetIndexBinder,Object[],Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that set a value by index. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.setindexbinder\" data-linktype=\"relative-path\">SetIndexBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>indexes[0]</code> is equal to 3.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>value</code> is equal to 10.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3] = 10</code> in C# or <code>sampleObject(3) = 10</code> in Visual Basic, where <code>sampleObject</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you want to create an object in which properties can be accessed either by names such as <code>Property0</code>, <code>Property1</code>, and so on, or by index, so that, for example, <code>sampleObject.Property0</code> is equivalent to <code>sampleObject[0]</code> in C# or <code>sampleObject(0)</code> in Visual Basic.  </p>\n<p> The following code example demonstrates the <code>SampleDynamicObject</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <code>SampleDynamicObject</code> class contains an object of the <code>Dictionary&lt;string, object&gt;</code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. <code>SampleDynamicObject</code> overrides the TrySetIndex and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetIndex_\" data-linktype=\"relative-path\">TryGetIndex</a> methods to enable access by index. It overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access by property name.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#4\">    &#39; The class derived from DynamicObject.\n    Public Class SampleDynamicObject\n        Inherits DynamicObject\n\n        &#39; The inner dictionary to store field names and values.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Get the property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n\n        End Function\n\n        &#39; Set the property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n\n        End Function\n\n        &#39; Set the property value by index.\n        Public Overrides Function TrySetIndex(\n            ByVal binder As System.Dynamic.SetIndexBinder,\n            ByVal indexes() As Object, ByVal value As Object) As Boolean\n\n            Dim index As Integer = CInt(indexes(0))\n            &#39; If a corresponding property already exists, set the value.\n            If (dictionary.ContainsKey(&quot;Property&quot; &amp; index)) Then\n                dictionary(&quot;Property&quot; &amp; index) = value\n            Else\n                &#39; If a property does not exist, create it.\n                dictionary.Add(&quot;Property&quot; &amp; index, value)\n            End If\n            Return True\n        End Function\n\n        &#39; Get the property value by index.\n        Public Overrides Function TryGetIndex(\n            ByVal binder As System.Dynamic.GetIndexBinder,\n            ByVal indexes() As Object, ByRef result As Object) As Boolean\n\n            Dim index = CInt(indexes(0))\n            Return dictionary.TryGetValue(&quot;Property&quot; &amp; index, result)\n        End Function\n    End Class\n\n    Sub Test()\n        &#39; Creating a dynamic object.\n        Dim sampleObject As Object = New SampleDynamicObject()\n\n        &#39; Creating Property0.\n        &#39; The TrySetMember method is called.\n        sampleObject.Property0 = &quot;Zero&quot;\n\n        &#39; Getting the value by index.\n        &#39; The TryGetIndex method is called.\n        Console.WriteLine(sampleObject(0))\n\n        &#39; Setting the property value by index.\n        &#39; The TrySetIndex method is called.\n        &#39; (This method also creates Property1.)\n        sampleObject(1) = 1\n\n        &#39; Getting the Property1 value.\n        &#39; The TryGetMember method is called.\n        Console.WriteLine(sampleObject.Property1)\n\n        &#39; The following statement produces a run-time exception\n        &#39; because there is no corresponding property.\n        &#39; Console.WriteLine(sampleObject(2))\n    End Sub\n\n    &#39; This code example produces the following output:\n\n    &#39; Zero\n    &#39; 1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#4\">    // The class derived from DynamicObject.\n    public class SampleDynamicObject : DynamicObject\n    {\n        // The inner dictionary to store field names and values.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Get the property value.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Set the property value.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Set the property value by index.\n        public override bool TrySetIndex(\n            SetIndexBinder binder, object[] indexes, object value)\n        {\n            int index = (int)indexes[0];\n\n            // If a corresponding property already exists, set the value.\n            if (dictionary.ContainsKey(&quot;Property&quot; + index))\n                dictionary[&quot;Property&quot; + index] = value;\n            else\n                // If a corresponding property does not exist, create it.\n                dictionary.Add(&quot;Property&quot; + index, value);\n            return true;\n        }\n\n        // Get the property value by index.\n        public override bool TryGetIndex(\n            GetIndexBinder binder, object[] indexes, out object result)\n        {\n\n            int index = (int)indexes[0];\n            return dictionary.TryGetValue(&quot;Property&quot; + index, out result);\n        }\n    }\n\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating a dynamic object.\n            dynamic sampleObject = new SampleDynamicObject();\n\n            // Creating Property0. \n            // The TrySetMember method is called.\n            sampleObject.Property0 = &quot;Zero&quot;;\n\n            // Getting the value by index.\n            // The TryGetIndex method is called.\n            Console.WriteLine(sampleObject[0]);\n\n            // Setting the property value by index.\n            // The TrySetIndex method is called.\n            // (This method also creates Property1.)\n            sampleObject[1] = 1;\n\n            // Getting the Property1 value.\n            // The TryGetMember method is called.\n            Console.WriteLine(sampleObject.Property1);\n\n            // The following statement produces a run-time exception\n            // because there is no corresponding property.\n            //Console.WriteLine(sampleObject[2]);\n        }\n    }\n\n    // This code example produces the following output:\n\n    // Zero\n    // 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TrySetMember_System_Dynamic_SetMemberBinder_System_Object_\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TrySetMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrySetMember(SetMemberBinder,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the implementation for operations that set member values. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.setmemberbinder\" data-linktype=\"relative-path\">SetMemberBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, <code>binder.Name</code> returns &quot;SampleProperty&quot;. The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to set to the member. For example, for <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class, the <code>value</code> is &quot;Test&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have statements like <code>sampleObject.SampleProperty = &quot;Test&quot;</code>, where <code>sampleObject</code> is an instance of the class that is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can also add your own members to classes derived from the <code>DynamicObject</code> class. If your class defines properties and also overrides the TrySetMember method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the TrySetMember method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[&quot;Text&quot;] = &quot;Sample text&quot;</code> (<code>sampleDictionary(&quot;Text&quot;) = &quot;Sample text&quot;</code> in Visual Basic), you can write <code>sampleDictionary.Text = &quot;Sample text&quot;</code>. Also, this syntax must be case-insensitive, so that <code>sampleDictionary.Text</code> is equivalent to <code>sampleDictionary.text</code>.  </p>\n<p> The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary&lt;string, object&gt;</code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs, and overrides the TrySetMember and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to support the new syntax. It also provides a <code>Count</code> property, which shows how many dynamic properties the dictionary contains.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#1\">    &#39; The class derived from DynamicObject.\n    Public Class DynamicDictionary\n        Inherits DynamicObject\n\n        &#39; The inner dictionary.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; This property returns the number of elements\n        &#39; in the inner dictionary.\n        ReadOnly Property Count As Integer\n            Get\n                Return dictionary.Count\n            End Get\n        End Property\n\n\n        &#39; If you try to get a value of a property that is\n        &#39; not defined in the class, this method is called.\n\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            &#39; Converting the property name to lowercase\n            &#39; so that property names become case-insensitive.\n            Dim name As String = binder.Name.ToLower()\n\n            &#39; If the property name is found in a dictionary,\n            &#39; set the result parameter to the property value and return true.\n            &#39; Otherwise, return false.\n            Return dictionary.TryGetValue(name, result)\n        End Function\n\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            &#39; Converting the property name to lowercase\n            &#39; so that property names become case-insensitive.\n            dictionary(binder.Name.ToLower()) = value\n\n            &#39; You can always add a value to a dictionary,\n            &#39; so this method always returns true.\n            Return True\n        End Function\n    End Class\n\n    Sub Main()\n        &#39; Creating a dynamic dictionary.\n        Dim person As Object = New DynamicDictionary()\n\n        &#39; Adding new dynamic properties.\n        &#39; The TrySetMember method is called.\n        person.FirstName = &quot;Ellen&quot;\n        person.LastName = &quot;Adams&quot;\n\n        &#39; Getting values of the dynamic properties.\n        &#39; The TryGetMember method is called.\n        &#39; Note that property names are now case-insensitive,\n        &#39; although they are case-sensitive in C#.\n        Console.WriteLine(person.firstname &amp; &quot; &quot; &amp; person.lastname)\n\n        &#39; Getting the value of the Count property.\n        &#39; The TryGetMember is not called, \n        &#39; because the property is defined in the class.\n        Console.WriteLine(&quot;Number of dynamic properties:&quot; &amp; person.Count)\n\n        &#39; The following statement throws an exception at run time.\n        &#39; There is no &quot;address&quot; property,\n        &#39; so the TryGetMember method returns false and this causes\n        &#39; a MissingMemberException.\n        &#39; Console.WriteLine(person.address)\n    End Sub\n    &#39; This examples has the following output:\n    &#39; Ellen Adams\n    &#39; Number of dynamic properties: 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#1\">    // The class derived from DynamicObject.\n    public class DynamicDictionary : DynamicObject\n    {\n        // The inner dictionary.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // This property returns the number of elements\n        // in the inner dictionary.\n        public int Count\n        {\n            get\n            {\n                return dictionary.Count;\n            }\n        }\n\n        // If you try to get a value of a property \n        // not defined in the class, this method is called.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            // Converting the property name to lowercase\n            // so that property names become case-insensitive.\n            string name = binder.Name.ToLower();\n\n            // If the property name is found in a dictionary,\n            // set the result parameter to the property value and return true.\n            // Otherwise, return false.\n            return dictionary.TryGetValue(name, out result);\n        }\n\n        // If you try to set a value of a property that is\n        // not defined in the class, this method is called.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            // Converting the property name to lowercase\n            // so that property names become case-insensitive.\n            dictionary[binder.Name.ToLower()] = value;\n\n            // You can always add a value to a dictionary,\n            // so this method always returns true.\n            return true;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Creating a dynamic dictionary.\n            dynamic person = new DynamicDictionary();\n\n            // Adding new dynamic properties. \n            // The TrySetMember method is called.\n            person.FirstName = &quot;Ellen&quot;;\n            person.LastName = &quot;Adams&quot;;\n\n            // Getting values of the dynamic properties.\n            // The TryGetMember method is called.\n            // Note that property names are case-insensitive.\n            Console.WriteLine(person.firstname + &quot; &quot; + person.lastname);\n\n            // Getting the value of the Count property.\n            // The TryGetMember is not called, \n            // because the property is defined in the class.\n            Console.WriteLine(\n                &quot;Number of dynamic properties:&quot; + person.Count);\n\n            // The following statement throws an exception at run time.\n            // There is no &quot;address&quot; property,\n            // so the TryGetMember method returns false and this causes a\n            // RuntimeBinderException.\n            // Console.WriteLine(person.address);\n        }\n    }\n\n    // This example has the following output:\n    // Ellen Adams\n    // Number of dynamic properties: 2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Dynamic_DynamicObject_TryUnaryOperation_System_Dynamic_UnaryOperationBinder_System_Object__\">\r\n    \r\n            <a id=\"System_Dynamic_DynamicObject_TryUnaryOperation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryUnaryOperation(UnaryOperationBinder,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Provides implementation for unary operations. Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dynamic.unaryoperationbinder\" data-linktype=\"relative-path\">UnaryOperationBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Provides information about the unary operation. The <code>binder.Operation</code> property returns an <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the <code>DynamicObject</code> class, <code>binder.Operation</code> returns &quot;Negate&quot;.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the unary operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation is successful; otherwise, <code>false</code>. If this method returns <code>false</code>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  </p>\n<p> This method is called when you have unary operations such as negation, increment, or decrement. For example, if the TryUnaryOperation method is overridden, this method is automatically invoked for statements like <code>negativeNumber = -number</code>, where <code>number</code> is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class.  </p>\n<p> You can get information about the type of the unary operation by using the <code>Operation</code> property of the <code>binder</code> parameter.  </p>\n<p> If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, see documentation on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=141028\" data-linktype=\"external\">CodePlex</a> Web site.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>C#</th>\n<th>Visual Basic</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Decrement</code></td>\n<td>A unary decrement operation.</td>\n<td><code>a--</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Increment</code></td>\n<td>A unary increment operation.</td>\n<td><code>a++</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>Negate</code></td>\n<td>An arithmetic negation.</td>\n<td><code>-a</code></td>\n<td><code>-a</code></td>\n</tr>\n<tr>\n<td><code>Not</code></td>\n<td>A logical negation.</td>\n<td><code>!a</code></td>\n<td><code>Not a</code></td>\n</tr>\n<tr>\n<td><code>OnesComplement</code></td>\n<td>A ones complement.</td>\n<td><code>~a</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>IsFalse</code></td>\n<td>A false condition value.</td>\n<td><code>a &amp;&amp; b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>IsTrue</code></td>\n<td>A true condition value.</td>\n<td><code>a &amp;#124;&amp;#124; b</code></td>\n<td>Not supported.</td>\n</tr>\n<tr>\n<td><code>UnaryPlus</code></td>\n<td>A unary plus.</td>\n<td><code>+a</code></td>\n<td><code>+a</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> To implement <code>OrElse</code> (<code>a || b</code>) and <code>AndAlso</code> (<code>a &amp;&amp; b</code>) operations for dynamic objects in C#, you may want to implement both the TryUnaryOperation method and the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryBinaryOperation_\" data-linktype=\"relative-path\">TryBinaryOperation</a> method.  </p>\n<p> The <code>OrElse</code> operation consists of the unary <code>IsTrue</code> operation and the binary <code>Or</code> operation. The <code>Or</code> operation is performed only if the result of the <code>IsTrue</code> operation is <code>false</code>.  </p>\n<p> The <code>AndAlso</code> operation consists of the unary <code>IsFalse</code> operation and the binary <code>And</code> operation. The <code>And</code> operation is performed only if the result of the <code>IsFalse</code> operation is <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.  </p>\n<p> The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. <code>DynamicNumber</code> overrides the TryUnaryOperation method to enable the mathematical negation operation. Is also overrides the <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TrySetMember_\" data-linktype=\"relative-path\">TrySetMember</a> and <a class=\"xref\" href=\"system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> methods to enable access to the elements.  </p>\n<p> In this example, only the mathematical negation operation is supported. If you try to write a statement like <code>negativeNumber = +number</code>, a run-time exception occurs.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Dynamic.DynamicObject#7\">    &#39; Add Imports System.Linq.Expressions\n    &#39; to the beginning of the file.\n\n    &#39; The class derived from DynamicObject.\n    Public Class DynamicNumber\n        Inherits DynamicObject\n\n        &#39; The inner dictionary to store field names and values.\n        Dim dictionary As New Dictionary(Of String, Object)\n\n        &#39; Get the property value.\n        Public Overrides Function TryGetMember(\n            ByVal binder As System.Dynamic.GetMemberBinder,\n            ByRef result As Object) As Boolean\n\n            Return dictionary.TryGetValue(binder.Name, result)\n\n        End Function\n\n        &#39; Set the property value.\n        Public Overrides Function TrySetMember(\n            ByVal binder As System.Dynamic.SetMemberBinder,\n            ByVal value As Object) As Boolean\n\n            dictionary(binder.Name) = value\n            Return True\n\n        End Function\n\n        &#39; Perform the unary operation. \n        Public Overrides Function TryUnaryOperation(\n            ByVal binder As System.Dynamic.UnaryOperationBinder,\n            ByRef result As Object) As Boolean\n\n            &#39; The Textual property contains the name of the unary operation\n            &#39; in addition to the textual representaion of the number.\n            Dim resultTextual As String =\n            binder.Operation.ToString() &amp; &quot; &quot; &amp;\n            dictionary(&quot;Textual&quot;)\n            Dim resultNumeric As Integer\n\n            &#39; Determining what type of operation is being performed.\n            Select Case binder.Operation\n                Case ExpressionType.Negate\n                    resultNumeric = -CInt(dictionary(&quot;Numeric&quot;))\n                Case Else\n                    &#39; In case of any other unary operation,\n                    &#39; print out the type of operation and return false,\n                    &#39; which means that the language should determine \n                    &#39; what to do.\n                    &#39; (Usually the language just throws an exception.)            \n                    Console.WriteLine(\n                        binder.Operation.ToString() &amp;\n                        &quot;: This unary operation is not implemented&quot;)\n                    result = Nothing\n                    Return False\n            End Select\n\n            Dim finalResult As Object = New DynamicNumber()\n            finalResult.Textual = resultTextual\n            finalResult.Numeric = resultNumeric\n            result = finalResult\n            Return True\n        End Function\n    End Class\n\n    Sub Test()\n        &#39; Creating the first dynamic number.\n        Dim number As Object = New DynamicNumber()\n\n        &#39; Creating properties and setting their values\n        &#39; for the dynamic number.\n        &#39; The TrySetMember method is called.\n        number.Textual = &quot;One&quot;\n        number.Numeric = 1\n\n        &#39; Printing out properties. The TryGetMember method is called.\n        Console.WriteLine(\n            number.Textual &amp; &quot; &quot; &amp; number.Numeric)\n\n        Dim negativeNumber As Object = New DynamicNumber()\n\n        &#39; Performing a mathematical negation.\n        &#39; The TryUnaryOperation is called.\n        negativeNumber = -number\n\n        Console.WriteLine(\n            negativeNumber.Textual &amp; &quot; &quot; &amp; negativeNumber.Numeric)\n\n        &#39; The following statement produces a run-time exception\n        &#39; because the unary plus operation is not implemented.\n        &#39;negativeNumber = +number\n    End Sub\n\n    &#39; This code example produces the following output:\n\n    &#39; One 1\n    &#39; Negate One -1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Dynamic.DynamicObject#7\">    // Add using System.Linq.Expressions;\n    // to the beginning of the file\n\n    // The class derived from DynamicObject.\n    public class DynamicNumber : DynamicObject\n    {\n        // The inner dictionary to store field names and values.\n        Dictionary&lt;string, object&gt; dictionary\n            = new Dictionary&lt;string, object&gt;();\n\n        // Get the property value.\n        public override bool TryGetMember(\n            GetMemberBinder binder, out object result)\n        {\n            return dictionary.TryGetValue(binder.Name, out result);\n        }\n\n        // Set the property value.\n        public override bool TrySetMember(\n            SetMemberBinder binder, object value)\n        {\n            dictionary[binder.Name] = value;\n            return true;\n        }\n\n        // Perform the unary operation. \n        public override bool TryUnaryOperation(\n            UnaryOperationBinder binder, out object result)\n        {\n            // The Textual property contains \n            // the name of the unary operation in addition \n            // to the textual representaion of the number.\n            string resultTextual =\n                 binder.Operation + &quot; &quot; +\n                 dictionary[&quot;Textual&quot;].ToString();\n            int resultNumeric;\n\n            // Determining what type of operation is being performed.\n            switch (binder.Operation)\n            {\n                case ExpressionType.Negate:\n                    resultNumeric =\n                         -(int)dictionary[&quot;Numeric&quot;];\n                    break;\n                default:\n                    // In case of any other unary operation,\n                    // print out the type of operation and return false,\n                    // which means that the language should determine \n                    // what to do.\n                    // (Usually the language just throws an exception.)            \n                    Console.WriteLine(\n                        binder.Operation +\n                        &quot;: This unary operation is not implemented&quot;);\n                    result = null;\n                    return false;\n            }\n\n            dynamic finalResult = new DynamicNumber();\n            finalResult.Textual = resultTextual;\n            finalResult.Numeric = resultNumeric;\n            result = finalResult;\n            return true;\n        }\n    }\n\n    class Program\n    {\n        static void Test(string[] args)\n        {\n            // Creating the first dynamic number.\n            dynamic number = new DynamicNumber();\n\n            // Creating properties and setting their values\n            // for the dynamic number.\n            // The TrySetMember method is called.\n            number.Textual = &quot;One&quot;;\n            number.Numeric = 1;\n\n            // Printing out properties. The TryGetMember method is called.\n            Console.WriteLine(\n                number.Textual + &quot; &quot; + number.Numeric);\n\n            dynamic negativeNumber = new DynamicNumber();\n\n            // Performing a mathematical negation.\n            // TryUnaryOperation is called.\n            negativeNumber = -number;\n\n            Console.WriteLine(\n                negativeNumber.Textual + &quot; &quot; + negativeNumber.Numeric);\n\n            // The following statement produces a run-time exception\n            // because the unary plus operation is not implemented.\n            // negativeNumber = +number;\n        }\n    }\n\n    // This code example produces the following output:\n\n    // One 1\n    // Negate One -1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Dynamic.DynamicObject.yml\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject..ctor\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.GetDynamicMemberNames\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.GetMetaObject\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryBinaryOperation\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryConvert\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryCreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryDeleteIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryDeleteMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryGetIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryGetMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryInvoke\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryInvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TrySetIndex\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TrySetMember\">\r\n<meta name=\"APIName\" content=\"System.Dynamic.DynamicObject.TryUnaryOperation\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"8a2df2c6-a0e7-78eb-f5d3-834d70d124c1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Dynamic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Dynamic.DynamicObject\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Dynamic.DynamicObject.yml","open_to_public_contributors":true,"api_name":["System.Dynamic.DynamicObject","System.Dynamic.DynamicObject..ctor","System.Dynamic.DynamicObject.GetDynamicMemberNames","System.Dynamic.DynamicObject.GetMetaObject","System.Dynamic.DynamicObject.TryBinaryOperation","System.Dynamic.DynamicObject.TryConvert","System.Dynamic.DynamicObject.TryCreateInstance","System.Dynamic.DynamicObject.TryDeleteIndex","System.Dynamic.DynamicObject.TryDeleteMember","System.Dynamic.DynamicObject.TryGetIndex","System.Dynamic.DynamicObject.TryGetMember","System.Dynamic.DynamicObject.TryInvoke","System.Dynamic.DynamicObject.TryInvokeMember","System.Dynamic.DynamicObject.TrySetIndex","System.Dynamic.DynamicObject.TrySetMember","System.Dynamic.DynamicObject.TryUnaryOperation"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Dynamic.DynamicObject","System::Dynamic::DynamicObject","System.Dynamic.DynamicObject.#ctor","System::Dynamic::DynamicObject::#ctor","System.Dynamic.DynamicObject.GetDynamicMemberNames","System::Dynamic::DynamicObject::GetDynamicMemberNames","System.Dynamic.DynamicObject.GetMetaObject","System::Dynamic::DynamicObject::GetMetaObject","System.Dynamic.DynamicObject.TryBinaryOperation","System::Dynamic::DynamicObject::TryBinaryOperation","System.Dynamic.DynamicObject.TryConvert","System::Dynamic::DynamicObject::TryConvert","System.Dynamic.DynamicObject.TryCreateInstance","System::Dynamic::DynamicObject::TryCreateInstance","System.Dynamic.DynamicObject.TryDeleteIndex","System::Dynamic::DynamicObject::TryDeleteIndex","System.Dynamic.DynamicObject.TryDeleteMember","System::Dynamic::DynamicObject::TryDeleteMember","System.Dynamic.DynamicObject.TryGetIndex","System::Dynamic::DynamicObject::TryGetIndex","System.Dynamic.DynamicObject.TryGetMember","System::Dynamic::DynamicObject::TryGetMember","System.Dynamic.DynamicObject.TryInvoke","System::Dynamic::DynamicObject::TryInvoke","System.Dynamic.DynamicObject.TryInvokeMember","System::Dynamic::DynamicObject::TryInvokeMember","System.Dynamic.DynamicObject.TrySetIndex","System::Dynamic::DynamicObject::TrySetIndex","System.Dynamic.DynamicObject.TrySetMember","System::Dynamic::DynamicObject::TrySetMember","System.Dynamic.DynamicObject.TryUnaryOperation","System::Dynamic::DynamicObject::TryUnaryOperation"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"8a2df2c6-a0e7-78eb-f5d3-834d70d124c1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Dynamic/DynamicObject.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DynamicObject class | Microsoft Docs","_op_ogTitle":"DynamicObject class","description":"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\n","toc_asset_id":"_splitted/System.Dynamic/toc.json","toc_rel":"_splitted/System.Dynamic/toc.json","source_url":"","ms.assetid":"System.Dynamic.DynamicObject","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.dynamic.dynamicobject","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.dynamic.dynamicobject","fileRelativePath":"System.Dynamic.DynamicObject.html"},"themesRelativePathToOutputRoot":"_themes/"}