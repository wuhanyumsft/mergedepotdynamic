{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Func&lt;T,TResult&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has one parameter and returns a value of the type specified by the <code>TResult</code> parameter.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#7a86aba051da82dd\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;in T,out TResult&gt;(T arg);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of the parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TResult</td>\r\n  \t\t\t<td><p>The type of the return value of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Func&lt;T,TResult&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#7a86aba051da82dd\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has one parameter and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the generic <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(T, delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter. For example, the following code explicitly declares a delegate named <code>ConvertMethod</code> and assigns a reference to the <code>UppercaseString</code> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~2#1\">using System;\n\ndelegate string ConvertMethod(string inString);\n\npublic class DelegateExample\n{\n   public static void Main()\n   {\n      // Instantiate delegate to reference UppercaseString method\n      ConvertMethod convertMeth = UppercaseString;\n      string name = &quot;Dakota&quot;;\n      // Use delegate instance to call UppercaseString method\n      Console.WriteLine(convertMeth(name));\n   }\n\n   private static string UppercaseString(string inputString)\n   {\n      return inputString.ToUpper();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~2#1\">&#39; Declare a delegate to represent string conversion method\nDelegate Function ConvertMethod(ByVal inString As String) As String\n\nModule DelegateExample\n   Public Sub Main()\n      &#39; Instantiate delegate to reference UppercaseString method\n      Dim convertMeth As ConvertMethod = AddressOf UppercaseString\n      Dim name As String = &quot;Dakota&quot;\n      &#39; Use delegate instance to call UppercaseString method\n      Console.WriteLine(convertMeth(name))\n   End Sub\n\n   Private Function UppercaseString(inputString As String) As String\n      Return inputString.ToUpper()\n   End Function\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Func(T, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Func~2#2\">Module GenericFunc\n   Public Sub Main()\n      &#39; Instantiate delegate to reference UppercaseString method\n      Dim convertMethod As Func(Of String, String) = AddressOf UppercaseString\n      Dim name As String = &quot;Dakota&quot;\n      &#39; Use delegate instance to call UppercaseString method\n      Console.WriteLine(convertMethod(name))\n   End Sub\n\n   Private Function UppercaseString(inputString As String) As String\n      Return inputString.ToUpper()\n   End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Func~2#2\">using System;\n\npublic class GenericFunc\n{\n   public static void Main()\n   {\n      // Instantiate delegate to reference UppercaseString method\n      Func&lt;string, string&gt; convertMethod = UppercaseString;\n      string name = &quot;Dakota&quot;;\n      // Use delegate instance to call UppercaseString method\n      Console.WriteLine(convertMethod(name));\n   }\n\n   private static string UppercaseString(string inputString)\n   {\n      return inputString.ToUpper();\n   }\n}\n</code></pre><p> You can also use the Func(T, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../Topic/Anonymous%20Methods%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~2#3\">using System;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      Func&lt;string, string&gt; convert = delegate(string s)\n         { return s.ToUpper();}; \n         \n      string name = &quot;Dakota&quot;;\n      Console.WriteLine(convert(name));   \n   }\n}\n</code></pre><p> You can also assign a lambda expression to a Func(T, delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../Topic/Lambda%20Expressions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../Topic/Lambda%20Expressions%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~2#4\">using System;\n\npublic class LambdaExpression\n{\n   public static void Main()\n   {\n      Func&lt;string, string&gt; convert = s =&gt; s.ToUpper();\n         \n      string name = &quot;Dakota&quot;;\n      Console.WriteLine(convert(name));   \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~2#4\">Module LambdaExpression\n   Public Sub Main()\n      Dim convert As Func(Of String, String) = Function(s) s.ToUpper()\n      \n      Dim name As String = &quot;Dakota&quot;\n      Console.WriteLine(convert(name))  \n   End Sub\nEnd Module\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have Func(T, parameters, you can pass these methods a lambda expression without explicitly instantiating a Func(T, delegate.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-2.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T,TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T,TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T,TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T,TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bec4b9a1-6525-fc35-78d2-fbfe66c7a939\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`2\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-2.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-2.yml","open_to_public_contributors":true,"api_name":["System.Func<T,TResult>","System.Func<T,TResult>..ctor","System.Func<T,TResult>.Invoke","System.Func<T,TResult>.BeginInvoke","System.Func<T,TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`2","System::Func`2"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bec4b9a1-6525-fc35-78d2-fbfe66c7a939","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Func`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<T,TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<T,TResult> delegate","description":"Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`2","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-2","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-2","fileRelativePath":"System.Func-2.html"},"themesRelativePathToOutputRoot":"_themes/"}