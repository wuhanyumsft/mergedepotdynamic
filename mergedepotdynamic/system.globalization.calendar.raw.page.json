{"content":"    \r\n    <h1 id=\"System_Globalization_Calendar\">\r\n      <span class=\"lang-csharp\">Calendar</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents time in divisions, such as weeks, months, and years.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Calendar : ICloneable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Calendar</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A calendar divides time into units, such as weeks, months, and years. The number, length, and start of the divisions vary in each calendar.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about using the calendar classes in the .NET Framework, see <a href=\"../Topic/Working%20with%20Calendars.md\" data-linktype=\"relative-path\">Working with Calendars</a>.  </p>\n</div>\n<p> Any moment in time can be represented as a set of numeric values using a particular calendar. For example, a vernal equinox occurred at (1999, 3, 20, 8, 46, 0, 0.0) in the Gregorian calendar, that is, March 20, 1999 C.E. at 8:46:00:0.0. An implementation of Calendar can map any date in the range of a specific calendar to a similar set of numeric values, and <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> can map such sets of numeric values to a textual representation using information from Calendar and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>. The textual representation can be culture-sensitive, for example, &quot;8:46 AM March 20th 1999 AD&quot; for the en-US culture, or culture-insensitive, for example, &quot;1999-03-20T08:46:00&quot; in ISO 8601 format.  </p>\n<p> A Calendar implementation can define one or more eras. The Calendar class identifies the eras as enumerated integers, where the current era (<a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_CurrentEra\" data-linktype=\"relative-path\">CurrentEra</a>) has the value 0.  </p>\n<p> To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each Calendar implementation defines leap years differently.  </p>\n<p> For consistency, the first unit in each interval (the first month, for example) is assigned the value 1.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace includes the following Calendar implementations:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.chineselunisolarcalendar\" data-linktype=\"relative-path\">ChineseLunisolarCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar\" data-linktype=\"relative-path\">EastAsianLunisolarCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.japaneselunisolarcalendar\" data-linktype=\"relative-path\">JapaneseLunisolarCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.koreancalendar\" data-linktype=\"relative-path\">KoreanCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.koreanlunisolarcalendar\" data-linktype=\"relative-path\">KoreanLunisolarCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.persiancalendar\" data-linktype=\"relative-path\">PersianCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.taiwancalendar\" data-linktype=\"relative-path\">TaiwanCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.taiwanlunisolarcalendar\" data-linktype=\"relative-path\">TaiwanLunisolarCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a></li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar__ctor\" data-linktype=\"self-bookmark\">Calendar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_CurrentEra\" data-linktype=\"self-bookmark\">CurrentEra</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the current era of the current calendar.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AlgorithmType\" data-linktype=\"self-bookmark\">AlgorithmType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear\" data-linktype=\"self-bookmark\">DaysInYearBeforeMinSupportedYear</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of days in the year that precedes the year that is specified by the <span class=\"xref\">stem.Globalization.Calendar.MinSupportedDateTime*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_Eras\" data-linktype=\"self-bookmark\">Eras</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the list of eras in the current calendar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_MaxSupportedDateTime\" data-linktype=\"self-bookmark\">MaxSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the latest date and time supported by this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_MinSupportedDateTime\" data-linktype=\"self-bookmark\">MinSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the earliest date and time supported by this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_TwoDigitYearMax\" data-linktype=\"self-bookmark\">TwoDigitYearMax</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddDays(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of days away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddHours(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of hours away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\" data-linktype=\"self-bookmark\">AddMilliseconds(DateTime,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of milliseconds away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMinutes(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of minutes away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddMonths_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMonths(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddSeconds(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of seconds away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddWeeks(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of weeks away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_AddYears_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddYears(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new object that is a copy of the current <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDayOfMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDayOfWeek_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfWeek(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDayOfYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified month and year of the current era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the number of days in the specified month, year, and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDaysInYear_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified year of the current era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetDaysInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the number of days in the specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetEra_System_DateTime_\" data-linktype=\"self-bookmark\">GetEra(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetHour_System_DateTime_\" data-linktype=\"self-bookmark\">GetHour(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hours value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetLeapMonth_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetMilliseconds_System_DateTime_\" data-linktype=\"self-bookmark\">GetMilliseconds(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the milliseconds value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetMinute_System_DateTime_\" data-linktype=\"self-bookmark\">GetMinute(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minutes value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetMonthsInYear_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of months in the specified year in the current era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetMonthsInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the number of months in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetSecond_System_DateTime_\" data-linktype=\"self-bookmark\">GetSecond(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the seconds value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\" data-linktype=\"self-bookmark\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the week of the year that includes the date in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_GetYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified date in the current era is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified month in the specified year in the current era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapYear_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified year in the current era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_IsLeapYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\" data-linktype=\"self-bookmark\">ReadOnly(Calendar)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only version of the specified <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_Calendar_ToFourDigitYear_System_Int32_\" data-linktype=\"self-bookmark\">ToFourDigitYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.Calendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar__ctor\">\r\n    \r\n            <a id=\"System_Globalization_Calendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Calendar()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Calendar ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_CurrentEra\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentEra</div>        \r\n          </div>\r\n    \r\n            <p>Represents the current era of the current calendar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int CurrentEra = 0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CurrentEra field represents the index of the current era in the <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Eras_\" data-linktype=\"relative-path\">Eras</a> array. Because eras are arranged in reverse chronological order (from the current era to earlier eras), this field is a constant that has a value of 0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AlgorithmType\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AlgorithmType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlgorithmType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.CalendarAlgorithmType AlgorithmType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses reflection to instantiate each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> type found in the .NET Framework and displays the value of its AlgorithmType property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AlgorithmType#1\">using System;\nusing System.Collections;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetAssembly(typeof(Calendar));\n      Type[] types = assem.GetExportedTypes();\n      Type[] calendars = Array.FindAll(types, IsValidCalendar);\n      Array.Sort(calendars, new CalendarComparer());\n\n      Console.WriteLine(&quot;{0,-30} {1}<br>&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;);\n      foreach (var cal in calendars) {\n         // Instantiate a calendar object.\n         ConstructorInfo ctor = cal.GetConstructor( new Type[] {} );\n         Calendar calObj = (Calendar) ctor.Invoke( new Type[] {} ); \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty,\n                                           null, calObj, null));\n      }\n   }\n\n   private static bool IsValidCalendar(Type t)\n   {\n        if (t.IsSubclassOf(typeof(Calendar)))\n            if (t.IsAbstract)\n                return false;\n            else\n                return true;\n        else\n            return false;\n   }\n}\n\npublic class CalendarComparer : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Type tX = (Type) x;\n      Type tY = (Type) y;\n\n      return tX.Name.CompareTo(tY.Name);\n   }\n}\n// The example displays the following output:\n//       Calendar                       Algorithm Type\n//       \n//       ChineseLunisolarCalendar       LunisolarCalendar\n//       GregorianCalendar              SolarCalendar\n//       HebrewCalendar                 LunisolarCalendar\n//       HijriCalendar                  LunarCalendar\n//       JapaneseCalendar               SolarCalendar\n//       JapaneseLunisolarCalendar      LunisolarCalendar\n//       JulianCalendar                 SolarCalendar\n//       KoreanCalendar                 SolarCalendar\n//       KoreanLunisolarCalendar        LunisolarCalendar\n//       PersianCalendar                SolarCalendar\n//       TaiwanCalendar                 SolarCalendar\n//       TaiwanLunisolarCalendar        LunisolarCalendar\n//       ThaiBuddhistCalendar           SolarCalendar\n//       UmAlQuraCalendar               LunarCalendar\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AlgorithmType#1\">Imports System.Collections\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.GetAssembly(GetType(Calendar))\n      Dim types() As Type = assem.GetExportedTypes()\n      Dim calendars() As Type = Array.FindAll(types, AddressOf IsValidCalendar)\n      Array.Sort(calendars, New CalendarComparer())\n\n      Console.WriteLine(&quot;{0,-30} {1}&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;)\n      Console.WriteLine()\n      For Each cal In calendars\n         &#39; Instantiate a calendar object.\n         Dim ctor As ConstructorInfo = cal.GetConstructor( {} )\n         Dim calObj As Calendar = CType(ctor.Invoke( {} ), Calendar) \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.GetProperty,\n                                           Nothing, calObj, Nothing))\n      Next\n   End Sub\n   \n   Private Function IsValidCalendar(ByVal t As Type) As Boolean\n        If t.IsSubClassOf(GetType(Calendar)) Then\n            If t.IsAbstract Then\n                Return False\n            Else\n                Return True\n            End If\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n\nPublic Class CalendarComparer : Implements IComparer\n   Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer _\n                  Implements IComparer.Compare\n      Dim tX As Type = DirectCast(x, Type)\n      Dim tY As Type = DirectCast(y, Type)\n\n      Return tX.Name.CompareTo(tY.Name)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       Calendar                       Algorithm Type\n&#39;       \n&#39;       ChineseLunisolarCalendar       LunisolarCalendar\n&#39;       GregorianCalendar              SolarCalendar\n&#39;       HebrewCalendar                 LunisolarCalendar\n&#39;       HijriCalendar                  LunarCalendar\n&#39;       JapaneseCalendar               SolarCalendar\n&#39;       JapaneseLunisolarCalendar      LunisolarCalendar\n&#39;       JulianCalendar                 SolarCalendar\n&#39;       KoreanCalendar                 SolarCalendar\n&#39;       KoreanLunisolarCalendar        LunisolarCalendar\n&#39;       PersianCalendar                SolarCalendar\n&#39;       TaiwanCalendar                 SolarCalendar\n&#39;       TaiwanLunisolarCalendar        LunisolarCalendar\n&#39;       ThaiBuddhistCalendar           SolarCalendar\n&#39;       UmAlQuraCalendar               LunarCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DaysInYearBeforeMinSupportedYear</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of days in the year that precedes the year that is specified by the <span class=\"xref\">stem.Globalization.Calendar.MinSupportedDateTime*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual int DaysInYearBeforeMinSupportedYear { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the year that precedes the year specified by <span class=\"xref\">stem.Globalization.Calendar.MinSupportedDateTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a constant value of 365. Note that the property value can be overridden by classes derived from the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_Eras\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_Eras_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Eras</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the list of eras in the current calendar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int[] Eras { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array of integers that represents the eras in the current calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The eras are in reverse chronological order, with the current era as the first element of the array, and the oldest era as the last element of the array. For example, the value of the current era in <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> is 4, which is the first element of the array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values contained in <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_Eras_\" data-linktype=\"relative-path\">Eras</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.WriteLine( &quot;Eras[{0}] = {1}&quot;, i, myCal.Eras[i] );\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nEras[0] = 4\nEras[1] = 3\nEras[2] = 2\nEras[3] = 1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesJapaneseCalendar\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.WriteLine(&quot;Eras[{0}] = {1}&quot;, i, myCal.Eras(i))\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n&#39;This code produces the following output.\n&#39;\n&#39;Eras[0] = 4\n&#39;Eras[1] = 3\n&#39;Eras[2] = 2\n&#39;Eras[3] = 1\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;Eras[ {0}] = {1}&quot;, i, myCal-&gt;Eras[ i ] );\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nEras-&gt;Item[0] = 4\nEras-&gt;Item[1] = 3\nEras-&gt;Item[2] = 2\nEras-&gt;Item[3] = 1\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsReadOnly\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_MaxSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_MaxSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the latest date and time supported by this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime MaxSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The latest date and time supported by this calendar. The default is <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_MinSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_MinSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the earliest date and time supported by this <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime MinSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The earliest date and time supported by this calendar. The default is <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_TwoDigitYearMax\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_TwoDigitYearMax_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoDigitYearMax</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int TwoDigitYearMax { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  </p>\n<p> The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. The <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class does not detect changes in the system settings automatically. If the calendar is not supported in the regional and language options, the initial value of this property is the default value defined by the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<p> Your application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddDays_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddDays(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of days away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddDays (DateTime time, int days);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add days.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>days</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of days to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of days to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>days</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>days</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>days</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#1\">      returnTime = DateTime.SpecifyKind(cal.AddDays(time, days), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#1\">      returnTime = DateTime.SpecifyKind(cal.AddDays(time, days), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddHours_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddHours(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of hours away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddHours (DateTime time, int hours);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add hours.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hours</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of hours to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of hours to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>hours</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>hours</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>hours</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting time is outside the day of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#2\">      returnTime = DateTime.SpecifyKind(cal.AddHours(time, hours), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#2\">      returnTime = DateTime.SpecifyKind(cal.AddHours(time, hours), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddMilliseconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMilliseconds(DateTime,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of milliseconds away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddMilliseconds (DateTime time, double milliseconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to add milliseconds to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>milliseconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of milliseconds to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>milliseconds</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>milliseconds</code> value is rounded to the nearest integer before it is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>milliseconds</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting time is outside the day of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#3\">      returnTime = DateTime.SpecifyKind(cal.AddMilliseconds(time, milliseconds), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#3\">      returnTime = DateTime.SpecifyKind(cal.AddMilliseconds(time, milliseconds), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddMinutes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMinutes(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of minutes away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddMinutes (DateTime time, int minutes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add minutes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minutes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of minutes to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of minutes to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>minutes</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>minutes</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>minutes</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting time is outside the day of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#4\">      returnTime = DateTime.SpecifyKind(cal.AddMinutes(time, minutes), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#4\">      returnTime = DateTime.SpecifyKind(cal.AddMinutes(time, minutes), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddMonths_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddMonths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMonths(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract DateTime AddMonths (DateTime time, int months);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add months.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>months</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of months to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of months to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>months</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>months</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>months</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, suppose that the current calendar has 12 months, where the fourth month has 30 days and the tenth month has 31 days. If the specified month is the tenth month, the specified day is the 31st day of that month, and the value of the <code>months</code> parameter is 6, the resulting year is one more than the specified year, the resulting month is the fourth month, and the resulting day is the 30th day, which is the last day of the resulting month.  </p>\n<p> If the value of the <code>months</code> parameter is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddSeconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddSeconds(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of seconds away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddSeconds (DateTime time, int seconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add seconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of seconds to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of seconds to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>seconds</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>seconds</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>seconds</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting time is outside the day of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#6\">      returnTime = DateTime.SpecifyKind(cal.AddSeconds(time, seconds), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#6\">      returnTime = DateTime.SpecifyKind(cal.AddSeconds(time, seconds), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddWeeks_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddWeeks(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of weeks away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime AddWeeks (DateTime time, int weeks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add weeks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>weeks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of weeks to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of weeks to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>weeks</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>weeks</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>weeks</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is outside the month of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> In all .NET Framework classes derived from the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class, a week is defined as seven days.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#7\">      returnTime = DateTime.SpecifyKind(cal.AddWeeks(time, weeks), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#7\">      returnTime = DateTime.SpecifyKind(cal.AddWeeks(time, weeks), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_AddYears_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_AddYears_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddYears(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract DateTime AddYears (DateTime time, int years);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add years.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>years</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of years to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of years to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range of this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>years</code> is outside the supported range of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>years</code> value is added to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is not a valid month in the resulting year. It is changed to the last valid month in the resulting year. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, in the Gregorian calendar, February has 28 days, except during a leap year when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of <code>years</code> is 1, the resulting date is the 28th day of February in the following year.  </p>\n<p> If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_Clone\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new object that is a copy of the current <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A new instance of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the memberwise clone of the current <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The new memberwise clone is not read-only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDayOfMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDayOfMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetDayOfMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that represents the day of the month in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDayOfWeek_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfWeek(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract DayOfWeek GetDayOfWeek (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the day of the week in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDayOfYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDayOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetDayOfYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that represents the day of the year in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day of the year is defined as the number of days from the first day of the year. For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, GetDayOfYear for January 1 returns 1, and GetDayOfYear for December 31 returns 365 in a common year or 366 in a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified month and year of the current era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetDaysInMonth (int year, int month);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, GetDaysInMonth for February returns 28 in a common year or 29 in a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the number of days in the specified month, year, and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetDaysInMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInMonth_\" data-linktype=\"relative-path\">GetDaysInMonth</a> for February returns 28 in a common year or 29 in a leap year.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDaysInYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified year of the current era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetDaysInYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, GetDaysInYear returns 365 for a common year or 366 for a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetDaysInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the number of days in the specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetDaysInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInYear_\" data-linktype=\"relative-path\">GetDaysInYear</a> returns 365 for a common year or 366 for a leap year.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetEra_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetEra (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the era in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetHour_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetHour_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHour(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hours value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetHour (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 0 to 23 that represents the hour in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetLeapMonth_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetLeapMonth (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that indicates the leap month in the specified year.  </p>\n<p> -or-  </p>\n<p> Zero if this calendar does not support a leap month or if the <code>year</code> parameter does not represent a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_System_DateTime_\" data-linktype=\"relative-path\">GetMonth(DateTime)</a> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_System_DateTime_\" data-linktype=\"relative-path\">GetMonth(DateTime)</a> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetLeapMonth (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that indicates the leap month in the specified year and era.  </p>\n<p> -or-  </p>\n<p> Zero if this calendar does not support a leap month or if the <code>year</code> and <code>era</code> parameters do not specify a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_System_DateTime_\" data-linktype=\"relative-path\">GetMonth(DateTime)</a> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_System_DateTime_\" data-linktype=\"relative-path\">GetMonth(DateTime)</a> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetMilliseconds_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetMilliseconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMilliseconds(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the milliseconds value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual double GetMilliseconds (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetMinute_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetMinute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMinute(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minutes value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetMinute (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 0 to 59 that represents the minutes in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that represents the month in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>, GetMonth for Tishrei returns 1, and GetMonth for Elul returns 12 in a common year or 13 in a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetMonthsInYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of months in the specified year in the current era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetMonthsInYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of months in the specified year in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>, GetMonthsInYear returns 12 for a common year or 13 for a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetMonthsInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the number of months in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetMonthsInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of months in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, in <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>, <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMonthsInYear_\" data-linktype=\"relative-path\">GetMonthsInYear</a> returns 12 for a common year or 13 for a leap year.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetSecond_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetSecond_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSecond(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the seconds value in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetSecond (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 0 to 59 that represents the seconds in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetWeekOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the week of the year that includes the date in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A date and time value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that defines a calendar week.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstDayOfWeek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that represents the first day of the week.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that represents the week of the year that includes the date in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is earlier than <span class=\"xref\">stem.Globalization.Calendar.MinSupportedDateTime*</span> or later than <span class=\"xref\">stem.Globalization.Calendar.MaxSupportedDateTime*</span>.  </p>\n<p> -or-  </p>\n<p> <code>firstDayOfWeek</code> is not a valid <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.  </p>\n<p> -or-  </p>\n<p> <code>rule</code> is not a valid <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to determine the number of weeks in the year by setting <code>time</code> to the last day of the year.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object for a particular culture that uses the calendar indicated by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property includes the following culture-specific values that can be used for the <code>rule</code> and <code>firstDayOfWeek</code> parameters:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\" data-linktype=\"relative-path\">FirstDayOfWeek</a> property contains the default first day of the week that can be used for the <code>firstDayOfWeek</code> parameter.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CalendarWeekRule_\" data-linktype=\"relative-path\">CalendarWeekRule</a> property contains the default calendar week rule that can be used for the <code>rule</code> parameter.  </p>\n<p>The following example uses the current culture&#39;s <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object to determine that January 1, 2011 is in the first week of the year in the Gregorian calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.GetWeekOfYear#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dfi As DateTimeFormatInfo = DateTimeFormatInfo.CurrentInfo\n      Dim date1 As Date = #1/1/2011#\n      Dim cal As Calendar = dfi.Calendar\n      \n      Console.WriteLine(&quot;{0:d}: Week {1} ({2})&quot;, date1, \n                        cal.GetWeekOfYear(date1, dfi.CalendarWeekRule, \n                                          dfi.FirstDayOfWeek),\n                        cal.ToString().Substring(cal.ToString().LastIndexOf(&quot;.&quot;) + 1))       \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1/1/2011: Week 1 (GregorianCalendar)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.GetWeekOfYear#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTimeFormatInfo dfi = DateTimeFormatInfo.CurrentInfo;\n      DateTime date1 = new DateTime(2011, 1, 1);\n      Calendar cal = dfi.Calendar;\n      \n      Console.WriteLine(&quot;{0:d}: Week {1} ({2})&quot;, date1, \n                        cal.GetWeekOfYear(date1, dfi.CalendarWeekRule, \n                                          dfi.FirstDayOfWeek),\n                        cal.ToString().Substring(cal.ToString().LastIndexOf(&quot;.&quot;) + 1));       \n   }\n}\n// The example displays the following output:\n//       1/1/2011: Week 1 (GregorianCalendar)\n</code></pre><p>For some calendars, a call to the GetWeekOfYear method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> for particular combinations of <code>rule</code> and <code>firstDayOfWeek</code> values even if <code>time</code> is greater than the date returned by that calendar&#39;s <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_MinSupportedDateTime_\" data-linktype=\"relative-path\">MinSupportedDateTime</a> property. The following table lists the affected calendars, the specific <code>rule</code> values, and the range of the earliest supported <code>time</code> values. The specific minimum <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value depends on the value of the <code>firstDayOfWeek</code> parameter.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Calendar</th>\n<th>CalendarWeekRule value</th>\n<th>Gregorian date (M/dd/yyyy)</th>\n<th>Date in calendar (M/dd/yyyy)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.chineselunisolarcalendar\" data-linktype=\"relative-path\">ChineseLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/19/1901 to 2/25/1901</td>\n<td>1/1/1901 to 1/7/1901</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.chineselunisolarcalendar\" data-linktype=\"relative-path\">ChineseLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/19/1901 to 2/22/1901</td>\n<td>1/01/1901 to 1/04/1901</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>9/17/1583</td>\n<td>1/01/5344</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>9/17/1583 to 9/23/1583</td>\n<td>1/01/5344 to 1/07/5344</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>9/17/1583 to 9/20/1583</td>\n<td>1/01/5344 to 1/04/5344</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>7/18/0622 to 7/24/0622</td>\n<td>1/01/0001 to 1/07/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>7/18/0622 to 7/21/0622</td>\n<td>1/01/0001 to 1/04/0001</td>\n</tr>\n<tr>\n<td>seLunisolarCalendar](assetId:///T:System.Globalization.JapaneseLunisolarCalendar?qualifyHint=False&amp;autoUpgrade=True)</td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>1/28/1960 to 2/03/1960</td>\n<td>1/01/35 to 1/07/0035</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.japaneselunisolarcalendar\" data-linktype=\"relative-path\">JapaneseLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>1/28/1960 to 1/31/1960</td>\n<td>1/01/0035 to 1/04/0035</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>1/01/0001 to 1/05/0001</td>\n<td>1/03/0001 to 1/07/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>1/01/0001 to 1/02/0001</td>\n<td>1/03/0001 to 1/04/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.koreanlunisolarcalendar\" data-linktype=\"relative-path\">KoreanLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/14/0918 to 2/20/0918</td>\n<td>1/01/0918 to 1/07/0918</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.koreanlunisolarcalendar\" data-linktype=\"relative-path\">KoreanLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/14/0918 to 2/17/0918</td>\n<td>1/01/0918 to 1/04/0918</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.persiancalendar\" data-linktype=\"relative-path\">PersianCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>3/21/0622 to 3/27/0622</td>\n<td>1/01/0001 to 1/07/0001</td>\n</tr>\n<tr>\n<td>nCalendar](assetId:///T:System.Globalization.PersianCalendar?qualifyHint=False&amp;autoUpgrade=True)</td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>3/21/0622 to 3/24/0622</td>\n<td>1/01/0001 to 1/04/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.taiwanlunisolarcalendar\" data-linktype=\"relative-path\">TaiwanLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/18/1912 to 2/24/1912</td>\n<td>1/01/0001 to 1/07/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.taiwanlunisolarcalendar\" data-linktype=\"relative-path\">TaiwanLunisolarCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>2/18/1912 to 2/21/1912</td>\n<td>1/01/0001 to 1/04/0001</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>4/30/1900 to 5/06/1900</td>\n<td>1/01/1318 to 1/07/1318</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a></td>\n<td><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></td>\n<td>4/30/1900 to 5/03/1900</td>\n<td>1/01/1318 to 1/04/1318</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the result of GetWeekOfYear varies depending on the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\" data-linktype=\"relative-path\">FirstDayOfWeek</a> and the <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> used. If the specified date is the last day of the year, GetWeekOfYear returns the total number of weeks in that year.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Gets the Calendar instance associated with a CultureInfo.\n      CultureInfo myCI = new CultureInfo(&quot;en-US&quot;);\n      Calendar myCal = myCI.Calendar;\n\n      // Gets the DTFI properties required by GetWeekOfYear.\n      CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;\n      DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;\n\n      // Displays the number of the current week relative to the beginning of the year.\n      Console.WriteLine( &quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR );\n      Console.WriteLine( &quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW );\n      Console.WriteLine( &quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal.GetWeekOfYear( DateTime.Now, myCWR, myFirstDOW ));\n\n      // Displays the total number of weeks in the current year.\n      DateTime LastDay = new System.DateTime( DateTime.Now.Year, 12, 31 );\n      Console.WriteLine( &quot;There are {0} weeks in the current year ({1}).&quot;, myCal.GetWeekOfYear( LastDay, myCWR, myFirstDOW ), LastDay.Year );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  Results vary depending on the system date.\n\nThe CalendarWeekRule used for the en-US culture is FirstDay.\nThe FirstDayOfWeek used for the en-US culture is Sunday.\nTherefore, the current week is Week 1 of the current year.\nThere are 53 weeks in the current year (2001).\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar\n\n   Public Shared Sub Main()\n      \n      &#39; Gets the Calendar instance associated with a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;)\n      Dim myCal As Calendar = myCI.Calendar\n      \n      &#39; Gets the DTFI properties required by GetWeekOfYear.\n      Dim myCWR As CalendarWeekRule = myCI.DateTimeFormat.CalendarWeekRule\n      Dim myFirstDOW As DayOfWeek = myCI.DateTimeFormat.FirstDayOfWeek\n      \n      &#39; Displays the number of the current week relative to the beginning of the year.\n      Console.WriteLine(&quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR)\n      Console.WriteLine(&quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW)\n      Console.WriteLine(&quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal.GetWeekOfYear(DateTime.Now, myCWR, myFirstDOW))\n      \n      &#39; Displays the total number of weeks in the current year.\n      Dim LastDay = New System.DateTime(DateTime.Now.Year, 12, 31)\n      Console.WriteLine(&quot;There are {0} weeks in the current year ({1}).&quot;, myCal.GetWeekOfYear(LastDay, myCWR, myFirstDOW), LastDay.Year)\n   End Sub &#39;Main \nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.  Results vary depending on the system date.\n&#39;\n&#39;The CalendarWeekRule used for the en-US culture is FirstDay.\n&#39;The FirstDayOfWeek used for the en-US culture is Sunday.\n&#39;Therefore, the current week is Week 1 of the current year.\n&#39;There are 53 weeks in the current year (2001).\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Gets the Calendar instance associated with a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot; );\n   Calendar^ myCal = myCI-&gt;Calendar;\n   \n   // Gets the DTFI properties required by GetWeekOfYear.\n   CalendarWeekRule myCWR = myCI-&gt;DateTimeFormat-&gt;CalendarWeekRule;\n   DayOfWeek myFirstDOW = myCI-&gt;DateTimeFormat-&gt;FirstDayOfWeek;\n   \n   // Displays the number of the current week relative to the beginning of the year.\n   Console::WriteLine( &quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR );\n   Console::WriteLine( &quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW );\n   Console::WriteLine( &quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal-&gt;GetWeekOfYear( DateTime::Now, myCWR, myFirstDOW ) );\n   \n   // Displays the total number of weeks in the current year.\n   DateTime LastDay = System::DateTime( DateTime::Now.Year, 12, 31 );\n   Console::WriteLine( &quot;There are {0} weeks in the current year ( {1}).&quot;, myCal-&gt;GetWeekOfYear( LastDay, myCWR, myFirstDOW ), LastDay.Year );\n}\n\n/*\nThis code produces the following output.  Results vary depending on the system date.\n\nThe CalendarWeekRule used for the en-US culture is FirstDay.\nThe FirstDayOfWeek used for the en-US culture is Sunday.\nTherefore, the current week is Week 1 of the current year.\nThere are 53 weeks in the current year (2001).\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_GetYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_GetYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the year in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the members of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era: {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year: {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month: {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear: {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek: {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine( &quot;   Hour: {0}&quot;, myCal-&gt;GetHour( myDT ) );\n   Console::WriteLine( &quot;   Minute: {0}&quot;, myCal-&gt;GetMinute( myDT ) );\n   Console::WriteLine( &quot;   Second: {0}&quot;, myCal-&gt;GetSecond( myDT ) );\n   Console::WriteLine( &quot;   Milliseconds: {0}&quot;, myCal-&gt;GetMilliseconds( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Uses the default calendar of the InvariantCulture.\n   Calendar^ myCal = CultureInfo::InvariantCulture-&gt;Calendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds 5 to every component of the DateTime.\n   myDT = myCal-&gt;AddYears( myDT, 5 );\n   myDT = myCal-&gt;AddMonths( myDT, 5 );\n   myDT = myCal-&gt;AddWeeks( myDT, 5 );\n   myDT = myCal-&gt;AddDays( myDT, 5 );\n   myDT = myCal-&gt;AddHours( myDT, 5 );\n   myDT = myCal-&gt;AddMinutes( myDT, 5 );\n   myDT = myCal-&gt;AddSeconds( myDT, 5 );\n   myDT = myCal-&gt;AddMilliseconds( myDT, 5 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\nEra:          1\nYear:         2002\nMonth:        4\nDayOfYear:    93\nDayOfMonth:   3\nDayOfWeek:    Wednesday\nHour:         0\nMinute:       0\nSecond:       0\nMilliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\nEra:          1\nYear:         2007\nMonth:        10\nDayOfYear:    286\nDayOfMonth:   13\nDayOfWeek:    Saturday\nHour:         5\nMinute:       5\nSecond:       5\nMilliseconds: 5\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Uses the default calendar of the InvariantCulture.\n      Dim myCal As Calendar = CultureInfo.InvariantCulture.Calendar\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears(myDT, 5)\n      myDT = myCal.AddMonths(myDT, 5)\n      myDT = myCal.AddWeeks(myDT, 5)\n      myDT = myCal.AddDays(myDT, 5)\n      myDT = myCal.AddHours(myDT, 5)\n      myDT = myCal.AddMinutes(myDT, 5)\n      myDT = myCal.AddSeconds(myDT, 5)\n      myDT = myCal.AddMilliseconds(myDT, 5)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding 5 to each component of the DateTime:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:          {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:         {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:        {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine(&quot;   Hour:         {0}&quot;, myCal.GetHour(myDT))\n      Console.WriteLine(&quot;   Minute:       {0}&quot;, myCal.GetMinute(myDT))\n      Console.WriteLine(&quot;   Second:       {0}&quot;, myCal.GetSecond(myDT))\n      Console.WriteLine(&quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:          1\n\n&#39;   Year:         2002\n\n&#39;   Month:        4\n\n&#39;   DayOfYear:    93\n\n&#39;   DayOfMonth:   3\n\n&#39;   DayOfWeek:    Wednesday\n\n&#39;   Hour:         0\n\n&#39;   Minute:       0\n\n&#39;   Second:       0\n\n&#39;   Milliseconds: 0\n\n&#39;\n\n&#39;After adding 5 to each component of the DateTime:\n\n&#39;   Era:          1\n\n&#39;   Year:         2007\n\n&#39;   Month:        10\n\n&#39;   DayOfYear:    286\n\n&#39;   DayOfMonth:   13\n\n&#39;   DayOfWeek:    Saturday\n\n&#39;   Hour:         5\n\n&#39;   Minute:       5\n\n&#39;   Second:       5\n\n&#39;   Milliseconds: 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Uses the default calendar of the InvariantCulture.\n      Calendar myCal = CultureInfo.InvariantCulture.Calendar;\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds 5 to every component of the DateTime.\n      myDT = myCal.AddYears( myDT, 5 );\n      myDT = myCal.AddMonths( myDT, 5 );\n      myDT = myCal.AddWeeks( myDT, 5 );\n      myDT = myCal.AddDays( myDT, 5 );\n      myDT = myCal.AddHours( myDT, 5 );\n      myDT = myCal.AddMinutes( myDT, 5 );\n      myDT = myCal.AddSeconds( myDT, 5 );\n      myDT = myCal.AddMilliseconds( myDT, 5 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding 5 to each component of the DateTime:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:          {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:         {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:        {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:    {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth:   {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:    {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine( &quot;   Hour:         {0}&quot;, myCal.GetHour( myDT ) );\n      Console.WriteLine( &quot;   Minute:       {0}&quot;, myCal.GetMinute( myDT ) );\n      Console.WriteLine( &quot;   Second:       {0}&quot;, myCal.GetSecond( myDT ) );\n      Console.WriteLine( &quot;   Milliseconds: {0}&quot;, myCal.GetMilliseconds( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:          1\n   Year:         2002\n   Month:        4\n   DayOfYear:    93\n   DayOfMonth:   3\n   DayOfWeek:    Wednesday\n   Hour:         0\n   Minute:       0\n   Second:       0\n   Milliseconds: 0\n\nAfter adding 5 to each component of the DateTime:\n   Era:          1\n   Year:         2007\n   Month:        10\n   DayOfYear:    286\n   DayOfMonth:   13\n   DayOfWeek:    Saturday\n   Hour:         5\n   Minute:       5\n   Second:       5\n   Milliseconds: 5\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified date in the current era is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsLeapDay (int year, int month, int day);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the day.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified day is a leap day; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.  </p>\n<p> A leap day is a day that occurs only in a leap year. For example, in the Gregorian calendar, the 29th day of February is the only leap day.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsLeapDay (int year, int month, int day, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified day is a leap day; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.  </p>\n<p> A leap day is a day that occurs only in a leap year. For example, in the Gregorian calendar, the 29th day of February is the only leap day.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified month in the specified year in the current era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsLeapMonth (int year, int month);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified month is a leap month; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.  </p>\n<p> A leap month is an entire month that occurs only in a leap year. For example, in the Hebrew calendar, Adar Beit is the only leap month.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsLeapMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified month is a leap month; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.  </p>\n<p> A leap month is an entire month that occurs only in a leap year. For example, in the Hebrew calendar, Adar Beit is the only leap month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified year in the current era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsLeapYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares different implementations of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar_Compare#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Creates an instance of every Calendar type.\n      Calendar[] myCals = new Calendar[8];\n      myCals[0] = new GregorianCalendar();\n      myCals[1] = new HebrewCalendar();\n      myCals[2] = new HijriCalendar();\n      myCals[3] = new JapaneseCalendar();\n      myCals[4] = new JulianCalendar();\n      myCals[5] = new KoreanCalendar();\n      myCals[6] = new TaiwanCalendar();\n      myCals[7] = new ThaiBuddhistCalendar();\n\n      // For each calendar, displays the current year, the number of months in that year,\n      // and the number of days in each month of that year.\n      int i, j, iYear, iMonth, iDay;\n      DateTime myDT = DateTime.Today;\n\n      for ( i = 0; i &lt; myCals.Length; i++ )  {\n         iYear = myCals[i].GetYear( myDT );\n         Console.WriteLine();\n         Console.WriteLine( &quot;{0}, Year: {1}&quot;, myCals[i].GetType(), myCals[i].GetYear( myDT ) );\n         Console.WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[i].GetMonthsInYear( iYear ) );\n         Console.WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[i].GetDaysInYear( iYear ) );\n         Console.WriteLine( &quot;   Days in each month:&quot; );\n         Console.Write( &quot;      &quot; );\n\n         for ( j = 1; j &lt;= myCals[i].GetMonthsInYear( iYear ); j++ )\n            Console.Write( &quot; {0,-5}&quot;, myCals[i].GetDaysInMonth( iYear, j ) );\n         Console.WriteLine();\n\n         iMonth = myCals[i].GetMonth( myDT );\n         iDay = myCals[i].GetDayOfMonth( myDT );\n         Console.WriteLine( &quot;   IsLeapDay:   {0}&quot;, myCals[i].IsLeapDay( iYear, iMonth, iDay ) );\n         Console.WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[i].IsLeapMonth( iYear, iMonth ) );\n         Console.WriteLine( &quot;   IsLeapYear:  {0}&quot;, myCals[i].IsLeapYear( iYear ) );\n\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem.Globalization.GregorianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.HebrewCalendar, Year: 5763\n   MonthsInYear: 13\n   DaysInYear: 385\n   Days in each month:\n       30    30    30    29    30    30    29    30    29    30    29    30    29   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.HijriCalendar, Year: 1423\n   MonthsInYear: 12\n   DaysInYear: 355\n   Days in each month:\n       30    29    30    29    30    29    30    29    30    29    30    30   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  True\n\nSystem.Globalization.JapaneseCalendar, Year: 14\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.JulianCalendar, Year: 2002\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.KoreanCalendar, Year: 4335\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.TaiwanCalendar, Year: 91\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\nSystem.Globalization.ThaiBuddhistCalendar, Year: 2545\n   MonthsInYear: 12\n   DaysInYear: 365\n   Days in each month:\n       31    28    31    30    31    30    31    31    30    31    30    31   \n   IsLeapDay:   False\n   IsLeapMonth: False\n   IsLeapYear:  False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar_Compare#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an instance of every Calendar type.\n      Dim myCals(7) As Calendar\n      myCals(0) = New GregorianCalendar()\n      myCals(1) = New HebrewCalendar()\n      myCals(2) = New HijriCalendar()\n      myCals(3) = New JapaneseCalendar()\n      myCals(4) = New JulianCalendar()\n      myCals(5) = New KoreanCalendar()\n      myCals(6) = New TaiwanCalendar()\n      myCals(7) = New ThaiBuddhistCalendar()\n\n      &#39; For each calendar, displays the current year, the number of months in that year,\n      &#39; and the number of days in each month of that year.\n      Dim i, j, iYear, iMonth, iDay As Integer\n      Dim myDT As DateTime = DateTime.Today\n\n      For i = 0 To myCals.Length - 1\n         iYear = myCals(i).GetYear(myDT)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0}, Year: {1}&quot;, myCals(i).GetType(), myCals(i).GetYear(myDT))\n         Console.WriteLine(&quot;   MonthsInYear: {0}&quot;, myCals(i).GetMonthsInYear(iYear))\n         Console.WriteLine(&quot;   DaysInYear: {0}&quot;, myCals(i).GetDaysInYear(iYear))\n         Console.WriteLine(&quot;   Days in each month:&quot;)\n         Console.Write(&quot;      &quot;)\n         \n         For j = 1 To myCals(i).GetMonthsInYear(iYear)\n            Console.Write(&quot; {0,-5}&quot;, myCals(i).GetDaysInMonth(iYear, j))\n         Next j\n         Console.WriteLine()\n         \n         iMonth = myCals(i).GetMonth(myDT)\n         iDay = myCals(i).GetDayOfMonth(myDT)\n         Console.WriteLine(&quot;   IsLeapDay:   {0}&quot;, myCals(i).IsLeapDay(iYear, iMonth, iDay))\n         Console.WriteLine(&quot;   IsLeapMonth: {0}&quot;, myCals(i).IsLeapMonth(iYear, iMonth))\n         Console.WriteLine(&quot;   IsLeapYear:  {0}&quot;, myCals(i).IsLeapYear(iYear))\n      Next i \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesCalendar \n\n\n&#39;This code produces the following output.  The results vary depending on the date.\n\n&#39;\n\n&#39;System.Globalization.GregorianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.HebrewCalendar, Year: 5763\n\n&#39;   MonthsInYear: 13\n\n&#39;   DaysInYear: 385\n\n&#39;   Days in each month:\n\n&#39;       30    30    30    29    30    30    29    30    29    30    29    30    29   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.HijriCalendar, Year: 1423\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 355\n\n&#39;   Days in each month:\n\n&#39;       30    29    30    29    30    29    30    29    30    29    30    30   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  True\n\n&#39;\n\n&#39;System.Globalization.JapaneseCalendar, Year: 14\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.JulianCalendar, Year: 2002\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.KoreanCalendar, Year: 4335\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.TaiwanCalendar, Year: 91\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n\n&#39;\n\n&#39;System.Globalization.ThaiBuddhistCalendar, Year: 2545\n\n&#39;   MonthsInYear: 12\n\n&#39;   DaysInYear: 365\n\n&#39;   Days in each month:\n\n&#39;       31    28    31    30    31    30    31    31    30    31    30    31   \n\n&#39;   IsLeapDay:   False\n\n&#39;   IsLeapMonth: False\n\n&#39;   IsLeapYear:  False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar_Compare#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates an instance of every Calendar type.\n   array&lt;Calendar^&gt;^myCals = gcnew array&lt;Calendar^&gt;(8);\n   myCals[ 0 ] = gcnew GregorianCalendar;\n   myCals[ 1 ] = gcnew HebrewCalendar;\n   myCals[ 2 ] = gcnew HijriCalendar;\n   myCals[ 3 ] = gcnew JapaneseCalendar;\n   myCals[ 4 ] = gcnew JulianCalendar;\n   myCals[ 5 ] = gcnew KoreanCalendar;\n   myCals[ 6 ] = gcnew TaiwanCalendar;\n   myCals[ 7 ] = gcnew ThaiBuddhistCalendar;\n\n   // For each calendar, displays the current year, the number of months in that year,\n   // and the number of days in each month of that year.\n      int i;\n   int j;\n   int iYear;\n   int iMonth;\n   int iDay;\n   DateTime myDT = DateTime::Today;\n   for ( i = 0; i &lt; myCals-&gt;Length; i++ )\n   {\n      iYear = myCals[ i ]-&gt;GetYear( myDT );\n      Console::WriteLine();\n      Console::WriteLine( &quot; {0}, Year: {1}&quot;, myCals[ i ]-&gt;GetType(), myCals[ i ]-&gt;GetYear( myDT ) );\n      Console::WriteLine( &quot;   MonthsInYear: {0}&quot;, myCals[ i ]-&gt;GetMonthsInYear( iYear ) );\n      Console::WriteLine( &quot;   DaysInYear: {0}&quot;, myCals[ i ]-&gt;GetDaysInYear( iYear ) );\n      Console::WriteLine( &quot;   Days in each month:&quot; );\n      Console::Write( &quot;      &quot; );\n      for ( j = 1; j &lt;= myCals[ i ]-&gt;GetMonthsInYear( iYear ); j++ )\n         Console::Write( &quot; {0, -5}&quot;, myCals[ i ]-&gt;GetDaysInMonth( iYear, j ) );\n      Console::WriteLine();\n      iMonth = myCals[ i ]-&gt;GetMonth( myDT );\n      iDay = myCals[ i ]-&gt;GetDayOfMonth( myDT );\n      Console::WriteLine( &quot;   IsLeapDay: {0}&quot;, myCals[ i ]-&gt;IsLeapDay( iYear, iMonth, iDay ) );\n      Console::WriteLine( &quot;   IsLeapMonth: {0}&quot;, myCals[ i ]-&gt;IsLeapMonth( iYear, iMonth ) );\n      Console::WriteLine( &quot;   IsLeapYear: {0}&quot;, myCals[ i ]-&gt;IsLeapYear( iYear ) );\n\n   }\n}\n\n/*\nThis code produces the following output.  The results vary depending on the date.\n\nSystem::Globalization::GregorianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::HebrewCalendar, Year: 5763\nMonthsInYear: 13\nDaysInYear: 385\nDays in each month:\n30    30    30    29    30    30    29    30    29    30    29    30    29\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::HijriCalendar, Year: 1423\nMonthsInYear: 12\nDaysInYear: 355\nDays in each month:\n30    29    30    29    30    29    30    29    30    29    30    30\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  True\n\nSystem::Globalization::JapaneseCalendar, Year: 14\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::JulianCalendar, Year: 2002\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::KoreanCalendar, Year: 4335\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::TaiwanCalendar, Year: 91\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\nSystem::Globalization::ThaiBuddhistCalendar, Year: 2545\nMonthsInYear: 12\nDaysInYear: 365\nDays in each month:\n31    28    31    30    31    30    31    31    30    31    30    31\nIsLeapDay:   False\nIsLeapMonth: False\nIsLeapYear:  False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_IsLeapYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsLeapYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To make up for the difference between the calendar year and the actual time that the earth rotates around the sun or the actual time that the moon rotates around the earth, a leap year has a different number of days from a standard calendar year. Each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> implementation defines leap years differently.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(Calendar)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only version of the specified <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.Calendar ReadOnly (System.Globalization.Calendar calendar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>calendar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object specified by the <code>calendar</code> parameter, if <code>calendar</code> is read-only.  </p>\n<p> -or-  </p>\n<p> A read-only memberwise clone of the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object specified by <code>calendar</code>, if <code>calendar</code> is not read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>calendar</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 23 that represents the hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 999 that represents the millisecond.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than zero or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than zero or greater than 999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive integer that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 23 that represents the hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 999 that represents the millisecond.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than zero or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than zero or greater than 999.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDateTime method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_Calendar_ToFourDigitYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_Calendar_ToFourDigitYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToFourDigitYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.Calendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ToFourDigitYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A two-digit or four-digit integer that represents the year to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that contains the four-digit representation of <code>year</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit <code>year</code> within that 100-year range. For example, if <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  </p>\n<p> If <code>year</code> is greater than or equal to 100, the value of <code>year</code> is returned unchanged.  </p>\n<p> ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.Calendar.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.Calendar.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddDays\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddHours\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddMilliseconds\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddMinutes\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddMonths\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddSeconds\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddWeeks\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AddYears\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.AlgorithmType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.Clone\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.CurrentEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.Eras\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetDayOfMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetDayOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetDaysInMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetDaysInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetHour\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetMilliseconds\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetMinute\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetMonthsInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetSecond\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetWeekOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.GetYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.IsLeapDay\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.IsLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.IsLeapYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.MaxSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.MinSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.ToFourDigitYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.Calendar.TwoDigitYearMax\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fbf0c247-59fd-5e6c-9798-d27f3d4e8c7b\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\Calendar.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents time in divisions, such as weeks, months, and years.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.Calendar\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.Calendar.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.Calendar.yml","open_to_public_contributors":true,"api_name":["System.Globalization.Calendar","System.Globalization.Calendar..ctor","System.Globalization.Calendar.AddDays","System.Globalization.Calendar.AddHours","System.Globalization.Calendar.AddMilliseconds","System.Globalization.Calendar.AddMinutes","System.Globalization.Calendar.AddMonths","System.Globalization.Calendar.AddSeconds","System.Globalization.Calendar.AddWeeks","System.Globalization.Calendar.AddYears","System.Globalization.Calendar.AlgorithmType","System.Globalization.Calendar.Clone","System.Globalization.Calendar.CurrentEra","System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear","System.Globalization.Calendar.Eras","System.Globalization.Calendar.GetDayOfMonth","System.Globalization.Calendar.GetDayOfWeek","System.Globalization.Calendar.GetDayOfYear","System.Globalization.Calendar.GetDaysInMonth","System.Globalization.Calendar.GetDaysInYear","System.Globalization.Calendar.GetEra","System.Globalization.Calendar.GetHour","System.Globalization.Calendar.GetLeapMonth","System.Globalization.Calendar.GetMilliseconds","System.Globalization.Calendar.GetMinute","System.Globalization.Calendar.GetMonth","System.Globalization.Calendar.GetMonthsInYear","System.Globalization.Calendar.GetSecond","System.Globalization.Calendar.GetWeekOfYear","System.Globalization.Calendar.GetYear","System.Globalization.Calendar.IsLeapDay","System.Globalization.Calendar.IsLeapMonth","System.Globalization.Calendar.IsLeapYear","System.Globalization.Calendar.IsReadOnly","System.Globalization.Calendar.MaxSupportedDateTime","System.Globalization.Calendar.MinSupportedDateTime","System.Globalization.Calendar.ReadOnly","System.Globalization.Calendar.ToDateTime","System.Globalization.Calendar.ToFourDigitYear","System.Globalization.Calendar.TwoDigitYearMax"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.Calendar","System::Globalization::Calendar","System.Globalization.Calendar.#ctor","System::Globalization::Calendar::#ctor","System.Globalization.Calendar.AddDays","System::Globalization::Calendar::AddDays","System.Globalization.Calendar.AddHours","System::Globalization::Calendar::AddHours","System.Globalization.Calendar.AddMilliseconds","System::Globalization::Calendar::AddMilliseconds","System.Globalization.Calendar.AddMinutes","System::Globalization::Calendar::AddMinutes","System.Globalization.Calendar.AddMonths","System::Globalization::Calendar::AddMonths","System.Globalization.Calendar.AddSeconds","System::Globalization::Calendar::AddSeconds","System.Globalization.Calendar.AddWeeks","System::Globalization::Calendar::AddWeeks","System.Globalization.Calendar.AddYears","System::Globalization::Calendar::AddYears","System.Globalization.Calendar.AlgorithmType","System::Globalization::Calendar::AlgorithmType","System.Globalization.Calendar.Clone","System::Globalization::Calendar::Clone","System.Globalization.Calendar.CurrentEra","System::Globalization::Calendar::CurrentEra","System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear","System::Globalization::Calendar::DaysInYearBeforeMinSupportedYear","System.Globalization.Calendar.Eras","System::Globalization::Calendar::Eras","System.Globalization.Calendar.GetDayOfMonth","System::Globalization::Calendar::GetDayOfMonth","System.Globalization.Calendar.GetDayOfWeek","System::Globalization::Calendar::GetDayOfWeek","System.Globalization.Calendar.GetDayOfYear","System::Globalization::Calendar::GetDayOfYear","System.Globalization.Calendar.GetDaysInMonth","System::Globalization::Calendar::GetDaysInMonth","System.Globalization.Calendar.GetDaysInYear","System::Globalization::Calendar::GetDaysInYear","System.Globalization.Calendar.GetEra","System::Globalization::Calendar::GetEra","System.Globalization.Calendar.GetHour","System::Globalization::Calendar::GetHour","System.Globalization.Calendar.GetLeapMonth","System::Globalization::Calendar::GetLeapMonth","System.Globalization.Calendar.GetMilliseconds","System::Globalization::Calendar::GetMilliseconds","System.Globalization.Calendar.GetMinute","System::Globalization::Calendar::GetMinute","System.Globalization.Calendar.GetMonth","System::Globalization::Calendar::GetMonth","System.Globalization.Calendar.GetMonthsInYear","System::Globalization::Calendar::GetMonthsInYear","System.Globalization.Calendar.GetSecond","System::Globalization::Calendar::GetSecond","System.Globalization.Calendar.GetWeekOfYear","System::Globalization::Calendar::GetWeekOfYear","System.Globalization.Calendar.GetYear","System::Globalization::Calendar::GetYear","System.Globalization.Calendar.IsLeapDay","System::Globalization::Calendar::IsLeapDay","System.Globalization.Calendar.IsLeapMonth","System::Globalization::Calendar::IsLeapMonth","System.Globalization.Calendar.IsLeapYear","System::Globalization::Calendar::IsLeapYear","System.Globalization.Calendar.IsReadOnly","System::Globalization::Calendar::IsReadOnly","System.Globalization.Calendar.MaxSupportedDateTime","System::Globalization::Calendar::MaxSupportedDateTime","System.Globalization.Calendar.MinSupportedDateTime","System::Globalization::Calendar::MinSupportedDateTime","System.Globalization.Calendar.ReadOnly","System::Globalization::Calendar::ReadOnly","System.Globalization.Calendar.ToDateTime","System::Globalization::Calendar::ToDateTime","System.Globalization.Calendar.ToFourDigitYear","System::Globalization::Calendar::ToFourDigitYear","System.Globalization.Calendar.TwoDigitYearMax","System::Globalization::Calendar::TwoDigitYearMax"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fbf0c247-59fd-5e6c-9798-d27f3d4e8c7b","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\Calendar.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/Calendar.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Calendar class | Microsoft Docs","_op_ogTitle":"Calendar class","description":"Represents time in divisions, such as weeks, months, and years.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.Calendar","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.calendar","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.calendar","fileRelativePath":"System.Globalization.Calendar.html"},"themesRelativePathToOutputRoot":"_themes/"}