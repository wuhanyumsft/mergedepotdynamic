{"content":"    \r\n    <h1 id=\"System_IO_FileInfo\">\r\n      <span class=\"lang-csharp\">FileInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> objects. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/fileinfo.cs#4ee673c1a4ecad41\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class FileInfo : System.IO.FileSystemInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">System.IO.FileSystemInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FileInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime\" data-linktype=\"relative-path\">CreationTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc\" data-linktype=\"relative-path\">CreationTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Extension\" data-linktype=\"relative-path\">Extension</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_FullName\" data-linktype=\"relative-path\">FullName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_FullPath\" data-linktype=\"relative-path\">FullPath</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime\" data-linktype=\"relative-path\">LastAccessTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime\" data-linktype=\"relative-path\">LastWriteTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_OriginalPath\" data-linktype=\"relative-path\">OriginalPath</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh\" data-linktype=\"relative-path\">Refresh()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/fileinfo.cs#4ee673c1a4ecad41\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Use the FileInfo class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to files.  </p>\n<p> If you are performing multiple operations on the same file, it can be more efficient to use FileInfo instance methods instead of the corresponding static methods of the <a class=\"xref\" href=\"system.io.file\" data-linktype=\"relative-path\">File</a> class, because a security check will not always be necessary.  </p>\n<p> Many of the FileInfo methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific FileInfo members such as <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Open_\" data-linktype=\"relative-path\">Open</a>, <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_OpenRead_\" data-linktype=\"relative-path\">OpenRead</a>, <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_OpenText_\" data-linktype=\"relative-path\">OpenText</a>, <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_CreateText_\" data-linktype=\"relative-path\">CreateText</a>, or <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Create_\" data-linktype=\"relative-path\">Create</a>.  </p>\n<p> By default, full read/write access to new files is granted to all users.  </p>\n<p> The following table describes the enumerations that are used to customize the behavior of various FileInfo methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Enumeration</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></td>\n<td>Specifies read and write access to a file.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a></td>\n<td>Specifies the level of access permitted for a file that is already in use.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></td>\n<td>Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, &quot;c:\\temp c:\\windows&quot; also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  </p>\n</div>\n<p> In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  </p>\n<ul>\n<li><p>&quot;c:\\\\MyDir\\\\MyFile.txt&quot; in C#, or &quot;c:\\MyDir\\MyFile.txt&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;c:\\\\MyDir&quot; in C#, or &quot;c:\\MyDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;MyDir\\\\MySubdir&quot; in C#, or &quot;MyDir\\MySubDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;\\\\\\\\MyServer\\\\MyShare&quot; in C#, or &quot;\\\\MyServer\\MyShare&quot; in Visual Basic.  </p>\n<p>The FileInfo class provides the following properties that enable you to retrieve information about a file. For an example of how to use each property, see the property pages.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Directory_\" data-linktype=\"relative-path\">Directory</a> property retrieves an object that represents the parent directory of a file.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_DirectoryName_\" data-linktype=\"relative-path\">DirectoryName</a> property retrieves the full path of the parent directory of a file.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Exists_\" data-linktype=\"relative-path\">Exists</a> property checks for the presence of a file before operating on it.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property retrieves or sets a value that specifies whether a file can be modified.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a> retrieves the size of a file.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Name_\" data-linktype=\"relative-path\">Name</a> retrieves the name of a file.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo__ctor_System_String_\" data-linktype=\"self-bookmark\">FileInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> class, which acts as a wrapper for a file path.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Directory\" data-linktype=\"self-bookmark\">Directory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an instance of the parent directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_DirectoryName\" data-linktype=\"self-bookmark\">DirectoryName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representing the directory&#39;s full path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Exists\" data-linktype=\"self-bookmark\">Exists</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a file exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that determines if the current file is read only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size, in bytes, of the current file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the file.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_AppendText\" data-linktype=\"self-bookmark\">AppendText()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that appends text to the file represented by this instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_CopyTo_System_String_\" data-linktype=\"self-bookmark\">CopyTo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies an existing file to a new file, disallowing the overwriting of an existing file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_CopyTo_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CopyTo(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies an existing file to a new file, allowing the overwriting of an existing file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_CreateText\" data-linktype=\"self-bookmark\">CreateText()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that writes a new text file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Decrypt\" data-linktype=\"self-bookmark\">Decrypt()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrypts a file that was encrypted by the current account using the <span class=\"xref\">stem.IO.FileInfo.Encrypt*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Delete\" data-linktype=\"self-bookmark\">Delete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Permanently deletes a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Encrypt\" data-linktype=\"self-bookmark\">Encrypt()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encrypts a file so that only the account used to encrypt the file can decrypt it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_GetAccessControl\" data-linktype=\"self-bookmark\">GetAccessControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control list (ACL) entries for the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_GetAccessControl_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">GetAccessControl(AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_MoveTo_System_String_\" data-linktype=\"self-bookmark\">MoveTo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Open_System_IO_FileMode_\" data-linktype=\"self-bookmark\">Open(FileMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file in the specified mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Open_System_IO_FileMode_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">Open(FileMode,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file in the specified mode with read, write, or read/write access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Open_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\" data-linktype=\"self-bookmark\">Open(FileMode,FileAccess,FileShare)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_OpenRead\" data-linktype=\"self-bookmark\">OpenRead()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a read-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_OpenText\" data-linktype=\"self-bookmark\">OpenText()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> with UTF8 encoding that reads from an existing text file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_OpenWrite\" data-linktype=\"self-bookmark\">OpenWrite()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a write-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Replace_System_String_System_String_\" data-linktype=\"self-bookmark\">Replace(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the contents of a specified file with the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object, deleting the original file, and creating a backup of the replaced file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_Replace_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Replace(String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the contents of a specified file with the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_SetAccessControl_System_Security_AccessControl_FileSecurity_\" data-linktype=\"self-bookmark\">SetAccessControl(FileSecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_FileInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the path as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo__ctor_System_String_\">\r\n    \r\n            <a id=\"System_IO_FileInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> class, which acts as a wrapper for a file path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public FileInfo (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The file name is empty, contains only white spaces, or contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>Access to <code>fileName</code> is denied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>fileName</code> contains a colon (:) in the middle of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify either the fully qualified or the relative file name, but the security check gets the fully qualified name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this constructor to create two files, which are then written to, read from, copied, and deleted.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo ctor#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi1 = gcnew FileInfo( path );\n   if (  !fi1-&gt;Exists )\n   {\n      //Create a file to write to.\n      StreamWriter^ sw = fi1-&gt;CreateText();\n      try\n      {\n         sw-&gt;WriteLine( &quot;Hello&quot; );\n         sw-&gt;WriteLine( &quot;And&quot; );\n         sw-&gt;WriteLine( &quot;Welcome&quot; );\n      }\n      finally\n      {\n         if ( sw )\n            delete (IDisposable^)sw;\n      }\n   }\n\n   //Open the file to read from.\n   StreamReader^ sr = fi1-&gt;OpenText();\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n\n   try\n   {\n      String^ path2 = String::Concat( path, &quot;temp&quot; );\n      FileInfo^ fi2 = gcnew FileInfo( path2 );\n      \n      //Ensure that the target does not exist.\n      fi2-&gt;Delete();\n      \n      //Copy the file.\n      fi1-&gt;CopyTo( path2 );\n      Console::WriteLine( &quot;{0} was copied to {1}.&quot;, path, path2 );\n      \n      //Delete the newly created file.\n      fi2-&gt;Delete();\n      Console::WriteLine( &quot;{0} was successfully deleted.&quot;, path2 );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo ctor#1\">using System;\nusing System.IO;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        FileInfo fi1 = new FileInfo(path);\n\n        if (!fi1.Exists) \n        {\n            //Create a file to write to.\n            using (StreamWriter sw = fi1.CreateText()) \n            {\n                sw.WriteLine(&quot;Hello&quot;);\n                sw.WriteLine(&quot;And&quot;);\n                sw.WriteLine(&quot;Welcome&quot;);\n            }\t\n        }\n\n        //Open the file to read from.\n        using (StreamReader sr = fi1.OpenText()) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n\n        try \n        {\n            string path2 = path + &quot;temp&quot;;\n            FileInfo fi2 = new FileInfo(path2);\n\n            //Ensure that the target does not exist.\n            fi2.Delete();\n\n            //Copy the file.\n            fi1.CopyTo(path2);\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2);\n\n            //Delete the newly created file.\n            fi2.Delete();\n            Console.WriteLine(&quot;{0} was successfully deleted.&quot;, path2);\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo ctor#1\">Imports System\nImports System.IO\n\nClass Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim fi1 As FileInfo = New FileInfo(path)\n\n        If fi1.Exists = False Then\n            &#39;Create a file to write to.\n            Dim sw As StreamWriter = fi1.CreateText()\n            sw.WriteLine(&quot;Hello&quot;)\n            sw.WriteLine(&quot;And&quot;)\n            sw.WriteLine(&quot;Welcome&quot;)\n            sw.Flush()\n            sw.Close()\n        End If\n\n        &#39;Open the file to read from.\n        Dim sr As StreamReader = fi1.OpenText()\n\n        Do While sr.Peek() &gt;= 0\n            Console.WriteLine(sr.ReadLine())\n        Loop\n\n        Try\n            Dim path2 As String = path + &quot;temp&quot;\n            Dim fi2 As FileInfo = New FileInfo(path2)\n\n            &#39;Ensure that the target does not exist.\n            fi2.Delete()\n\n            &#39;Copy the file.\n            fi1.CopyTo(path2)\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2)\n\n            &#39;Delete the newly created file.\n            fi2.Delete()\n            Console.WriteLine(&quot;{0} was successfully deleted.&quot;, path2)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Hello\n&#39;And\n&#39;Welcome\n&#39;c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n&#39;c:\\MyTest.txttemp was successfully deleted.\n</code></pre><p> The following example opens an existing file or creates a file, appends text to the file, and displays the results.  </p>\n<pre><code class=\"lang-cpp\" name=\"fileinfomain#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Open an existing file, or create a new one.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Create a writer, ready to add entries to the file.\n   StreamWriter^ sw = fi-&gt;AppendText();\n   sw-&gt;WriteLine( &quot;This is a new entry to add to the file&quot; );\n   sw-&gt;WriteLine( &quot;This is yet another line to add...&quot; );\n   sw-&gt;Flush();\n   sw-&gt;Close();\n   \n   // Get the information out of the file and display it.\n   StreamReader^ sr = gcnew StreamReader( fi-&gt;OpenRead() );\n   while ( sr-&gt;Peek() != -1 )\n      Console::WriteLine( sr-&gt;ReadLine() );\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is a new entry to add to the file\n//This is yet another line to add...\n</code></pre><pre><code class=\"lang-cs\" name=\"fileinfomain#1\">using System;\nusing System.IO;\n\npublic class FileInfoMainTest \n{\n    public static void Main() \n    {\n        // Open an existing file, or create a new one.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(&quot;This is a new entry to add to the file&quot;);\n        sw.WriteLine(&quot;This is yet another line to add...&quot;);\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        StreamReader sr = new StreamReader( fi.OpenRead() );\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Add as many lines as you like...\n//Add another line to the output...\n//This is a new entry to add to the file\n//This is yet another line to add...\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfomain#1\">Imports System\nImports System.IO\n\nPublic Class FileInfoMainTest\n\n    Public Shared Sub Main()\n        &#39; Open an existing file, or create a new one.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n        &#39; Create a writer, ready to add entries to the file.\n        Dim sw As StreamWriter = fi.AppendText()\n        sw.WriteLine(&quot;This is a new entry to add to the file&quot;)\n        sw.WriteLine(&quot;This is yet another line to add...&quot;)\n        sw.Flush()\n        sw.Close()\n        Dim sr As New StreamReader(fi.OpenRead())\n        &#39; Get the information out of the file and display it.\n        While sr.Peek() &lt;&gt; -1\n            Console.WriteLine(sr.ReadLine())\n        End While\n    End Sub &#39;Main\nEnd Class &#39;FileInfoMainTest\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is a new entry to add to the file\n&#39;This is yet another line to add...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Directory\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Directory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Directory</div>        \r\n          </div>\r\n    \r\n            <p>Gets an instance of the parent directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo Directory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object representing the parent directory of this file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the parent directory as a string, use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_DirectoryName_\" data-linktype=\"relative-path\">DirectoryName</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens or creates a file, determines its full path, and determines and displays the full contents of the directory.  </p>\n<pre><code class=\"lang-cs\" name=\"fileinfodirectory#1\">using System;\nusing System.IO;\n\npublic class DirectoryTest \n{\n    public static void Main() \n    {\n\n        // Open an existing file, or create a new one.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n\n        // Determine the full path of the file just created.\n        DirectoryInfo di = fi.Directory;\n\n        // Figure out what other entries are in that directory.\n        FileSystemInfo[] fsi = di.GetFileSystemInfos();\n\n        Console.WriteLine(&quot;The directory &#39;{0}&#39; contains the following files and directories:&quot;, di.FullName);\n\n        // Print the names of all the files and subdirectories of that directory.\n        foreach (FileSystemInfo info in fsi)\n            Console.WriteLine(info.Name);\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The directory &#39;C:\\Visual Studio 2005\\release&#39; contains the following files \n//and directories:\n//TempPE\n//fileinfodirectory.exe\n//fileinfodirectory.pdb\n//newTemp.txt\n//temp.txt\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfodirectory#1\">Imports System\nImports System.IO\n\nPublic Class DirectoryTest\n\n    Public Shared Sub Main()\n        &#39; Open an existing file, or create a new one.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n\n        &#39; Determine the full path of the file just created.\n        Dim di As DirectoryInfo = fi.Directory\n\n        &#39; Figure out what other entries are in that directory.\n        Dim fsi As FileSystemInfo() = di.GetFileSystemInfos()\n\n        &#39; Print the names of all the files and subdirectories of that directory.\n        Console.WriteLine(&quot;The directory &#39;{0}&#39; contains the following files and directories:&quot;, di.FullName)\n        Dim info As FileSystemInfo\n        For Each info In fsi\n            Console.WriteLine(info.Name)\n        Next info\n    End Sub &#39;Main\nEnd Class &#39;DirectoryTest\n\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;The directory &#39;C:\\Visual Studio 2005\\release&#39; contains the following files \n&#39;and directories:\n&#39;TempPE\n&#39;fileinfodirectory.exe\n&#39;fileinfodirectory.pdb\n&#39;fileinfodirectory.Resources.resources\n&#39;fileinfodirectory.vbproj.GenerateResource.Cache\n&#39;fileinfodirectory.xml\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"fileinfodirectory#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Open an existing file, or create a new one.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Determine the full path of the file just created.\n   DirectoryInfo^ di = fi-&gt;Directory;\n   \n   // Figure out what other entries are in that directory.\n   array&lt;FileSystemInfo^&gt;^fsi = di-&gt;GetFileSystemInfos();\n   Console::WriteLine( &quot;The directory &#39;{0}&#39; contains the following files and directories:&quot;, di-&gt;FullName );\n   \n   // Print the names of all the files and subdirectories of that directory.\n   Collections::IEnumerator^ myEnum = fsi-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      FileSystemInfo^ info = safe_cast&lt;FileSystemInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( info-&gt;Name );\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The directory &#39;C:\\Visual Studio 2005\\release&#39; contains the following files \n//and directories:\n//fileinfodirectory.exe\n//fileinfodirectory.pdb\n//newTemp.txt\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_DirectoryName\">\r\n    \r\n            <a id=\"System_IO_FileInfo_DirectoryName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DirectoryName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representing the directory&#39;s full path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DirectoryName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the directory&#39;s full path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>null</code> was passed in for the directory name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The fully qualified path is 260 or more characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the parent directory as a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object, use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Directory_\" data-linktype=\"relative-path\">Directory</a> property.  </p>\n<p> When first called, <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> calls <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> and caches information about the file. On subsequent calls, you must call <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> to get the latest copy of the information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the full path of the specified file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.FileInfo members#3\">        string   fileName = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;MP\\log.txt&quot;;\n        FileInfo fileInfo = new FileInfo(fileName);\n        if (!fileInfo.Exists)\n        {\n            return;\n        }\n\n        Console.WriteLine(&quot;{0} has a directoryName of {1}&quot;,\n            fileName, fileInfo.DirectoryName);\n        /* This code produces output similar to the following,\n         * though actual results may vary by machine:\n         *\n         * C:&nbsp;&nbsp;&nbsp;&nbsp;MP\\log.txt has a directory name of C:&nbsp;&nbsp;&nbsp;&nbsp;MP\n         */\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.FileInfo members#3\">   String^ fileName = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;MP\\\\log.txt&quot;;\n   FileInfo^ fileInfo = gcnew FileInfo( fileName );\n   if (  !fileInfo-&gt;Exists )\n   {\n      return;\n   }\n\n   Console::WriteLine( &quot; {0} has a directoryName of {1}&quot;,\n      fileName, fileInfo-&gt;DirectoryName );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.FileInfo members#3\">        Dim fileName As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;MP\\log.txt&quot;\n        Dim fileInfo As New FileInfo(fileName)\n        If Not fileInfo.Exists Then\n            Return\n        End If\n\n        Console.WriteLine(&quot;{0} has a directoryName of {1}&quot;, fileName, fileInfo.DirectoryName)\n        &#39; This code produces output similar to the following,\n        &#39; though actual results may vary by machine:\n        &#39; \n        &#39; C:&nbsp;&nbsp;&nbsp;&nbsp;MP\\log.txt has a directory name of C:&nbsp;&nbsp;&nbsp;&nbsp;MP\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Exists\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a file exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Exists { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the file exists; <code>false</code> if the file does not exist or if the file is a directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When first called, <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> calls <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> and caches information about the file. On subsequent calls, you must call <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> to get the latest copy of the information.  </p>\n<p> The Exists property returns <code>false</code> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Exists property ensure a file exists before opening it.  You can use this technique to throw a custom exception when the file is not found.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.FileInfo.Exists#1\">array&lt;Byte&gt;^ Openfile(String^ fileName)\n{\n    // Check the fileName argument.\n    if (fileName == nullptr || fileName-&gt;Length == 0)\n    {\n        throw gcnew ArgumentNullException(&quot;fileName&quot;);\n    }\n\n    // Check to see if the file exists.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\n    // You can throw a personalized exception if\n    // the file does not exist.\n    if (!fInfo-&gt;Exists)\n    {\n        throw gcnew FileNotFoundException(&quot;The file was not found.&quot;,\n            fileName);\n    }\n\n    try\n    {\n        // Open the file.\n        FileStream^ fStream = gcnew FileStream(fileName, FileMode::Open);\n\n        // Create a buffer.\n        array&lt;Byte&gt;^ buffer = gcnew array&lt;Byte&gt;(fStream-&gt;Length);\n\n        // Read the file contents to the buffer.\n        fStream-&gt;Read(buffer, 0, (int)fStream-&gt;Length);\n\n        // return the buffer.\n        return buffer;\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n        return nullptr;\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.FileInfo.Exists#1\">    public byte[] OpenDataFile(string FileName)\n    {\n        // Check the FileName argument.\n        if (FileName == null || FileName.Length == 0)\n        {\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        }\n\n        // Check to see if the file exists.\n        FileInfo fInfo = new FileInfo(FileName);\n        \n        // You can throw a personalized exception if \n        // the file does not exist.\n        if (!fInfo.Exists)\n        {\n            throw new FileNotFoundException(&quot;The file was not found.&quot;, FileName);\n        }\n\n        // Open the file.\n        FileStream fStream = new FileStream(FileName, FileMode.Open);\n\n        // Create a buffer.\n        byte [] buffer = new byte[fStream.Length];\n\n        // Read the file contents to the buffer.\n        fStream.Read(buffer, 0, (int)fStream.Length);\n\n        // return the buffer.\n        return buffer;\n\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.Exists#1\">    Function OpenDataFile(ByVal FileName As String) As Byte()\n        &#39; Check the FileName argument.\n        If FileName Is Nothing OrElse FileName.Length = 0 Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n\n        &#39; Check to see if the file exists.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; You can throw a personalized exception if \n        &#39; the file does not exist.\n        If Not fInfo.Exists Then\n            Throw New FileNotFoundException(&quot;The file was not found.&quot;, FileName)\n        End If\n\n        &#39; Open the file.\n        Dim fStream As New FileStream(FileName, FileMode.Open)\n\n        &#39; Create a buffer.\n        Dim buffer(fStream.Length) As Byte\n\n        &#39; Read the file contents to the buffer.\n        fStream.Read(buffer, 0, Fix(fStream.Length))\n\n        &#39; return the buffer.\n        Return buffer\n\n    End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_IsReadOnly\">\r\n    \r\n            <a id=\"System_IO_FileInfo_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that determines if the current file is read only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current file is read only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The user does not have write permission, but attempted to set this property to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the IsReadOnly property to quickly determine or change whether the current file is read only.  </p>\n<p> When first called, <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> calls <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> and caches information about the file. On subsequent calls, you must call <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> to get the latest copy of the information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the IsReadOnly property to mark a file as read only and then mark it as read-write.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.FileInfo.IsReadOnly#1\">using System;\nusing System.IO;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n\n            string FileName = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;;\n\n            // Get the read-only value for a file.\n            bool isReadOnly = IsFileReadOnly(FileName);\n\n            // Display wether the file is read-only.\n            Console.WriteLine(&quot;The file read-only value for &quot; + FileName + &quot; is: &quot; + isReadOnly);\n\n            Console.WriteLine(&quot;Changing the read-only value for &quot; + FileName + &quot; to true.&quot;);\n\n            // Set the file to read-only.\n            SetFileReadAccess(FileName, true);\n\n            // Get the read-only value for a file.\n            isReadOnly = IsFileReadOnly(FileName);\n\n            // Display that the file is read-only.\n            Console.WriteLine(&quot;The file read-only value for &quot; + FileName + &quot; is: &quot; + isReadOnly);\n\n\n        }\n\n        // Sets the read-only value of a file.\n        public static void SetFileReadAccess(string FileName, bool SetReadOnly)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Set the IsReadOnly property.\n            fInfo.IsReadOnly = SetReadOnly;\n\n        }\n\n        // Returns wether a file is read-only.\n        public static bool IsFileReadOnly(string FileName)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Return the IsReadOnly property value.\n            return fInfo.IsReadOnly;\n\n        }\n\n    }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is: True\n//Changing the read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml to true.\n//The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is: True\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.IsReadOnly#1\">Imports System\nImports System.IO\n\n\n\nModule FileExample\n\n    Sub Main()\n\n        Dim FileName As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;\n\n        &#39; Get the read-only value for a file.\n        Dim isReadOnly As Boolean = IsFileReadOnly(FileName)\n\n        &#39; Display wether the file is read-only.\n        Console.WriteLine(&quot;The file read-only value for &quot; &amp; FileName &amp; &quot; is: &quot; &amp; isReadOnly)\n\n        Console.WriteLine(&quot;Changing the read-only value for &quot; &amp; FileName &amp; &quot; to true.&quot;)\n\n        &#39; Set the file to read-only.\n        SetFileReadAccess(FileName, True)\n\n        &#39; Get the read-only value for a file.\n        isReadOnly = IsFileReadOnly(FileName)\n\n        &#39; Display that the file is read-only.\n        Console.WriteLine(&quot;The file read-only value for &quot; &amp; FileName &amp; &quot; is: &quot; &amp; isReadOnly)\n\n    End Sub\n\n\n    &#39; Sets the read-only value of a file.\n    Sub SetFileReadAccess(ByVal FileName As String, ByVal SetReadOnly As Boolean)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Set the IsReadOnly property.\n        fInfo.IsReadOnly = SetReadOnly\n\n    End Sub\n\n\n    &#39; Returns wether a file is read-only.\n    Function IsFileReadOnly(ByVal FileName As String) As Boolean\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Return the IsReadOnly property value.\n        Return fInfo.IsReadOnly\n\n    End Function\nEnd Module\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is: True\n&#39;Changing the read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml to true.\n&#39;The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is: True\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.FileInfo.IsReadOnly#1\">using namespace System;\nusing namespace System::IO;\n\nnamespace FileSystemExample\n{\n    // Sets the read-only value of a file.\n    void SetFileReadAccess(String^ fileName, bool setReadOnly)\n    {\n        // Create a new FileInfo object.\n        FileInfo^ fInfo = gcnew FileInfo(fileName);\n\n        // Set the IsReadOnly property.\n        fInfo-&gt;IsReadOnly = setReadOnly;\n    }\n\n    // Returns whether a file is read-only.\n    bool IsFileReadOnly(String^ fileName)\n    {\n        // Create a new FileInfo object.\n        FileInfo^ fInfo = gcnew FileInfo(fileName);\n\n        // Return the IsReadOnly property value.\n        return fInfo-&gt;IsReadOnly;\n    }\n}\n\nint main()\n{\n    try\n    {\n\t\tString^ fileName = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;;\n\n        if (File::Exists(fileName))\n        {\n            // Get the read-only value for a file.\n            bool isReadOnly = FileSystemExample::IsFileReadOnly(fileName);\n\n            // Display whether the file is read-only.\n            Console::WriteLine(&quot;The file read-only value for {0} is:&quot; +\n                &quot;{1}&quot;, fileName, isReadOnly);\n\n            Console::WriteLine(&quot;Changing the read-only value for {0}&quot; +\n                &quot; to true.&quot;, fileName);\n\n            // Set the file to read-only.\n            FileSystemExample::SetFileReadAccess(fileName, true);\n\n            // Get the read-only value for a file.\n            isReadOnly = FileSystemExample::IsFileReadOnly(fileName);\n\n            // Display that the file is read-only.\n            Console::WriteLine(&quot;The file read-only value for {0} is:&quot; +\n                &quot;{1}&quot;, fileName, isReadOnly);\n        }\n        else\n        {\n            Console::WriteLine(&quot;The file {0} doesn&#39;t exist.&quot;, fileName);\n        }\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n};\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is:False\n//Changing the read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml to true.\n//The file read-only value for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml is:True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Length\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size, in bytes, of the current file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The size of the current file in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.IO.FileSystemInfo.Refresh*</span> cannot update the state of the file or directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file does not exist.  </p>\n<p> -or-  </p>\n<p> The <code>Length</code> property is called for a directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Length property is pre-cached if the current instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object was returned from any of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>methods:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a>  \n\n<p>To get the latest value, call the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the size of the specified files.  </p>\n<pre><code class=\"lang-cpp\" name=\"FileLength#1\">// The following example displays the names and sizes\n// of the files in the specified directory.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Make a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;c:\\\\&quot; );\n   \n   // Get a reference to each file in that directory.\n   array&lt;FileInfo^&gt;^fiArr = di-&gt;GetFiles();\n   \n   // Display the names and sizes of the files.\n   Console::WriteLine( &quot;The directory {0} contains the following files:&quot;, di-&gt;Name );\n   System::Collections::IEnumerator^ myEnum = fiArr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      FileInfo^ f = safe_cast&lt;FileInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;The size of {0} is {1} bytes.&quot;, f-&gt;Name, f-&gt;Length );\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The directory c:\\ contains the following files:\n//The size of MyComputer.log is 274 bytes.\n//The size of AUTOEXEC.BAT is 0 bytes.\n//The size of boot.ini is 211 bytes.\n//The size of CONFIG.SYS is 0 bytes.\n//The size of hiberfil.sys is 1072775168 bytes.\n//The size of IO.SYS is 0 bytes.\n//The size of MASK.txt is 2700 bytes.\n//The size of mfc80.dll is 1093632 bytes.\n//The size of mfc80u.dll is 1079808 bytes.\n//The size of MSDOS.SYS is 0 bytes.\n//The size of NTDETECT.COM is 47564 bytes.\n//The size of ntldr is 250032 bytes.\n//The size of pagefile.sys is 1610612736 bytes.\n//The size of UpdatePatch.log is 22778 bytes.\n//The size of UpdatePatch.txt is 30 bytes.\n//The size of wt3d.ini is 234 bytes.\n</code></pre><pre><code class=\"lang-cs\" name=\"FileLength#1\">// The following example displays the names and sizes\n// of the files in the specified directory.\nusing System;\nusing System.IO;\n\npublic class FileLength\n{\n    public static void Main()\n    {\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;c:\\\\&quot;);\n        // Get a reference to each file in that directory.\n        FileInfo[] fiArr = di.GetFiles();\n        // Display the names and sizes of the files.\n        Console.WriteLine(&quot;The directory {0} contains the following files:&quot;, di.Name);\n        foreach (FileInfo f in fiArr)\n            Console.WriteLine(&quot;The size of {0} is {1} bytes.&quot;, f.Name, f.Length);\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The directory c:\\ contains the following files:\n//The size of MyComputer.log is 274 bytes.\n//The size of AUTOEXEC.BAT is 0 bytes.\n//The size of boot.ini is 211 bytes.\n//The size of CONFIG.SYS is 0 bytes.\n//The size of hiberfil.sys is 1072775168 bytes.\n//The size of IO.SYS is 0 bytes.\n//The size of MASK.txt is 2700 bytes.\n//The size of mfc80.dll is 1093632 bytes.\n//The size of mfc80u.dll is 1079808 bytes.\n//The size of MSDOS.SYS is 0 bytes.\n//The size of NTDETECT.COM is 47564 bytes.\n//The size of ntldr is 250032 bytes.\n//The size of pagefile.sys is 1610612736 bytes.\n//The size of UpdatePatch.log is 22778 bytes.\n//The size of UpdatePatch.txt is 30 bytes.\n//The size of wt3d.ini is 234 bytes.\n</code></pre><pre><code class=\"lang-vb\" name=\"FileLength#1\">&#39; The following example displays the names and sizes\n&#39; of the files in the specified directory.\nImports System\nImports System.IO\n\nPublic Class FileLength\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;c:\\&quot;)\n        &#39; Get a reference to each file in that directory.\n        Dim fiArr As FileInfo() = di.GetFiles()\n        &#39; Display the names and sizes of the files.\n        Dim f As FileInfo\n        Console.WriteLine(&quot;The directory {0} contains the following files:&quot;, di.Name)\n        For Each f In fiArr\n            Console.WriteLine(&quot;The size of {0} is {1} bytes.&quot;, f.Name, f.Length)\n        Next f\n    End Sub &#39;Main\nEnd Class &#39;FileLength \n\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;The directory c:\\ contains the following files:\n&#39;The size of MyComputer.log is 274 bytes.\n&#39;The size of AUTOEXEC.BAT is 0 bytes.\n&#39;The size of boot.ini is 211 bytes.\n&#39;The size of CONFIG.SYS is 0 bytes.\n&#39;The size of hiberfil.sys is 1072775168 bytes.\n&#39;The size of IO.SYS is 0 bytes.\n&#39;The size of MASK.txt is 2700 bytes.\n&#39;The size of mfc80.dll is 1093632 bytes.\n&#39;The size of mfc80u.dll is 1079808 bytes.\n&#39;The size of MSDOS.SYS is 0 bytes.\n&#39;The size of NTDETECT.COM is 47564 bytes.\n&#39;The size of ntldr is 250032 bytes.\n&#39;The size of pagefile.sys is 1610612736 bytes.\n&#39;The size of UpdatePatch.log is 22778 bytes.\n&#39;The size of UpdatePatch.txt is 30 bytes.\n&#39;The size of wt3d.ini is 234 bytes.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Name\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When first called, <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> calls <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> and caches information about the file. On subsequent calls, you must call <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh_\" data-linktype=\"relative-path\">Refresh</a> to get the latest copy of the information.  </p>\n<p> The name of the file includes the file extension.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Name</code> property to display the names of files in the current directory.  </p>\n<pre><code class=\"lang-cs\" name=\"fileinfoname#1\">using System;\nusing System.IO;\n\npublic class NameTest \n{\n    public static void Main() \n    {\n        // Create a reference to the current directory.\n        DirectoryInfo di = new DirectoryInfo(Environment.CurrentDirectory);\n        // Create an array representing the files in the current directory.\n        FileInfo[] fi = di.GetFiles();\n        Console.WriteLine(&quot;The following files exist in the current directory:&quot;);\n        // Print out the names of the files in the current directory.\n        foreach (FileInfo fiTemp in fi)\n            Console.WriteLine(fiTemp.Name);\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The following files exist in the current directory:\n//fileinfoname.exe\n//fileinfoname.pdb\n//newTemp.txt\n</code></pre><pre><code class=\"lang-cpp\" name=\"fileinfoname#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create a reference to the current directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( Environment::CurrentDirectory );\n   \n   // Create an array representing the files in the current directory.\n   array&lt;FileInfo^&gt;^fi = di-&gt;GetFiles();\n   Console::WriteLine( &quot;The following files exist in the current directory:&quot; );\n   \n   // Print out the names of the files in the current directory.\n   Collections::IEnumerator^ myEnum = fi-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      FileInfo^ fiTemp = safe_cast&lt;FileInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( fiTemp-&gt;Name );\n   }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The following files exist in the current directory:\n//fileinfoname.exe\n//fileinfoname.pdb\n//newTemp.txt\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfoname#1\">Imports System\nImports System.IO\n\nPublic Class NameTest\n    Public Shared Sub Main()\n        &#39; Create a reference to the current directory.\n        Dim di As New DirectoryInfo(Environment.CurrentDirectory)\n        &#39; Create an array representing the files in the current directory.\n        Dim fi As FileInfo() = di.GetFiles()\n        Console.WriteLine(&quot;The following files exist in the current directory:&quot;)\n        &#39; Print out the names of the files in the current directory.\n        Dim fiTemp As FileInfo\n        For Each fiTemp In fi\n            Console.WriteLine(fiTemp.Name)\n        Next fiTemp\n    End Sub &#39;Main\nEnd Class &#39;NameTest\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;The following files exist in the current directory:\n&#39;newTemp.txt\n&#39;fileinfoname.exe\n&#39;fileinfoname.pdb\n&#39;fileinfoname.Resources.resources\n&#39;fileinfoname.vbproj.GenerateResource.Cache\n&#39;fileinfoname.xml\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_AppendText\">\r\n    \r\n            <a id=\"System_IO_FileInfo_AppendText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendText()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that appends text to the file represented by this instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamWriter AppendText ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a></div>\r\n                  </div>\r\n                  <p>A new <code>StreamWriter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example appends text to a file and reads from the file.  </p>\n<pre><code class=\"lang-vb\" name=\"finfo appendtext#1\">Imports System\nImports System.IO\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim fi As FileInfo = New FileInfo(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;)\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If fi.Exists = False Then\n            &#39;Create a file to write to.\n            sw = fi.CreateText()\n            sw.WriteLine(&quot;Hello&quot;)\n            sw.WriteLine(&quot;And&quot;)\n            sw.WriteLine(&quot;Welcome&quot;)\n            sw.Flush()\n            sw.Close()\n        End If\n\n        &#39; This text will always be added, making the file longer over time\n        &#39; if it is not deleted.\n        sw = fi.AppendText()\n\n        sw.WriteLine(&quot;This&quot;)\n        sw.WriteLine(&quot;is Extra&quot;)\n        sw.WriteLine(&quot;Text&quot;)\n        sw.Flush()\n        sw.Close()\n\n        &#39;Open the file to read from.\n        Dim sr As StreamReader = fi.OpenText()\n        Dim s As String\n        Do While sr.Peek() &gt;= 0\n            s = sr.ReadLine()\n            Console.WriteLine(s)\n        Loop\n        sr.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Hello\n&#39;And\n&#39;Welcome\n&#39;This\n&#39;is Extra\n&#39;Text\n\n&#39;When you run this application a second time, you will see the following output:\n&#39;\n&#39;Hello\n&#39;And\n&#39;Welcome\n&#39;This\n&#39;is Extra\n&#39;Text\n&#39;This\n&#39;is Extra\n&#39;Text\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo appendtext#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   FileInfo^ fi = gcnew FileInfo( &quot;c:\\\\MyTest.txt&quot; );\n   \n   // This text is added only once to the file.\n   if (  !fi-&gt;Exists )\n   {\n      //Create a file to write to.\n      StreamWriter^ sw = fi-&gt;CreateText();\n      try\n      {\n         sw-&gt;WriteLine( &quot;Hello&quot; );\n         sw-&gt;WriteLine( &quot;And&quot; );\n         sw-&gt;WriteLine( &quot;Welcome&quot; );\n      }\n      finally\n      {\n         if ( sw )\n            delete (IDisposable^)sw;\n      }\n   }\n   \n   // This text will always be added, making the file longer over time\n   // if it is not deleted.\n   StreamWriter^ sw = fi-&gt;AppendText();\n   try\n   {\n      sw-&gt;WriteLine( &quot;This&quot; );\n      sw-&gt;WriteLine( &quot;is Extra&quot; );\n      sw-&gt;WriteLine( &quot;Text&quot; );\n   }\n   finally\n   {\n      if ( sw )\n         delete (IDisposable^)sw;\n   }\n   \n   //Open the file to read from.\n   StreamReader^ sr = fi-&gt;OpenText();\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n//\n//When you run this application a second time, you will see the following output:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n//This\n//is Extra\n//Text\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo appendtext#1\">using System;\nusing System.IO;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        FileInfo fi = new FileInfo(@&quot;c:\\MyTest.txt&quot;);\n\n        // This text is added only once to the file.\n        if (!fi.Exists) \n        {\n            //Create a file to write to.\n            using (StreamWriter sw = fi.CreateText()) \n            {\n                sw.WriteLine(&quot;Hello&quot;);\n                sw.WriteLine(&quot;And&quot;);\n                sw.WriteLine(&quot;Welcome&quot;);\n            }\t\n        }\n\n        // This text will always be added, making the file longer over time\n        // if it is not deleted.\n        using (StreamWriter sw = fi.AppendText()) \n        {\n            sw.WriteLine(&quot;This&quot;);\n            sw.WriteLine(&quot;is Extra&quot;);\n            sw.WriteLine(&quot;Text&quot;);\n        }\t\n\n        //Open the file to read from.\n        using (StreamReader sr = fi.OpenText()) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n\n//When you run this application a second time, you will see the following output:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n//This\n//is Extra\n//Text\n</code></pre><p> The following example demonstrates appending text to the end of a file and also displays the result of the append operation to the console. The first time this routine is called, the file is created if it does not exist. After that, the specified text is appended to the file.  </p>\n<pre><code class=\"lang-vb\" name=\"fileinfoappendtext#1\">Imports System\nImports System.IO\n\nPublic Class AppendTextTest\n    Public Shared Sub Main()\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n        Dim sw As StreamWriter = fi.AppendText()\n        sw.WriteLine(&quot;Add as many lines as you like...&quot;)\n        sw.WriteLine(&quot;Add another line to the output...&quot;)\n        sw.Flush()\n        sw.Close()\n        Dim sr As New StreamReader(fi.OpenRead())\n        &#39; Get the information out of the file and display it.\n        &#39; Remember that the file might have other lines if it already existed.\n        While sr.Peek() &lt;&gt; -1\n            Console.WriteLine(sr.ReadLine())\n        End While\n    End Sub &#39;Main\nEnd Class &#39;AppendTextTest\n&#39;This code produces output similar to the following;\n&#39;results may vary based on the computer/file structure/etc.:\n&#39;Add as many lines as you like...\n&#39;Add another line to the output...\n</code></pre><pre><code class=\"lang-cpp\" name=\"fileinfoappendtext#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n\n   // Create a writer, ready to add entries to the file.\n   StreamWriter^ sw = fi-&gt;AppendText();\n   sw-&gt;WriteLine( &quot;Add as many lines as you like...&quot; );\n   sw-&gt;WriteLine( &quot;Add another line to the output...&quot; );\n   sw-&gt;Flush();\n   sw-&gt;Close();\n\n   // Get the information out of the file and display it.\n   // Remember that the file might have other lines if it already existed.\n   StreamReader^ sr = gcnew StreamReader( fi-&gt;OpenRead() );\n   while ( sr-&gt;Peek() != -1 )\n      Console::WriteLine( sr-&gt;ReadLine() );\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//Add as many lines as you like...\n//Add another line to the output...\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"fileinfoappendtext#1\">using System;\nusing System.IO;\n\npublic class AppendTextTest \n{\n    public static void Main() \n    {\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(&quot;Add as many lines as you like...&quot;);\n        sw.WriteLine(&quot;Add another line to the output...&quot;);\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        // Remember that the file might have other lines if it already existed.\n        StreamReader sr = new StreamReader(fi.OpenRead());\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//Add as many lines as you like...\n//Add another line to the output...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_CopyTo_System_String_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies an existing file to a new file, disallowing the overwriting of an existing file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo CopyTo (string destFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the new file to copy to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a></div>\r\n                  </div>\r\n                  <p>A new file with a fully qualified path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is empty, contains only white spaces, or contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurs, or the destination file already exists.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>A directory path is passed in, or the file is being moved to a different drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory specified in <code>destFileName</code> does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> contains a colon (:) within the string but does not specify the volume.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method to allow overwriting of an existing file.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates both overloads of the <code>CopyTo</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo copyto2#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   String^ path2 = &quot;c:\\\\MyTest.txttemp&quot;;\n   FileInfo^ fi1 = gcnew FileInfo( path );\n   FileInfo^ fi2 = gcnew FileInfo( path2 );\n   try\n   {\n      // Create the file and clean up handles.\n      FileStream^ fs = fi1-&gt;Create();\n      if ( fs )\n         delete (IDisposable^)fs;\n      \n      //Ensure that the target does not exist.\n      fi2-&gt;Delete();\n      \n      //Copy the file.\n      fi1-&gt;CopyTo( path2 );\n      Console::WriteLine( &quot;{0} was copied to {1}.&quot;, path, path2 );\n      \n      //Try to copy it again, which should succeed.\n      fi1-&gt;CopyTo( path2, true );\n      Console::WriteLine( &quot;The second Copy operation succeeded, which is expected.&quot; );\n   }\n   catch ( Exception^ ) \n   {\n      Console::WriteLine( &quot;Double copying was not allowed, which is not expected.&quot; );\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The second Copy operation succeeded, which is expected.\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo copyto2#1\">using System;\nusing System.IO;\n\nclass Test\n{\n\n    public static void Main()\n    {\n        string path = @&quot;c:\\SoureFile.txt&quot;;\n        string path2 = @&quot;c:<br>ewFile.txt&quot;;\n        FileInfo fi1 = new FileInfo(path);\n        FileInfo fi2 = new FileInfo(path2);\n\n        try\n        {\n            // Create the source file.\n            using (FileStream fs = fi1.Create()) { }\n\n            //Ensure that the target file does not exist.\n            if (File.Exists(path2))\n            {\n                fi2.Delete();\n            }\n\n            //Copy the file.f\n            fi1.CopyTo(path2);\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2);\n        }\n        catch (IOException ioex)\n        {\n            Console.WriteLine(ioex.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo copyto2#1\">Imports System\nImports System.IO\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        &#39;Specify the directories you want to manipulate.\n        Dim path As String = &quot;c:\\SourceFile.txt&quot;\n        Dim path2 As String = &quot;c:<br>ewFile.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n        Dim fi2 As FileInfo = New FileInfo(path2)\n\n        Try\n            Using fs As FileStream = fi.Create()\n            End Using\n\n            &#39;Ensure that the target does not exist.\n            If File.Exists(path2) Then\n                fi2.Delete()\n            End If\n            \n            &#39;Copy the file.\n            fi.CopyTo(path2)\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2)\n\n        Catch ioex As IOException\n            Console.WriteLine(ioex.Message)\n        End Try\n    End Sub\nEnd Class\n</code></pre><p> The following example demonstrates copying one file to another file, throwing an exception if the destination file already exists.  </p>\n<pre><code class=\"lang-cpp\" name=\"FileInfoCopyTo1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      \n      // Create a reference to a file, which might or might not exist.\n      // If it does not exist, it is not yet created.\n      FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n      \n      // Create a writer, ready to add entries to the file.\n      StreamWriter^ sw = fi-&gt;AppendText();\n      sw-&gt;WriteLine( &quot;Add as many lines as you like...&quot; );\n      sw-&gt;WriteLine( &quot;Add another line to the output...&quot; );\n      sw-&gt;Flush();\n      sw-&gt;Close();\n      \n      // Get the information out of the file and display it.\n      StreamReader^ sr = gcnew StreamReader( fi-&gt;OpenRead() );\n      Console::WriteLine( &quot;This is the information in the first file:&quot; );\n      while ( sr-&gt;Peek() != -1 )\n            Console::WriteLine( sr-&gt;ReadLine() );\n      \n      // Copy this file to another file. The file will not be overwritten if it already exists.\n      FileInfo^ newfi = fi-&gt;CopyTo( &quot;newTemp.txt&quot; );\n      \n      // Get the information out of the new file and display it.* sr = new StreamReader(newfi-&gt;OpenRead());\n      Console::WriteLine( &quot;{0}This is the information in the second file:&quot;, Environment::NewLine );\n      while ( sr-&gt;Peek() != -1 )\n            Console::WriteLine( sr-&gt;ReadLine() );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is the information in the first file:\n//Add as many lines as you like...\n//Add another line to the output...\n//\n//This is the information in the second file:\n</code></pre><pre><code class=\"lang-cs\" name=\"FileInfoCopyTo1#1\">using System;\nusing System.IO;\n\npublic class CopyToTest \n{\n    public static void Main() \n    {\n        try\n        {\n            // Create a reference to a file, which might or might not exist.\n            // If it does not exist, it is not yet created.\n            FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n            // Create a writer, ready to add entries to the file.\n            StreamWriter sw = fi.AppendText();\n            sw.WriteLine(&quot;Add as many lines as you like...&quot;);\n            sw.WriteLine(&quot;Add another line to the output...&quot;);\n            sw.Flush();\n            sw.Close();\n            // Get the information out of the file and display it.\n            StreamReader sr = new StreamReader(fi.OpenRead());\n            Console.WriteLine(&quot;This is the information in the first file:&quot;);\n            while (sr.Peek() != -1)\n                Console.WriteLine(sr.ReadLine());\n            // Copy this file to another file. The file will not be overwritten if it already exists.\n            FileInfo newfi = fi.CopyTo(&quot;newTemp.txt&quot;);\n            // Get the information out of the new file and display it.\n            sr = new StreamReader(newfi.OpenRead());\n            Console.WriteLine(&quot;{0}This is the information in the second file:&quot;, Environment.NewLine);\n            while (sr.Peek() != -1)\n                Console.WriteLine(sr.ReadLine());\n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is the information in the first file:\n//Add as many lines as you like...\n//Add another line to the output...\n\n//This is the information in the second file:\n//Add as many lines as you like...\n//Add another line to the output...\n</code></pre><pre><code class=\"lang-vb\" name=\"FileInfoCopyTo1#1\">Imports System\nImports System.IO\n\nPublic Class CopyToTest\n    Public Shared Sub Main()\n        Try\n            &#39; Create a reference to a file, which might or might not exist.\n            &#39; If it does not exist, it is not yet created.\n            Dim fi As New FileInfo(&quot;temp.txt&quot;)\n            &#39; Create a writer, ready to add entries to the file.\n            Dim sw As StreamWriter = fi.AppendText()\n            sw.WriteLine(&quot;Add as many lines as you like...&quot;)\n            sw.WriteLine(&quot;Add another line to the output...&quot;)\n            sw.Flush()\n            sw.Close()\n            &#39; Get the information out of the file and display it.\n            Dim sr As New StreamReader(fi.OpenRead())\n            Console.WriteLine(&quot;This is the information in the first file:&quot;)\n            While sr.Peek() &lt;&gt; -1\n                Console.WriteLine(sr.ReadLine())\n            End While\n            &#39; Copy this file to another file.\n            Dim newfi As FileInfo = fi.CopyTo(&quot;newTemp.txt&quot;)\n            &#39; Get the information out of the new file and display it.\n            sr = New StreamReader(newfi.OpenRead())\n            Console.WriteLine(&quot;{0}This is the information in the second file:&quot;, Environment.NewLine)\n            While sr.Peek() &lt;&gt; -1\n                Console.WriteLine(sr.ReadLine())\n            End While\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;CopyToTest\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is the information in the first file:\n&#39;Add as many lines as you like...\n&#39;Add another line to the output...\n&#39;\n&#39;This is the information in the second file:\n&#39;Add as many lines as you like...\n&#39;Add another line to the output...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_CopyTo_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Copies an existing file to a new file, allowing the overwriting of an existing file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo CopyTo (string destFileName, bool overwrite);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the new file to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>overwrite</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to allow an existing file to be overwritten; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a></div>\r\n                  </div>\r\n                  <p>A new file, or an overwrite of an existing file if <code>overwrite</code> is <code>true</code>. If the file exists and <code>overwrite</code> is <code>false</code>, an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is empty, contains only white spaces, or contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurs, or the destination file already exists and <code>overwrite</code> is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory specified in <code>destFileName</code> does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>A directory path is passed in, or the file is being moved to a different drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> contains a colon (:) in the middle of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to allow or prevent overwriting of an existing file. Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method to prevent overwriting of an existing file by default.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates both overloads of the <code>CopyTo</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo copyto2#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   String^ path2 = &quot;c:\\\\MyTest.txttemp&quot;;\n   FileInfo^ fi1 = gcnew FileInfo( path );\n   FileInfo^ fi2 = gcnew FileInfo( path2 );\n   try\n   {\n      // Create the file and clean up handles.\n      FileStream^ fs = fi1-&gt;Create();\n      if ( fs )\n         delete (IDisposable^)fs;\n      \n      //Ensure that the target does not exist.\n      fi2-&gt;Delete();\n      \n      //Copy the file.\n      fi1-&gt;CopyTo( path2 );\n      Console::WriteLine( &quot;{0} was copied to {1}.&quot;, path, path2 );\n      \n      //Try to copy it again, which should succeed.\n      fi1-&gt;CopyTo( path2, true );\n      Console::WriteLine( &quot;The second Copy operation succeeded, which is expected.&quot; );\n   }\n   catch ( Exception^ ) \n   {\n      Console::WriteLine( &quot;Double copying was not allowed, which is not expected.&quot; );\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The second Copy operation succeeded, which is expected.\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo copyto2#1\">using System;\nusing System.IO;\n\nclass Test\n{\n\n    public static void Main()\n    {\n        string path = @&quot;c:\\SoureFile.txt&quot;;\n        string path2 = @&quot;c:<br>ewFile.txt&quot;;\n        FileInfo fi1 = new FileInfo(path);\n        FileInfo fi2 = new FileInfo(path2);\n\n        try\n        {\n            // Create the source file.\n            using (FileStream fs = fi1.Create()) { }\n\n            //Ensure that the target file does not exist.\n            if (File.Exists(path2))\n            {\n                fi2.Delete();\n            }\n\n            //Copy the file.f\n            fi1.CopyTo(path2);\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2);\n        }\n        catch (IOException ioex)\n        {\n            Console.WriteLine(ioex.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo copyto2#1\">Imports System\nImports System.IO\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        &#39;Specify the directories you want to manipulate.\n        Dim path As String = &quot;c:\\SourceFile.txt&quot;\n        Dim path2 As String = &quot;c:<br>ewFile.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n        Dim fi2 As FileInfo = New FileInfo(path2)\n\n        Try\n            Using fs As FileStream = fi.Create()\n            End Using\n\n            &#39;Ensure that the target does not exist.\n            If File.Exists(path2) Then\n                fi2.Delete()\n            End If\n            \n            &#39;Copy the file.\n            fi.CopyTo(path2)\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2)\n\n        Catch ioex As IOException\n            Console.WriteLine(ioex.Message)\n        End Try\n    End Sub\nEnd Class\n</code></pre><p> The following example demonstrates copying one file to another file, specifying whether to overwrite a file that already exists.  </p>\n<pre><code class=\"lang-cs\" name=\"fileinfocopyto#1\">using System;\nusing System.IO;\n\npublic class CopyToTest \n{\n    public static void Main() \n    {\n        // Create a reference to a file, which might or might not exist.\n        // If it does not exist, it is not yet created.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(&quot;Add as many lines as you like...&quot;);\n        sw.WriteLine(&quot;Add another line to the output...&quot;);\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        StreamReader sr = new StreamReader( fi.OpenRead() );\n        Console.WriteLine(&quot;This is the information in the first file:&quot;);\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n        // Copy this file to another file. The true parameter specifies\n        // that the file will be overwritten if it already exists.\n        FileInfo newfi = fi.CopyTo(&quot;newTemp.txt&quot;, true);\n        // Get the information out of the new file and display it.\n        sr = new StreamReader( newfi.OpenRead() );\n        Console.WriteLine(&quot;{0}This is the information in the second file:&quot;, Environment.NewLine);\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is the information in the first file:\n//Add as many lines as you like...\n//Add another line to the output...\n//Add as many lines as you like...\n//Add another line to the output...\n\n//This is the information in the second file:\n//Add as many lines as you like...\n//Add another line to the output...\n//Add as many lines as you like...\n//Add another line to the output...\n</code></pre><pre><code class=\"lang-cpp\" name=\"fileinfocopyto#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create a reference to a file, which might or might not exist.\n   // If it does not exist, it is not yet created.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Create a writer, ready to add entries to the file.\n   StreamWriter^ sw = fi-&gt;AppendText();\n   sw-&gt;WriteLine( &quot;Add as many lines as you like...&quot; );\n   sw-&gt;WriteLine( &quot;Add another line to the output...&quot; );\n   sw-&gt;Flush();\n   sw-&gt;Close();\n   \n   // Get the information out of the file and display it.\n   StreamReader^ sr = gcnew StreamReader( fi-&gt;OpenRead() );\n   Console::WriteLine( &quot;This is the information in the first file:&quot; );\n   while ( sr-&gt;Peek() != -1 )\n      Console::WriteLine( sr-&gt;ReadLine() );\n\n   \n   // Copy this file to another file. The true parameter specifies\n   // that the file will be overwritten if it already exists.\n   FileInfo^ newfi = fi-&gt;CopyTo( &quot;newTemp.txt&quot;, true );\n   \n   // Get the information out of the new file and display it.* sr = new StreamReader( newfi-&gt;OpenRead() );\n   Console::WriteLine( &quot;{0}This is the information in the second file:&quot;, Environment::NewLine );\n   while ( sr-&gt;Peek() != -1 )\n      Console::WriteLine( sr-&gt;ReadLine() );\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is the information in the first file:\n//Add as many lines as you like...\n//Add another line to the output...\n//This is the information in the second file:\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfocopyto#1\">Imports System\nImports System.IO\n\nPublic Class CopyToTest\n    Public Shared Sub Main()\n        &#39; Create a reference to a file, which might or might not exist.\n        &#39; If it does not exist, it is not yet created.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n        &#39; Create a writer, ready to add entries to the file.\n        Dim sw As StreamWriter = fi.AppendText()\n        sw.WriteLine(&quot;Add as many lines as you like...&quot;)\n        sw.WriteLine(&quot;Add another line to the output...&quot;)\n        sw.Flush()\n        sw.Close()\n        &#39; Get the information out of the file and display it.\n        Dim sr As New StreamReader(fi.OpenRead())\n        Console.WriteLine(&quot;This is the information in the first file:&quot;)\n        While sr.Peek() &lt;&gt; -1\n            Console.WriteLine(sr.ReadLine())\n        End While\n        &#39; Copy this file to another file. The true parameter specifies \n        &#39; that the file will be overwritten if it already exists.\n        Dim newfi As FileInfo = fi.CopyTo(&quot;newTemp.txt&quot;, True)\n        &#39; Get the information out of the new file and display it.\n        sr = New StreamReader(newfi.OpenRead())\n        Console.WriteLine(&quot;{0}This is the information in the second file:&quot;, Environment.NewLine)\n        While sr.Peek() &lt;&gt; -1\n            Console.WriteLine(sr.ReadLine())\n        End While\n    End Sub &#39;Main\nEnd Class &#39;CopyToTest\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is the information in the first file:\n&#39;Add as many lines as you like...\n&#39;Add another line to the output...\n&#39;\n&#39;This is the information in the second file:\n&#39;Add as many lines as you like...\n&#39;Add another line to the output...\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Create\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream Create ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A new file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, full read/write access to new files is granted to all users.  </p>\n<p> This method is a wrapper for the functionality provided by <a class=\"xref\" href=\"system.io.file#System_IO_File_Create_\" data-linktype=\"relative-path\">Create</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a reference to a file, and then creates the file on disk using <code>FileInfo.Create()</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"fileinfodelete#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create a reference to a file.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Actually create the file.\n   FileStream^ fs = fi-&gt;Create();\n   \n   // Modify the file as required, and then close the file.\n   fs-&gt;Close();\n   \n   // Delete the file.\n   fi-&gt;Delete();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfodelete#1\">Imports System\nImports System.IO\n\nPublic Class DeleteTest\n    Public Shared Sub Main()\n        &#39; Create a reference to a file.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n        &#39; Actually create the file.\n        Dim fs As FileStream = fi.Create()\n        &#39; Modify the file as required, and then close the file.\n        fs.Close()\n        &#39; Delete the file.\n        fi.Delete()\n    End Sub &#39;Main\nEnd Class &#39;DeleteTest\n</code></pre><pre><code class=\"lang-cs\" name=\"fileinfodelete#1\">using System;\nusing System.IO;\n\npublic class DeleteTest \n{\n    public static void Main() \n    {\n        // Create a reference to a file.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n        // Actually create the file.\n        FileStream fs = fi.Create();\n        // Modify the file as required, and then close the file.\n        fs.Close();\n        // Delete the file.\n        fi.Delete();\n    }\n}\n</code></pre><p> The following example creates a file, adds some text to it, and reads from the file.  </p>\n<pre><code class=\"lang-vb\" name=\"finfo create#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n\n        &#39; Delete the file if it exists.\n        If fi.Exists() Then\n            fi.Delete()\n        End If\n\n        &#39;Create the file.\n        Dim fs As FileStream = fi.Create()\n        Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39;Add some information to the file.\n        fs.Write(info, 0, info.Length)\n        fs.Close()\n\n        &#39;Open the stream and read it back.\n        Dim sr As StreamReader = fi.OpenText()\n\n        Do While sr.Peek() &gt;= 0\n            Console.WriteLine(sr.ReadLine())\n        Loop\n        sr.Close()\n    End Sub\nEnd Class\n\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is some text in the file.\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo create#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        // Delete the file if it exists.\n        if (fi.Exists) \n        {\n            fi.Delete();\n        }\n\n        //Create the file.\n        using (FileStream fs = fi.Create()) \n        {\n            Byte[] info = \n                new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n\n            //Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        //Open the stream and read it back.\n        using (StreamReader sr = fi.OpenText()) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo create#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n   \n   // Delete the file if it exists.\n   if ( fi-&gt;Exists )\n   {\n      fi-&gt;Delete();\n   }\n   \n   //Create the file.\n   FileStream^ fs = fi-&gt;Create();\n   try\n   {\n      array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n      \n      //Add some information to the file.\n      fs-&gt;Write( info, 0, info-&gt;Length );\n   }\n   finally\n   {\n      if ( fs )\n         delete (IDisposable^)fs;\n   }\n\n   //Open the stream and read it back.\n   StreamReader^ sr = fi-&gt;OpenText();\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_CreateText\">\r\n    \r\n            <a id=\"System_IO_FileInfo_CreateText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateText()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that writes a new text file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamWriter CreateText ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a></div>\r\n                  </div>\r\n                  <p>A new <code>StreamWriter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The file name is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The disk is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, full read/write access to new files is granted to all users.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>CreateText</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo createtext#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n   if (  !fi-&gt;Exists )\n   {\n      //Create a file to write to.\n      StreamWriter^ sw = fi-&gt;CreateText();\n      try\n      {\n         sw-&gt;WriteLine( &quot;Hello&quot; );\n         sw-&gt;WriteLine( &quot;And&quot; );\n         sw-&gt;WriteLine( &quot;Welcome&quot; );\n      }\n      finally\n      {\n         if ( sw )\n            delete (IDisposable^)sw;\n      }\n   }\n\n   //Open the file to read from.\n   StreamReader^ sr = fi-&gt;OpenText();\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo createtext#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n\n        If fi.Exists = False Then\n            &#39;Create a file to write to.\n            Dim sw As StreamWriter = fi.CreateText()\n            sw.WriteLine(&quot;Hello&quot;)\n            sw.WriteLine(&quot;And&quot;)\n            sw.WriteLine(&quot;Welcome&quot;)\n            sw.Flush()\n            sw.Close()\n        End If\n\n        &#39;Open the file to read from.\n        Dim sr As StreamReader = fi.OpenText()\n\n        Do While sr.Peek() &gt;= 0\n            Console.WriteLine(sr.ReadLine())\n        Loop\n        sr.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Hello\n&#39;And\n&#39;Welcome\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo createtext#1\">using System;\nusing System.IO;\n\nclass Test \n{\n\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        if (!fi.Exists) \n        {\n            //Create a file to write to.\n            using (StreamWriter sw = fi.CreateText()) \n            {\n                sw.WriteLine(&quot;Hello&quot;);\n                sw.WriteLine(&quot;And&quot;);\n                sw.WriteLine(&quot;Welcome&quot;);\n            }\n        }\n\n        //Open the file to read from.\n        using (StreamReader sr = fi.OpenText()) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Decrypt\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Decrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrypt()</div>        \r\n          </div>\r\n    \r\n            <p>Decrypts a file that was encrypted by the current account using the <span class=\"xref\">stem.IO.FileInfo.Encrypt*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Decrypt ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The file system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Decrypt method allows you to decrypt a file that was encrypted using the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method.  The Decrypt method can decrypt only files that were encrypted using the current user account.  </p>\n<p> Both the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.  </p>\n<p> The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method and the Decrypt method to encrypt and then decrypt a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n\n\tstatic void Addencryption(String^ fileName)\n{\n    // Create a new FileInfo object.\n\tFileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\t// Add encryption.\n    fInfo-&gt;Encrypt();\n\t\n}\n\n\n\tstatic void Removeencryption(String^ fileName)\n{\n//    Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n    // Remove encryption.\n    fInfo-&gt;Decrypt();\n}\n\nint main()\n{\n\ttry\n    {\n\t\tString^ fileName = &quot;c:\\\\MyTest.txt&quot;;\n        Console::WriteLine(&quot;Encrypt &quot; + fileName);\n\n        // Encrypt the file.\n     \n\t\tAddencryption(fileName);\n\t\tConsole::WriteLine(&quot;Decrypt &quot; + fileName);\n\n        // Decrypt the file.\n        Removeencryption(fileName);\n\t\tConsole::WriteLine(&quot;Done&quot;);\n     }\n     catch (IOException^ ex)\n     {\n\t\tConsole::WriteLine(ex-&gt;Message);\n     }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Encrypt c:\\MyTest.txt\n//Decrypt c:\\MyTest.txt\n//Done\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = @&quot;c:\\MyTest.txt&quot;;\n\n                Console.WriteLine(&quot;Encrypt &quot; + FileName);\n\n                // Encrypt the file.\n                AddEncryption(FileName);\n\n                Console.WriteLine(&quot;Decrypt &quot; + FileName);\n\n                // Decrypt the file.\n                RemoveEncryption(FileName);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        public static void AddEncryption(string FileName)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n            if (!fInfo.Exists)\n            {\n                //Create the file.\n                fInfo.Create();\n            }\n            // Add encryption.\n            fInfo.Encrypt();\n        }\n\n        public static void RemoveEncryption(string FileName)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n            if (!fInfo.Exists)\n            {\n                //Create the file.\n                fInfo.Create();\n            }\n            // Remove encryption.\n            fInfo.Decrypt();\n\n        }\n    }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Encrypt c:\\MyTest.txt\n//Decrypt c:\\MyTest.txt\n//Done\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;c:\\MyTest.txt&quot;\n\n            Console.WriteLine(&quot;Encrypt &quot; + FileName)\n\n            &#39; Encrypt the file.\n            AddEncryption(FileName)\n\n            Console.WriteLine(&quot;Decrypt &quot; + FileName)\n\n            &#39; Decrypt the file.\n            RemoveEncryption(FileName)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n\n    Sub AddEncryption(ByVal FileName As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n        If fInfo.Exists = False Then\n            fInfo.Create()\n        End If\n        &#39; Add encryption.\n        fInfo.Encrypt()\n\n    End Sub\n\n\n\n    Sub RemoveEncryption(ByVal FileName As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n        If fInfo.Exists = False Then\n            fInfo.Create()\n        End If\n        &#39; Remove encryption.\n        fInfo.Decrypt()\n\n    End Sub\nEnd Module\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Encrypt c:\\MyTest.txt\n&#39;Decrypt c:\\MyTest.txt\n&#39;Done\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Delete\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete()</div>        \r\n          </div>\r\n    \r\n            <p>Permanently deletes a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Delete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The target file is open or memory-mapped on a computer running Microsoft Windows NT.  </p>\n<p> -or-  </p>\n<p> There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see <a href=\"../Topic/How%20to:%20Enumerate%20Directories%20and%20Files.md\" data-linktype=\"relative-path\">How to: Enumerate Directories and Files</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The path is a directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the file does not exist, this method does nothing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>Delete</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo delete#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi1 = gcnew FileInfo( path );\n   try\n   {\n      StreamWriter^ sw = fi1-&gt;CreateText();\n      if ( sw )\n         delete (IDisposable^)sw;\n\n      String^ path2 = String::Concat( path, &quot;temp&quot; );\n      FileInfo^ fi2 = gcnew FileInfo( path2 );\n      \n      //Ensure that the target does not exist.\n      fi2-&gt;Delete();\n      \n      //Copy the file.\n      fi1-&gt;CopyTo( path2 );\n      Console::WriteLine( &quot;{0} was copied to {1}.&quot;, path, path2 );\n      \n      //Delete the newly created file.\n      fi2-&gt;Delete();\n      Console::WriteLine( &quot;{0} was successfully deleted.&quot;, path2 );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo delete#1\">using System;\nusing System.IO;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n        FileInfo fi1 = new FileInfo(path);\n\n        try \n        {\n            using (StreamWriter sw = fi1.CreateText()) {}\n            string path2 = path + &quot;temp&quot;;\n            FileInfo fi2 = new FileInfo(path2);\n\n            //Ensure that the target does not exist.\n            fi2.Delete();\n\n            //Copy the file.\n            fi1.CopyTo(path2);\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2);\n\n            //Delete the newly created file.\n            fi2.Delete();\n            Console.WriteLine(&quot;{0} was successfully deleted.&quot;, path2);\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo delete#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n\n        Try\n            Dim sw As StreamWriter = fi.CreateText()\n            sw.Close()\n            Dim path2 As String = path + &quot;temp&quot;\n            Dim fi2 As FileInfo = New FileInfo(path2)\n\n            &#39;Ensure that the target does not exist.\n            fi2.Delete()\n\n            &#39;Copy the file.\n            fi.CopyTo(path2)\n            Console.WriteLine(&quot;{0} was copied to {1}.&quot;, path, path2)\n\n            &#39;Delete the newly created file.\n            fi2.Delete()\n            Console.WriteLine(&quot;{0} was successfully deleted.&quot;, path2)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n&#39;c:\\MyTest.txttemp was successfully deleted.\n</code></pre><p> The following example creates, closes, and deletes a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"fileinfodelete#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create a reference to a file.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Actually create the file.\n   FileStream^ fs = fi-&gt;Create();\n   \n   // Modify the file as required, and then close the file.\n   fs-&gt;Close();\n   \n   // Delete the file.\n   fi-&gt;Delete();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfodelete#1\">Imports System\nImports System.IO\n\nPublic Class DeleteTest\n    Public Shared Sub Main()\n        &#39; Create a reference to a file.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n        &#39; Actually create the file.\n        Dim fs As FileStream = fi.Create()\n        &#39; Modify the file as required, and then close the file.\n        fs.Close()\n        &#39; Delete the file.\n        fi.Delete()\n    End Sub &#39;Main\nEnd Class &#39;DeleteTest\n</code></pre><pre><code class=\"lang-cs\" name=\"fileinfodelete#1\">using System;\nusing System.IO;\n\npublic class DeleteTest \n{\n    public static void Main() \n    {\n        // Create a reference to a file.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n        // Actually create the file.\n        FileStream fs = fi.Create();\n        // Modify the file as required, and then close the file.\n        fs.Close();\n        // Delete the file.\n        fi.Delete();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Encrypt\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Encrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encrypt()</div>        \r\n          </div>\r\n    \r\n            <p>Encrypts a file so that only the account used to encrypt the file can decrypt it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Encrypt ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The file system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Encrypt method allows you to encrypt a file so that only the account used to call this method can decrypt it.  Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method to decrypt a file encrypted by the Encrypt method.  </p>\n<p> Both the Encrypt method and the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.  </p>\n<p> The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Encrypt method and the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method to encrypt a file and then decrypt it.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n\n\tstatic void Addencryption(String^ fileName)\n{\n    // Create a new FileInfo object.\n\tFileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\t// Add encryption.\n    fInfo-&gt;Encrypt();\n\t\n}\n\n\n\tstatic void Removeencryption(String^ fileName)\n{\n//    Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n    // Remove encryption.\n    fInfo-&gt;Decrypt();\n}\n\nint main()\n{\n\ttry\n    {\n\t\tString^ fileName = &quot;c:\\\\MyTest.txt&quot;;\n        Console::WriteLine(&quot;Encrypt &quot; + fileName);\n\n        // Encrypt the file.\n     \n\t\tAddencryption(fileName);\n\t\tConsole::WriteLine(&quot;Decrypt &quot; + fileName);\n\n        // Decrypt the file.\n        Removeencryption(fileName);\n\t\tConsole::WriteLine(&quot;Done&quot;);\n     }\n     catch (IOException^ ex)\n     {\n\t\tConsole::WriteLine(ex-&gt;Message);\n     }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Encrypt c:\\MyTest.txt\n//Decrypt c:\\MyTest.txt\n//Done\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = @&quot;c:\\MyTest.txt&quot;;\n\n                Console.WriteLine(&quot;Encrypt &quot; + FileName);\n\n                // Encrypt the file.\n                AddEncryption(FileName);\n\n                Console.WriteLine(&quot;Decrypt &quot; + FileName);\n\n                // Decrypt the file.\n                RemoveEncryption(FileName);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        public static void AddEncryption(string FileName)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n            if (!fInfo.Exists)\n            {\n                //Create the file.\n                fInfo.Create();\n            }\n            // Add encryption.\n            fInfo.Encrypt();\n        }\n\n        public static void RemoveEncryption(string FileName)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n            if (!fInfo.Exists)\n            {\n                //Create the file.\n                fInfo.Create();\n            }\n            // Remove encryption.\n            fInfo.Decrypt();\n\n        }\n    }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Encrypt c:\\MyTest.txt\n//Decrypt c:\\MyTest.txt\n//Done\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.Encrypt-Decrypt#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;c:\\MyTest.txt&quot;\n\n            Console.WriteLine(&quot;Encrypt &quot; + FileName)\n\n            &#39; Encrypt the file.\n            AddEncryption(FileName)\n\n            Console.WriteLine(&quot;Decrypt &quot; + FileName)\n\n            &#39; Decrypt the file.\n            RemoveEncryption(FileName)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n\n    Sub AddEncryption(ByVal FileName As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n        If fInfo.Exists = False Then\n            fInfo.Create()\n        End If\n        &#39; Add encryption.\n        fInfo.Encrypt()\n\n    End Sub\n\n\n\n    Sub RemoveEncryption(ByVal FileName As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n        If fInfo.Exists = False Then\n            fInfo.Create()\n        End If\n        &#39; Remove encryption.\n        fInfo.Decrypt()\n\n    End Sub\nEnd Module\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Encrypt c:\\MyTest.txt\n&#39;Decrypt c:\\MyTest.txt\n&#39;Done\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_GetAccessControl\">\r\n    \r\n            <a id=\"System_IO_FileInfo_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control list (ACL) entries for the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.FileSecurity GetAccessControl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control rules for the current file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows 2000 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.privilegenotheldexception\" data-linktype=\"relative-path\">PrivilegeNotHeldException</a></div>\r\n                  </div>\r\n                  <p>The current system account does not have administrative privileges.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetAccessControl method and the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">#using &lt;System.Security.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\nusing namespace System::Security::Principal;\n\n// Adds an ACL entry on the specified file for the specified account.\nstatic void AddFileSecurity(String^ fileName, String^ account,\n                     FileSystemRights^ rights, \n                     AccessControlType^ controlType)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\n    // Get a FileSecurity object that represents the\n    // current security settings.\n    FileSecurity^ fSecurity = fInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    fSecurity-&gt;AddAccessRule(gcnew FileSystemAccessRule(account,\n        *rights, *controlType));\n\n    // Set the new access settings.\n    fInfo-&gt;SetAccessControl(fSecurity);\n}\n\n// Removes an ACL entry on the specified file for the specified account.\nstatic void RemoveFileSecurity(String^ fileName, String^ account,\n                        FileSystemRights^ rights, \n                        AccessControlType^ controlType)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\n    // Get a FileSecurity object that represents the\n    // current security settings.\n    FileSecurity^ fSecurity = fInfo-&gt;GetAccessControl();\n\n    // Remove the FileSystemAccessRule from the security settings.\n    fSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account, \n\t\t*rights, *controlType));\n\n    // Set the new access settings.\n    fInfo-&gt;SetAccessControl(fSecurity);\n}\n\nint main()\n{\n    try\n    {\n\t\tString^ fileName = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;;\n\n        Console::WriteLine(&quot;Adding access control entry for &quot; +\n            fileName);\n\n        // Add the access control entry to the file.\n        // Before compiling this snippet, change MyDomain to your \n        // domain name and MyAccessAccount to the name \n        // you use to access your domain.\n        AddFileSecurity(fileName, &quot;MyDomain\\\\MyAccessAccount&quot;,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from &quot; +\n            fileName);\n\n        // Remove the access control entry from the file.\n        // Before compiling this snippet, change MyDomain to your \n        // domain name and MyAccessAccount to the name \n        // you use to access your domain.\n        RemoveFileSecurity(fileName, &quot;MyDomain\\\\MyAccessAccount&quot;,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (Exception^ e)\n    {\n        Console::WriteLine(e);\n    }\n\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Done.\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; &amp; FileName)\n\n            &#39; Add the access control entry to the file.\n            &#39; Before compiling this snippet, change MyDomain to your \n            &#39; domain name and MyAccessAccount to the name \n            &#39; you use to access your domain.\n            AddFileSecurity(FileName, &quot;MyDomain\\\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; &amp; FileName)\n\n            &#39; Remove the access control entry from the file.\n            &#39; Before compiling this snippet, change MyDomain to your \n            &#39; domain name and MyAccessAccount to the name \n            &#39; you use to access your domain.\n            RemoveFileSecurity(FileName, &quot;MyDomain\\\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified file for the specified account.\n    Sub AddFileSecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = fInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        fSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        fInfo.SetAccessControl(fSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified file for the specified account.\n    Sub RemoveFileSecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = fInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        fSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        fInfo.SetAccessControl(fSecurity)\n\n    End Sub\nEnd Module\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n&#39;Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n&#39;Done.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = &quot;c:/test.xml&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + FileName);\n\n                // Add the access control entry to the file.\n                // Before compiling this snippet, change MyDomain to your \n                // domain name and MyAccessAccount to the name \n                // you use to access your domain.\n                AddFileSecurity(FileName, @&quot;MyDomain\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + FileName);\n\n                // Remove the access control entry from the file.\n                // Before compiling this snippet, change MyDomain to your \n                // domain name and MyAccessAccount to the name \n                // you use to access your domain.\n                RemoveFileSecurity(FileName, @&quot;MyDomain\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n        }\n\n        // Adds an ACL entry on the specified file for the specified account.\n        public static void AddFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Get a FileSecurity object that represents the \n            // current security settings.\n            FileSecurity fSecurity = fInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            fSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            fInfo.SetAccessControl(fSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified file for the specified account.\n        public static void RemoveFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Get a FileSecurity object that represents the \n            // current security settings.\n            FileSecurity fSecurity = fInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            fSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            fInfo.SetAccessControl(fSecurity);\n\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Done.\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_GetAccessControl_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.FileSecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a> values that specifies which group of access control entries to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control rules for the current file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows 2000 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.privilegenotheldexception\" data-linktype=\"relative-path\">PrivilegeNotHeldException</a></div>\r\n                  </div>\r\n                  <p>The current system account does not have administrative privileges.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_MoveTo_System_String_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_MoveTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveTo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void MoveTo (string destFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to move the file to, which can specify a different file name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs, such as the destination file already exists or the destination device is not ready.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is empty, contains only white spaces, or contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> contains a colon (:) in the middle of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates moving a file to a different location and renaming the file.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.FileInfo.MoveTo#1\">\nusing System;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing System.IO;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Xml;\n\n\n\n\nnamespace Microsoft.Samples.MoveTo.CS \n{\n\n\tclass Program \n\t{\n\t\tprivate static string sourcePath = Environment.GetFolderPath\n\t\t\t(Environment.SpecialFolder.MyDocuments) + \n\t\t\t@&quot;\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml&quot;;\n\t\t\n\t\tprivate static string destPath = Environment.GetFolderPath\n\t\t\t(Environment.SpecialFolder.MyDocuments) + \n\t\t\t@&quot;\\FileInfoTestDirectory\\DestFile.xml&quot;;\n\t\t//\n\t\t// The main entry point for the application.\n\t\t//\n\t\t[STAThread()] static void Main () \n\t\t{\n\t\t\t// Change Console properties to make it obvious that \n\t\t\t// the application is starting.\n\t\t\tConsole.Clear();\n\t\t\t// Move it to the upper left corner of the screen.\n\t\t\tConsole.SetWindowPosition(0, 0);\n\t\t\t// Make it very large.\n\t\t\tConsole.SetWindowSize(Console.LargestWindowWidth - 24,\n\t\t\t\tConsole.LargestWindowHeight - 16);\n\t\t\tConsole.WriteLine(&quot;Welcome.&quot;);\n\t\t\tConsole.WriteLine(&quot;This application demonstrates the FileInfo.MoveTo method.&quot;);\n\t\t\tConsole.WriteLine(&quot;Press any key to start.&quot;);\n\t\t\tstring s = Console.ReadLine();\n\t\t\tConsole.Write(&quot;    Checking whether &quot;);\n\t\t\tConsole.Write(sourcePath);\n\t\t\tConsole.WriteLine(&quot; exists.&quot;);\n\t\t\tFileInfo fInfo = new FileInfo (sourcePath);\n\t\t\tEnsureSourceFileExists();\n\t\t\tDisplayFileProperties(fInfo);\n\t\t\tConsole.WriteLine(&quot;Preparing to move the file to &quot;);\n\t\t\tConsole.Write(destPath);\n\t\t\tConsole.WriteLine(&quot;.&quot;);\n\t\t\tMoveFile(fInfo);\n\t\t\tDisplayFileProperties(fInfo);\n\t\t\tConsole.WriteLine(&quot;Preparing to delete directories.&quot;);\n\t\t\tDeleteFiles();\n\t\t\tConsole.WriteLine(&quot;Press the ENTER key to close this application.&quot;);\n\t\t\ts = Console.ReadLine();\n\t\t}\n\t\t//\n\t\t// Moves the supplied FileInfo instance to destPath.\n\t\t//\n\t\tprivate static void MoveFile(FileInfo fInfo) \n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\tfInfo.MoveTo(destPath);\n\t\t\t\tConsole.WriteLine(&quot;File moved to &quot;);\n\t\t\t\tConsole.WriteLine(destPath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tDisplayException(ex);\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// Ensures that the test directories \n\t\t// and the file FromFile.xml all exist.\n\t\t// \n\t\tprivate static void EnsureSourceFileExists() \n\t\t{\n\t\t\tFileInfo fInfo = new FileInfo(sourcePath);\n\t\t\tstring dirPath = fInfo.Directory.FullName;\n\t\t\tif (!Directory.Exists(dirPath)) \n\t\t\t{\n\t\t\t\tDirectory.CreateDirectory(dirPath);\n\t\t\t}\n\t\t\tif (File.Exists(destPath)) \n\t\t\t{\n\t\t\t\tFile.Delete(destPath);\n\t\t\t}\n\t\t\tConsole.Write(&quot;Creating file &quot;);\n\t\t\tConsole.Write(fInfo.FullName);\n\t\t\tConsole.WriteLine(&quot;.&quot;);\n\t\t\ttry \n\t\t\t{\n\t\t\t\tif (!fInfo.Exists) \n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(&quot;Adding data to the file.&quot;);\n\t\t\t\t\tWriteFileContent(10);\n\t\t\t\t\tConsole.WriteLine(&quot;Successfully created the file.&quot;);\n\t\t\t\t}\n\t\t\t} \n\t\t\tcatch (Exception ex) \n\t\t\t{\n\t\t\t\tDisplayException(ex);\n\t\t\t} \n\t\t\tfinally \n\t\t\t{\n\t\t\t\tdirPath = null;\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// Creates and saves an Xml file to sourcePath.\n\t\t//\n\t\tprivate static void WriteFileContent(int totalElements) \n\t\t{\n\t\t\tXmlDocument doc = new XmlDocument();\n\t\t\tdoc.PreserveWhitespace = true;\n\t\t\tdoc.AppendChild(doc.CreateXmlDeclaration(&quot;1.0&quot;, null, &quot;yes&quot;));\n\t\t\tdoc.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\tXmlElement root = doc.CreateElement(&quot;FileInfo.MoveTo&quot;);\n\t\t\troot.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\tint index = 0;\n\t\t\tXmlElement elem;\n\t\t\twhile (index &lt; totalElements) \n\t\t\t{\n\t\t\t\t\n\t\t\t\telem = doc.CreateElement(&quot;MyElement&quot;);\n\t\t\t\telem.SetAttribute(&quot;Index&quot;, index.ToString());\n\t\t\t\telem.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\t\telem.AppendChild(doc.CreateTextNode(String.Format\n\t\t\t\t\t(&quot;MyElement at position {0}.&quot;, index)));\n\t\t\t\telem.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\t\troot.AppendChild(elem);\n\t\t\t\troot.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tdoc.AppendChild(root);\n\t\t\tdoc.AppendChild(doc.CreateWhitespace(&quot;\\r<br>&quot;));\n\t\t\tdoc.Save(sourcePath);\n\t\t\telem = null;\n\t\t\troot = null;\n\t\t\tdoc = null;\n\t\t}\n\t\t//\n\t\t// Displays FullName, CreationTime, and LastWriteTime of the supplied\n\t\t// FileInfo instance, then displays the text of the file.\n\t\t//\n\t\tprivate static void DisplayFileProperties(FileInfo fInfo) \n\t\t{\n\t\t\tConsole.WriteLine(&quot;The FileInfo instance shows these property values.&quot;);\n\t\t\tStreamReader reader = null;\n\t\t\ttry \n\t\t\t{\n\t\t\t\tConsole.Write(&quot;FullName: &quot;);\n\t\t\t\tConsole.WriteLine(fInfo.FullName);\n\t\t\t\tConsole.Write(&quot;CreationTime: &quot;);\n\t\t\t\tConsole.WriteLine(fInfo.CreationTime);\n\t\t\t\tConsole.Write(&quot;LastWriteTime: &quot;);\n\t\t\t\tConsole.WriteLine(fInfo.LastWriteTime);\n\t\t\t\tConsole.WriteLine();\n\t\t\t\tConsole.WriteLine(&quot;File contents:&quot;);\n\t\t\t\tConsole.WriteLine();\n\t\t\t\treader = new StreamReader(fInfo.FullName);\n\t\t\t\twhile (!reader.EndOfStream) \n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(reader.ReadLine());\n\t\t\t\t}\n\t\t\t\tConsole.WriteLine();\n\t\t\t} \n\t\t\tcatch (Exception ex) \n\t\t\t{\n\t\t\t\tDisplayException(ex);\n\t\t\t} \n\t\t\tfinally \n\t\t\t{\n\t\t\t\tif (reader != null) \n\t\t\t\t{\n\t\t\t\t\treader.Close();\n\t\t\t\t}\n\t\t\t\treader = null;\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// Deletes the test directory and all its files and subdirectories.\n\t\t//\n\t\tprivate static void DeleteFiles() \n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\tDirectoryInfo dInfo = new DirectoryInfo(Environment.GetFolderPath\n\t\t\t\t\t(Environment.SpecialFolder.MyDocuments) + &quot;\\\\FileInfoTestDirectory&quot;);\n\t\t\t\tif (dInfo.Exists) \n\t\t\t\t{\n\t\t\t\t\tdInfo.Delete(true);\n\t\t\t\t\tConsole.WriteLine(&quot;Successfully deleted directories and files.&quot;);\n\t\t\t\t}\n\t\t\t\tdInfo = null;\n\t\t\t} \n\t\t\tcatch (Exception ex) \n\t\t\t{\n\t\t\t\tDisplayException(ex);\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// Displays information about the supplied Exception. This\n\t\t// code is not suitable for production applications.\n\t\t//\n\t\tprivate static void DisplayException(Exception ex) \n\t\t{\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.Append(&quot;An exception of type \\&quot;&quot;);\n\t\t\tsb.Append(ex.GetType().FullName);\n\t\t\tsb.Append(&quot;\\&quot; has occurred.\\r<br>&quot;);\n\t\t\tsb.Append(ex.Message);\n\t\t\tsb.Append(&quot;\\r<br>Stack trace information:\\r<br>&quot;);\n\t\t\tMatchCollection matchCol = Regex.Matches(ex.StackTrace,\n@&quot;(at\\s)(.+)(\\.)([^\\.]*)(\\()([^\\)]*)(\\))((\\sin\\s)(.+)(:line )([\\d]*))?&quot;);\n\t\t\tint L = matchCol.Count;\n\t\t\tstring[] argList;\n\t\t\tMatch matchObj;\n\t\t\tint y, K;\n\t\t\tfor(int x = 0; x &lt; L; x++) \n\t\t\t{\n\t\t\t\tmatchObj = matchCol[x];\n\t\t\t\tsb.Append(matchObj.Result(&quot;\\r<br>\\r<br>$1 $2$3$4$5&quot;));\n\t\t\t\targList = matchObj.Groups[6].Value.Split(new char[] { &#39;,&#39; });\n\t\t\t\tK = argList.Length;\n\t\t\t\tfor (y = 0; y &lt; K; y++) \n\t\t\t\t{\n\t\t\t\t\tsb.Append(&quot;\\r<br>    &quot;);\n\t\t\t\t\tsb.Append(argList[y].Trim().Replace(&quot; &quot;, &quot;        &quot;));\n\t\t\t\t\tsb.Append(&#39;,&#39;);\n\t\t\t\t}\n\t\t\t\tsb.Remove(sb.Length - 1, 1);\n\t\t\t\tsb.Append(&quot;\\r<br>)&quot;);\n\t\t\t\tif (0 &lt; matchObj.Groups[8].Length) \n\t\t\t\t{\n\t\t\t\t\tsb.Append(matchObj.Result(&quot;\\r<br>$10\\r<br>line $12&quot;));\n\t\t\t\t}\n\t\t\t}\n\t\t\targList = null;\n\t\t\tmatchObj = null;\n\t\t\tmatchCol = null;\n\t\t\tConsole.WriteLine(sb.ToString());\n\t\t\tsb = null;\n\t\t}\n\t}\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n// Welcome.\n// This application demonstrates the FileInfo.MoveTo method.\n// Press any key to start.\n//\n//     Checking whether C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml exists.\n// Creating file C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml.\n// Adding data to the file.\n// Successfully created the file.\n// The FileInfo instance shows these property values.\n// FullName: C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml\n// CreationTime: 4/18/2006 1:24:19 PM\n// LastWriteTime: 4/18/2006 1:24:19 PM\n//\n// File contents:\n//\n// &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;\n// &lt;FileInfo.MoveTo&gt;\n// &lt;MyElement Index=&quot;0&quot;&gt;\n// MyElement at position 0.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;1&quot;&gt;\n// MyElement at position 1.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;2&quot;&gt;\n// MyElement at position 2.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;3&quot;&gt;\n// MyElement at position 3.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;4&quot;&gt;\n// MyElement at position 4.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;5&quot;&gt;\n// MyElement at position 5.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;6&quot;&gt;\n// MyElement at position 6.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;7&quot;&gt;\n// MyElement at position 7.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;8&quot;&gt;\n// MyElement at position 8.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;9&quot;&gt;\n// MyElement at position 9.\n// &lt;/MyElement&gt;\n// &lt;/FileInfo.MoveTo&gt;\n\n// Preparing to move the file to\n// C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml.\n// File moved to\n// C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n// The FileInfo instance shows these property values.\n// FullName: C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n// CreationTime: 4/18/2006 1:24:19 PM\n// LastWriteTime: 4/18/2006 1:24:19 PM\n// \n// File contents:\n// \n// &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;\n// &lt;FileInfo.MoveTo&gt;\n// &lt;MyElement Index=&quot;0&quot;&gt;\n// MyElement at position 0.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;1&quot;&gt;\n// MyElement at position 1.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;2&quot;&gt;\n// MyElement at position 2.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;3&quot;&gt;\n// MyElement at position 3.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;4&quot;&gt;\n// MyElement at position 4.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;5&quot;&gt;\n// MyElement at position 5.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;6&quot;&gt;\n// MyElement at position 6.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;7&quot;&gt;\n// MyElement at position 7.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;8&quot;&gt;\n// MyElement at position 8.\n// &lt;/MyElement&gt;\n// &lt;MyElement Index=&quot;9&quot;&gt;\n// MyElement at position 9.\n// &lt;/MyElement&gt;\n// &lt;/FileInfo.MoveTo&gt;\n// \n// Preparing to delete directories.\n// Successfully deleted directories and files.\n// Press the ENTER key to close this application.\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.MoveTo#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Text.RegularExpressions\nImports System.Xml\n\nModule Program\n\n\tPrivate sourcePath As String = Environment.GetFolderPath _\n\t(Environment.SpecialFolder.MyDocuments) &amp; _\n\t&quot;\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml&quot;\n\t&#39;\n\tPrivate destPath As String = Environment.GetFolderPath _\n\t(Environment.SpecialFolder.MyDocuments) &amp; _\n\t&quot;\\FileInfoTestDirectory\\DestFile.xml&quot;\n\t&#39;\n\t&#39; The main entry point for the application.\n\t&#39;\n\t&lt;STAThread()&gt; Sub Main()\n\t\t&#39; Change Console properties to make it obvious that \n\t\t&#39; the application is starting.\n\t\tConsole.Clear()\n\t\t&#39; Move it to the upper left corner of the screen.\n\t\tConsole.SetWindowPosition(0, 0)\n\t\t&#39; Make it very large.\n\t\tConsole.SetWindowSize(Console.LargestWindowWidth - 24, _\n\t\t\tConsole.LargestWindowHeight - 16)\n\t\tConsole.WriteLine(&quot;Welcome.&quot;)\n\t\tConsole.WriteLine(&quot;This application demonstrates the FileInfo.MoveTo method.&quot;)\n\t\tConsole.WriteLine(&quot;Press any key to start.&quot;)\n\t\tDim s As String = Console.ReadLine()\n\t\tConsole.Write(&quot;    Checking whether &quot;)\n\t\tConsole.Write(sourcePath)\n\t\tConsole.WriteLine(&quot; exists.&quot;)\n\t\tDim fInfo As FileInfo = New FileInfo(sourcePath)\n\t\tEnsureSourceFileExists()\n\t\tDisplayFileProperties(fInfo)\n\t\tConsole.WriteLine(&quot;Preparing to move the file to &quot;)\n\t\tConsole.Write(destPath)\n\t\tConsole.WriteLine(&quot;.&quot;)\n\t\tMoveFile(fInfo)\n\t\tDisplayFileProperties(fInfo)\n\t\tConsole.WriteLine(&quot;Preparing to delete directories.&quot;)\n\t\tDeleteFiles()\n\t\tConsole.WriteLine(&quot;Press the ENTER key to close this application.&quot;)\n\t\ts = Console.ReadLine()\n\tEnd Sub\n\t&#39;\n\t&#39; Moves the supplied FileInfo instance to destPath.\n\t&#39;\n\tPrivate Sub MoveFile(ByVal fInfo As FileInfo)\n\t\tTry\n\t\t\tfInfo.MoveTo(destPath)\n\t\t\tConsole.WriteLine(&quot;File moved to &quot;)\n\t\t\tConsole.WriteLine(destPath)\n\t\tCatch ex As Exception\n\t\t\tDisplayException(ex)\n\t\tEnd Try\n\tEnd Sub\n\t&#39;\n\t&#39; Ensures that the test directories \n\t&#39; and the file FromFile.xml all exist.\n\t&#39;\n\tPrivate Sub EnsureSourceFileExists()\n\t\t&#39; Create a FileInfo instance, and get the full path \n\t\t&#39; to the parent directory.\n\t\tDim fInfo As FileInfo = New FileInfo(sourcePath)\n\t\tDim dirPath As String = fInfo.Directory.FullName\n\t\t&#39; If the directory does not exist, create it.\n\t\tIf Not Directory.Exists(dirPath) Then\n\t\t\tDirectory.CreateDirectory(dirPath)\n\t\tEnd If\n\t\t&#39; If DestFile.xml exists, delete it.\n\t\tIf File.Exists(destPath) Then\n\t\t\tFile.Delete(destPath)\n\t\tEnd If\n\t\tConsole.Write(&quot;Creating file &quot;)\n\t\tConsole.Write(fInfo.FullName)\n\t\tConsole.WriteLine(&quot;.&quot;)\n\t\tTry\n\t\t\tIf Not fInfo.Exists Then\n\t\t\t\t&#39; Call WriteFileContent to create the file.\n\t\t\t\tConsole.WriteLine(&quot;Adding data to the file.&quot;)\n\t\t\t\tWriteFileContent(10)\n\t\t\t\tConsole.WriteLine(&quot;Successfully created the file.&quot;)\n\t\t\tEnd If\n\t\tCatch ex As Exception\n\t\t\tDisplayException(ex)\n\t\tFinally\n\t\t\tdirPath = Nothing\n\t\t\tfInfo = Nothing\n\t\tEnd Try\n\tEnd Sub\n\t&#39;\n\t&#39; Creates and saves an Xml file to sourcePath.\n\t&#39;\n\tPrivate Sub WriteFileContent(ByVal totalElements As Integer)\n\t\tDim doc As New XmlDocument()\n\t\tdoc.PreserveWhitespace = True\n\t\tdoc.AppendChild(doc.CreateXmlDeclaration(&quot;1.0&quot;, Nothing, &quot;yes&quot;))\n\t\tdoc.AppendChild(doc.CreateWhitespace(ControlChars.CrLf))\n\t\tDim root As XmlElement = doc.CreateElement(&quot;FileInfo.MoveTo&quot;)\n\t\tDim index As Integer = 0\n\t\tDim elem As XmlElement\n\t\tWhile index &lt; totalElements\n\t\t\telem = doc.CreateElement(&quot;MyElement&quot;)\n\t\t\telem.SetAttribute(&quot;Index&quot;, index.ToString())\n\t\t\telem.AppendChild(doc.CreateWhitespace(ControlChars.CrLf))\n\t\t\telem.AppendChild(doc.CreateTextNode(String.Format _\n\t\t\t (&quot;MyElement at position {0}.&quot;, index)))\n\t\t\telem.AppendChild(doc.CreateWhitespace(ControlChars.CrLf))\n\t\t\troot.AppendChild(elem)\n\t\t\tindex += 1\n\t\tEnd While\n\t\tdoc.AppendChild(root)\n\t\tdoc.AppendChild(doc.CreateWhitespace(ControlChars.CrLf))\n\t\tdoc.Save(sourcePath)\n\tEnd Sub\n\t&#39;\n\t&#39; Displays FullName, CreationTime, and LastWriteTime of the supplied\n\t&#39; FileInfo instance, then displays the text of the file.\n\t&#39;\n\tPrivate Sub DisplayFileProperties(ByVal fInfo As FileInfo)\n\t\tConsole.WriteLine(&quot;The FileInfo instance shows these property values.&quot;)\n\t\tDim reader As StreamReader = Nothing\n\t\tTry\n\t\t\tConsole.Write(&quot;FullName: &quot;)\n\t\t\tConsole.WriteLine(fInfo.FullName)\n\t\t\tConsole.Write(&quot;CreationTime: &quot;)\n\t\t\tConsole.WriteLine(fInfo.CreationTime)\n\t\t\tConsole.Write(&quot;LastWriteTime: &quot;)\n\t\t\tConsole.WriteLine(fInfo.LastWriteTime)\n\t\t\tConsole.WriteLine()\n\t\t\tConsole.WriteLine(&quot;File contents:&quot;)\n\t\t\tConsole.WriteLine()\n\t\t\treader = New StreamReader(fInfo.FullName)\n\t\t\tWhile Not reader.EndOfStream\n\t\t\t\tConsole.WriteLine(reader.ReadLine())\n\t\t\tEnd While\n\t\t\tConsole.WriteLine()\n\t\tCatch ex As Exception\n\t\t\tDisplayException(ex)\n\t\tFinally\n\t\t\tIf Not reader Is Nothing Then\n\t\t\t\treader.Close()\n\t\t\t\treader = Nothing\n\t\t\tEnd If\n\t\tEnd Try\n\tEnd Sub\n\t&#39;\n\t&#39; Deletes the test directory and all its files and subdirectories.\n\t&#39;\n\tPrivate Sub DeleteFiles()\n\t\tTry\n\t\t\tDim dInfo As DirectoryInfo = New DirectoryInfo(Environment.GetFolderPath _\n\t\t\t  (Environment.SpecialFolder.MyDocuments) + &quot;\\FileInfoTestDirectory&quot;)\n\t\t\tIf dInfo.Exists Then\n\t\t\t\tdInfo.Delete(True)\n\t\t\t\tConsole.WriteLine(&quot;Successfully deleted directories and files.&quot;)\n\t\t\tEnd If\n\t\t\tdInfo = Nothing\n\t\tCatch ex As Exception\n\t\t\tDisplayException(ex)\n\t\tEnd Try\n\tEnd Sub\n\t&#39;\n\t&#39; Displays information about the supplied Exception. This\n\t&#39; code is not suitable for production applications.\n\t&#39;\n\tPrivate Sub DisplayException(ByVal ex As Exception)\n\t\tDim sb As New StringBuilder(&quot;An exception of type &quot;&quot;&quot;)\n\t\tsb.Append(ex.GetType().FullName)\n\t\tsb.Append(&quot;&quot;&quot; has occurred.&quot;)\n\t\tsb.Append(ControlChars.CrLf)\n\t\tsb.Append(ex.Message)\n\t\tsb.Append(ControlChars.CrLf)\n\t\tsb.Append(&quot;Stack trace information:&quot;)\n\t\tsb.Append(ControlChars.CrLf)\n\t\tDim matchCol As MatchCollection = Regex.Matches(ex.StackTrace, _\n\t\t&quot;(at\\s)(.+)(\\.)([^\\.]*)(\\()([^\\)]*)(\\))((\\sin\\s)(.+)(:line )([\\d]*))?&quot;)\n\t\tDim L As Integer = matchCol.Count\n\t\tDim y, K As Integer\n\t\tDim argList() As String\n\t\tDim matchObj As Match\n\t\tDim x As Integer = 0\n\t\tWhile x &lt; L\n\t\t\tmatchObj = matchCol(x)\n\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\tsb.Append(matchObj.Result(&quot;$1 $2$3$4$5&quot;))\n\t\t\targList = matchObj.Groups(6).Value.Split(New Char() {&quot;,&quot;})\n\t\t\tK = argList.Length\n\t\t\ty = 0\n\t\t\tWhile y &lt; K\n\t\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\t\tsb.Append(&quot;    &quot;)\n\t\t\t\tsb.Append(argList(y).Trim().Replace(&quot; &quot;, &quot;        &quot;))\n\t\t\t\tsb.Append(&quot;,&quot;)\n\t\t\t\ty += 1\n\t\t\tEnd While\n\t\t\tsb.Remove(sb.Length - 1, 1)\n\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\tIf 0 &lt; matchObj.Groups(8).Length Then\n\t\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\t\tsb.Append(matchObj.Result(&quot;$10&quot;))\n\t\t\t\tsb.Append(ControlChars.CrLf)\n\t\t\t\tsb.Append(matchObj.Result(&quot;line $12&quot;))\n\t\t\tEnd If\n\t\t\tx += 1\n\t\tEnd While\n\t\targList = Nothing\n\t\tmatchObj = Nothing\n\t\tmatchCol = Nothing\n\t\tConsole.WriteLine(sb.ToString())\n\t\tsb = Nothing\n\t\tReturn\n\tEnd Sub\nEnd Module\n\n&#39; Welcome.\n&#39; This application demonstrates the FileInfo.MoveTo method.\n&#39; Press any key to start.\n&#39; \n&#39;     Checking whether C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml exists.\n&#39; Creating file C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml.\n&#39; Adding data to the file.\n&#39; Successfully created the file.\n&#39; The FileInfo instance shows these property values.\n&#39; FullName: C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml\n&#39; CreationTime: 4/18/2006 1:38:19 PM\n&#39; LastWriteTime: 4/18/2006 1:38:19 PM\n&#39; \n&#39; File contents:\n&#39; \n&#39; &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;\n&#39; &lt;FileInfo.MoveTo&gt;&lt;MyElement Index=&quot;0&quot;&gt;\n&#39; MyElement at position 0.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;1&quot;&gt;\n&#39; MyElement at position 1.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;2&quot;&gt;\n&#39; MyElement at position 2.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;3&quot;&gt;\n&#39; MyElement at position 3.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;4&quot;&gt;\n&#39; MyElement at position 4.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;5&quot;&gt;\n&#39; MyElement at position 5.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;6&quot;&gt;\n&#39; MyElement at position 6.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;7&quot;&gt;\n&#39; MyElement at position 7.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;8&quot;&gt;\n&#39; MyElement at position 8.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;9&quot;&gt;\n&#39; MyElement at position 9.\n&#39; &lt;/MyElement&gt;&lt;/FileInfo.MoveTo&gt;\n&#39; \n&#39; Preparing to move the file to\n&#39; C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml.\n&#39; File moved to\n&#39; C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n&#39; The FileInfo instance shows these property values.\n&#39; FullName: C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n&#39; CreationTime: 4/18/2006 1:38:19 PM\n&#39; LastWriteTime: 4/18/2006 1:38:19 PM\n&#39; \n&#39; File contents:\n&#39; \n&#39; &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;\n&#39; &lt;FileInfo.MoveTo&gt;&lt;MyElement Index=&quot;0&quot;&gt;\n&#39; MyElement at position 0.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;1&quot;&gt;\n&#39; MyElement at position 1.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;2&quot;&gt;\n&#39; MyElement at position 2.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;3&quot;&gt;\n&#39; MyElement at position 3.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;4&quot;&gt;\n&#39; MyElement at position 4.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;5&quot;&gt;\n&#39; MyElement at position 5.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;6&quot;&gt;\n&#39; MyElement at position 6.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;7&quot;&gt;\n&#39; MyElement at position 7.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;8&quot;&gt;\n&#39; MyElement at position 8.\n&#39; &lt;/MyElement&gt;&lt;MyElement Index=&quot;9&quot;&gt;\n&#39; MyElement at position 9.\n&#39; &lt;/MyElement&gt;&lt;/FileInfo.MoveTo&gt;\n&#39; \n&#39; Preparing to delete directories.\n&#39; Successfully deleted directories and files.\n&#39; Press the ENTER key to close this application.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Open_System_IO_FileMode_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(FileMode)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file in the specified mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream Open (System.IO.FileMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> constant specifying the mode (for example, <code>Open</code> or <code>Append</code>) in which to open the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A file opened in the specified mode, with read/write access and unshared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The file is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The file is already open.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file, adds some information to the file, and reads the file.  </p>\n<pre><code class=\"lang-cs\" name=\"finfo open1#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        // Delete the file if it exists.\n        if (!fi.Exists) \n        {\n            //Create the file.\n            using (FileStream fs = fi.Create()) \n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n                //Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        //Open the stream and read it back.\n        using (FileStream fs = fi.Open(FileMode.Open)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo open1#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n   \n   // Delete the file if it exists.\n   if (  !fi-&gt;Exists )\n   {\n      //Create the file.\n      FileStream^ fs = fi-&gt;Create();\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         //Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n\n   //Open the stream and read it back.\n   FileStream^ fs = fi-&gt;Open( FileMode::Open );\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n   }\n   finally\n   {\n      if ( fs )\n         delete (IDisposable^)fs;\n   }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo open1#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n        Dim fs As FileStream\n\n        &#39; Delete the file if it exists.\n        If fi.Exists = False Then\n            &#39;Create the file.\n            fs = fi.Create()\n            Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n            &#39;Add some information to the file.\n            fs.Write(info, 0, info.Length)\n            fs.Close()\n        End If\n\n        &#39;Open the stream and read it back.\n        fs = fi.Open(FileMode.Open)\n        Dim b(1024) As Byte\n        Dim temp As UTF8Encoding = New UTF8Encoding(True)\n        Do While fs.Read(b, 0, b.Length) &gt; 0\n            Console.WriteLine(temp.GetString(b))\n        Loop\n        fs.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is some text in the file.\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Open_System_IO_FileMode_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(FileMode,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file in the specified mode with read, write, or read/write access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream Open (System.IO.FileMode mode, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> constant specifying the mode (for example, <code>Open</code> or <code>Append</code>) in which to open the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> constant specifying whether to open the file with <code>Read</code>, <code>Write</code>, or <code>ReadWrite</code> file access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object opened in the specified mode and access, and unshared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The file is already open.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file as read-only and reads from the file.  </p>\n<pre><code class=\"lang-vb\" name=\"finfo open2#1\">imports System\nimports System.IO\nimports System.Text\n\nPublic Class Test\n\tPublic Shared Sub Main()\n\t\tDim path As String = &quot;c:\\MyTest.txt&quot;\n\t\tDim fi As FileInfo = new FileInfo(path)\n\t\tDim fs As FileStream\n\n\t\t&#39; Delete the file if it exists.\n\t\tIf fi.Exists = False\n\t\t\t&#39;Create the file.\n\t\t\tfs = fi.Create()\n\t\t\tDim info As Byte() = _\n\t\t\t\t\tNew UTF8Encoding(true).GetBytes( _\n\t\t\t\t\t\t&quot;This is some text in the file.&quot;)\n\n\t\t\t&#39;Add some information to the file.\n\t\t\tfs.Write(info, 0, info.Length)\n\t\t\tfs.Close()\n\t\tEnd If\n\n\t\t&#39;Open the stream and read it back.\n\t\tfs = fi.Open(FileMode.Open, FileAccess.Read)\n\t\tDim b(1024) As byte\n\t\tDim temp As UTF8Encoding = New UTF8Encoding(true)\n\n\t\tDo While fs.Read(b,0,b.Length) &gt; 0\n\t\t\tConsole.WriteLine(temp.GetString(b))\n\t\tLoop\n            Try\n                fs.Write(b,0,b.Length)\n                Catch e As Exception\n                Console.WriteLine(&quot;Writing was disallowed, as expected: {0}&quot;, e.ToString())\n            End Try\n        fs.Close()\n\tEnd Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is some text in the file.\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;Writing was disallowed, as expected: System.NotSupportedException: Stream does \n&#39;not support writing.\n&#39;   at System.IO.__Error.WriteNotSupported()\n&#39;   at System.IO.FileStream.Write(Byte[] array, Int32 offset, Int32 count)\n&#39;   at VB_Console_Application.Test.Main() in C:\\Documents and Settings\\MyComputer\n&#39;\\My Documents\\Visual Studio 2005\\Projects\\finfo open2\\finfo open2\\Module1.vb:line 34\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo open2#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n   \n   // Delete the file if it exists.\n   if (  !fi-&gt;Exists )\n   {\n      \n      //Create the file.\n      FileStream^ fs = fi-&gt;Create();\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         //Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n\n   //Open the stream and read it back.\n   FileStream^ fs = fi-&gt;Open( FileMode::Open, FileAccess::Read );\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n      try\n      {\n         //Try to write to the file.\n         fs-&gt;Write( b, 0, b-&gt;Length );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Writing was disallowed, as expected: {0}&quot;, e );\n      }\n   }\n   finally\n   {\n      if ( fs )\n         delete (IDisposable^)fs;\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//Writing was disallowed, as expected: System.NotSupportedException: Stream does \n//not support writing.\n//   at System.IO.__Error.WriteNotSupported()\n//   at System.IO.FileStream.Write(Byte[] array, Int32 offset, Int32 count)\n//   at main() in c:\\documents and settings\\MyComputer\\my documents\\\n//visual studio 2005\\projects\\finfo open2\\finfo open2\\\n//cpp_console_application.cpp:line 46\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo open2#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        // Delete the file if it exists.\n        if (!fi.Exists) \n        {\n            //Create the file.\n            using (FileStream fs = fi.Create()) \n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n                //Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        //Open the stream and read it back.\n        using (FileStream fs = fi.Open(FileMode.Open, FileAccess.Read)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n\n            try \n            {\n                //Try to write to the file.\n                fs.Write(b,0,b.Length);\n            } \n            catch (Exception e) \n            {\n                Console.WriteLine(&quot;Writing was disallowed, as expected: {0}&quot;,\n                    e.ToString());\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//Writing was disallowed, as expected: System.NotSupportedException: Stream does \n//not support writing.\n//   at System.IO.__Error.WriteNotSupported()\n//   at System.IO.FileStream.Write(Byte[] array, Int32 offset, Int32 count)\n//   at Test.Main() in C:\\Documents and Settings\\My Computer\\My Documents\\\n//Visual Studio 2005\\Projects\\finfo open2\\finfo open2\\Program.cs:line 39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Open_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(FileMode,FileAccess,FileShare)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream Open (System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> constant specifying the mode (for example, <code>Open</code> or <code>Append</code>) in which to open the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> constant specifying whether to open the file with <code>Read</code>, <code>Write</code>, or <code>ReadWrite</code> file access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>share</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> constant specifying the type of access other <code>FileStream</code> objects have to this file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object opened with the specified mode, access, and sharing options.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The file is already open.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates opening a file for reading and writing, but disallowing access to other users or processes.  </p>\n<pre><code class=\"lang-cpp\" name=\"fileinfoopen#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Open an existing file, or create a new one.\n   FileInfo^ fi = gcnew FileInfo( &quot;temp.txt&quot; );\n   \n   // Open the file just specified such that no one else can use it.\n   FileStream^ fs = fi-&gt;Open( FileMode::OpenOrCreate, FileAccess::ReadWrite, FileShare::None );\n   \n   // Create another reference to the same file.\n   FileInfo^ nextfi = gcnew FileInfo( &quot;temp.txt&quot; );\n   try\n   {\n      \n      // Try opening the same file, which was locked by the previous process.\n      nextfi-&gt;Open( FileMode::OpenOrCreate, FileAccess::Read );\n      Console::WriteLine( &quot;The file was not locked, and was opened by a second process.&quot; );\n   }\n   catch ( IOException^ ) \n   {\n      Console::WriteLine( &quot;The file could not be opened because it was locked by another process.&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   // Close the file so it can be deleted.\n   fs-&gt;Close();\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The file could not be opened because it was locked by another process.\n</code></pre><pre><code class=\"lang-cs\" name=\"fileinfoopen#1\">using System;\nusing System.IO;\n\npublic class OpenTest \n{\n    public static void Main() \n    {\n        // Open an existing file, or create a new one.\n        FileInfo fi = new FileInfo(&quot;temp.txt&quot;);\n\n        // Open the file just specified such that no one else can use it.\n        FileStream fs = fi.Open( FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None );\n\n        // Create another reference to the same file.\n        FileInfo nextfi = new FileInfo(&quot;temp.txt&quot;);        \n\n        try \n        {\n            // Try opening the same file, which was locked by the previous process.\n            nextfi.Open( FileMode.OpenOrCreate, FileAccess.Read );\n\n            Console.WriteLine(&quot;The file was not locked, and was opened by a second process.&quot;);\n        } \n        catch (IOException) \n        {\n            Console.WriteLine(&quot;The file could not be opened because it was locked by another process.&quot;);\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(e.ToString());\n        }\n\n        // Close the file so it can be deleted.\n        fs.Close();\n    }\n}\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//The file could not be opened because it was locked by another process.\n</code></pre><pre><code class=\"lang-vb\" name=\"fileinfoopen#1\">Imports System\nImports System.IO\n\nPublic Class OpenTest\n\n    Public Shared Sub Main()\n        &#39; Open an existing file, or create a new one.\n        Dim fi As New FileInfo(&quot;temp.txt&quot;)\n\n        &#39; Open the file just specified such that no one else can use it.\n        Dim fs As FileStream = fi.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None)\n\n        &#39; Create another reference to the same file.\n        Dim nextfi As New FileInfo(&quot;temp.txt&quot;)\n\n        Try\n            &#39; Try opening the same file, which was locked by the previous process.\n            nextfi.Open(FileMode.OpenOrCreate, FileAccess.Read)\n            Console.WriteLine(&quot;The file was not locked, and was opened by a second process.&quot;)\n        Catch i as IOException\n            Console.WriteLine(i.ToString())\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        End Try\n\n        &#39; Close the file so it can be deleted.\n        fs.Close()\n    End Sub &#39;Main\nEnd Class &#39;OpenTest\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;System.IO.IOException: The process cannot access the file \n&#39;&#39;C:\\Documents and Settings\\mydirectory\\My Documents\\Visual Studio 2005\n&#39;\\Projects\\fileinfoopen\\fileinfoopen\\obj\\Release&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39; \n&#39;because it is being used by another process.\n&#39;at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n&#39;at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, \n&#39;Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions\n&#39;options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy)\n&#39;at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access,\n&#39;FileShare share) at System.IO.FileInfo.Open(FileMode mode, FileAccess access)\n&#39;at VB_Console_Application.OpenTest.Main() in C:\\Documents and Settings\n&#39;\\mydirectory\\My Documents\\Visual Studio 2005\\Projects\\VB_Console_Application\n&#39;\\VB_Console_Application\\Module1.vb:line 19\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_OpenRead\">\r\n    \r\n            <a id=\"System_IO_FileInfo_OpenRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenRead()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a read-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream OpenRead ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A new read-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The file is already open.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns a read-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object with the <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> mode set to <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file as read-only and reads from it.  </p>\n<pre><code class=\"lang-vb\" name=\"finfo openread#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n        Dim fs As FileStream\n\n        &#39; Delete the file if it exists.\n        If fi.Exists = False Then\n            &#39;Create the file.\n            fs = fi.Create()\n            Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n            &#39;Add some information to the file.\n            fs.Write(info, 0, info.Length)\n            fs.Close()\n        End If\n\n        &#39;Open the stream and read it back.\n        fs = fi.OpenRead()\n        Dim b(1024) As Byte\n        Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n        Do While fs.Read(b, 0, b.Length) &gt; 0\n            Console.WriteLine(temp.GetString(b))\n        Loop\n        fs.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is some text in the file.\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo openread#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n\t\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        // Delete the file if it exists.\n        if (!fi.Exists) \n        {\n            //Create the file.\n            using (FileStream fs = fi.Create()) \n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n                //Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        //Open the stream and read it back.\n        using (FileStream fs = fi.OpenRead()) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo openread#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n   \n   // Delete the file if it exists.\n   if (  !fi-&gt;Exists )\n   {\n      //Create the file.\n      FileStream^ fs = fi-&gt;Create();\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         //Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n\n   //Open the stream and read it back.\n   FileStream^ fs = fi-&gt;OpenRead();\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n   }\n   finally\n   {\n      if ( fs )\n         delete (IDisposable^)fs;\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_OpenText\">\r\n    \r\n            <a id=\"System_IO_FileInfo_OpenText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenText()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> with UTF8 encoding that reads from an existing text file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamReader OpenText ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a></div>\r\n                  </div>\r\n                  <p>A new <code>StreamReader</code> with UTF8 encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads text from a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"finfo opentext#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\npublic ref class OpenTextTest\n{\npublic:\n    static void Main()\n    {\n        String^ path = &quot;c:\\\\MyTest.txt&quot;;\n\n        FileInfo^ fi = gcnew FileInfo(path);\n\n        // Check for existing file\n        if (!fi-&gt;Exists)\n        {\n            // Create the file.\n            FileStream^ fs = fi-&gt;Create();\n            array&lt;Byte&gt;^ info =\n                (gcnew UTF8Encoding(true))-&gt;GetBytes(&quot;This is some text in the file.&quot;);\n\n            // Add some information to the file.\n            fs-&gt;Write(info, 0, info-&gt;Length);\n            fs-&gt;Close();\n        }\n\n        // Open the stream and read it back.\n        StreamReader^ sr = fi-&gt;OpenText();\n        String^ s = &quot;&quot;;\n        while ((s = sr-&gt;ReadLine()) != nullptr)\n        {\n            Console::WriteLine(s);\n        }\n    }\n};\n\nint main()\n{\n    OpenTextTest::Main();\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n</code></pre><pre><code class=\"lang-cs\" name=\"finfo opentext#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:\\MyTest.txt&quot;;\n\n        FileInfo fi = new FileInfo(path);\n\n        // Check for existing file\n        if (!fi.Exists)\n        {\n            // Create the file.\n            using (FileStream fs = fi.Create())\n            {\n                Byte[] info = \n                    new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n\n                // Add some information to the file.\n                fs.Write(info, 0, info.Length);\n                fs.Close();\n            }\n        }\n\n        // Open the stream and read it back.\n        using (StreamReader sr = fi.OpenText())\n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo opentext#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class OpenTextTest\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:\\MyTest.txt&quot;\n\n        Dim fi As New FileInfo(path)\n\n        &#39; Check for existing file\n        If fi.Exists = false Then\n            &#39; Create the file.\n            Dim fs As FileStream = fi.Create()\n            Dim info() As Byte = _\n                    New UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;)\n\n            &#39; Add some information to the file.\n            fs.Write(info, 0, info.Length)\n            fs.Close()\n        End If\n\n        &#39; Open the stream and read it back.\n        Dim sr As StreamReader = fi.OpenText()\n        Dim s As String = &quot;&quot;\n        While sr.EndOfStream = false\n            s = sr.ReadLine()\n            Console.WriteLine(s)\n        End While\n        sr.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following;\n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is some text in the file.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_OpenWrite\">\r\n    \r\n            <a id=\"System_IO_FileInfo_OpenWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenWrite()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a write-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileStream OpenWrite ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A write-only unshared <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object for a new or existing file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The path specified when creating an instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object is read-only or is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path specified when creating an instance of the <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OpenWrite method opens a file if one already exists for the file path, or creates a new file if one does not exist. For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as &quot;This is a test of the OpenWrite method&quot;) with a shorter string (like &quot;Second run&quot;), the file will contain a mix of the strings (&quot;Second runtest of the OpenWrite method&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file for writing and then reads from the file.  </p>\n<pre><code class=\"lang-cs\" name=\"finfo openwrite#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        FileInfo fi = new FileInfo(path);\n\n        // Open the stream for writing.\n        using (FileStream fs = fi.OpenWrite()) \n        {\n            Byte[] info = \n                new UTF8Encoding(true).GetBytes(&quot;This is to test the OpenWrite method.&quot;);\n\n            // Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        // Open the stream and read it back.\n        using (FileStream fs = fi.OpenRead()) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is to test the OpenWrite method.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"finfo openwrite#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim fi As FileInfo = New FileInfo(path)\n        Dim fs As FileStream\n\n        &#39; Open the stream for writing.\n        fs = fi.OpenWrite()\n        Dim info As Byte() = _\n            New UTF8Encoding(True).GetBytes(&quot;This is to test the OpenWrite method.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n        fs.Close()\n\n        &#39;Open the stream and read it back.\n        fs = fi.OpenRead()\n        Dim b(1024) As Byte\n        Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n        Do While fs.Read(b, 0, b.Length) &gt; 0\n            Console.WriteLine(temp.GetString(b))\n        Loop\n        fs.Close()\n    End Sub\nEnd Class\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;This is to test the OpenWrite method.\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"finfo openwrite#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   FileInfo^ fi = gcnew FileInfo( path );\n\n   // Open the stream for writing.\n   {\n      FileStream^ fs = fi-&gt;OpenWrite();\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is to test the OpenWrite method.&quot; );\n         \n         // Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n   \n   // Open the stream and read it back.\n   {\n      FileStream^ fs = fi-&gt;OpenRead();\n      try\n      {\n         array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n         UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n         while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n         {\n            Console::WriteLine( temp-&gt;GetString( b ) );\n         }\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//This is to test the OpenWrite method.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Replace_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the contents of a specified file with the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object, deleting the original file, and creating a backup of the replaced file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo Replace (string destinationFileName, string destinationBackupFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file to replace with the current file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationBackupFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file with which to create a backup of the file described by the <code>destFileName</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object that encapsulates information about the file described by the <code>destFileName</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The path described by the <code>destFileName</code> parameter was not of a legal form.  </p>\n<p> -or-  </p>\n<p> The path described by the <code>destBackupFileName</code> parameter was not of a legal form.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>destFileName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.  </p>\n<p> -or-  </p>\n<p> The file described by the <code>destinationFileName</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows NT or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Replace method replaces the contents of a specified file with the contents of the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.  It also creates a backup of the file that was replaced.  Finally, it returns a new <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object that describes the overwritten file.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This method will succeed in Windows 2000 environments if the <code>destFileName</code> is read-only and will not raise an exception. Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property to check if the destination file is read-only before attempting to replace it.  </p>\n</div>\n<p> Pass <code>null</code> to the <code>destBackupFileName</code> parameter if you do not want to create a backup of the file being replaced.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Replace_\" data-linktype=\"relative-path\">Replace</a> method to replace a file with another file and create a backup of the replaced file.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.FileInfo.Replace#1\">using System;\nusing System.IO;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                // originalFile and fileToReplace must contain the path to files that already exist in the  \n                // file system. backUpOfFileToReplace is created during the execution of the Replace method.\n\n                string originalFile  = &quot;test.txt&quot;;\n                string fileToReplace = &quot;test2.txt&quot;;\n                string backUpOfFileToReplace = &quot;test2.txt.bak&quot;;\n\n                if (File.Exists(originalFile) &amp;&amp; (File.Exists(fileToReplace)))\n                {\n                    Console.WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; + fileToReplace + &quot;, delete &quot;\n                        + originalFile + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;);\n\n                    // Replace the file.\n                    ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace);\n\n                    Console.WriteLine(&quot;Done&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; + &quot;exist.&quot;, originalFile, fileToReplace);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Move a file into another file, delete the original, and create a backup of the replaced file.\n        public static void ReplaceFile(string fileToMoveAndDelete, string fileToReplace, string backupOfFileToReplace)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(fileToMoveAndDelete);\n\n            // replace the file.\n            fInfo.Replace(fileToReplace, backupOfFileToReplace, false);\n        }\n    }\n}\n//Move the contents of test.txt into test2.txt, delete test.txt, and \n//create a backup of test2.txt.\n//Done\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.Replace#1\">Imports System\nImports System.IO\n\nModule FileExample\n\n    Sub Main()\n        Try\n            &#39; originalFile and fileToReplace must contain the path to files that already exist in the  \n            &#39; file system. backUpOfFileToReplace is created during the execution of the Replace method.\n\n            Dim originalFile As String = &quot;test.xml&quot;\n            Dim fileToReplace As String = &quot;test2.xml&quot;\n            Dim backUpOfFileToReplace As String = &quot;test2.xml.bak&quot;\n\n            If (File.Exists(originalFile) And (File.Exists(fileToReplace))) Then\n                Console.WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; + fileToReplace + &quot;, delete &quot; + originalFile + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;)\n\n                &#39; Replace the file.\n                ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace)\n\n                Console.WriteLine(&quot;Done&quot;)\n\n            Else\n                Console.WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; + &quot;exist.&quot;, originalFile, fileToReplace)\n            End If\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n    &#39; Move a file into another file, delete the original, and create a backup of the replaced file.\n    Sub ReplaceFile(ByVal fileToMoveAndDelete As String, ByVal fileToReplace As String, ByVal backupOfFileToReplace As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(fileToMoveAndDelete)\n\n        &#39; Replace the file.\n        fInfo.Replace(fileToReplace, backupOfFileToReplace, False)\n\n    End Sub\nEnd Module\n\n&#39; Move the contents of test.txt into test2.txt, delete test.txt, and \n&#39; create a backup of test2.txt.\n&#39; Done\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.FileInfo.Replace#1\">\nusing namespace System;\nusing namespace System::IO;\n\n\n// Move a file into another file, delete the original,\n// and create a backup of the replaced file.\nvoid ReplaceFile(String^ fileToMoveAndDelete,\n                 String^ fileToReplace, String^ backupOfFileToReplace)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileToMoveAndDelete);\n\n    // replace the file.\n    fInfo-&gt;Replace(fileToReplace, backupOfFileToReplace, false);\n}\n\n\nint main()\n{\n    try\n    {\n        // originalFile and fileToReplace must contain \n        // the path to files that already exist in the  \n        // file system. backUpOfFileToReplace is created \n        // during the execution of the Replace method.\n\n        String^ originalFile = &quot;test.xml&quot;;\n        String^ fileToReplace = &quot;test2.xml&quot;;\n        String^ backUpOfFileToReplace = &quot;test2.xml.bak&quot;;\n\n        if (File::Exists(originalFile) &amp;&amp; (File::Exists(fileToReplace)))\n        {\n            Console::WriteLine(&quot;Move the contents of {0} into {1}, &quot; +\n                &quot;delete {0}, and create a backup of {1}&quot;,\n                originalFile, fileToReplace);\n\n            // Replace the file.\n            ReplaceFile(originalFile, fileToReplace,\n                backUpOfFileToReplace);\n\t\t\tConsole::WriteLine(&quot;Done&quot;);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; +\n                &quot;exist.&quot;, originalFile, fileToReplace);\n        }\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n}\n\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Move the contents of c:&nbsp;&nbsp;&nbsp;&nbsp;est1.xml into c:&nbsp;&nbsp;&nbsp;&nbsp;est2.xml, delete c:&nbsp;&nbsp;&nbsp;&nbsp;est1.xml, \n//and create a backup of c:&nbsp;&nbsp;&nbsp;&nbsp;est2.xml\n//Done\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_Replace_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the contents of a specified file with the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo Replace (string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file to replace with the current file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationBackupFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file with which to create a backup of the file described by the <code>destFileName</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreMetadataErrors</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object that encapsulates information about the file described by the <code>destFileName</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The path described by the <code>destFileName</code> parameter was not of a legal form.  </p>\n<p> -or-  </p>\n<p> The path described by the <code>destBackupFileName</code> parameter was not of a legal form.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>destFileName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.  </p>\n<p> -or-  </p>\n<p> The file described by the <code>destinationFileName</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows NT or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Replace method replaces the contents of a specified file with the contents of the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.  It also creates a backup of the file that was replaced.  Finally, it returns a new <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object that describes the overwritten file.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This method will succeed in Windows 2000 environments if the <code>destFileName</code> is read-only and will not raise an exception. Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property to check if the destination file is read-only before attempting to replace it.  </p>\n</div>\n<p> Pass <code>null</code> to the <code>destBackupFileName</code> parameter if you do not want to create a backup of the file being replaced.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Replace_\" data-linktype=\"relative-path\">Replace</a> method to replace a file with another file and create a backup of the replaced file.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.FileInfo.Replace#1\">using System;\nusing System.IO;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                // originalFile and fileToReplace must contain the path to files that already exist in the  \n                // file system. backUpOfFileToReplace is created during the execution of the Replace method.\n\n                string originalFile  = &quot;test.txt&quot;;\n                string fileToReplace = &quot;test2.txt&quot;;\n                string backUpOfFileToReplace = &quot;test2.txt.bak&quot;;\n\n                if (File.Exists(originalFile) &amp;&amp; (File.Exists(fileToReplace)))\n                {\n                    Console.WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; + fileToReplace + &quot;, delete &quot;\n                        + originalFile + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;);\n\n                    // Replace the file.\n                    ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace);\n\n                    Console.WriteLine(&quot;Done&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; + &quot;exist.&quot;, originalFile, fileToReplace);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Move a file into another file, delete the original, and create a backup of the replaced file.\n        public static void ReplaceFile(string fileToMoveAndDelete, string fileToReplace, string backupOfFileToReplace)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(fileToMoveAndDelete);\n\n            // replace the file.\n            fInfo.Replace(fileToReplace, backupOfFileToReplace, false);\n        }\n    }\n}\n//Move the contents of test.txt into test2.txt, delete test.txt, and \n//create a backup of test2.txt.\n//Done\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.Replace#1\">Imports System\nImports System.IO\n\nModule FileExample\n\n    Sub Main()\n        Try\n            &#39; originalFile and fileToReplace must contain the path to files that already exist in the  \n            &#39; file system. backUpOfFileToReplace is created during the execution of the Replace method.\n\n            Dim originalFile As String = &quot;test.xml&quot;\n            Dim fileToReplace As String = &quot;test2.xml&quot;\n            Dim backUpOfFileToReplace As String = &quot;test2.xml.bak&quot;\n\n            If (File.Exists(originalFile) And (File.Exists(fileToReplace))) Then\n                Console.WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; + fileToReplace + &quot;, delete &quot; + originalFile + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;)\n\n                &#39; Replace the file.\n                ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace)\n\n                Console.WriteLine(&quot;Done&quot;)\n\n            Else\n                Console.WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; + &quot;exist.&quot;, originalFile, fileToReplace)\n            End If\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n    &#39; Move a file into another file, delete the original, and create a backup of the replaced file.\n    Sub ReplaceFile(ByVal fileToMoveAndDelete As String, ByVal fileToReplace As String, ByVal backupOfFileToReplace As String)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(fileToMoveAndDelete)\n\n        &#39; Replace the file.\n        fInfo.Replace(fileToReplace, backupOfFileToReplace, False)\n\n    End Sub\nEnd Module\n\n&#39; Move the contents of test.txt into test2.txt, delete test.txt, and \n&#39; create a backup of test2.txt.\n&#39; Done\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.FileInfo.Replace#1\">\nusing namespace System;\nusing namespace System::IO;\n\n\n// Move a file into another file, delete the original,\n// and create a backup of the replaced file.\nvoid ReplaceFile(String^ fileToMoveAndDelete,\n                 String^ fileToReplace, String^ backupOfFileToReplace)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileToMoveAndDelete);\n\n    // replace the file.\n    fInfo-&gt;Replace(fileToReplace, backupOfFileToReplace, false);\n}\n\n\nint main()\n{\n    try\n    {\n        // originalFile and fileToReplace must contain \n        // the path to files that already exist in the  \n        // file system. backUpOfFileToReplace is created \n        // during the execution of the Replace method.\n\n        String^ originalFile = &quot;test.xml&quot;;\n        String^ fileToReplace = &quot;test2.xml&quot;;\n        String^ backUpOfFileToReplace = &quot;test2.xml.bak&quot;;\n\n        if (File::Exists(originalFile) &amp;&amp; (File::Exists(fileToReplace)))\n        {\n            Console::WriteLine(&quot;Move the contents of {0} into {1}, &quot; +\n                &quot;delete {0}, and create a backup of {1}&quot;,\n                originalFile, fileToReplace);\n\n            // Replace the file.\n            ReplaceFile(originalFile, fileToReplace,\n                backUpOfFileToReplace);\n\t\t\tConsole::WriteLine(&quot;Done&quot;);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Either the file {0} or {1} doesn&#39;t &quot; +\n                &quot;exist.&quot;, originalFile, fileToReplace);\n        }\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n}\n\n\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Move the contents of c:&nbsp;&nbsp;&nbsp;&nbsp;est1.xml into c:&nbsp;&nbsp;&nbsp;&nbsp;est2.xml, delete c:&nbsp;&nbsp;&nbsp;&nbsp;est1.xml, \n//and create a backup of c:&nbsp;&nbsp;&nbsp;&nbsp;est2.xml\n//Done\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_SetAccessControl_System_Security_AccessControl_FileSecurity_\">\r\n    \r\n            <a id=\"System_IO_FileInfo_SetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessControl(FileSecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileSecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that describes an access control list (ACL) entry to apply to the current file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>fileSecurity</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found or modified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current process does not have access to open the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows 2000 or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list.  </p>\n<p> Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The ACL specified for the <code>fileSecurity</code> parameter replaces the existing ACL for the file. To add permissions for a new user, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain the existing ACL, modify it, and then use SetAccessControl to apply it back to the file.  </p>\n</div>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> The SetAccessControl method persists only <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> objects that have been modified after object creation.  If a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object from one file and reapply the same object to another file.  </p>\n<p> To copy ACL information from one file to another:  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to retrieve the <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object from the source file.  </p>\n</li>\n<li><p>Create a new <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object for the destination file.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method of the source <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to retrieve the ACL information.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to copy the information retrieved in step 3 to the destination <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object.  </p>\n</li>\n<li><p>Set the destination <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the destination file using the SetAccessControl method.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method and the SetAccessControl method to add and then remove an ACL entry from a file.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">#using &lt;System.Security.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\nusing namespace System::Security::Principal;\n\n// Adds an ACL entry on the specified file for the specified account.\nstatic void AddFileSecurity(String^ fileName, String^ account,\n                     FileSystemRights^ rights, \n                     AccessControlType^ controlType)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\n    // Get a FileSecurity object that represents the\n    // current security settings.\n    FileSecurity^ fSecurity = fInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    fSecurity-&gt;AddAccessRule(gcnew FileSystemAccessRule(account,\n        *rights, *controlType));\n\n    // Set the new access settings.\n    fInfo-&gt;SetAccessControl(fSecurity);\n}\n\n// Removes an ACL entry on the specified file for the specified account.\nstatic void RemoveFileSecurity(String^ fileName, String^ account,\n                        FileSystemRights^ rights, \n                        AccessControlType^ controlType)\n{\n    // Create a new FileInfo object.\n    FileInfo^ fInfo = gcnew FileInfo(fileName);\n\tif (!fInfo-&gt;Exists)\n\t{\n\t\tfInfo-&gt;Create();\n\t}\n\n    // Get a FileSecurity object that represents the\n    // current security settings.\n    FileSecurity^ fSecurity = fInfo-&gt;GetAccessControl();\n\n    // Remove the FileSystemAccessRule from the security settings.\n    fSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account, \n\t\t*rights, *controlType));\n\n    // Set the new access settings.\n    fInfo-&gt;SetAccessControl(fSecurity);\n}\n\nint main()\n{\n    try\n    {\n\t\tString^ fileName = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;;\n\n        Console::WriteLine(&quot;Adding access control entry for &quot; +\n            fileName);\n\n        // Add the access control entry to the file.\n        // Before compiling this snippet, change MyDomain to your \n        // domain name and MyAccessAccount to the name \n        // you use to access your domain.\n        AddFileSecurity(fileName, &quot;MyDomain\\\\MyAccessAccount&quot;,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from &quot; +\n            fileName);\n\n        // Remove the access control entry from the file.\n        // Before compiling this snippet, change MyDomain to your \n        // domain name and MyAccessAccount to the name \n        // you use to access your domain.\n        RemoveFileSecurity(fileName, &quot;MyDomain\\\\MyAccessAccount&quot;,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (Exception^ e)\n    {\n        Console::WriteLine(e);\n    }\n\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Done.\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; &amp; FileName)\n\n            &#39; Add the access control entry to the file.\n            &#39; Before compiling this snippet, change MyDomain to your \n            &#39; domain name and MyAccessAccount to the name \n            &#39; you use to access your domain.\n            AddFileSecurity(FileName, &quot;MyDomain\\\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; &amp; FileName)\n\n            &#39; Remove the access control entry from the file.\n            &#39; Before compiling this snippet, change MyDomain to your \n            &#39; domain name and MyAccessAccount to the name \n            &#39; you use to access your domain.\n            RemoveFileSecurity(FileName, &quot;MyDomain\\\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified file for the specified account.\n    Sub AddFileSecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = fInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        fSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        fInfo.SetAccessControl(fSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified file for the specified account.\n    Sub RemoveFileSecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new FileInfo object.\n        Dim fInfo As New FileInfo(FileName)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = fInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        fSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        fInfo.SetAccessControl(fSecurity)\n\n    End Sub\nEnd Module\n&#39;This code produces output similar to the following; \n&#39;results may vary based on the computer/file structure/etc.:\n&#39;\n&#39;Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n&#39;Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n&#39;Done.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.FileInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = &quot;c:/test.xml&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + FileName);\n\n                // Add the access control entry to the file.\n                // Before compiling this snippet, change MyDomain to your \n                // domain name and MyAccessAccount to the name \n                // you use to access your domain.\n                AddFileSecurity(FileName, @&quot;MyDomain\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + FileName);\n\n                // Remove the access control entry from the file.\n                // Before compiling this snippet, change MyDomain to your \n                // domain name and MyAccessAccount to the name \n                // you use to access your domain.\n                RemoveFileSecurity(FileName, @&quot;MyDomain\\MyAccessAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n        }\n\n        // Adds an ACL entry on the specified file for the specified account.\n        public static void AddFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Get a FileSecurity object that represents the \n            // current security settings.\n            FileSecurity fSecurity = fInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            fSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            fInfo.SetAccessControl(fSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified file for the specified account.\n        public static void RemoveFileSecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new FileInfo object.\n            FileInfo fInfo = new FileInfo(FileName);\n\n            // Get a FileSecurity object that represents the \n            // current security settings.\n            FileSecurity fSecurity = fInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            fSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            fInfo.SetAccessControl(fSecurity);\n\n        }\n    }\n}\n//This code produces output similar to the following; \n//results may vary based on the computer/file structure/etc.:\n//\n//Adding access control entry for c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Removing access control entry from c:&nbsp;&nbsp;&nbsp;&nbsp;est.xml\n//Done.\n//\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_FileInfo_ToString\">\r\n    \r\n            <a id=\"System_IO_FileInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the path as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by the ToString method represents path that was passed to the constructor.  When you create a <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object using the constructors, the ToString method returns the fully qualified path.  However, there are cases where the string returned by the ToString method does not represent the fully qualified path.  For example, when you create a <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object using the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> method, the ToString method does not represent the fully qualified path.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.FileInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.FileInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.AppendText\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Create\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.CreateText\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Decrypt\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Delete\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Directory\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.DirectoryName\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Encrypt\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Exists\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.GetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Length\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.MoveTo\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Open\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.OpenRead\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.OpenText\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.OpenWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.Replace\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.SetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.FileInfo.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"147d1d7a-e53b-882f-79a0-a9eafc7cbeac\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of  objects. This class cannot be inherited.  \n To browse the .NET…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.FileInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.FileInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.FileInfo.yml","open_to_public_contributors":true,"api_name":["System.IO.FileInfo","System.IO.FileInfo..ctor","System.IO.FileInfo.AppendText","System.IO.FileInfo.CopyTo","System.IO.FileInfo.Create","System.IO.FileInfo.CreateText","System.IO.FileInfo.Decrypt","System.IO.FileInfo.Delete","System.IO.FileInfo.Directory","System.IO.FileInfo.DirectoryName","System.IO.FileInfo.Encrypt","System.IO.FileInfo.Exists","System.IO.FileInfo.GetAccessControl","System.IO.FileInfo.IsReadOnly","System.IO.FileInfo.Length","System.IO.FileInfo.MoveTo","System.IO.FileInfo.Name","System.IO.FileInfo.Open","System.IO.FileInfo.OpenRead","System.IO.FileInfo.OpenText","System.IO.FileInfo.OpenWrite","System.IO.FileInfo.Replace","System.IO.FileInfo.SetAccessControl","System.IO.FileInfo.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.FileInfo","System::IO::FileInfo","System.IO.FileInfo.#ctor","System::IO::FileInfo::#ctor","System.IO.FileInfo.AppendText","System::IO::FileInfo::AppendText","System.IO.FileInfo.CopyTo","System::IO::FileInfo::CopyTo","System.IO.FileInfo.Create","System::IO::FileInfo::Create","System.IO.FileInfo.CreateText","System::IO::FileInfo::CreateText","System.IO.FileInfo.Decrypt","System::IO::FileInfo::Decrypt","System.IO.FileInfo.Delete","System::IO::FileInfo::Delete","System.IO.FileInfo.Directory","System::IO::FileInfo::Directory","System.IO.FileInfo.DirectoryName","System::IO::FileInfo::DirectoryName","System.IO.FileInfo.Encrypt","System::IO::FileInfo::Encrypt","System.IO.FileInfo.Exists","System::IO::FileInfo::Exists","System.IO.FileInfo.GetAccessControl","System::IO::FileInfo::GetAccessControl","System.IO.FileInfo.IsReadOnly","System::IO::FileInfo::IsReadOnly","System.IO.FileInfo.Length","System::IO::FileInfo::Length","System.IO.FileInfo.MoveTo","System::IO::FileInfo::MoveTo","System.IO.FileInfo.Name","System::IO::FileInfo::Name","System.IO.FileInfo.Open","System::IO::FileInfo::Open","System.IO.FileInfo.OpenRead","System::IO::FileInfo::OpenRead","System.IO.FileInfo.OpenText","System::IO::FileInfo::OpenText","System.IO.FileInfo.OpenWrite","System::IO::FileInfo::OpenWrite","System.IO.FileInfo.Replace","System::IO::FileInfo::Replace","System.IO.FileInfo.SetAccessControl","System::IO::FileInfo::SetAccessControl","System.IO.FileInfo.ToString","System::IO::FileInfo::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"147d1d7a-e53b-882f-79a0-a9eafc7cbeac","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/FileInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FileInfo class | Microsoft Docs","_op_ogTitle":"FileInfo class","description":"Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of  objects. This class cannot be inherited.  \n To browse the .NET…","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.FileInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.fileinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.fileinfo","fileRelativePath":"System.IO.FileInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}