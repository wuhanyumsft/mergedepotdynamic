{"content":"    \r\n    <h1 id=\"System_Drawing_Printing_PrintDocument\">\r\n      <span class=\"lang-csharp\">PrintDocument</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a reusable object that sends output to a printer, when printing from a Windows Forms application.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;PrintPage&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;DocumentName&quot;)]\n[System.ComponentModel.ToolboxItemFilter(&quot;System.Drawing.Printing&quot;)]\npublic class PrintDocument : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PrintDocument</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Typically, you create an instance of the PrintDocument class, set properties such as the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_DocumentName_\" data-linktype=\"relative-path\">DocumentName</a>and <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrinterSettings_\" data-linktype=\"relative-path\">PrinterSettings</a>, and call the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_Print_\" data-linktype=\"relative-path\">Print</a> method to start the printing process. Handle the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event where you specify the output to print, by using the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_Graphics_\" data-linktype=\"relative-path\">Graphics</a><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> property of the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a>.  </p>\n<p> For more information about printing from a Windows Form application, see the <a href=\"../Topic/Windows%20Forms%20Print%20Support.md\" data-linktype=\"relative-path\">Windows Forms Print Support</a>. If you wish to print from a Windows Presentation Foundation application, see the <a class=\"xref\" href=\"system.printing\" data-linktype=\"relative-path\">System.Printing</a> namespace.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument__ctor\" data-linktype=\"self-bookmark\">PrintDocument()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_DefaultPageSettings\" data-linktype=\"self-bookmark\">DefaultPageSettings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets page settings that are used as defaults for all pages to be printed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_DocumentName\" data-linktype=\"self-bookmark\">DocumentName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the document name to display (for example, in a print status dialog box or printer queue) while printing the document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_OriginAtMargins\" data-linktype=\"self-bookmark\">OriginAtMargins</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the position of a graphics object associated with a page is located just inside the user-specified margins or at the top-left corner of the printable area of the page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_PrintController\" data-linktype=\"self-bookmark\">PrintController</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the print controller that guides the printing process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_PrinterSettings\" data-linktype=\"self-bookmark\">PrinterSettings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the printer that prints the document.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_OnBeginPrint_System_Drawing_Printing_PrintEventArgs_\" data-linktype=\"self-bookmark\">OnBeginPrint(PrintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_BeginPrint\" data-linktype=\"relative-path\">BeginPrint</a> event. It is called after the <span class=\"xref\">stem.Drawing.Printing.PrintDocument.Print*</span> method is called and before the first page of the document prints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_OnEndPrint_System_Drawing_Printing_PrintEventArgs_\" data-linktype=\"self-bookmark\">OnEndPrint(PrintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_EndPrint\" data-linktype=\"relative-path\">EndPrint</a> event. It is called when the last page of the document has printed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_OnPrintPage_System_Drawing_Printing_PrintPageEventArgs_\" data-linktype=\"self-bookmark\">OnPrintPage(PrintPageEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event. It is called before a page prints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_OnQueryPageSettings_System_Drawing_Printing_QueryPageSettingsEventArgs_\" data-linktype=\"self-bookmark\">OnQueryPageSettings(QueryPageSettingsEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> event. It is called immediately before each <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_Print\" data-linktype=\"self-bookmark\">Print()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the document&#39;s printing process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides information about the print document, in string form.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_BeginPrint\" data-linktype=\"self-bookmark\">BeginPrint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Drawing.Printing.PrintDocument.Print*</span> method is called and before the first page of the document prints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_EndPrint\" data-linktype=\"self-bookmark\">EndPrint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the last page of the document has printed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"self-bookmark\">PrintPage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the output to print for the current page is needed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"self-bookmark\">QueryPageSettings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs immediately before each <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument__ctor\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrintDocument()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PrintDocument ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default constructor initializes all fields based upon the default printer. Typically, after creating a new <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a>, you set printer and page settings that affect the output through the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrinterSettings_\" data-linktype=\"relative-path\">PrinterSettings</a> and <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_DefaultPageSettings_\" data-linktype=\"relative-path\">DefaultPageSettings</a> properties, respectively.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets a document&#39;s page orientation to landscape, and prints the document.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a>, <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a>, and <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PrintDocument Example#1\">\n#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Printing;\nusing namespace System::Windows::Forms;\n\npublic ref class PrintingExample: public System::Windows::Forms::Form\n{\nprivate:\n   System::ComponentModel::Container^ components;\n   System::Windows::Forms::Button^ printButton;\n   System::Drawing::Font^ printFont;\n   StreamReader^ streamToPrint;\n\npublic:\n   PrintingExample()\n      : Form()\n   {\n      \n      // The Windows Forms Designer requires the following call.\n      InitializeComponent();\n   }\n\n\nprivate:\n\n   // The Click event is raised when the user clicks the Print button.\n   void printButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      try\n      {\n         streamToPrint = gcnew StreamReader( &quot;C:\\\\My Documents\\\\MyFile.txt&quot; );\n         try\n         {\n            printFont = gcnew System::Drawing::Font( &quot;Arial&quot;,10 );\n            PrintDocument^ pd = gcnew PrintDocument;\n            pd-&gt;PrintPage += gcnew PrintPageEventHandler( this, &amp;PrintingExample::pd_PrintPage );\n            pd-&gt;Print();\n         }\n         finally\n         {\n            streamToPrint-&gt;Close();\n         }\n\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n\n   }\n\n\n   // The PrintPage event is raised for each page to be printed.\n   void pd_PrintPage( Object^ /*sender*/, PrintPageEventArgs^ ev )\n   {\n      float linesPerPage = 0;\n      float yPos = 0;\n      int count = 0;\n      float leftMargin = (float)ev-&gt;MarginBounds.Left;\n      float topMargin = (float)ev-&gt;MarginBounds.Top;\n      String^ line = nullptr;\n      \n      // Calculate the number of lines per page.\n      linesPerPage = ev-&gt;MarginBounds.Height / printFont-&gt;GetHeight( ev-&gt;Graphics );\n      \n      // Print each line of the file.\n      while ( count &lt; linesPerPage &amp;&amp; ((line = streamToPrint-&gt;ReadLine()) != nullptr) )\n      {\n         yPos = topMargin + (count * printFont-&gt;GetHeight( ev-&gt;Graphics ));\n         ev-&gt;Graphics-&gt;DrawString( line, printFont, Brushes::Black, leftMargin, yPos, gcnew StringFormat );\n         count++;\n      }\n\n      \n      // If more lines exist, print another page.\n      if ( line != nullptr )\n            ev-&gt;HasMorePages = true;\n      else\n            ev-&gt;HasMorePages = false;\n   }\n\n\n   // The Windows Forms Designer requires the following procedure.\n   void InitializeComponent()\n   {\n      this-&gt;components = gcnew System::ComponentModel::Container;\n      this-&gt;printButton = gcnew System::Windows::Forms::Button;\n      this-&gt;ClientSize = System::Drawing::Size( 504, 381 );\n      this-&gt;Text = &quot;Print Example&quot;;\n      printButton-&gt;ImageAlign = System::Drawing::ContentAlignment::MiddleLeft;\n      printButton-&gt;Location = System::Drawing::Point( 32, 110 );\n      printButton-&gt;FlatStyle = System::Windows::Forms::FlatStyle::Flat;\n      printButton-&gt;TabIndex = 0;\n      printButton-&gt;Text = &quot;Print the file.&quot;;\n      printButton-&gt;Size = System::Drawing::Size( 136, 40 );\n      printButton-&gt;Click += gcnew System::EventHandler( this, &amp;PrintingExample::printButton_Click );\n      this-&gt;Controls-&gt;Add( printButton );\n   }\n\n};\n\n\n// This is the main entry point for the application.\nint main()\n{\n   Application::Run( gcnew PrintingExample );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument Example#1\">Imports System\nImports System.IO\nImports System.Drawing\nImports System.Drawing.Printing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n    Private WithEvents printButton As System.Windows.Forms.Button\n    Private printFont As Font\n    Private streamToPrint As StreamReader\n\n    Public Sub New()\n        &#39; The Windows Forms Designer requires the following call.\n        InitializeComponent()\n        InitializeForm()\n    End Sub\n\n    &#39; The Click event is raised when the user clicks the Print button.\n    Private Sub printButton_Click(ByVal sender As Object, ByVal e As EventArgs) Handles printButton.Click\n        Try\n            streamToPrint = New StreamReader(&quot;C:\\My Documents\\MyFile.txt&quot;)\n            Try\n                printFont = New Font(&quot;Arial&quot;, 10)\n                Dim pd As New PrintDocument()\n                AddHandler pd.PrintPage, AddressOf Me.pd_PrintPage\n                pd.Print()\n            Finally\n                streamToPrint.Close()\n            End Try\n        Catch ex As Exception\n            MessageBox.Show(ex.Message)\n        End Try\n    End Sub\n\n    &#39; The PrintPage event is raised for each page to be printed.\n    Private Sub pd_PrintPage(ByVal sender As Object, ByVal ev As PrintPageEventArgs)\n        Dim linesPerPage As Single = 0\n        Dim yPos As Single = 0\n        Dim count As Integer = 0\n        Dim leftMargin As Single = ev.MarginBounds.Left\n        Dim topMargin As Single = ev.MarginBounds.Top\n        Dim line As String = Nothing\n\n        &#39; Calculate the number of lines per page.\n        linesPerPage = ev.MarginBounds.Height / printFont.GetHeight(ev.Graphics)\n\n        &#39; Print each line of the file.\n        While count &lt; linesPerPage\n            line = streamToPrint.ReadLine()\n            If line Is Nothing Then\n                Exit While\n            End If\n            yPos = topMargin + count * printFont.GetHeight(ev.Graphics)\n            ev.Graphics.DrawString(line, printFont, Brushes.Black, leftMargin, yPos, New StringFormat())\n            count += 1\n        End While\n\n        &#39; If more lines exist, print another page.\n        If (line IsNot Nothing) Then\n            ev.HasMorePages = True\n        Else\n            ev.HasMorePages = False\n        End If\n    End Sub\n\n    Private Sub InitializeForm()\n        Me.components = New System.ComponentModel.Container()\n        Me.printButton = New System.Windows.Forms.Button()\n\n        Me.ClientSize = New System.Drawing.Size(504, 381)\n        Me.Text = &quot;Print Example&quot;\n\n        printButton.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft\n        printButton.Location = New System.Drawing.Point(32, 110)\n        printButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat\n        printButton.TabIndex = 0\n        printButton.Text = &quot;Print the file.&quot;\n        printButton.Size = New System.Drawing.Size(136, 40)\n        AddHandler printButton.Click, AddressOf printButton_Click\n\n        Me.Controls.Add(printButton)\n    End Sub\n\n\n    &#39; This is the main entry point for the application.    \n    Public Shared Sub Main()\n        Application.Run(New Form1())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PrintDocument Example#1\">using System;\nusing System.IO;\nusing System.Drawing;\nusing System.Drawing.Printing;\nusing System.Windows.Forms;\n\n\npublic partial class Form1 : System.Windows.Forms.Form\n{\n    private System.ComponentModel.Container components;\n    private System.Windows.Forms.Button printButton;\n    private Font printFont;\n    private StreamReader streamToPrint;\n\n    public Form1()\n    {\n        // The Windows Forms Designer requires the following call.\n        InitializeComponent();\n    }\n\n    // The Click event is raised when the user clicks the Print button.\n    private void printButton_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            streamToPrint = new StreamReader\n               (&quot;C:\\\\My Documents\\\\MyFile.txt&quot;);\n            try\n            {\n                printFont = new Font(&quot;Arial&quot;, 10);\n                PrintDocument pd = new PrintDocument();\n                pd.PrintPage += new PrintPageEventHandler\n                   (this.pd_PrintPage);\n                pd.Print();\n            }\n            finally\n            {\n                streamToPrint.Close();\n            }\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show(ex.Message);\n        }\n    }\n\n    // The PrintPage event is raised for each page to be printed.\n    private void pd_PrintPage(object sender, PrintPageEventArgs ev)\n    {\n        float linesPerPage = 0;\n        float yPos = 0;\n        int count = 0;\n        float leftMargin = ev.MarginBounds.Left;\n        float topMargin = ev.MarginBounds.Top;\n        string line = null;\n\n        // Calculate the number of lines per page.\n        linesPerPage = ev.MarginBounds.Height /\n           printFont.GetHeight(ev.Graphics);\n\n        // Print each line of the file.\n        while (count &lt; linesPerPage &amp;&amp;\n           ((line = streamToPrint.ReadLine()) != null))\n        {\n            yPos = topMargin + (count *\n               printFont.GetHeight(ev.Graphics));\n            ev.Graphics.DrawString(line, printFont, Brushes.Black,\n               leftMargin, yPos, new StringFormat());\n            count++;\n        }\n\n        // If more lines exist, print another page.\n        if (line != null)\n            ev.HasMorePages = true;\n        else\n            ev.HasMorePages = false;\n    }\n\n\n    // The Windows Forms Designer requires the following procedure.\n    private void InitializeComponent()\n    {\n        this.components = new System.ComponentModel.Container();\n        this.printButton = new System.Windows.Forms.Button();\n\n        this.ClientSize = new System.Drawing.Size(504, 381);\n        this.Text = &quot;Print Example&quot;;\n\n        printButton.ImageAlign =\n           System.Drawing.ContentAlignment.MiddleLeft;\n        printButton.Location = new System.Drawing.Point(32, 110);\n        printButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n        printButton.TabIndex = 0;\n        printButton.Text = &quot;Print the file.&quot;;\n        printButton.Size = new System.Drawing.Size(136, 40);\n        printButton.Click += new System.EventHandler(printButton_Click);\n\n        this.Controls.Add(printButton);\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_DefaultPageSettings\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_DefaultPageSettings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultPageSettings</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets page settings that are used as defaults for all pages to be printed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Printing.PageSettings DefaultPageSettings { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a> that specifies the default page settings for the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify several default page settings through the DefaultPageSettings property. For example, the <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Color_\" data-linktype=\"relative-path\">Color</a> property specifies whether the page prints in color, the <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Landscape_\" data-linktype=\"relative-path\">Landscape</a> property specifies landscape or portrait orientation, and the <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Margins_\" data-linktype=\"relative-path\">Margins</a> property specifies the margins of the page.  </p>\n<p> To specify settings on a page-by-page basis, handle the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> or <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> event and modify the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_PageSettings_\" data-linktype=\"relative-path\">PageSettings</a> argument included in the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a> or <a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventargs\" data-linktype=\"relative-path\">QueryPageSettingsEventArgs</a>, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After printing has started, changes to page settings through the DefaultPageSettings property will not affect pages being printed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets a document&#39;s page orientation to landscape, and prints the document. The example makes three assumptions: that a variable named <code>filePath</code> has been set to the path of the file to print; that a method named <code>pd_PrintPage</code>, which handles the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event, has been defined; and that a variable named <code>printer</code> has been set to the printer&#39;s name.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a>, <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a>, and <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic PrintDocument.PrintDocument Example#1\"> public void Printing()\n {\n    try\n    {\n       streamToPrint = new StreamReader (filePath);\n       try\n       {\n          printFont = new Font(&quot;Arial&quot;, 10);\n          PrintDocument pd = new PrintDocument(); \n          pd.PrintPage += new PrintPageEventHandler(pd_PrintPage);\n          pd.PrinterSettings.PrinterName = printer;\n          // Set the page orientation to landscape.\n          pd.DefaultPageSettings.Landscape = true;\n          pd.Print();\n       } \n       finally\n       {\n          streamToPrint.Close() ;\n       }\n    } \n    catch(Exception ex)\n    { \n       MessageBox.Show(ex.Message);\n    }\n }\n \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic PrintDocument.PrintDocument Example#1\">public:\n   void Printing()\n   {\n      try\n      {\n         streamToPrint = gcnew StreamReader( filePath );\n         try\n         {\n            printFont = gcnew System::Drawing::Font( &quot;Arial&quot;,10 );\n            PrintDocument^ pd = gcnew PrintDocument;\n            pd-&gt;PrintPage += gcnew PrintPageEventHandler(\n               this, &amp;Form1::pd_PrintPage );\n            pd-&gt;PrinterSettings-&gt;PrinterName = printer;\n            // Set the page orientation to landscape.\n            pd-&gt;DefaultPageSettings-&gt;Landscape = true;\n            pd-&gt;Print();\n         }\n         finally\n         {\n            streamToPrint-&gt;Close();\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument.PrintDocument Example#1\"> Public Sub Printing()\n     Try\n         streamToPrint = New StreamReader(filePath)\n         Try\n             printFont = New Font(&quot;Arial&quot;, 10)\n             Dim pd As New PrintDocument()\n             AddHandler pd.PrintPage, AddressOf pd_PrintPage\n             pd.PrinterSettings.PrinterName = printer\n             &#39; Set the page orientation to landscape.\n             pd.DefaultPageSettings.Landscape = True\n             pd.Print()\n         Finally\n             streamToPrint.Close()\n         End Try\n     Catch ex As Exception\n         MessageBox.Show(ex.Message)\n     End Try\n End Sub    \n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_DocumentName\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_DocumentName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DocumentName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the document name to display (for example, in a print status dialog box or printer queue) while printing the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DocumentName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The document name to display while printing the document. The default is &quot;document&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DocumentName property does not specify the file to print. Rather, you specify the output to print by handling the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event. For an example, see the <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints a document with the first page in color, if the printer supports it, and sets the DocumentName to a user-friendly name. The example requires that a <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> variable named <code>printDoc</code> has been created, and the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> and <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> events are handled.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a> and <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cs\" name=\"PaperSource and PaperSize Example with Resolution#6\">\n    private void MyButtonPrint_OnClick(object sender, System.EventArgs e)\n    {\n        \n        // Set the printer name and ensure it is valid. If not, provide a message to the user.\n        printDoc.PrinterSettings.PrinterName = &quot;\\\\mynetworkprinter&quot;;\n\n        if (printDoc.PrinterSettings.IsValid) {\n        \n            // If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if (printDoc.PrinterSettings.SupportsColor) {\n\n                // Set the page default&#39;s to not print in color.\n                printDoc.DefaultPageSettings.Color = false;\n            }\n\n            // Provide a friendly name, set the page number, and print the document.\n            printDoc.DocumentName = &quot;My Presentation&quot;;\n            currentPageNumber = 1;\n            printDoc.Print();\n        }\n        else {\n            MessageBox.Show(&quot;Printer is not valid&quot;);\n        }\n    }\n\n    private void MyPrintQueryPageSettingsEvent(object sender, QueryPageSettingsEventArgs e)\n    {\n        // Determines if the printer supports printing in color.\n        if (printDoc.PrinterSettings.SupportsColor) {\n\n            // If the printer supports color printing, use color.\n            if (currentPageNumber == 1 ) {\n\n                e.PageSettings.Color = true;\n            }\n\n        }    \n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"PaperSource and PaperSize Example with Resolution#6\">   private:\n      void MyButtonPrint_OnClick( Object^ sender, System::EventArgs^ e )\n      {\n         // Set the printer name and ensure it is valid. If not, provide a message to the user.\n         printDoc-&gt;PrinterSettings-&gt;PrinterName = &quot;\\\\mynetworkprinter&quot;;\n         if ( printDoc-&gt;PrinterSettings-&gt;IsValid )\n         {\n            // If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if ( printDoc-&gt;PrinterSettings-&gt;SupportsColor )\n            {\n               // Set the page default&#39;s to not print in color.\n               printDoc-&gt;DefaultPageSettings-&gt;Color = false;\n            }\n\n            // Provide a friendly name, set the page number, and print the document.\n            printDoc-&gt;DocumentName = &quot;My Presentation&quot;;\n            currentPageNumber = 1;\n            printDoc-&gt;Print();\n         }\n         else\n         {\n            MessageBox::Show( &quot;Printer is not valid&quot; );\n         }\n      }\n\n      void MyPrintQueryPageSettingsEvent( Object^ sender, QueryPageSettingsEventArgs^ e )\n      {\n         // Determines if the printer supports printing in color.\n         if ( printDoc-&gt;PrinterSettings-&gt;SupportsColor )\n         {\n            // If the printer supports color printing, use color.\n            if ( currentPageNumber == 1 )\n            {\n               e-&gt;PageSettings-&gt;Color = true;\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"PaperSource and PaperSize Example with Resolution#6\">\n    Private Sub MyButtonPrint_OnClick(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        &#39; Set the printer name and ensure it is valid. If not, provide a message to the user.\n        printDoc.PrinterSettings.PrinterName = &quot;\\\\mynetworkprinter&quot;\n\n        If printDoc.PrinterSettings.IsValid Then\n\n            &#39; If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if printDoc.PrinterSettings.SupportsColor then\n\n                &#39; Set the page default&#39;s to not print in color.\n                printDoc.DefaultPageSettings.Color = False\n            End If\n\n            &#39; Provide a friendly name, set the page number, and print the document.\n            printDoc.DocumentName = &quot;My Presentation&quot;\n            currentPageNumber = 1\n            printDoc.Print()\n        Else\n            MessageBox.Show(&quot;Printer is not valid&quot;)\n        End If\n    End Sub\n\n    Private Sub MyPrintQueryPageSettingsEvent(ByVal sender As Object, ByVal e As QueryPageSettingsEventArgs)\n\n        &#39; Determines if the printer supports printing in color.\n        If printDoc.PrinterSettings.SupportsColor Then\n\n            &#39; If the printer supports color printing, use color.\n            If currentPageNumber = 1 Then\n\n                e.PageSettings.Color = True\n            End If\n\n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_OriginAtMargins\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_OriginAtMargins_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OriginAtMargins</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the position of a graphics object associated with a page is located just inside the user-specified margins or at the top-left corner of the printable area of the page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool OriginAtMargins { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the graphics origin starts at the page margins; <code>false</code> if the graphics origin is at the top-left corner of the printable page. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calculating the area available to print requires knowing the physical size of the paper, the margins for the page, and the location of the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object origin. When OriginAtMargins is <code>true</code>, the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object location takes into account the <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Margins_\" data-linktype=\"relative-path\">Margins</a> property value and the printable area of the page. When OriginAtMargins is <code>false</code>, only the printable area of the page is used to determine the location of the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object origin, the <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Margins_\" data-linktype=\"relative-path\">Margins</a> value is ignored.  </p>\n<p> For example, if OriginAtMargins is <code>true</code>, and <a class=\"xref\" href=\"system.drawing.printing.pagesettings#System_Drawing_Printing_PageSettings_Margins_\" data-linktype=\"relative-path\">Margins</a> is set for 1 inch on each side, the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object included in the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a> is located 1 inch from the left and top of the page. If the printable area of the page is .25 of an inch on each side and OriginAtMargins is <code>false</code>, the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object is located .25 of an inch from the left and top of the page.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The printable area of a page varies from printer to printer and is not guaranteed to be symmetrical.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_PrintController\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_PrintController_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrintController</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the print controller that guides the printing process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Printing.PrintController PrintController { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.printcontroller\" data-linktype=\"relative-path\">PrintController</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.printing.printcontroller\" data-linktype=\"relative-path\">PrintController</a> that guides the printing process. The default is a new instance of the <a class=\"xref\" href=\"system.windows.forms.printcontrollerwithstatusdialog\" data-linktype=\"relative-path\">PrintControllerWithStatusDialog</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A print controller guides the printing process in several ways. For example, to print a document, you need to convert it to a <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object. A <a class=\"xref\" href=\"system.drawing.printing.printcontroller\" data-linktype=\"relative-path\">PrintController</a> specifies where to draw the graphic in an image for a print preview or on a printer to actually print the document. A print controller can also specify whether to print a document immediately, or wait a specified interval.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example requires that you have created an instance of the <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> class that is named <code>myPrintDocument</code>. The example creates a new instance of the <a class=\"xref\" href=\"system.drawing.printing.printcontroller\" data-linktype=\"relative-path\">PrintController</a> class, assigns it to the PrintController property of <code>myPrintDocument</code>, and prints the document.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a> and <a class=\"xref\" href=\"system.windows.forms\" data-linktype=\"relative-path\">System.Windows.Forms</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic PrintDocument.PrintController Example#1\"> public void myPrint()\n {\n    if (useMyPrintController == true)\n    {\n       myPrintDocument.PrintController = \n          new myControllerImplementation();     \n       if (wantsStatusDialog == true)\n       {\n          myPrintDocument.PrintController = \n             new PrintControllerWithStatusDialog\n             (myPrintDocument.PrintController);\n       }\n    }\n    myPrintDocument.Print();\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument.PrintController Example#1\"> Public Sub myPrint()\n     If useMyPrintController = True Then\n         myPrintDocument.PrintController = New myControllerImplementation()\n         If wantsStatusDialog = True Then\n             myPrintDocument.PrintController = _\n                New PrintControllerWithStatusDialog( _\n                myPrintDocument.PrintController)\n         End If\n     End If\n     myPrintDocument.Print()\n End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic PrintDocument.PrintController Example#1\">public:\n   void myPrint()\n   {\n      if ( useMyPrintController == true )\n      {\n         myPrintDocument-&gt;PrintController =\n            gcnew myControllerImplementation;\n         if ( wantsStatusDialog == true )\n         {\n            myPrintDocument-&gt;PrintController =\n               gcnew PrintControllerWithStatusDialog(\n                  myPrintDocument-&gt;PrintController );\n         }\n      }\n      myPrintDocument-&gt;Print();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_PrinterSettings\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_PrinterSettings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrinterSettings</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the printer that prints the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Printing.PrinterSettings PrinterSettings { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.printersettings\" data-linktype=\"relative-path\">PrinterSettings</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.printersettings\" data-linktype=\"relative-path\">PrinterSettings</a> that specifies where and how the document is printed. The default is a <a class=\"xref\" href=\"system.drawing.printing.printersettings\" data-linktype=\"relative-path\">PrinterSettings</a> with its properties set to their default values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify several printer settings through the PrinterSettings property. For example, use the <a class=\"xref\" href=\"system.drawing.printing.printersettings#System_Drawing_Printing_PrinterSettings_Copies_\" data-linktype=\"relative-path\">Copies</a> property to specify the number of copies you want to print, the <a class=\"xref\" href=\"system.drawing.printing.printersettings#System_Drawing_Printing_PrinterSettings_PrinterName_\" data-linktype=\"relative-path\">PrinterName</a> property to specify the printer to use, and the <a class=\"xref\" href=\"system.drawing.printing.printersettings#System_Drawing_Printing_PrinterSettings_PrintRange_\" data-linktype=\"relative-path\">PrintRange</a> property to specify the range of pages you want to print.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints a document on the specified printer. The example makes three assumptions: that a variable names <code>filePath</code> has been set to the path of the file to print; that a method named <code>pd_PrintPage</code>, which handles the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event, has been defined; and that a variable named <code>printer</code> has been set to the printer&#39;s name.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a>, <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a>, and <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PrintDocument.PrinterSettings Example#1\">public:\n   void Printing()\n   {\n      try\n      {\n         streamToPrint = gcnew StreamReader( filePath );\n         try\n         {\n            printFont = gcnew System::Drawing::Font( &quot;Arial&quot;,10 );\n            PrintDocument^ pd = gcnew PrintDocument;\n            pd-&gt;PrintPage += gcnew PrintPageEventHandler(\n               this, &amp;Form1::pd_PrintPage );\n            // Specify the printer to use.\n            pd-&gt;PrinterSettings-&gt;PrinterName = printer;\n            pd-&gt;Print();\n         }\n         finally\n         {\n            streamToPrint-&gt;Close();\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PrintDocument.PrinterSettings Example#1\"> public void Printing()\n {\n   try\n   {\n      streamToPrint = new StreamReader (filePath);\n      try\n      {\n         printFont = new Font(&quot;Arial&quot;, 10);\n         PrintDocument pd = new PrintDocument(); \n         pd.PrintPage += new PrintPageEventHandler(pd_PrintPage);\n         // Specify the printer to use.\n         pd.PrinterSettings.PrinterName = printer;\n         pd.Print();\n      } \n      finally\n      {\n         streamToPrint.Close();\n      }\n   } \n   catch(Exception ex)\n   { \n      MessageBox.Show(ex.Message);\n   }\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument.PrinterSettings Example#1\"> Public Sub Printing()\n     Try\n         streamToPrint = New StreamReader(filePath)\n         Try\n             printFont = New Font(&quot;Arial&quot;, 10)\n             Dim pd As New PrintDocument()\n             AddHandler pd.PrintPage, AddressOf pd_PrintPage\n             &#39; Specify the printer to use.\n             pd.PrinterSettings.PrinterName = printer\n             pd.Print()\n         Finally\n                streamToPrint.Close()\n         End Try\n     Catch ex As Exception\n         MessageBox.Show(ex.Message)\n     End Try\n End Sub    \n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_OnBeginPrint_System_Drawing_Printing_PrintEventArgs_\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_OnBeginPrint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeginPrint(PrintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_BeginPrint\" data-linktype=\"relative-path\">BeginPrint</a> event. It is called after the <span class=\"xref\">stem.Drawing.Printing.PrintDocument.Print*</span> method is called and before the first page of the document prints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeginPrint (System.Drawing.Printing.PrintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.printeventargs\" data-linktype=\"relative-path\">PrintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.printeventargs\" data-linktype=\"relative-path\">PrintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnBeginPrint method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  </p>\n<p> When a derived class calls the OnBeginPrint method, it raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_BeginPrint\" data-linktype=\"relative-path\">BeginPrint</a> event by invoking the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_OnEndPrint_System_Drawing_Printing_PrintEventArgs_\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_OnEndPrint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnEndPrint(PrintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_EndPrint\" data-linktype=\"relative-path\">EndPrint</a> event. It is called when the last page of the document has printed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnEndPrint (System.Drawing.Printing.PrintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.printeventargs\" data-linktype=\"relative-path\">PrintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.printeventargs\" data-linktype=\"relative-path\">PrintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnEndPrint method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. The OnEndPrint method is also called if the printing process is canceled or an exception occurs during the printing process.  </p>\n<p> When a derived class calls the OnEndPrint method, it raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_EndPrint\" data-linktype=\"relative-path\">EndPrint</a> event by invoking the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_OnPrintPage_System_Drawing_Printing_PrintPageEventArgs_\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_OnPrintPage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPrintPage(PrintPageEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event. It is called before a page prints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPrintPage (System.Drawing.Printing.PrintPageEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnPrintPage method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  </p>\n<p> When a derived class calls the OnPrintPage method, it raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event by invoking the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_OnQueryPageSettings_System_Drawing_Printing_QueryPageSettingsEventArgs_\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_OnQueryPageSettings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnQueryPageSettings(QueryPageSettingsEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> event. It is called immediately before each <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnQueryPageSettings (System.Drawing.Printing.QueryPageSettingsEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventargs\" data-linktype=\"relative-path\">QueryPageSettingsEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventargs\" data-linktype=\"relative-path\">QueryPageSettingsEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnQueryPageSettings method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  </p>\n<p> When a derived class calls the OnQueryPageSettings method, it raises the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> event by invoking the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_Print\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_Print_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Print()</div>        \r\n          </div>\r\n    \r\n            <p>Starts the document&#39;s printing process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Print ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.printing.invalidprinterexception\" data-linktype=\"relative-path\">InvalidPrinterException</a></div>\r\n                  </div>\r\n                  <p>The printer named in the <span class=\"xref\">stem.Drawing.Printing.PrinterSettings.PrinterName*</span> property does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specify the output to print by handling the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event and by using the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> included in the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a>.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing.printing.printersettings#System_Drawing_Printing_PrinterSettings_PrinterName_\" data-linktype=\"relative-path\">PrinterName</a> property to specify which printer should print the document.  </p>\n<p> The Print method prints the document without using a print dialog. Use a <a class=\"xref\" href=\"system.windows.forms.printdialog\" data-linktype=\"relative-path\">PrintDialog</a> when you want to offer the user the ability to choose print settings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If an exception that is not handled by the Print method is thrown during printing, the printing of the document is aborted.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints the file that is specified through the command line to the default printer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example requires that each line fits within the page width.  </p>\n</div>\n<p> Use the <a class=\"xref\" href=\"system.componentmodel\" data-linktype=\"relative-path\">System.ComponentModel</a>, <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a>, <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a>, <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a>, and <a class=\"xref\" href=\"system.windows.forms\" data-linktype=\"relative-path\">System.Windows.Forms</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PrintDocument.PrintPage Example#1\">\n#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Printing;\nusing namespace System::Windows::Forms;\n\n\npublic ref class PrintingExample\n{\nprivate:\n   Font^ printFont;\n   StreamReader^ streamToPrint;\n   static String^ filePath;\n\npublic:\n   PrintingExample()\n   {\n      Printing();\n   }\n\n\nprivate:\n\n   // The PrintPage event is raised for each page to be printed.\n   void pd_PrintPage( Object^ /*sender*/, PrintPageEventArgs^ ev )\n   {\n      float linesPerPage = 0;\n      float yPos = 0;\n      int count = 0;\n      float leftMargin = (float)ev-&gt;MarginBounds.Left;\n      float topMargin = (float)ev-&gt;MarginBounds.Top;\n      String^ line = nullptr;\n      \n      // Calculate the number of lines per page.\n      linesPerPage = ev-&gt;MarginBounds.Height / printFont-&gt;GetHeight( ev-&gt;Graphics );\n      \n      // Iterate over the file, printing each line.\n      while ( count &lt; linesPerPage &amp;&amp; ((line = streamToPrint-&gt;ReadLine()) != nullptr) )\n      {\n         yPos = topMargin + (count * printFont-&gt;GetHeight( ev-&gt;Graphics ));\n         ev-&gt;Graphics-&gt;DrawString( line, printFont, Brushes::Black, leftMargin, yPos, gcnew StringFormat );\n         count++;\n      }\n\n      \n      // If more lines exist, print another page.\n      if ( line != nullptr )\n            ev-&gt;HasMorePages = true;\n      else\n            ev-&gt;HasMorePages = false;\n   }\n\n\npublic:\n\n   // Print the file.\n   void Printing()\n   {\n      try\n      {\n         streamToPrint = gcnew StreamReader( filePath );\n         try\n         {\n            printFont = gcnew Font( &quot;Arial&quot;,10 );\n            PrintDocument^ pd = gcnew PrintDocument;\n            pd-&gt;PrintPage += gcnew PrintPageEventHandler( this, &amp;PrintingExample::pd_PrintPage );\n            \n            // Print the document.\n            pd-&gt;Print();\n         }\n         finally\n         {\n            streamToPrint-&gt;Close();\n         }\n\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n\n   }\n\n   static void Main()\n   {\n      array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n      String^ sampleName = args[ 0 ];\n      if ( args-&gt;Length != 2 )\n      {\n         Console::WriteLine( &quot;Usage: {0} &lt;file path&gt;&quot;, sampleName );\n         return;\n      }\n\n      filePath = args[ 1 ];\n      gcnew PrintingExample;\n   }\n\n};\n\nint main()\n{\n   PrintingExample::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument.PrintPage Example#1\">Imports System\nImports System.IO\nImports System.Drawing\nImports System.Drawing.Printing\nImports System.Windows.Forms\n\n\nPublic Class PrintingExample\n    Private printFont As Font\n    Private streamToPrint As StreamReader\n    Private Shared filePath As String\n    \n    Public Sub New()\n        Printing()\n    End Sub    \n    \n    &#39; The PrintPage event is raised for each page to be printed.\n    Private Sub pd_PrintPage(sender As Object, ev As PrintPageEventArgs)\n        Dim linesPerPage As Single = 0\n        Dim yPos As Single = 0\n        Dim count As Integer = 0\n        Dim leftMargin As Single = ev.MarginBounds.Left\n        Dim topMargin As Single = ev.MarginBounds.Top\n        Dim line As String = Nothing\n        \n        &#39; Calculate the number of lines per page.\n        linesPerPage = ev.MarginBounds.Height / printFont.GetHeight(ev.Graphics)\n        \n        &#39; Iterate over the file, printing each line.\n        While count &lt; linesPerPage\n            line = streamToPrint.ReadLine()\n            If line Is Nothing Then\n                Exit While\n            End If\n            yPos = topMargin + count * printFont.GetHeight(ev.Graphics)\n            ev.Graphics.DrawString(line, printFont, Brushes.Black, leftMargin, _\n                yPos, New StringFormat())\n            count += 1\n        End While\n        \n        &#39; If more lines exist, print another page.\n        If (line IsNot Nothing) Then\n            ev.HasMorePages = True\n        Else\n            ev.HasMorePages = False\n        End If\n    End Sub\n     \n    &#39; Print the file.\n    Public Sub Printing()\n        Try\n            streamToPrint = New StreamReader(filePath)\n            Try\n                printFont = New Font(&quot;Arial&quot;, 10)\n                Dim pd As New PrintDocument()\n                AddHandler pd.PrintPage, AddressOf pd_PrintPage\n                &#39; Print the document.\n                pd.Print()\n            Finally\n                streamToPrint.Close()\n            End Try\n        Catch ex As Exception\n            MessageBox.Show(ex.Message)\n        End Try\n    End Sub &#39;Printing    \n    \n    &#39; This is the main entry point for the application.\n    Public Shared Sub Main()\n        Dim args() As String = System.Environment.GetCommandLineArgs()\n        Dim sampleName As String = args(0)\n        If args.Length &lt;&gt; 1 Then\n            Console.WriteLine(&quot;Usage: &quot; &amp; sampleName &amp; &quot; &lt;file path&gt;&quot;)\n            Return\n        End If\n        filePath = args(0)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PrintDocument.PrintPage Example#1\">using System;\nusing System.IO;\nusing System.Drawing;\nusing System.Drawing.Printing;\nusing System.Windows.Forms;\n\n public class PrintingExample \n {\n     private Font printFont;\n     private StreamReader streamToPrint;\n     static string filePath;\n \n \n     public PrintingExample() \n     {\n         Printing();\n     }\n \n     // The PrintPage event is raised for each page to be printed.\n     private void pd_PrintPage(object sender, PrintPageEventArgs ev) \n     {\n         float linesPerPage = 0;\n         float yPos =  0;\n         int count = 0;\n         float leftMargin = ev.MarginBounds.Left;\n         float topMargin = ev.MarginBounds.Top;\n         String line=null;\n             \n         // Calculate the number of lines per page.\n         linesPerPage = ev.MarginBounds.Height  / \n            printFont.GetHeight(ev.Graphics) ;\n \n         // Iterate over the file, printing each line.\n         while (count &lt; linesPerPage &amp;&amp; \n            ((line=streamToPrint.ReadLine()) != null)) \n         {\n            yPos = topMargin + (count * printFont.GetHeight(ev.Graphics));\n            ev.Graphics.DrawString (line, printFont, Brushes.Black, \n               leftMargin, yPos, new StringFormat());\n            count++;\n         }\n \n         // If more lines exist, print another page.\n         if (line != null) \n            ev.HasMorePages = true;\n         else \n            ev.HasMorePages = false;\n     }\n \n     // Print the file.\n     public void Printing()\n     {\n         try \n         {\n            streamToPrint = new StreamReader (filePath);\n            try \n            {\n               printFont = new Font(&quot;Arial&quot;, 10);\n               PrintDocument pd = new PrintDocument(); \n               pd.PrintPage += new PrintPageEventHandler(pd_PrintPage);\n               // Print the document.\n               pd.Print();\n            } \n            finally \n            {\n               streamToPrint.Close() ;\n            }\n        } \n        catch(Exception ex) \n        { \n            MessageBox.Show(ex.Message);\n        }\n     }\n   \n     // This is the main entry point for the application.\n     public static void Main(string[] args) \n     {\n        string sampleName = Environment.GetCommandLineArgs()[0];\n        if(args.Length != 1)\n        {\n           Console.WriteLine(&quot;Usage: &quot; + sampleName +&quot; &lt;file path&gt;&quot;);\n           return;\n        }\n        filePath = args[0];\n        new PrintingExample();\n     }\n }\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_ToString\">\r\n    \r\n            <a id=\"System_Drawing_Printing_PrintDocument_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Provides information about the print document, in string form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_BeginPrint\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPrint</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Drawing.Printing.PrintDocument.Print*</span> method is called and before the first page of the document prints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Drawing.Printing.PrintEventHandler BeginPrint;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, you handle the BeginPrint event to initialize fonts, file streams, and other resources used during the printing process.  </p>\n<p> To associate the event with your event handler, add an instance of the <a class=\"xref\" href=\"system.drawing.printing.printeventhandler\" data-linktype=\"relative-path\">PrintEventHandler</a> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_EndPrint\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndPrint</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the last page of the document has printed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Drawing.Printing.PrintEventHandler EndPrint;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, you handle the EndPrint event to release fonts, file streams, and other resources used during the printing process, like fonts.  </p>\n<p> You indicate that there are no more pages to print by setting the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_HasMorePages_\" data-linktype=\"relative-path\">HasMorePages</a> property to <code>false</code> in the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event. The EndPrint event also occurs if the printing process is canceled or an exception occurs during the printing process.  </p>\n<p> To associate the event with your event handler, add an instance of the <a class=\"xref\" href=\"system.drawing.printing.printeventhandler\" data-linktype=\"relative-path\">PrintEventHandler</a> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_PrintPage\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrintPage</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the output to print for the current page is needed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Drawing.Printing.PrintPageEventHandler PrintPage;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To specify the output to print, use the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_Graphics_\" data-linktype=\"relative-path\">Graphics</a> property of the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs\" data-linktype=\"relative-path\">PrintPageEventArgs</a>. For example, to specify a line of text that should be printed, draw the text using the <a class=\"xref\" href=\"system.drawing.graphics#System_Drawing_Graphics_DrawString_\" data-linktype=\"relative-path\">DrawString</a> method.  </p>\n<p> In addition to specifying the output, you can indicate if there are additional pages to print by setting the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_HasMorePages_\" data-linktype=\"relative-path\">HasMorePages</a> property to <code>true</code>. The default is <code>false</code>, which indicates that there are no more pages to print. Individual page settings can also be modified through the <a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a> and the print job can be canceled by setting the <a class=\"xref\" href=\"system.drawing.printing.printpageeventargs#System_Drawing_Printing_PrintPageEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property to <code>true</code>. To print each page of a document using different page settings, handle the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_QueryPageSettings\" data-linktype=\"relative-path\">QueryPageSettings</a> event.  </p>\n<p> To associate the event with your event handler, add an instance of the <a class=\"xref\" href=\"system.drawing.printing.printpageeventhandler\" data-linktype=\"relative-path\">PrintPageEventHandler</a> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates handling the PrintPage event.  </p>\n<p> For another example, see <a href=\"../Topic/How%20to:%20Print%20a%20Multi-Page%20Text%20File%20in%20Windows%20Forms.md\" data-linktype=\"relative-path\">How to: Print a Multi-Page Text File in Windows Forms</a>.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a>, <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a>, and <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PrintDocument Example#1\">\n#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Printing;\nusing namespace System::Windows::Forms;\n\npublic ref class PrintingExample: public System::Windows::Forms::Form\n{\nprivate:\n   System::ComponentModel::Container^ components;\n   System::Windows::Forms::Button^ printButton;\n   System::Drawing::Font^ printFont;\n   StreamReader^ streamToPrint;\n\npublic:\n   PrintingExample()\n      : Form()\n   {\n      \n      // The Windows Forms Designer requires the following call.\n      InitializeComponent();\n   }\n\n\nprivate:\n\n   // The Click event is raised when the user clicks the Print button.\n   void printButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      try\n      {\n         streamToPrint = gcnew StreamReader( &quot;C:\\\\My Documents\\\\MyFile.txt&quot; );\n         try\n         {\n            printFont = gcnew System::Drawing::Font( &quot;Arial&quot;,10 );\n            PrintDocument^ pd = gcnew PrintDocument;\n            pd-&gt;PrintPage += gcnew PrintPageEventHandler( this, &amp;PrintingExample::pd_PrintPage );\n            pd-&gt;Print();\n         }\n         finally\n         {\n            streamToPrint-&gt;Close();\n         }\n\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n\n   }\n\n\n   // The PrintPage event is raised for each page to be printed.\n   void pd_PrintPage( Object^ /*sender*/, PrintPageEventArgs^ ev )\n   {\n      float linesPerPage = 0;\n      float yPos = 0;\n      int count = 0;\n      float leftMargin = (float)ev-&gt;MarginBounds.Left;\n      float topMargin = (float)ev-&gt;MarginBounds.Top;\n      String^ line = nullptr;\n      \n      // Calculate the number of lines per page.\n      linesPerPage = ev-&gt;MarginBounds.Height / printFont-&gt;GetHeight( ev-&gt;Graphics );\n      \n      // Print each line of the file.\n      while ( count &lt; linesPerPage &amp;&amp; ((line = streamToPrint-&gt;ReadLine()) != nullptr) )\n      {\n         yPos = topMargin + (count * printFont-&gt;GetHeight( ev-&gt;Graphics ));\n         ev-&gt;Graphics-&gt;DrawString( line, printFont, Brushes::Black, leftMargin, yPos, gcnew StringFormat );\n         count++;\n      }\n\n      \n      // If more lines exist, print another page.\n      if ( line != nullptr )\n            ev-&gt;HasMorePages = true;\n      else\n            ev-&gt;HasMorePages = false;\n   }\n\n\n   // The Windows Forms Designer requires the following procedure.\n   void InitializeComponent()\n   {\n      this-&gt;components = gcnew System::ComponentModel::Container;\n      this-&gt;printButton = gcnew System::Windows::Forms::Button;\n      this-&gt;ClientSize = System::Drawing::Size( 504, 381 );\n      this-&gt;Text = &quot;Print Example&quot;;\n      printButton-&gt;ImageAlign = System::Drawing::ContentAlignment::MiddleLeft;\n      printButton-&gt;Location = System::Drawing::Point( 32, 110 );\n      printButton-&gt;FlatStyle = System::Windows::Forms::FlatStyle::Flat;\n      printButton-&gt;TabIndex = 0;\n      printButton-&gt;Text = &quot;Print the file.&quot;;\n      printButton-&gt;Size = System::Drawing::Size( 136, 40 );\n      printButton-&gt;Click += gcnew System::EventHandler( this, &amp;PrintingExample::printButton_Click );\n      this-&gt;Controls-&gt;Add( printButton );\n   }\n\n};\n\n\n// This is the main entry point for the application.\nint main()\n{\n   Application::Run( gcnew PrintingExample );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PrintDocument Example#1\">Imports System\nImports System.IO\nImports System.Drawing\nImports System.Drawing.Printing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n    Private WithEvents printButton As System.Windows.Forms.Button\n    Private printFont As Font\n    Private streamToPrint As StreamReader\n\n    Public Sub New()\n        &#39; The Windows Forms Designer requires the following call.\n        InitializeComponent()\n        InitializeForm()\n    End Sub\n\n    &#39; The Click event is raised when the user clicks the Print button.\n    Private Sub printButton_Click(ByVal sender As Object, ByVal e As EventArgs) Handles printButton.Click\n        Try\n            streamToPrint = New StreamReader(&quot;C:\\My Documents\\MyFile.txt&quot;)\n            Try\n                printFont = New Font(&quot;Arial&quot;, 10)\n                Dim pd As New PrintDocument()\n                AddHandler pd.PrintPage, AddressOf Me.pd_PrintPage\n                pd.Print()\n            Finally\n                streamToPrint.Close()\n            End Try\n        Catch ex As Exception\n            MessageBox.Show(ex.Message)\n        End Try\n    End Sub\n\n    &#39; The PrintPage event is raised for each page to be printed.\n    Private Sub pd_PrintPage(ByVal sender As Object, ByVal ev As PrintPageEventArgs)\n        Dim linesPerPage As Single = 0\n        Dim yPos As Single = 0\n        Dim count As Integer = 0\n        Dim leftMargin As Single = ev.MarginBounds.Left\n        Dim topMargin As Single = ev.MarginBounds.Top\n        Dim line As String = Nothing\n\n        &#39; Calculate the number of lines per page.\n        linesPerPage = ev.MarginBounds.Height / printFont.GetHeight(ev.Graphics)\n\n        &#39; Print each line of the file.\n        While count &lt; linesPerPage\n            line = streamToPrint.ReadLine()\n            If line Is Nothing Then\n                Exit While\n            End If\n            yPos = topMargin + count * printFont.GetHeight(ev.Graphics)\n            ev.Graphics.DrawString(line, printFont, Brushes.Black, leftMargin, yPos, New StringFormat())\n            count += 1\n        End While\n\n        &#39; If more lines exist, print another page.\n        If (line IsNot Nothing) Then\n            ev.HasMorePages = True\n        Else\n            ev.HasMorePages = False\n        End If\n    End Sub\n\n    Private Sub InitializeForm()\n        Me.components = New System.ComponentModel.Container()\n        Me.printButton = New System.Windows.Forms.Button()\n\n        Me.ClientSize = New System.Drawing.Size(504, 381)\n        Me.Text = &quot;Print Example&quot;\n\n        printButton.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft\n        printButton.Location = New System.Drawing.Point(32, 110)\n        printButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat\n        printButton.TabIndex = 0\n        printButton.Text = &quot;Print the file.&quot;\n        printButton.Size = New System.Drawing.Size(136, 40)\n        AddHandler printButton.Click, AddressOf printButton_Click\n\n        Me.Controls.Add(printButton)\n    End Sub\n\n\n    &#39; This is the main entry point for the application.    \n    Public Shared Sub Main()\n        Application.Run(New Form1())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PrintDocument Example#1\">using System;\nusing System.IO;\nusing System.Drawing;\nusing System.Drawing.Printing;\nusing System.Windows.Forms;\n\n\npublic partial class Form1 : System.Windows.Forms.Form\n{\n    private System.ComponentModel.Container components;\n    private System.Windows.Forms.Button printButton;\n    private Font printFont;\n    private StreamReader streamToPrint;\n\n    public Form1()\n    {\n        // The Windows Forms Designer requires the following call.\n        InitializeComponent();\n    }\n\n    // The Click event is raised when the user clicks the Print button.\n    private void printButton_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            streamToPrint = new StreamReader\n               (&quot;C:\\\\My Documents\\\\MyFile.txt&quot;);\n            try\n            {\n                printFont = new Font(&quot;Arial&quot;, 10);\n                PrintDocument pd = new PrintDocument();\n                pd.PrintPage += new PrintPageEventHandler\n                   (this.pd_PrintPage);\n                pd.Print();\n            }\n            finally\n            {\n                streamToPrint.Close();\n            }\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show(ex.Message);\n        }\n    }\n\n    // The PrintPage event is raised for each page to be printed.\n    private void pd_PrintPage(object sender, PrintPageEventArgs ev)\n    {\n        float linesPerPage = 0;\n        float yPos = 0;\n        int count = 0;\n        float leftMargin = ev.MarginBounds.Left;\n        float topMargin = ev.MarginBounds.Top;\n        string line = null;\n\n        // Calculate the number of lines per page.\n        linesPerPage = ev.MarginBounds.Height /\n           printFont.GetHeight(ev.Graphics);\n\n        // Print each line of the file.\n        while (count &lt; linesPerPage &amp;&amp;\n           ((line = streamToPrint.ReadLine()) != null))\n        {\n            yPos = topMargin + (count *\n               printFont.GetHeight(ev.Graphics));\n            ev.Graphics.DrawString(line, printFont, Brushes.Black,\n               leftMargin, yPos, new StringFormat());\n            count++;\n        }\n\n        // If more lines exist, print another page.\n        if (line != null)\n            ev.HasMorePages = true;\n        else\n            ev.HasMorePages = false;\n    }\n\n\n    // The Windows Forms Designer requires the following procedure.\n    private void InitializeComponent()\n    {\n        this.components = new System.ComponentModel.Container();\n        this.printButton = new System.Windows.Forms.Button();\n\n        this.ClientSize = new System.Drawing.Size(504, 381);\n        this.Text = &quot;Print Example&quot;;\n\n        printButton.ImageAlign =\n           System.Drawing.ContentAlignment.MiddleLeft;\n        printButton.Location = new System.Drawing.Point(32, 110);\n        printButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n        printButton.TabIndex = 0;\n        printButton.Text = &quot;Print the file.&quot;;\n        printButton.Size = new System.Drawing.Size(136, 40);\n        printButton.Click += new System.EventHandler(printButton_Click);\n\n        this.Controls.Add(printButton);\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Printing_PrintDocument_QueryPageSettings\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryPageSettings</div>        \r\n          </div>\r\n    \r\n            <p>Occurs immediately before each <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Drawing.Printing.QueryPageSettingsEventHandler QueryPageSettings;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is possible to print each page of a document using different page settings. You set page settings by modifying individual properties of the <a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventargs#System_Drawing_Printing_QueryPageSettingsEventArgs_PageSettings_\" data-linktype=\"relative-path\">PageSettings</a> property or by setting the property to a <a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>. Changes made to the <a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a> affect only the current page, not the document&#39;s default page settings. The print job can also be canceled by setting the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property to <code>true</code> for the <a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventargs\" data-linktype=\"relative-path\">QueryPageSettingsEventArgs</a>.  </p>\n<p> To associate the event with your event handler, add an instance of the <a class=\"xref\" href=\"system.drawing.printing.querypagesettingseventhandler\" data-linktype=\"relative-path\">QueryPageSettingsEventHandler</a> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints a document with the first page in color, if the printer supports it. The example requires that a <a class=\"xref\" href=\"system.drawing.printing.printdocument\" data-linktype=\"relative-path\">PrintDocument</a> variable named <code>printDoc</code> has been created, and the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> and QueryPageSettings events are handled. The <code>currentPageNumber</code> variable is incremented after every page is printed in the <a class=\"xref\" href=\"system.drawing.printing.printdocument#System_Drawing_Printing_PrintDocument_PrintPage\" data-linktype=\"relative-path\">PrintPage</a> event, which is not shown.  </p>\n<p> Use the <a class=\"xref\" href=\"system.drawing\" data-linktype=\"relative-path\">System.Drawing</a> and <a class=\"xref\" href=\"system.drawing.printing\" data-linktype=\"relative-path\">System.Drawing.Printing</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cs\" name=\"PaperSource and PaperSize Example with Resolution#6\">\n    private void MyButtonPrint_OnClick(object sender, System.EventArgs e)\n    {\n        \n        // Set the printer name and ensure it is valid. If not, provide a message to the user.\n        printDoc.PrinterSettings.PrinterName = &quot;\\\\mynetworkprinter&quot;;\n\n        if (printDoc.PrinterSettings.IsValid) {\n        \n            // If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if (printDoc.PrinterSettings.SupportsColor) {\n\n                // Set the page default&#39;s to not print in color.\n                printDoc.DefaultPageSettings.Color = false;\n            }\n\n            // Provide a friendly name, set the page number, and print the document.\n            printDoc.DocumentName = &quot;My Presentation&quot;;\n            currentPageNumber = 1;\n            printDoc.Print();\n        }\n        else {\n            MessageBox.Show(&quot;Printer is not valid&quot;);\n        }\n    }\n\n    private void MyPrintQueryPageSettingsEvent(object sender, QueryPageSettingsEventArgs e)\n    {\n        // Determines if the printer supports printing in color.\n        if (printDoc.PrinterSettings.SupportsColor) {\n\n            // If the printer supports color printing, use color.\n            if (currentPageNumber == 1 ) {\n\n                e.PageSettings.Color = true;\n            }\n\n        }    \n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"PaperSource and PaperSize Example with Resolution#6\">   private:\n      void MyButtonPrint_OnClick( Object^ sender, System::EventArgs^ e )\n      {\n         // Set the printer name and ensure it is valid. If not, provide a message to the user.\n         printDoc-&gt;PrinterSettings-&gt;PrinterName = &quot;\\\\mynetworkprinter&quot;;\n         if ( printDoc-&gt;PrinterSettings-&gt;IsValid )\n         {\n            // If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if ( printDoc-&gt;PrinterSettings-&gt;SupportsColor )\n            {\n               // Set the page default&#39;s to not print in color.\n               printDoc-&gt;DefaultPageSettings-&gt;Color = false;\n            }\n\n            // Provide a friendly name, set the page number, and print the document.\n            printDoc-&gt;DocumentName = &quot;My Presentation&quot;;\n            currentPageNumber = 1;\n            printDoc-&gt;Print();\n         }\n         else\n         {\n            MessageBox::Show( &quot;Printer is not valid&quot; );\n         }\n      }\n\n      void MyPrintQueryPageSettingsEvent( Object^ sender, QueryPageSettingsEventArgs^ e )\n      {\n         // Determines if the printer supports printing in color.\n         if ( printDoc-&gt;PrinterSettings-&gt;SupportsColor )\n         {\n            // If the printer supports color printing, use color.\n            if ( currentPageNumber == 1 )\n            {\n               e-&gt;PageSettings-&gt;Color = true;\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"PaperSource and PaperSize Example with Resolution#6\">\n    Private Sub MyButtonPrint_OnClick(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        &#39; Set the printer name and ensure it is valid. If not, provide a message to the user.\n        printDoc.PrinterSettings.PrinterName = &quot;\\\\mynetworkprinter&quot;\n\n        If printDoc.PrinterSettings.IsValid Then\n\n            &#39; If the printer supports printing in color, then override the printer&#39;s default behavior.\n            if printDoc.PrinterSettings.SupportsColor then\n\n                &#39; Set the page default&#39;s to not print in color.\n                printDoc.DefaultPageSettings.Color = False\n            End If\n\n            &#39; Provide a friendly name, set the page number, and print the document.\n            printDoc.DocumentName = &quot;My Presentation&quot;\n            currentPageNumber = 1\n            printDoc.Print()\n        Else\n            MessageBox.Show(&quot;Printer is not valid&quot;)\n        End If\n    End Sub\n\n    Private Sub MyPrintQueryPageSettingsEvent(ByVal sender As Object, ByVal e As QueryPageSettingsEventArgs)\n\n        &#39; Determines if the printer supports printing in color.\n        If printDoc.PrinterSettings.SupportsColor Then\n\n            &#39; If the printer supports color printing, use color.\n            If currentPageNumber = 1 Then\n\n                e.PageSettings.Color = True\n            End If\n\n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.Printing.PrintDocument.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.Printing.PrintDocument.yml\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument..ctor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.BeginPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.add_BeginPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.remove_BeginPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.DefaultPageSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.DocumentName\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.EndPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.add_EndPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.remove_EndPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.OnBeginPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.OnEndPrint\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.OnPrintPage\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.OnQueryPageSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.OriginAtMargins\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.Print\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.PrintController\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.PrinterSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.PrintPage\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.add_PrintPage\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.remove_PrintPage\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.QueryPageSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.add_QueryPageSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.remove_QueryPageSettings\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Printing.PrintDocument.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Drawing.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"eaa9cf16-e413-291e-3220-06822c79b3e5\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Drawing.Printing\\PrintDocument.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a reusable object that sends output to a printer, when printing from a Windows Forms application.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Drawing.Printing/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Drawing.Printing.PrintDocument\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.Printing.PrintDocument.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.Printing.PrintDocument.yml","open_to_public_contributors":true,"api_name":["System.Drawing.Printing.PrintDocument","System.Drawing.Printing.PrintDocument..ctor","System.Drawing.Printing.PrintDocument.BeginPrint","System.Drawing.Printing.PrintDocument.add_BeginPrint","System.Drawing.Printing.PrintDocument.remove_BeginPrint","System.Drawing.Printing.PrintDocument.DefaultPageSettings","System.Drawing.Printing.PrintDocument.DocumentName","System.Drawing.Printing.PrintDocument.EndPrint","System.Drawing.Printing.PrintDocument.add_EndPrint","System.Drawing.Printing.PrintDocument.remove_EndPrint","System.Drawing.Printing.PrintDocument.OnBeginPrint","System.Drawing.Printing.PrintDocument.OnEndPrint","System.Drawing.Printing.PrintDocument.OnPrintPage","System.Drawing.Printing.PrintDocument.OnQueryPageSettings","System.Drawing.Printing.PrintDocument.OriginAtMargins","System.Drawing.Printing.PrintDocument.Print","System.Drawing.Printing.PrintDocument.PrintController","System.Drawing.Printing.PrintDocument.PrinterSettings","System.Drawing.Printing.PrintDocument.PrintPage","System.Drawing.Printing.PrintDocument.add_PrintPage","System.Drawing.Printing.PrintDocument.remove_PrintPage","System.Drawing.Printing.PrintDocument.QueryPageSettings","System.Drawing.Printing.PrintDocument.add_QueryPageSettings","System.Drawing.Printing.PrintDocument.remove_QueryPageSettings","System.Drawing.Printing.PrintDocument.ToString"],"api_location":["System.Drawing.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Drawing.Printing.PrintDocument","System::Drawing::Printing::PrintDocument","System.Drawing.Printing.PrintDocument.#ctor","System::Drawing::Printing::PrintDocument::#ctor","System.Drawing.Printing.PrintDocument.BeginPrint","System::Drawing::Printing::PrintDocument::BeginPrint","System.Drawing.Printing.PrintDocument.DefaultPageSettings","System::Drawing::Printing::PrintDocument::DefaultPageSettings","System.Drawing.Printing.PrintDocument.DocumentName","System::Drawing::Printing::PrintDocument::DocumentName","System.Drawing.Printing.PrintDocument.EndPrint","System::Drawing::Printing::PrintDocument::EndPrint","System.Drawing.Printing.PrintDocument.OnBeginPrint","System::Drawing::Printing::PrintDocument::OnBeginPrint","System.Drawing.Printing.PrintDocument.OnEndPrint","System::Drawing::Printing::PrintDocument::OnEndPrint","System.Drawing.Printing.PrintDocument.OnPrintPage","System::Drawing::Printing::PrintDocument::OnPrintPage","System.Drawing.Printing.PrintDocument.OnQueryPageSettings","System::Drawing::Printing::PrintDocument::OnQueryPageSettings","System.Drawing.Printing.PrintDocument.OriginAtMargins","System::Drawing::Printing::PrintDocument::OriginAtMargins","System.Drawing.Printing.PrintDocument.Print","System::Drawing::Printing::PrintDocument::Print","System.Drawing.Printing.PrintDocument.PrintController","System::Drawing::Printing::PrintDocument::PrintController","System.Drawing.Printing.PrintDocument.PrinterSettings","System::Drawing::Printing::PrintDocument::PrinterSettings","System.Drawing.Printing.PrintDocument.PrintPage","System::Drawing::Printing::PrintDocument::PrintPage","System.Drawing.Printing.PrintDocument.QueryPageSettings","System::Drawing::Printing::PrintDocument::QueryPageSettings","System.Drawing.Printing.PrintDocument.ToString","System::Drawing::Printing::PrintDocument::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"eaa9cf16-e413-291e-3220-06822c79b3e5","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Drawing.Printing\\PrintDocument.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Drawing.Printing/PrintDocument.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PrintDocument class | Microsoft Docs","_op_ogTitle":"PrintDocument class","description":"Defines a reusable object that sends output to a printer, when printing from a Windows Forms application.\n","toc_asset_id":"_splitted/System.Drawing.Printing/toc.json","toc_rel":"_splitted/System.Drawing.Printing/toc.json","source_url":"","ms.assetid":"System.Drawing.Printing.PrintDocument","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.printing.printdocument","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.printing.printdocument","fileRelativePath":"System.Drawing.Printing.PrintDocument.html"},"themesRelativePathToOutputRoot":"_themes/"}