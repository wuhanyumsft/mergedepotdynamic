{"content":"    \r\n    <h1 id=\"System_Int32\">\r\n      <span class=\"lang-csharp\">Int32</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 32-bit signed integer.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Int32 : IComparable, IComparable&lt;int&gt;, IConvertible, IEquatable&lt;int&gt;, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Int32</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Int32 is an immutable value type that represents signed integers with values that range from negative 2,147,483,648 (which is represented by the <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a> constant) through positive 2,147,483,647 (which is represented by the <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> constant. The .NET Framework also includes an unsigned 32-bit integer value type, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, which represents values that range from 0 to 4,294,967,295.  </p>\n<h2 id=\"instantiating-an-int32-value\">Instantiating an Int32 Value</h2>\n<p> You can instantiate an Int32 value in several ways:  </p>\n<ul>\n<li><p>You can declare an Int32 variable and assign it a literal integer value that is within the range of the Int32 data type. The following example declares two Int32 variables and assigns them values in this way.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.Instantiation#1\">      int number1 = 64301;\n      int number2 = 25548612;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Instantiation#1\">      Dim number1 As Integer = 64301\n      Dim number2 As Integer = 25548612\n</code></pre></li>\n<li><p>You can assign the value of an integer type whose range is a subset of the Int32 type. This is a widening conversion that does not require a cast operator in C# or a conversion method in Visual Basic.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.Instantiation#4\">      sbyte value1 = 124;\n      short value2 = 1618;\n      \n      int number1 = value1;\n      int number2 = value2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Instantiation#4\">      Dim value1 As SByte = 124\n      Dim value2 As Int16 = 1618\n      \n      Dim number1 As Integer = value1\n      Dim number2 As Integer = value2\n</code></pre></li>\n<li><p>You can assign the value of a numeric type whose range exceeds that of the Int32 type. This is a narrowing conversion, so it requires a cast operator in C# and a conversion method in Visual Basic if <code>Option``Strict</code> is on. If the numeric value is a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, or <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value that includes a fractional component, the handling of its fractional part depends on the compiler performing the conversion. The following example performs narrowing conversions to assign several numeric values to Int32 variables.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.Instantiation#2\">      long lNumber = 163245617;\n      try {\n         int number1 = (int) lNumber;\n         Console.WriteLine(number1);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, lNumber);\n      }\n      \n      double dbl2 = 35901.997;\n      try {\n         int number2 = (int) dbl2;\n         Console.WriteLine(number2);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, dbl2);\n      }\n         \n      BigInteger bigNumber = 132451;\n      try {\n         int number3 = (int) bigNumber;\n         Console.WriteLine(number3);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, bigNumber);\n      }    \n      // The example displays the following output:\n      //       163245617\n      //       35902\n      //       132451\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Instantiation#2\">      Dim lNumber As Long = 163245617\n      Try\n         Dim number1 As Integer = CInt(lNumber)\n         Console.WriteLine(number1)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, lNumber)\n      End Try\n      \n      Dim dbl2 As Double = 35901.997\n      Try\n         Dim number2 As Integer = CInt(dbl2)\n         Console.WriteLine(number2)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, dbl2)\n      End Try\n         \n      Dim bigNumber As BigInteger = 132451\n      Try\n         Dim number3 As Integer = CInt(bigNumber)\n         Console.WriteLine(number3)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is out of range of an Int32.&quot;, bigNumber)\n      End Try    \n      &#39; The example displays the following output:\n      &#39;       163245617\n      &#39;       35902\n      &#39;       132451\n</code></pre></li>\n<li><p>You can call a method of the <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> class to convert any supported type to an Int32 value. This is possible because Int32 supports the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The following example illustrates the conversion of an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to Int32 values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#4\">      decimal[] values= { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                          199.55m, 9214.16m, Decimal.MaxValue };\n      int result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;,\n                              value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the Int32 type.\n      //    Converted the Decimal value &#39;-1034.23&#39; to the Int32 value -1034.\n      //    Converted the Decimal value &#39;-12&#39; to the Int32 value -12.\n      //    Converted the Decimal value &#39;0&#39; to the Int32 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the Int32 value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the Int32 value 200.\n      //    Converted the Decimal value &#39;9214.16&#39; to the Int32 value 9214.\n      //    79228162514264337593543950335 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As Integer\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the Int32 type.\n      &#39;    Converted the Decimal value &#39;-1034.23&#39; to the Int32 value -1034.\n      &#39;    Converted the Decimal value &#39;-12&#39; to the Int32 value -12.\n      &#39;    Converted the Decimal value &#39;0&#39; to the Int32 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the Int32 value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the Int32 value 200.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the Int32 value 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the Int32 type.\n</code></pre></li>\n<li><p>You can call the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> or <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method to convert the string representation of an Int32 value to an Int32. The string can contain either decimal or hexadecimal digits. The following example illustrates the parse operation by using both a decimal and a hexadecimal string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.Instantiation#3\">      string string1 = &quot;244681&quot;;\n      try {\n         int number1 = Int32.Parse(string1);\n         Console.WriteLine(number1);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a 32-bit integer.&quot;, string1);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;The format of &#39;{0}&#39; is invalid.&quot;, string1);\n      }\n\n      string string2 = &quot;F9A3C&quot;;\n      try {\n         int number2 = Int32.Parse(string2,\n                                  System.Globalization.NumberStyles.HexNumber);\n         Console.WriteLine(number2);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a 32-bit integer.&quot;, string2);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;The format of &#39;{0}&#39; is invalid.&quot;, string2);\n      }\n      // The example displays the following output:\n      //       244681\n      //       1022524\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Instantiation#3\">      Dim string1 As String = &quot;244681&quot;\n      Try\n         Dim number1 As Integer = Int32.Parse(string1)\n         Console.WriteLine(number1)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a 32-bit integer.&quot;, string1)\n      Catch e As FormatException\n         Console.WriteLine(&quot;The format of &#39;{0}&#39; is invalid.&quot;, string1)\n      End Try\n\n      Dim string2 As String = &quot;F9A3C&quot;\n      Try\n         Dim number2 As Integer = Int32.Parse(string2,\n                                  System.Globalization.NumberStyles.HexNumber)\n         Console.WriteLine(number2)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a 32-bit integer.&quot;, string2)\n      Catch e As FormatException\n         Console.WriteLine(&quot;The format of &#39;{0}&#39; is invalid.&quot;, string2)\n      End Try\n      &#39; The example displays the following output:\n      &#39;       244681\n      &#39;       1022524\n</code></pre></li>\n</ul>\n<h2 id=\"performing-operations-on-int32-values\">Performing Operations on Int32 Values</h2>\n<p> The Int32 type supports standard mathematical operations such as addition, subtraction, division, multiplication, negation, and unary negation. Like the other integral types, the Int32 type also supports the bitwise <code>AND</code>, <code>OR</code>, <code>XOR</code>, left shift, and right shift operators.  </p>\n<p> You can use the standard numeric operators to compare two Int32 values, or you can call the <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> or <a class=\"xref\" href=\"system.int32#System_Int32_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> You can also call the members of the <a class=\"xref\" href=\"system.math\" data-linktype=\"relative-path\">Math</a> class to perform a wide range of numeric operations, including getting the absolute value of a number, calculating the quotient and remainder from integral division, determining the maximum or minimum value of two integers, getting the sign of a number, and rounding a number.  </p>\n<h2 id=\"representing-an-int32-as-a-string\">Representing an Int32 as a String</h2>\n<p> The Int32 type provides full support for standard and custom numeric format strings. (For more information, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>, <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a>, and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.)  </p>\n<p> To format an Int32 value as an integral string with no leading zeros, you can call the parameterless <a class=\"xref\" href=\"system.int32#System_Int32_ToString\" data-linktype=\"relative-path\">ToString()</a> method. By using the &quot;D&quot; format specifier, you can also include a specified number of leading zeros in the string representation. By using the &quot;N&quot; format specifier, you can include group separators and specify the number of decimal digits to appear in the string representation of the number. By using the &quot;X&quot; format specifier, you can represent an Int32 value as a hexadecimal string. The following example formats the elements in an array of Int32 values in these four ways.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Int32.Formatting#1\">      Dim numbers() As Integer = { -1403, 0, 169, 1483104 }\n      For Each number As Integer In numbers\n         &#39; Display value using default formatting.\n         Console.Write(&quot;{0,-8}  --&gt;   &quot;, number.ToString())\n         &#39; Display value with 3 digits and leading zeros.\n         Console.Write(&quot;{0,11:D3}&quot;, number) \n         &#39; Display value with 1 decimal digit.\n         Console.Write(&quot;{0,13:N1}&quot;, number) \n         &#39; Display value as hexadecimal.\n         Console.Write(&quot;{0,12:X2}&quot;, number) \n         &#39; Display value with eight hexadecimal digits.\n         Console.WriteLine(&quot;{0,14:X8}&quot;, number)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    -1403     --&gt;         -1403     -1,403.0    FFFFFA85      FFFFFA85\n      &#39;    0         --&gt;           000          0.0          00      00000000\n      &#39;    169       --&gt;           169        169.0          A9      000000A9\n      &#39;    1483104   --&gt;       1483104  1,483,104.0      16A160      0016A160\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.Formatting#1\">      int[] numbers = { -1403, 0, 169, 1483104 };\n      foreach (int number in numbers) {\n         // Display value using default formatting.\n         Console.Write(&quot;{0,-8}  --&gt;   &quot;, number.ToString());\n         // Display value with 3 digits and leading zeros.\n         Console.Write(&quot;{0,11:D3}&quot;, number);\n         // Display value with 1 decimal digit.\n         Console.Write(&quot;{0,13:N1}&quot;, number);\n         // Display value as hexadecimal.\n         Console.Write(&quot;{0,12:X2}&quot;, number);\n         // Display value with eight hexadecimal digits.\n         Console.WriteLine(&quot;{0,14:X8}&quot;, number);\n      }   \n      // The example displays the following output:\n      //    -1403     --&gt;         -1403     -1,403.0    FFFFFA85      FFFFFA85\n      //    0         --&gt;           000          0.0          00      00000000\n      //    169       --&gt;           169        169.0          A9      000000A9\n      //    1483104   --&gt;       1483104  1,483,104.0      16A160      0016A160\n</code></pre><p> You can also format an Int32 value as a binary, octal, decimal, or hexadecimal string by calling the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToString(Int32,Int32)</a> method and supplying the base as the method&#39;s second parameter. The following example calls this method to display the binary, octal, and hexadecimal representations of an array of integer values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Int32.Formatting#2\">      Dim numbers() As Integer = { -146, 11043, 2781913 }\n      Console.WriteLine(&quot;{0,8}   {1,32}   {2,11}   {3,10}&quot;, _\n                        &quot;Value&quot;, &quot;Binary&quot;, &quot;Octal&quot;, &quot;Hex&quot;)\n      For Each number As Integer In numbers\n         Console.WriteLine(&quot;{0,8}   {1,32}   {2,11}   {3,10}&quot;, _\n                           number, Convert.ToString(number, 2), _\n                           Convert.ToString(number, 8), _\n                           Convert.ToString(number, 16))\n      Next      \n      &#39; The example displays the following output:\n      &#39;       Value                             Binary         Octal          Hex\n      &#39;        -146   11111111111111111111111101101110   37777777556     ffffff6e\n      &#39;       11043                     10101100100011         25443         2b23\n      &#39;     2781913             1010100111001011011001      12471331       2a72d9\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.Formatting#2\">      int[] numbers = { -146, 11043, 2781913 };\n      Console.WriteLine(&quot;{0,8}   {1,32}   {2,11}   {3,10}&quot;, \n                        &quot;Value&quot;, &quot;Binary&quot;, &quot;Octal&quot;, &quot;Hex&quot;);\n      foreach (int number in numbers) {\n         Console.WriteLine(&quot;{0,8}   {1,32}   {2,11}   {3,10}&quot;, \n                           number, Convert.ToString(number, 2), \n                           Convert.ToString(number, 8), \n                           Convert.ToString(number, 16));\n      }      \n      // The example displays the following output:\n      //       Value                             Binary         Octal          Hex\n      //        -146   11111111111111111111111101101110   37777777556     ffffff6e\n      //       11043                     10101100100011         25443         2b23\n      //     2781913             1010100111001011011001      12471331       2a72d9\n</code></pre><h2 id=\"working-with-non-decimal-32-bit-integer-values\">Working with Non-Decimal 32-Bit Integer Values</h2>\n<p> In addition to working with individual integers as decimal values, you may want to perform bitwise operations with integer values, or work with the binary or hexadecimal representations of integer values. Int32 values are represented in 31 bits, with the thirty-second bit used as a sign bit. Positive values are represented by using sign-and-magnitude representation. Negative values are in two&#39;s complement representation. This is important to keep in mind when you perform bitwise operations on Int32 values or when you work with individual bits. In order to perform a numeric, Boolean, or comparison operation on any two non-decimal values, both values must use the same representation.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the largest possible value of an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_CompareTo_System_Int32_\" data-linktype=\"self-bookmark\">CompareTo(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Equals_System_Int32_\" data-linktype=\"self-bookmark\">Equals(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its 32-bit signed integer equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Parse_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_TryParse_System_String_System_Int32__\" data-linktype=\"self-bookmark\">TryParse(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Int32__\" data-linktype=\"self-bookmark\">TryParse(String,NumberStyles,IFormatProvider,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Int32_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the largest possible value of an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int MaxValue = 2147483647;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 2,147,483,647; that is, hexadecimal 0x7FFFFFFF.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the MaxValue property to prevent an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> when converting to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.MaxValue#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      long[] numbersToConvert = { 162345, 32183, -54000, Int64.MaxValue/2 };\n      int newNumber;\n      foreach (long number in numbersToConvert)\n      {\n         if (number &gt;= Int32.MinValue &amp;&amp; number &lt;= Int32.MaxValue)\n         {\n            newNumber = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, \n                              newNumber);\n         }\n         else\n         {\n            Console.WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number);\n         }\n      }\n   }\n}\n// The example displays the following output to the console:\n//    Successfully converted 162345 to an Int32.\n//    Successfully converted 32183 to an Int32.\n//    Successfully converted -54000 to an Int32.\n//    Unable to convert 4611686018427387903 to an Int32.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Int32.MaxValue#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;Int64&gt;^ numbersToConvert = gcnew array&lt;Int64&gt; { 162345, 32183, -54000, \n                                                         Int64::MaxValue/2 };\n   Int32 newNumber;\n   for each (Int64 number in numbersToConvert)\n   {\n      if ((number &gt;= Int32::MinValue) &amp;&amp; (number &lt;= Int32::MaxValue))\n      {\n         newNumber = Convert::ToInt32(number);\n         Console::WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, \n                           newNumber);\n      }\n      else\n      {\n         Console::WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number);\n      }\n   }\n}\n// The example displays the following output to the console:\n//    Successfully converted 162345 to an Int32.\n//    Successfully converted 32183 to an Int32.\n//    Successfully converted -54000 to an Int32.\n//    Unable to convert 4611686018427387903 to an Int32.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.MaxValue#1\">Module modMain\n   Public Sub Main()\n      Dim numbersToConvert() As Long = { 162345, 32183, -54000, Int64.MaxValue\\2 }\n      Dim newNumber As Integer\n      For Each number As Long In NumbersToConvert\n         If number &gt;= Int32.MinValue And number &lt;= Int32.MaxValue Then\n            newNumber = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, _\n                              newNumber)\n         Else\n            Console.WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number)\n         End If                     \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Successfully converted 162345 to an Int32.\n&#39;       Successfully converted 32183 to an Int32.\n&#39;       Successfully converted -54000 to an Int32.\n&#39;       Unable to convert 4611686018427387903 to an Int32.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int MinValue = -2147483648;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is -2,147,483,648; that is, hexadecimal 0x80000000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the MinValue property to prevent an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> when converting to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.MaxValue#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      long[] numbersToConvert = { 162345, 32183, -54000, Int64.MaxValue/2 };\n      int newNumber;\n      foreach (long number in numbersToConvert)\n      {\n         if (number &gt;= Int32.MinValue &amp;&amp; number &lt;= Int32.MaxValue)\n         {\n            newNumber = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, \n                              newNumber);\n         }\n         else\n         {\n            Console.WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number);\n         }\n      }\n   }\n}\n// The example displays the following output to the console:\n//    Successfully converted 162345 to an Int32.\n//    Successfully converted 32183 to an Int32.\n//    Successfully converted -54000 to an Int32.\n//    Unable to convert 4611686018427387903 to an Int32.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Int32.MaxValue#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;Int64&gt;^ numbersToConvert = gcnew array&lt;Int64&gt; { 162345, 32183, -54000, \n                                                         Int64::MaxValue/2 };\n   Int32 newNumber;\n   for each (Int64 number in numbersToConvert)\n   {\n      if ((number &gt;= Int32::MinValue) &amp;&amp; (number &lt;= Int32::MaxValue))\n      {\n         newNumber = Convert::ToInt32(number);\n         Console::WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, \n                           newNumber);\n      }\n      else\n      {\n         Console::WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number);\n      }\n   }\n}\n// The example displays the following output to the console:\n//    Successfully converted 162345 to an Int32.\n//    Successfully converted 32183 to an Int32.\n//    Successfully converted -54000 to an Int32.\n//    Unable to convert 4611686018427387903 to an Int32.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.MaxValue#1\">Module modMain\n   Public Sub Main()\n      Dim numbersToConvert() As Long = { 162345, 32183, -54000, Int64.MaxValue\\2 }\n      Dim newNumber As Integer\n      For Each number As Long In NumbersToConvert\n         If number &gt;= Int32.MinValue And number &lt;= Int32.MaxValue Then\n            newNumber = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Successfully converted {0} to an Int32.&quot;, _\n                              newNumber)\n         Else\n            Console.WriteLine(&quot;Unable to convert {0} to an Int32.&quot;, number)\n         End If                     \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Successfully converted 162345 to an Int32.\n&#39;       Successfully converted 32183 to an Int32.\n&#39;       Successfully converted -54000 to an Int32.\n&#39;       Unable to convert 4611686018427387903 to an Int32.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_CompareTo_System_Int32_\">\r\n    \r\n            <a id=\"System_Int32_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> Depending on your programming language, it might be possible to code a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method that compares the values of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> parameter representation.  </p>\n<p> Consult your programming language&#39;s documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the CompareTo method. In addition to displaying the value returned by the method for four different comparisons, it converts the return value to a member of the custom <code>Comparison</code> enumeration, whose value it also displays.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.CompareTo#1\">using System;\n\nenum Comparison {\n   LessThan=-1, Equal=0, GreaterThan=1};\n\npublic class ValueComparison\n{\n   public static void Main()\n   {\n      int mainValue = 16325;\n      int zeroValue = 0;\n      int negativeValue = -1934;\n      int positiveValue = 903624;\n      int sameValue = 16325;\n         \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;,  \n                        mainValue, zeroValue, \n                        mainValue.CompareTo(zeroValue), \n                        (Comparison) mainValue.CompareTo(zeroValue));\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;,\n                        mainValue, sameValue, \n                        mainValue.CompareTo(sameValue), \n                        (Comparison) mainValue.CompareTo(sameValue));\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, \n                        mainValue, negativeValue, \n                        mainValue.CompareTo(negativeValue), \n                        (Comparison) mainValue.CompareTo(negativeValue));\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, \n                        mainValue, positiveValue, \n                        mainValue.CompareTo(positiveValue), \n                        (Comparison) mainValue.CompareTo(positiveValue));\n   }\n}\n// The example displays the following output:\n//       Comparing 16325 and 0: 1 (GreaterThan).\n//       Comparing 16325 and 16325: 0 (Equal).\n//       Comparing 16325 and -1934: 1 (GreaterThan).\n//       Comparing 16325 and 903624: -1 (LessThan).\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.CompareTo#1\">Public Enum Comparison As Integer\n   LessThan = -1\n   Equal = 0\n   GreaterThan = 1\nEnd Enum\n\nModule ValueComparison\n   Public Sub Main()\n      Dim mainValue As Integer = 16325\n      Dim zeroValue As Integer = 0\n      Dim negativeValue As Integer = -1934\n      Dim positiveValue As Integer = 903624\n      Dim sameValue As Integer = 16325\n      \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, _ \n                        mainValue, zeroValue, _\n                        mainValue.CompareTo(zeroValue), _\n                        CType(mainValue.CompareTo(zeroValue), Comparison))\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, _ \n                        mainValue, sameValue, _\n                        mainValue.CompareTo(sameValue), _\n                        CType(mainValue.CompareTo(sameValue), Comparison))\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, _ \n                        mainValue, negativeValue, _\n                        mainValue.CompareTo(negativeValue), _\n                        CType(mainValue.CompareTo(negativeValue), Comparison))\n                        \n      Console.WriteLine(&quot;Comparing {0} and {1}: {2} ({3}).&quot;, _ \n                        mainValue, positiveValue, _\n                        mainValue.CompareTo(positiveValue), _\n                        CType(mainValue.CompareTo(positiveValue), Comparison))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Comparing 16325 and 0: 1 (GreaterThan).\n&#39;       Comparing 16325 and 16325: 0 (Equal).\n&#39;       Comparing 16325 and -1934: 1 (GreaterThan).\n&#39;       Comparing 16325 and 903624: -1 (LessThan).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Int32_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any instance of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, regardless of its value, is considered greater than <code>null</code>.  </p>\n<p> <code>value</code> must be <code>null</code> or an instance of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>; otherwise, an exception is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Equals_System_Int32_\">\r\n    \r\n            <a id=\"System_Int32_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (int obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> has the same value as this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.int32#System_Int32_Equals_System_Object_\" data-linktype=\"relative-path\">System.Int32.Equals(Object)</a> because it does not have to convert the <code>obj</code> parameter to an object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Int32_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an instance of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>Equals</code> in the context of <code>Int32</code>, comparing two <code>int</code> values and returning <code>true</code> if they represent the same number, or <code>false</code> if they do not.  </p>\n<pre><code class=\"lang-cs\" name=\"Int32_Equals#1\">            Int32 myVariable1 = 60;\n            Int32 myVariable2 = 60;\n\n            // Get and display the declaring type.\n            Console.WriteLine(&quot;<br>Type of &#39;myVariable1&#39; is &#39;{0}&#39; and&quot;+\n                 &quot; value is :{1}&quot;,myVariable1.GetType(), myVariable1); \n            Console.WriteLine(&quot;Type of &#39;myVariable2&#39; is &#39;{0}&#39; and&quot;+\n                 &quot; value is :{1}&quot;,myVariable2.GetType(), myVariable2);\n\n            // Compare &#39;myVariable1&#39; instance with &#39;myVariable2&#39; Object.\n            if( myVariable1.Equals( myVariable2 ) )\n               Console.WriteLine( &quot;<br>Structures &#39;myVariable1&#39; and &quot;+\n                     &quot;&#39;myVariable2&#39; are equal&quot;);\n            else\n               Console.WriteLine( &quot;<br>Structures &#39;myVariable1&#39; and &quot;+\n                     &quot;&#39;myVariable2&#39; are not equal&quot;);\n            \n</code></pre><pre><code class=\"lang-vb\" name=\"Int32_Equals#1\">         Dim myVariable1 As Int32 = 60\n         Dim myVariable2 As Int32 = 60\n         \n         &#39; Get and display the declaring type.\n         Console.WriteLine(ControlChars.NewLine + &quot;Type of &#39;myVariable1&#39; is &#39;{0}&#39; and&quot; +  _\n                  &quot; value is :{1}&quot;, myVariable1.GetType().ToString(), myVariable1.ToString())\n         Console.WriteLine(&quot;Type of &#39;myVariable2&#39; is &#39;{0}&#39; and&quot; +  _\n                  &quot; value is :{1}&quot;, myVariable2.GetType().ToString(), myVariable2.ToString())\n         \n         &#39; Compare &#39;myVariable1&#39; instance with &#39;myVariable2&#39; Object.\n         If myVariable1.Equals(myVariable2) Then\n            Console.WriteLine(ControlChars.NewLine + &quot;Structures &#39;myVariable1&#39; and &quot; +  _\n                     &quot;&#39;myVariable2&#39; are equal&quot;)\n         Else\n            Console.WriteLine(ControlChars.NewLine + &quot;Structures &#39;myVariable1&#39; and &quot; + _\n                  &quot;&#39;myVariable2&#39; are not equal&quot;)\n         End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Int32_Equals#1\">      Int32 myVariable1 = 60;\n      Int32 myVariable2 = 60;\n      \n      // Get and display the declaring type.\n      Console::WriteLine( &quot;<br>Type of &#39;myVariable1&#39; is &#39;{0}&#39; and  value is : {1}&quot;, myVariable1.GetType(), myVariable1 );\n      Console::WriteLine( &quot;Type of &#39;myVariable2&#39; is &#39;{0}&#39; and  value is : {1}&quot;, myVariable2.GetType(), myVariable2 );\n      \n      // Compare &#39;myVariable1&#39; instance with &#39;myVariable2&#39; Object.\n      if ( myVariable1.Equals( myVariable2 ) )\n            Console::WriteLine( &quot;<br>Structures &#39;myVariable1&#39; and &#39;myVariable2&#39; are equal&quot; );\n      else\n            Console::WriteLine( &quot;<br>Structures &#39;myVariable1&#39; and &#39;myVariable2&#39; are not equal&quot; );\n      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_GetHashCode\">\r\n    \r\n            <a id=\"System_Int32_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_GetTypeCode\">\r\n    \r\n            <a id=\"System_Int32_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Int32_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its 32-bit signed integer equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign]digits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ws</td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td>sign</td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td>digits</td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements that can be present in <code>s</code>, use either the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles)</a> or the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string using the formatting information of some other culture, use the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles,IFormatProvider)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to convert a string value into a 32-bit signed integer value using the Parse method. The resulting integer value is then displayed to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.Parse#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^&gt;^ values = { &quot;+13230&quot;, &quot;-0&quot;, &quot;1,390,146&quot;, &quot;$190,235,421,127&quot;,\n                              &quot;0xFA1B&quot;, &quot;163042&quot;, &quot;-10&quot;, &quot;007&quot;, &quot;2147483647&quot;, \n                              &quot;2147483648&quot;, &quot;16e07&quot;, &quot;134985.0&quot;, &quot;-12034&quot;,\n                              &quot;-2147483648&quot;, &quot;-2147483649&quot; };\n   for each (String^ value in values)\n   {\n      try {\n         Int32 number = Int32::Parse(value); \n         Console::WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);\n      }\n      catch (FormatException^ e) {\n         Console::WriteLine(&quot;{0}: Bad Format&quot;, value);\n      }   \n      catch (OverflowException^ e) {\n         Console::WriteLine(&quot;{0}: Overflow&quot;, value);   \n      }  \n   }\n}\n// The example displays the following output:\n//       +13230 --&gt; 13230\n//       -0 --&gt; 0\n//       1,390,146: Bad Format\n//       $190,235,421,127: Bad Format\n//       0xFA1B: Bad Format\n//       163042 --&gt; 163042\n//       -10 --&gt; -10\n//       007 --&gt; 7\n//       2147483647 --&gt; 2147483647\n//       2147483648: Overflow\n//       16e07: Bad Format\n//       134985.0: Bad Format\n//       -12034 --&gt; -12034\n//       -2147483648 --&gt; -2147483648\n//       -2147483649: Overflow      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.Parse#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;+13230&quot;, &quot;-0&quot;, &quot;1,390,146&quot;, &quot;$190,235,421,127&quot;,\n                          &quot;0xFA1B&quot;, &quot;163042&quot;, &quot;-10&quot;, &quot;007&quot;, &quot;2147483647&quot;, \n                          &quot;2147483648&quot;, &quot;16e07&quot;, &quot;134985.0&quot;, &quot;-12034&quot;,\n                          &quot;-2147483648&quot;, &quot;-2147483649&quot; };\n      foreach (string value in values)\n      {\n         try {\n            int number = Int32.Parse(value); \n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;{0}: Bad Format&quot;, value);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0}: Overflow&quot;, value);   \n         }  \n      }\n   }\n}\n// The example displays the following output:\n//       +13230 --&gt; 13230\n//       -0 --&gt; 0\n//       1,390,146: Bad Format\n//       $190,235,421,127: Bad Format\n//       0xFA1B: Bad Format\n//       163042 --&gt; 163042\n//       -10 --&gt; -10\n//       007 --&gt; 7\n//       2147483647 --&gt; 2147483647\n//       2147483648: Overflow\n//       16e07: Bad Format\n//       134985.0: Bad Format\n//       -12034 --&gt; -12034\n//       -2147483648 --&gt; -2147483648\n//       -2147483649: Overflow      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Parse#1\">Module Example\n   Public Sub Main()\n      Dim values() As String = { &quot;+13230&quot;, &quot;-0&quot;, &quot;1,390,146&quot;, &quot;$190,235,421,127&quot;,\n                                 &quot;0xFA1B&quot;, &quot;163042&quot;, &quot;-10&quot;, &quot;007&quot;, &quot;2147483647&quot;, \n                                 &quot;2147483648&quot;, &quot;16e07&quot;, &quot;134985.0&quot;, &quot;-12034&quot;,\n                                 &quot;-2147483648&quot;, &quot;-2147483649&quot;  }\n      For Each value As String In values\n         Try\n            Dim number As Integer = Int32.Parse(value) \n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;{0}: Bad Format&quot;, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0}: Overflow&quot;, value)   \n         End Try  \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       +13230 --&gt; 13230\n&#39;       -0 --&gt; 0\n&#39;       1,390,146: Bad Format\n&#39;       $190,235,421,127: Bad Format\n&#39;       0xFA1B: Bad Format\n&#39;       163042 --&gt; 163042\n&#39;       -10 --&gt; -10\n&#39;       007 --&gt; 7\n&#39;       2147483647 --&gt; 2147483647\n&#39;       2147483648: Overflow\n&#39;       16e07: Bad Format\n&#39;       134985.0: Bad Format\n&#39;       -12034 --&gt; -12034\n&#39;       -2147483648 --&gt; -2147483648\n&#39;       -2147483649: Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Parse_System_String_System_Globalization_NumberStyles_\">\r\n    \r\n            <a id=\"System_Int32_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Parse (string s, System.Globalization.NumberStyles style);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to the number specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in a format compliant with <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> -or-  </p>\n<p> <code>s</code> includes non-zero, fractional digits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space, the positive or negative sign symbol, or the thousands separator symbol) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]  </p>\n<p> Or, if <code>style</code> includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the current culture. The current culture&#39;s currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em><br><br> <em>fractional_digits</em><br><br> <em>exponential_digits</em></td>\n<td>A sequence of digits from 0 through 9. For <em>fractional_digits</em>, only the digit 0 is valid.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol. The current culture&#39;s thousands separator can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <em>fractional_digits</em> includes any other digit, an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The &#39;e&#39; or &#39;E&#39; character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point ( <em>.</em> ) and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The thousands separator ( <em>,</em> ) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All. The <code>s</code> parameter cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the decimal point ( <em>.</em> ) symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, thousands separator ( <em>,</em> ), and decimal point ( <em>.</em> ) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All styles, except <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;C9AF3&quot; parses successfully, but &quot;0xC9AF3&quot; does not. The only other flags that can be combined with the <code>s</code> parameter it are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration includes a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles,IFormatProvider)</a> overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to parse the string representations of several <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values. The current culture for the example is en-US.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.Parse#2\">using System;\nusing System.Globalization;\n\npublic class ParseInt32\n{\n   public static void Main()\n   {\n      Convert(&quot;104.0&quot;, NumberStyles.AllowDecimalPoint);\n      Convert(&quot;104.9&quot;, NumberStyles.AllowDecimalPoint);\n      Convert(&quot; $17,198,064.42&quot;, NumberStyles.AllowCurrencySymbol |\n                                 NumberStyles.Number);\n      Convert(&quot;103E06&quot;, NumberStyles.AllowExponent);\n      Convert(&quot;-1,345,791&quot;, NumberStyles.AllowThousands);\n      Convert(&quot;(1,345,791)&quot;, NumberStyles.AllowThousands |\n                             NumberStyles.AllowParentheses);\n   }\n\n   private static void Convert(string value, NumberStyles style)\n   {\n      try\n      {\n         int number = Int32.Parse(value, style);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value);   \n      }\n   }\n}\n// The example displays the following output to the console:\n//       Converted &#39;104.0&#39; to 104.\n//       &#39;104.9&#39; is out of range of the Int32 type.\n//       &#39; $17,198,064.42&#39; is out of range of the Int32 type.\n//       Converted &#39;103E06&#39; to 103000000.\n//       Unable to convert &#39;-1,345,791&#39;.\n//       Converted &#39;(1,345,791)&#39; to -1345791.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Int32.Parse#2\">using namespace System;\nusing namespace System::Globalization;\n\npublic ref class ParseInt32\n{\npublic:\n   static void Main()\n   {\n      Convert(&quot;104.0&quot;, NumberStyles::AllowDecimalPoint);\n      Convert(&quot;104.9&quot;, NumberStyles::AllowDecimalPoint);\n      Convert(&quot; $17,198,064.42&quot;, NumberStyles::AllowCurrencySymbol |\n                                 NumberStyles::Number);\n      Convert(&quot;103E06&quot;, NumberStyles::AllowExponent);\n      Convert(&quot;-1,345,791&quot;, NumberStyles::AllowThousands);\n      Convert(&quot;(1,345,791)&quot;, NumberStyles::AllowThousands |\n                             NumberStyles::AllowParentheses);\n   }\n\nprivate:\n   static void Convert(String^ value, NumberStyles style)\n   {\n      try\n      {\n         int number = Int32::Parse(value, style);\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException^)\n      {\n         Console::WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      }\n      catch (OverflowException^)\n      {\n         Console::WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value);\n      }\n   }\n};\n\nint main()\n{\n    ParseInt32::Main();\n}\n// The example displays the following output to the console:\n//       Converted &#39;104.0&#39; to 104.\n//       &#39;104.9&#39; is out of range of the Int32 type.\n//       &#39; $17,198,064.42&#39; is out of range of the Int32 type.\n//       Converted &#39;103E06&#39; to 103000000.\n//       Unable to convert &#39;-1,345,791&#39;.\n//       Converted &#39;(1,345,791)&#39; to -1345791.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Parse#2\">Imports System.Globalization\n\nModule ParseInt32\n   Public Sub Main()\n      Convert(&quot;104.0&quot;, NumberStyles.AllowDecimalPoint)    \n      Convert(&quot;104.9&quot;, NumberStyles.AllowDecimalPoint)\n      Convert(&quot; $17,198,064.42&quot;, NumberStyles.AllowCurrencySymbol Or _\n                                 NumberStyles.Number)\n      Convert(&quot;103E06&quot;, NumberStyles.AllowExponent)  \n      Convert(&quot;-1,345,791&quot;, NumberStyles.AllowThousands)\n      Convert(&quot;(1,345,791)&quot;, NumberStyles.AllowThousands Or _\n                             NumberStyles.AllowParentheses)\n   End Sub\n   \n   Private Sub Convert(value As String, style As NumberStyles)\n      Try\n         Dim number As Integer = Int32.Parse(value, style)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value)   \n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Converted &#39;104.0&#39; to 104.\n&#39;       &#39;104.9&#39; is out of range of the Int32 type.\n&#39;       &#39; $17,198,064.42&#39; is out of range of the Int32 type.\n&#39;       Converted &#39;103E06&#39; to 103000000.\n&#39;       Unable to convert &#39;-1,345,791&#39;.\n&#39;       Converted &#39;(1,345,791)&#39; to -1345791.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Parse_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Parse (string s, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to the number specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the Parse method is typically used to convert text that can be formatted in a variety of ways to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.  </p>\n<p> The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign]digits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information about the format of <code>s</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is the button click event handler of a Web form. It uses the array returned by the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_UserLanguages_\" data-linktype=\"relative-path\">UserLanguages</a> property to determine the user&#39;s locale. It then instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that corresponds to that locale. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that belongs to that <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object is then passed to the Parse method to convert the user&#39;s input to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"ParseMethod#4\">protected void OkToInteger_Click(object sender, EventArgs e)\n{\n   string locale;\n   int number;\n   CultureInfo culture;\n\n   // Return if string is empty\n   if (String.IsNullOrEmpty(this.inputNumber.Text))\n      return;\n\n   // Get locale of web request to determine possible format of number\n   if (Request.UserLanguages.Length == 0)\n      return;\n   locale = Request.UserLanguages[0];\n   if (String.IsNullOrEmpty(locale))\n      return;\n\n  // Instantiate CultureInfo object for the user&#39;s locale\n   culture = new CultureInfo(locale);\n\n   // Convert user input from a string to a number\n   try\n   {\n      number = Int32.Parse(this.inputNumber.Text, culture.NumberFormat);\n   }\n   catch (FormatException)\n   {\n      return;\n   }\n   catch (Exception)\n   {\n      return;\n   }\n   // Output number to label on web form\n   this.outputNumber.Text = &quot;Number is &quot; + number.ToString();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ParseMethod#4\">Protected Sub OkToInteger_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles OkToInteger.Click\n   Dim locale As String\n   Dim culture As CultureInfo\n   Dim number As Integer\n\n   &#39; Return if string is empty\n   If String.IsNullOrEmpty(Me.inputNumber.Text) Then Exit Sub\n\n   &#39; Get locale of web request to determine possible format of number\n   If Request.UserLanguages.Length = 0 Then Exit Sub\n   locale = Request.UserLanguages(0)\n   If String.IsNullOrEmpty(locale) Then Exit Sub\n\n   &#39; Instantiate CultureInfo object for the user&#39;s locale\n   culture = New CultureInfo(locale)\n\n   &#39; Convert user input from a string to a number\n   Try\n      number = Int32.Parse(Me.inputNumber.Text, culture.NumberFormat)\n   Catch ex As FormatException\n      Exit Sub\n   Catch ex As Exception\n      Exit Sub\n   End Try\n\n   &#39; Output number to label on web form\n   Me.outputNumber.Text = &quot;Number is &quot; &amp; number.ToString()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific information about the format of <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to the number specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in a format compliant with <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> -or-  </p>\n<p> <code>s</code> includes non-zero, fractional digits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space or the positive sign) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign][digits,]digits[.fractional_digist][e[sign]exponential_digits][ws]  </p>\n<p> Or, if <code>style</code> includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em><br><br> <em>fractional_digits</em><br><br> <em>exponential_digits</em></td>\n<td>A sequence of digits from 0 through 9. For <em>fractional_digits</em>, only the digit 0 is valid.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol. The thousands separator of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.<br><br> Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <em>fractional_digits</em> includes any other digit, an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The &#39;e&#39; or &#39;E&#39; character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully if it is in the range of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite NumberStyles values</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The decimal point ( <em>.</em> ) and <em>fractional-digits</em> elements. However, <em>fractional-digits</em> must consist of only one or more 0 digits or an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation. If <code>s</code> represents a number in exponential notation, it must represent an integer within the range of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> data type without a non-zero, fractional component.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The thousands separator ( <em>,</em> ) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;C9AF3&quot; parses successfully, but &quot;0xC9AF3&quot; does not. The only other flags that can be present in <code>style</code> are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration has a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a variety of <code>style</code> and <code>provider</code> parameters to parse the string representations of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values. It also illustrates some of the different ways the same string can be interpreted depending on the culture whose formatting information is used for the parsing operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.Parse#3\">using namespace System;\nusing namespace System::Globalization;\n\npublic ref class ParseInt32\n{\npublic:\n   static void Main()\n   {\n      Convert(&quot;12,000&quot;, NumberStyles::Float | NumberStyles::AllowThousands, \n              gcnew CultureInfo(&quot;en-GB&quot;));\n      Convert(&quot;12,000&quot;, NumberStyles::Float | NumberStyles::AllowThousands,\n              gcnew CultureInfo(&quot;fr-FR&quot;));\n      Convert(&quot;12,000&quot;, NumberStyles::Float, gcnew CultureInfo(&quot;en-US&quot;));\n\n      Convert(&quot;12 425,00&quot;, NumberStyles::Float | NumberStyles::AllowThousands,\n              gcnew CultureInfo(&quot;sv-SE&quot;));\n      Convert(&quot;12,425.00&quot;, NumberStyles::Float | NumberStyles::AllowThousands,\n              NumberFormatInfo::InvariantInfo);\n      Convert(&quot;631,900&quot;, NumberStyles::Integer | NumberStyles::AllowDecimalPoint, \n              gcnew CultureInfo(&quot;fr-FR&quot;));\n      Convert(&quot;631,900&quot;, NumberStyles::Integer | NumberStyles::AllowDecimalPoint,\n              gcnew CultureInfo(&quot;en-US&quot;));\n      Convert(&quot;631,900&quot;, NumberStyles::Integer | NumberStyles::AllowThousands,\n              gcnew CultureInfo(&quot;en-US&quot;));\n   }\n\nprivate:\n   static void Convert(String^ value, NumberStyles style,\n                               IFormatProvider^ provider)\n   {\n      try\n      {\n         int number = Int32::Parse(value, style, provider);\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException^)\n      {\n         Console::WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      }\n      catch (OverflowException^)\n      {\n         Console::WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value);   \n      }\n   }                               \n};\n\nint main()\n{\n    ParseInt32::Main();\n}\n// This example displays the following output to the console:\n//       Converted &#39;12,000&#39; to 12000.\n//       Converted &#39;12,000&#39; to 12.\n//       Unable to convert &#39;12,000&#39;.\n//       Converted &#39;12 425,00&#39; to 12425.\n//       Converted &#39;12,425.00&#39; to 12425.\n//       &#39;631,900&#39; is out of range of the Int32 type.\n//       Unable to convert &#39;631,900&#39;.\n//       Converted &#39;631,900&#39; to 631900.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.Parse#3\">using System;\nusing System.Globalization;\n\npublic class ParseInt32\n{\n   public static void Main()\n   {\n      Convert(&quot;12,000&quot;, NumberStyles.Float | NumberStyles.AllowThousands, \n              new CultureInfo(&quot;en-GB&quot;));\n      Convert(&quot;12,000&quot;, NumberStyles.Float | NumberStyles.AllowThousands,\n              new CultureInfo(&quot;fr-FR&quot;));\n      Convert(&quot;12,000&quot;, NumberStyles.Float, new CultureInfo(&quot;en-US&quot;));\n      \n      Convert(&quot;12 425,00&quot;, NumberStyles.Float | NumberStyles.AllowThousands,\n              new CultureInfo(&quot;sv-SE&quot;));\n      Convert(&quot;12,425.00&quot;, NumberStyles.Float | NumberStyles.AllowThousands,\n              NumberFormatInfo.InvariantInfo);\n      Convert(&quot;631,900&quot;, NumberStyles.Integer | NumberStyles.AllowDecimalPoint, \n              new CultureInfo(&quot;fr-FR&quot;));\n      Convert(&quot;631,900&quot;, NumberStyles.Integer | NumberStyles.AllowDecimalPoint,\n              new CultureInfo(&quot;en-US&quot;));\n      Convert(&quot;631,900&quot;, NumberStyles.Integer | NumberStyles.AllowThousands,\n              new CultureInfo(&quot;en-US&quot;));\n   }\n\n   private static void Convert(string value, NumberStyles style, \n                               IFormatProvider provider)\n   {\n      try\n      {\n         int number = Int32.Parse(value, style, provider);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value);   \n      }\n   }                               \n}\n// This example displays the following output to the console:\n//       Converted &#39;12,000&#39; to 12000.\n//       Converted &#39;12,000&#39; to 12.\n//       Unable to convert &#39;12,000&#39;.\n//       Converted &#39;12 425,00&#39; to 12425.\n//       Converted &#39;12,425.00&#39; to 12425.\n//       &#39;631,900&#39; is out of range of the Int32 type.\n//       Unable to convert &#39;631,900&#39;.\n//       Converted &#39;631,900&#39; to 631900.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.Parse#3\">Imports System.Globalization\n\nModule ParseInt32\n   Public Sub Main()\n      Convert(&quot;12,000&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, _\n              New CultureInfo(&quot;en-GB&quot;))      \n      Convert(&quot;12,000&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, _\n              New CultureInfo(&quot;fr-FR&quot;))\n      Convert(&quot;12,000&quot;, NumberStyles.Float, New CultureInfo(&quot;en-US&quot;))\n      \n      Convert(&quot;12 425,00&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, _\n              New CultureInfo(&quot;sv-SE&quot;)) \n      Convert(&quot;12,425.00&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, _\n              NumberFormatInfo.InvariantInfo) \n      Convert(&quot;631,900&quot;, NumberStyles.Integer Or NumberStyles.AllowDecimalPoint, _ \n              New CultureInfo(&quot;fr-FR&quot;))\n      Convert(&quot;631,900&quot;, NumberStyles.Integer Or NumberStyles.AllowDecimalPoint, _\n              New CultureInfo(&quot;en-US&quot;))\n      Convert(&quot;631,900&quot;, NumberStyles.Integer Or NumberStyles.AllowThousands, _\n              New CultureInfo(&quot;en-US&quot;))\n   End Sub\n\n   Private Sub Convert(value As String, style As NumberStyles, _\n                       provider As IFormatProvider)\n      Try\n         Dim number As Integer = Int32.Parse(value, style, provider)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of the Int32 type.&quot;, value)   \n      End Try\n   End Sub                       \nEnd Module\n&#39; This example displays the following output to the console:\n&#39;       Converted &#39;12,000&#39; to 12000.\n&#39;       Converted &#39;12,000&#39; to 12.\n&#39;       Unable to convert &#39;12,000&#39;.\n&#39;       Converted &#39;12 425,00&#39; to 12425.\n&#39;       Converted &#39;12,425.00&#39; to 12425.\n&#39;       &#39;631,900&#39; is out of range of the Int32 type.\n&#39;       Unable to convert &#39;631,900&#39;.\n&#39;       Converted &#39;631,900&#39; to 631900.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_ToString\">\r\n    \r\n            <a id=\"System_Int32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value in the default (&quot;G&quot;, or general) format by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture. If you want to specify a different format or culture, use the other overloads of the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value using the default ToString method. It also displays the string representations of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that results from using a number of standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.ToString#1\">using namespace System;\n\nvoid main()\n{\n    int value = -16325;\n    // Display value using default ToString method.\n    Console::WriteLine(value.ToString());             \n    // Display value using some standard format specifiers.\n    Console::WriteLine(value.ToString(&quot;G&quot;));         \n    Console::WriteLine(value.ToString(&quot;C&quot;));         \n    Console::WriteLine(value.ToString(&quot;D&quot;));         \n    Console::WriteLine(value.ToString(&quot;F&quot;));         \n    Console::WriteLine(value.ToString(&quot;N&quot;));         \n    Console::WriteLine(value.ToString(&quot;X&quot;));              \n}\n// The example displays the following output:\n//     -16325\n//     -16325\n//     ($16,325.00)\n//     -16325\n//     -16325.00\n//     -16,325.00\n//     FFFFC03B\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.ToString#1\">      Dim value As Integer = -16325\n      &#39; Display value using default ToString method.\n      Console.WriteLine(value.ToString())            &#39; Displays -16325\n      &#39; Display value using some standard format specifiers.\n      Console.WriteLine(value.ToString(&quot;G&quot;))         &#39; Displays -16325\n      Console.WriteLine(value.ToString(&quot;C&quot;))         &#39; Displays ($16,325.00)\n      Console.WriteLine(value.ToString(&quot;D&quot;))         &#39; Displays -16325\n      Console.WriteLine(value.ToString(&quot;F&quot;))         &#39; Displays -16325.00\n      Console.WriteLine(value.ToString(&quot;N&quot;))         &#39; Displays -16,325.00\n      Console.WriteLine(value.ToString(&quot;X&quot;))         &#39; Displays FFFFC03B      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.ToString#1\">      int value = -16325;\n      // Display value using default ToString method.\n      Console.WriteLine(value.ToString());            // Displays -16325\n      // Display value using some standard format specifiers.\n      Console.WriteLine(value.ToString(&quot;G&quot;));         // Displays -16325\n      Console.WriteLine(value.ToString(&quot;C&quot;));         // Displays ($16,325.00)\n      Console.WriteLine(value.ToString(&quot;D&quot;));         // Displays -16325\n      Console.WriteLine(value.ToString(&quot;F&quot;));         // Displays -16325.00\n      Console.WriteLine(value.ToString(&quot;N&quot;));         // Displays -16,325.00\n      Console.WriteLine(value.ToString(&quot;X&quot;));         // Displays FFFFC03B      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value in the default (&quot;G&quot;, or general) format by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>provider</code> parameter is an object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the string that is returned by this method. The object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting rules are to be used.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that contains specific numeric formatting information for this value.  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> and whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object cannot be obtained from <code>provider</code>, the return value is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the thread current culture. For information about the thread current culture, see <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.  </p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the string representation of an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value using <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects that represent several different cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.ToString#2\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n    int value = -16325;\n    // Display value using the invariant culture.\n    Console::WriteLine(value.ToString(CultureInfo::InvariantCulture));\n    // Display value using the en-GB culture.\n    Console::WriteLine(value.ToString(CultureInfo::CreateSpecificCulture(&quot;en-GB&quot;)));\n    // Display value using the de-DE culture.\n    Console::WriteLine(value.ToString(CultureInfo::CreateSpecificCulture(&quot;de-DE&quot;)));\n}\n// The example displays the following output:\n//       -16325\n//       -16325\n//       -16325\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.ToString#2\">      Dim value As Integer = -16325\n      &#39; Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture))\n      &#39; Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)))\n      &#39; Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)))\n      &#39; This example displays the following output to the console:\n      &#39;       -16325\n      &#39;       -16325\n      &#39;       -16325\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.ToString#2\">      int value = -16325;\n      // Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture));\n      // Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)));\n      // Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)));\n      // This example displays the following output to the console:\n      //       -16325\n      //       -16325\n      //       -16325\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Int32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid or not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value in a specified format by using a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that represents the conventions of the current culture. If you want to use the default (&quot;G&quot;, or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>format</code> parameter can be any valid standard numeric format specifier except for &quot;R&quot;, as well as any combination of custom numeric format specifiers. If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the return value of this instance is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The return value of this instance is formatted with the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value using each of the supported standard numeric format specifiers, together with two custom numeric format strings. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.ToString#3\">using namespace System;\n\nvoid main()\n{\n    int value = -16325;\n    String^ specifier;\n    \n    // Use standard numeric format specifiers.\n    specifier = &quot;G&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;C&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;D8&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;E4&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;e3&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;F&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;N&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;P&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, (value/100000).ToString(specifier));\n\n    specifier = &quot;X&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n    \n    // Use custom numeric format specifiers.\n    specifier = &quot;0,0.000&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n\n    specifier = &quot;#,#.00#;(#,#.00#)&quot;;\n    Console::WriteLine(&quot;{0}: {1}&quot;, specifier, (value*-1).ToString(specifier));\n}   \n// The example displays the following output:\n//     G: -16325\n//     C: ($16,325.00)\n//     D8: -00016325\n//     E4: -1.6325E+004\n//     e3: -1.633e+004\n//     F: -16325.00\n//     N: -16,325.00\n//     P: 0.00 %\n//     X: FFFFC03B\n//     0,0.000: -16,325.000\n//     #,#.00#;(#,#.00#): 16,325.00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.ToString#3\">      Dim value As Integer = -16325\n      Dim specifier As String\n      \n      &#39; Use standard numeric format specifier.\n      specifier = &quot;G&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    G: -16325\n      specifier = &quot;C&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    C: ($16,325.00)\n      specifier = &quot;D8&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    D8: -00016325\n      specifier = &quot;E4&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    E4: -1.6325E+004\n      specifier = &quot;e3&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    e3: -1.633e+004\n      specifier = &quot;F&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    F: -16325.00\n      specifier = &quot;N&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    N: -16,325.00\n      specifier = &quot;P&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value/100000).ToString(specifier))\n      &#39; Displays:    P: -16.33 %\n      specifier = &quot;X&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    X: FFFFC03B \n      \n      &#39; Use custom numeric format specifiers.\n      specifier = &quot;0,0.000&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    0,0.000: -16,325.000\n      specifier = &quot;#,#.00#;(#,#.00#)&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value*-1).ToString(specifier))\n      &#39; Displays:    #,#.00#;(#,#.00#): 16,325.00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.ToString#3\">      int value = -16325;\n      string specifier;\n      \n      // Use standard numeric format specifier.\n      specifier = &quot;G&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    G: -16325\n      specifier = &quot;C&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    C: ($16,325.00)\n      specifier = &quot;D8&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    D8: -00016325\n      specifier = &quot;E4&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    E4: -1.6325E+004\n      specifier = &quot;e3&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    e3: -1.633e+004\n      specifier = &quot;F&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    F: -16325.00\n      specifier = &quot;N&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    N: -16,325.00\n      specifier = &quot;P&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value/100000).ToString(specifier));\n      // Displays:    P: -16.33 %\n      specifier = &quot;X&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    X: FFFFC03B \n      \n      // Use custom numeric format specifiers.\n      specifier = &quot;0,0.000&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    0,0.000: -16,325.000\n      specifier = &quot;#,#.00#;(#,#.00#)&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value*-1).ToString(specifier));\n      // Displays:    #,#.00#;(#,#.00#): 16,325.00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code> and <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid or not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value in a specified format by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of a specified culture. If you want to use default format or culture settings, use the other overloads of the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>format</code> parameter can be either a standard or a custom numeric format string. All standard numeric format strings other than &quot;R&quot; (or &quot;r&quot;) are supported, as are all custom numeric format characters. If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the return value for this instance is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The <code>provider</code> parameter is an object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific format information about the format of the string that is returned by this method. The object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting rules are to be used.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that contains specific numeric formatting information for this value.  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> and whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object cannot be obtained from <code>provider</code>, the return value for this instance is formatted with the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture.  </p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays a positive and a negative value using each of the supported standard numeric format specifiers for three different cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.ToString#4\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n    // Define cultures whose formatting conventions are to be used.\n    array&lt;CultureInfo^&gt;^ cultures = { CultureInfo::CreateSpecificCulture(&quot;en-US&quot;), \n                                      CultureInfo::CreateSpecificCulture(&quot;fr-FR&quot;), \n                                      CultureInfo::CreateSpecificCulture(&quot;es-ES&quot;) };\n    int positiveNumber = 1679;\n    int negativeNumber = -3045;\n    array&lt;String^&gt;^ specifiers = {&quot;G&quot;, &quot;C&quot;, &quot;D8&quot;, &quot;E2&quot;, &quot;F&quot;, &quot;N&quot;, &quot;P&quot;, &quot;X8&quot;}; \n    \n    for each (String^ specifier in specifiers)\n    {\n       for each (CultureInfo^ culture in cultures)\n       {\n          // Display values with &quot;G&quot; format specifier.\n          Console::WriteLine(&quot;{0} format using {1} culture: {2, 16} {3, 16}&quot;,  \n                            specifier, culture-&gt;Name, \n                            positiveNumber.ToString(specifier, culture), \n                            negativeNumber.ToString(specifier, culture));\n       }\n       Console::WriteLine();\n    }\n}\n// The example displays the following output:\n//       G format using en-US culture:             1679            -3045\n//       G format using fr-FR culture:             1679            -3045\n//       G format using es-ES culture:             1679            -3045\n//       \n//       C format using en-US culture:        $1,679.00      ($3,045.00)\n//       C format using fr-FR culture:       1&#160;679,00 â‚¬      -3&#160;045,00 â‚¬\n//       C format using es-ES culture:       1.679,00 â‚¬      -3.045,00 â‚¬\n//       \n//       D8 format using en-US culture:         00001679        -00003045\n//       D8 format using fr-FR culture:         00001679        -00003045\n//       D8 format using es-ES culture:         00001679        -00003045\n//       \n//       E2 format using en-US culture:        1.68E+003       -3.05E+003\n//       E2 format using fr-FR culture:        1,68E+003       -3,05E+003\n//       E2 format using es-ES culture:        1,68E+003       -3,05E+003\n//       \n//       F format using en-US culture:          1679.00         -3045.00\n//       F format using fr-FR culture:          1679,00         -3045,00\n//       F format using es-ES culture:          1679,00         -3045,00\n//       \n//       N format using en-US culture:         1,679.00        -3,045.00\n//       N format using fr-FR culture:         1&#160;679,00        -3&#160;045,00\n//       N format using es-ES culture:         1.679,00        -3.045,00\n//       \n//       P format using en-US culture:     167,900.00 %    -304,500.00 %\n//       P format using fr-FR culture:     167&#160;900,00 %    -304&#160;500,00 %\n//       P format using es-ES culture:     167.900,00 %    -304.500,00 %\n//       \n//       X8 format using en-US culture:         0000068F         FFFFF41B\n//       X8 format using fr-FR culture:         0000068F         FFFFF41B\n//       X8 format using es-ES culture:         0000068F         FFFFF41B\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.ToString#4\">      &#39; Define cultures whose formatting conventions are to be used.\n      Dim cultures() As CultureInfo = {CultureInfo.CreateSpecificCulture(&quot;en-US&quot;), _\n                                       CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;), _\n                                       CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;) }\n      Dim positiveNumber As Integer = 1679\n      Dim negativeNumber As Integer = -3045\n      Dim specifiers() As String = {&quot;G&quot;, &quot;C&quot;, &quot;D8&quot;, &quot;E2&quot;, &quot;F&quot;, &quot;N&quot;, &quot;P&quot;, &quot;X8&quot;} \n      \n      For Each specifier As String In specifiers\n         For Each culture As CultureInfo In Cultures\n            &#39; Display values with &quot;G&quot; format specifier.\n            Console.WriteLine(&quot;{0} format using {1} culture: {2, 16} {3, 16}&quot;, _ \n                              specifier, culture.Name, _\n                              positiveNumber.ToString(specifier, culture), _\n                              negativeNumber.ToString(specifier, culture))\n\n         Next\n         Console.WriteLine()\n      Next\n      &#39; The example displays the following output to the console:\n      &#39;       G format using en-US culture:             1679            -3045\n      &#39;       G format using fr-FR culture:             1679            -3045\n      &#39;       G format using es-ES culture:             1679            -3045\n      &#39;       \n      &#39;       C format using en-US culture:        $1,679.00      ($3,045.00)\n      &#39;       C format using fr-FR culture:       1&#160;679,00 â‚¬      -3&#160;045,00 â‚¬\n      &#39;       C format using es-ES culture:       1.679,00 â‚¬      -3.045,00 â‚¬\n      &#39;       \n      &#39;       D8 format using en-US culture:         00001679        -00003045\n      &#39;       D8 format using fr-FR culture:         00001679        -00003045\n      &#39;       D8 format using es-ES culture:         00001679        -00003045\n      &#39;       \n      &#39;       E2 format using en-US culture:        1.68E+003       -3.05E+003\n      &#39;       E2 format using fr-FR culture:        1,68E+003       -3,05E+003\n      &#39;       E2 format using es-ES culture:        1,68E+003       -3,05E+003\n      &#39;       \n      &#39;       F format using en-US culture:          1679.00         -3045.00\n      &#39;       F format using fr-FR culture:          1679,00         -3045,00\n      &#39;       F format using es-ES culture:          1679,00         -3045,00\n      &#39;       \n      &#39;       N format using en-US culture:         1,679.00        -3,045.00\n      &#39;       N format using fr-FR culture:         1&#160;679,00        -3&#160;045,00\n      &#39;       N format using es-ES culture:         1.679,00        -3.045,00\n      &#39;       \n      &#39;       P format using en-US culture:     167,900.00 %    -304,500.00 %\n      &#39;       P format using fr-FR culture:     167&#160;900,00 %    -304&#160;500,00 %\n      &#39;       P format using es-ES culture:     167.900,00 %    -304.500,00 %\n      &#39;       \n      &#39;       X8 format using en-US culture:         0000068F         FFFFF41B\n      &#39;       X8 format using fr-FR culture:         0000068F         FFFFF41B\n      &#39;       X8 format using es-ES culture:         0000068F         FFFFF41B\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.ToString#4\">      // Define cultures whose formatting conventions are to be used.\n      CultureInfo[] cultures = {CultureInfo.CreateSpecificCulture(&quot;en-US&quot;), \n                                CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;), \n                                CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;) };\n      int positiveNumber = 1679;\n      int negativeNumber = -3045;\n      string[] specifiers = {&quot;G&quot;, &quot;C&quot;, &quot;D8&quot;, &quot;E2&quot;, &quot;F&quot;, &quot;N&quot;, &quot;P&quot;, &quot;X8&quot;}; \n      \n      foreach (string specifier in specifiers)\n      {\n         foreach (CultureInfo culture in cultures)\n         {\n            // Display values with &quot;G&quot; format specifier.\n            Console.WriteLine(&quot;{0} format using {1} culture: {2, 16} {3, 16}&quot;,  \n                              specifier, culture.Name, \n                              positiveNumber.ToString(specifier, culture), \n                              negativeNumber.ToString(specifier, culture));\n         }\n         Console.WriteLine();\n      }\n      // The example displays the following output:\n      //       G format using en-US culture:             1679            -3045\n      //       G format using fr-FR culture:             1679            -3045\n      //       G format using es-ES culture:             1679            -3045\n      //       \n      //       C format using en-US culture:        $1,679.00      ($3,045.00)\n      //       C format using fr-FR culture:       1&#160;679,00 â‚¬      -3&#160;045,00 â‚¬\n      //       C format using es-ES culture:       1.679,00 â‚¬      -3.045,00 â‚¬\n      //       \n      //       D8 format using en-US culture:         00001679        -00003045\n      //       D8 format using fr-FR culture:         00001679        -00003045\n      //       D8 format using es-ES culture:         00001679        -00003045\n      //       \n      //       E2 format using en-US culture:        1.68E+003       -3.05E+003\n      //       E2 format using fr-FR culture:        1,68E+003       -3,05E+003\n      //       E2 format using es-ES culture:        1,68E+003       -3,05E+003\n      //       \n      //       F format using en-US culture:          1679.00         -3045.00\n      //       F format using fr-FR culture:          1679,00         -3045,00\n      //       F format using es-ES culture:          1679,00         -3045,00\n      //       \n      //       N format using en-US culture:         1,679.00        -3,045.00\n      //       N format using fr-FR culture:         1&#160;679,00        -3&#160;045,00\n      //       N format using es-ES culture:         1.679,00        -3.045,00\n      //       \n      //       P format using en-US culture:     167,900.00 %    -304,500.00 %\n      //       P format using fr-FR culture:     167&#160;900,00 %    -304&#160;500,00 %\n      //       P format using es-ES culture:     167.900,00 %    -304.500,00 %\n      //       \n      //       X8 format using en-US culture:         0000068F         FFFFF41B\n      //       X8 format using fr-FR culture:         0000068F         FFFFF41B\n      //       X8 format using es-ES culture:         0000068F         FFFFF41B\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_TryParse_System_String_System_Int32__\">\r\n    \r\n            <a id=\"System_Int32_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out int result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <code>s</code>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, is not of the correct format, or represents a number less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParse method is like the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except the TryParse method does not throw an exception if the conversion fails. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be successfully parsed.  </p>\n<p> The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign]digits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. In addition to the decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements together with the culture-specific formatting information that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Int32__\" data-linktype=\"relative-path\">System.Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)</a> method.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method interprets all digits in the <code>s</code> parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Int32__\" data-linktype=\"relative-path\">System.Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)</a> overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParse method with a number of different string values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Int32.TryParse#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] values = { null, &quot;160519&quot;, &quot;9432.0&quot;, &quot;16,667&quot;,\n                          &quot;   -322   &quot;, &quot;+4302&quot;, &quot;(100);&quot;, &quot;01FA&quot; };\n      foreach (var value in values) {\n         int number;\n   \n         bool result = Int32.TryParse(value, out number);\n         if (result)\n         {\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);         \n         }\n         else\n         {\n//            if (value == null) value = &quot;&quot;; \n            Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                               value == null ? &quot;&lt;null&gt;&quot; : value);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Attempted conversion of &#39;&lt;null&gt;&#39; failed.\n//       Converted &#39;160519&#39; to 160519.\n//       Attempted conversion of &#39;9432.0&#39; failed.\n//       Attempted conversion of &#39;16,667&#39; failed.\n//       Converted &#39;   -322   &#39; to -322.\n//       Converted &#39;+4302&#39; to 4302.\n//       Attempted conversion of &#39;(100);&#39; failed.\n//       Attempted conversion of &#39;01FA&#39; failed.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Int32.TryParse#1\">using namespace System;\n\n\n   void TryToParse(String^ value)\n   {\n      Int32 number;\n      bool result = Int32::TryParse(value, number);\n      if (result) {\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      else {\n         if (value == nullptr) value = &quot;&quot;;\n         Console::WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, value);\n      }\n   }\n\n\nvoid main()\n{\n      TryToParse(nullptr);\n      TryToParse(&quot;160519&quot;);\n      TryToParse(&quot;9432.0&quot;);\n      TryToParse(&quot;16,667&quot;);\n      TryToParse(&quot;   -322   &quot;);\n      TryToParse(&quot;+4302&quot;);\n      TryToParse(&quot;(100);&quot;);\n      TryToParse(&quot;01FA&quot;);\n}\n// The example displays the following output:\n//      Attempted conversion of &#39;&#39; failed.\n//      Converted &#39;160519&#39; to 160519.\n//      Attempted conversion of &#39;9432.0&#39; failed.\n//      Attempted conversion of &#39;16,667&#39; failed.\n//      Converted &#39;   -322   &#39; to -322.\n//      Converted &#39;+4302&#39; to 4302.\n//      Attempted conversion of &#39;(100);&#39; failed.\n//      Attempted conversion of &#39;01FA&#39; failed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.TryParse#1\">Module Example\n   Public Sub Main()\n      Dim values() As String = { Nothing, &quot;160519&quot;, &quot;9432.0&quot;, &quot;16,667&quot;,\n                                 &quot;   -322   &quot;, &quot;+4302&quot;, &quot;(100);&quot;, \n                                 &quot;01FA&quot; }\n\n      For Each value In values\n         Dim number As Integer\n    \n         Dim result As Boolean = Int32.TryParse(value, number)\n         If result Then\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n         Else\n            Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                              If(value Is Nothing, &quot;&lt;null&gt;&quot;, value))\n         End If     \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Attempted conversion of &#39;&lt;null&gt;&#39; failed.\n&#39;       Converted &#39;160519&#39; to 160519.\n&#39;       Attempted conversion of &#39;9432.0&#39; failed.\n&#39;       Attempted conversion of &#39;16,667&#39; failed.\n&#39;       Converted &#39;   -322   &#39; to -322.\n&#39;       Converted &#39;+4302&#39; to 4302.\n&#39;       Attempted conversion of &#39;(100)&#39; failed.\n&#39;       Attempted conversion of &#39;01FA&#39; failed.\n</code></pre><p> Some of the strings that the TryParse method is unable to convert in this example are:  </p>\n<ul>\n<li><p>&quot;9432.0&quot;. The conversion fails because the string cannot contain a decimal separator; it must contain integral digits only.  </p>\n</li>\n<li><p>&quot;16,667&quot;. The conversion fails because the string cannot contain group separators; it must contain integral digits only.  </p>\n</li>\n<li><p>&quot;(100)&quot;. The conversion fails because the string cannot contain a negative sign other than the one defined by the current culture&#39;s <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberNegativePattern_\" data-linktype=\"relative-path\">NumberNegativePattern</a> properties.  </p>\n</li>\n<li><p>&quot;01FA&quot;. The conversion fails because the string cannot contain hexadecimal digits; it must contain decimal digits only.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Int32__\">\r\n    \r\n            <a id=\"System_Int32_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,NumberStyles,IFormatProvider,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out int result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert. The string is interpreted using the style specified by <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <code>s</code>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, is not in a format compliant with <code>style</code>, or represents a number less than <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method is like the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except the TryParse method does not throw an exception if the conversion fails. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be parsed successfully.  </p>\n<p> The <code>style</code> parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign][digits,]digits[.fractional_digits][e[sign]digits][ws]  </p>\n<p> Or, if the <code>style</code> parameter includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Items in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. A sign symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> or <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flags.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits from 0 through 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator. The thousands separator of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional_digits</em></td>\n<td>One or more occurrences of the digit 0. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The &#39;e&#39; or &#39;E&#39; character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite NumberStyles values</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The decimal point (<em>.</em>) and <em>fractional_digits</em> elements. However, <em>fractional_digits</em> must consist of only one or more 0 digits or the method returns <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation. If <code>s</code> represents a number in exponential notation, it must represent an integer within the range of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> data type without a non-zero, fractional component.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A sign can appear before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A sign can appear after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The thousands separator (<em>,</em>) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>All elements. The <code>s</code> parameter cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the decimal point (<em>.</em>) symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em>, <em>sign</em>, thousands separator (<em>,</em>), and decimal point (<em>.</em>) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>All styles, except <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;C9AF3&quot; parses successfully, but &quot;0xC9AF3&quot; does not. The only other flags that can be present in <code>style</code> are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration has a composite style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object, whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>s</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParse method with a number of different string and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Int32.TryParse#2\">using namespace System;\nusing namespace System::Globalization;\n\nvoid CallTryParse(String^ stringToConvert, NumberStyles styles)\n{\n      Int32 number;\n      CultureInfo^ provider;\n\n      // If currency symbol is allowed, use en-US culture. \n      if (((Int32) (styles &amp; NumberStyles::AllowCurrencySymbol)) &gt; 0)\n         provider = gcnew CultureInfo(&quot;en-US&quot;);\n      else\n         provider = CultureInfo::InvariantCulture;\n\n      bool result = Int32::TryParse(stringToConvert, styles, \n                                   provider, number);\n      if (result)\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, number);\n      else\n         Console::WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                           Convert::ToString(stringToConvert));\n}\n\nvoid main()\n{\n      String^ numericString;\n      NumberStyles styles;\n\n      numericString = &quot;106779&quot;;\n      styles = NumberStyles::Integer;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;-30677&quot;;\n      styles = NumberStyles::None;\n      CallTryParse(numericString, styles);\n\n      styles = NumberStyles::AllowLeadingSign;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;301677-&quot;;\n      CallTryParse(numericString, styles);\n\n      styles = styles | NumberStyles::AllowTrailingSign;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;$10634&quot;;\n      styles = NumberStyles::Integer;\n      CallTryParse(numericString, styles);\n\n      styles = NumberStyles::Integer | NumberStyles::AllowCurrencySymbol;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;10345.00&quot;;\n      styles = NumberStyles::Integer | NumberStyles::AllowDecimalPoint;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;10345.72&quot;;\n      styles = NumberStyles::Integer | NumberStyles::AllowDecimalPoint;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;22,593&quot;; \n      styles = NumberStyles::Integer | NumberStyles::AllowThousands;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;12E-01&quot;;\n      styles = NumberStyles::Integer | NumberStyles::AllowExponent;\n      CallTryParse(numericString, styles); \n\n      numericString = &quot;12E03&quot;;\n      CallTryParse(numericString, styles); \n\n      numericString = &quot;80c1&quot;;\n      CallTryParse(numericString, NumberStyles::HexNumber);\n\n      numericString = &quot;0x80C1&quot;;\n      CallTryParse(numericString, NumberStyles::HexNumber);      \n      Console::ReadLine();\n}\n// The example displays the following output:\n//      Converted &#39;106779&#39; to 106779.\n//      Attempted conversion of &#39;-30677&#39; failed.\n//      Converted &#39;-30677&#39; to -30677.\n//      Attempted conversion of &#39;301677-&#39; failed.\n//      Converted &#39;301677-&#39; to -301677.\n//      Attempted conversion of &#39;$10634&#39; failed.\n//      Converted &#39;$10634&#39; to 10634.\n//      Converted &#39;10345.00&#39; to 10345.\n//      Attempted conversion of &#39;10345.72&#39; failed.\n//      Converted &#39;22,593&#39; to 22593.\n//      Attempted conversion of &#39;12E-01&#39; failed.\n//      Converted &#39;12E03&#39; to 12000.\n//      Converted &#39;80c1&#39; to 32961.\n//      Attempted conversion of &#39;0x80C1&#39; failed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Int32.TryParse#2\">Imports System.Globalization\n\nModule StringParsing\n   Public Sub Main()\n      Dim numericString As String\n      Dim styles As NumberStyles\n      \n      numericString = &quot;106779&quot;\n      styles = NumberStyles.Integer\n      CallTryParse(numericString, styles)\n      \n      numericString = &quot;-30677&quot;\n      styles = NumberStyles.None\n      CallTryParse(numericString, styles)\n      \n      styles = NumberStyles.AllowLeadingSign\n      CallTryParse(numericString, styles)\n      \n      numericString = &quot;301677-&quot;\n      CallTryParse(numericString, styles)\n      \n      styles = styles Or NumberStyles.AllowTrailingSign\n      CallTryParse(numericString, styles)\n      \n      numericString = &quot;$10634&quot;\n      styles = NumberStyles.Integer\n      CallTryParse(numericString, styles)\n      \n      styles = NumberStyles.Integer Or NumberStyles.AllowCurrencySymbol\n      CallTryParse(numericString, styles)\n\n      numericString = &quot;10345.00&quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowDecimalPoint\n      CallTryParse(numericString, styles)\n      \n      numericString = &quot;10345.72&quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowDecimalPoint\n      CallTryParse(numericString, styles)\n\n      numericString = &quot;22,593&quot; \n      styles = NumberStyles.Integer Or NumberStyles.AllowThousands\n      CallTryParse(numericString, styles)\n      \n      numericString = &quot;12E-01&quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowExponent\n      CallTryParse(numericString, styles) \n          \n      numericString = &quot;12E03&quot;\n      CallTryParse(numericString, styles) \n      \n      numericString = &quot;80c1&quot;\n      CallTryParse(numericString, NumberStyles.HexNumber)\n      \n      numericString = &quot;0x80C1&quot;\n      CallTryParse(numericString, NumberStyles.HexNumber)\n   End Sub\n   \n   Private Sub CallTryParse(stringToConvert As String, styles AS NumberStyles)\n      Dim number As Integer\n      Dim provider As CultureInfo\n      \n      &#39; If currency symbol is allowed, use en-US culture.\n      If CBool(styles And NumberStyles.AllowCurrencySymbol) Then\n         provider = CultureInfo.CurrentCulture\n      Else\n         provider = New CultureInfo(&quot;en-US&quot;)\n      End If\n      \n      Dim result As Boolean = Int32.TryParse(stringToConvert, styles, _\n                                             provider, number)\n      If result Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, number)\n      Else\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, _\n                           Convert.ToString(stringToConvert))\n      End If                                                                           \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Converted &#39;106779&#39; to 106779.\n&#39;       Attempted conversion of &#39;-30677&#39; failed.\n&#39;       Converted &#39;-30677&#39; to -30677.\n&#39;       Attempted conversion of &#39;301677-&#39; failed.\n&#39;       Converted &#39;301677-&#39; to -301677.\n&#39;       Attempted conversion of &#39;$10634&#39; failed.\n&#39;       Converted &#39;$10634&#39; to 10634.\n&#39;       Converted &#39;10345.00&#39; to 10345.\n&#39;       Attempted conversion of &#39;10345.72&#39; failed.\n&#39;       Converted &#39;22,593&#39; to 22593.\n&#39;       Attempted conversion of &#39;12E-01&#39; failed.\n&#39;       Converted &#39;12E03&#39; to 12000.\n&#39;       Converted &#39;80c1&#39; to 32961.\n&#39;       Attempted conversion of &#39;0x80C1&#39; failed.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Int32.TryParse#2\">using System;\nusing System.Globalization;\n\npublic class StringParsing\n{\n   public static void Main()\n   {\n      string numericString;\n      NumberStyles styles;\n      \n      numericString = &quot;106779&quot;;\n      styles = NumberStyles.Integer;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;-30677&quot;;\n      styles = NumberStyles.None;\n      CallTryParse(numericString, styles);\n      \n      styles = NumberStyles.AllowLeadingSign;\n      CallTryParse(numericString, styles);\n      \n      numericString = &quot;301677-&quot;;\n      CallTryParse(numericString, styles);\n      \n      styles = styles | NumberStyles.AllowTrailingSign;\n      CallTryParse(numericString, styles);\n      \n      numericString = &quot;$10634&quot;;\n      styles = NumberStyles.Integer;\n      CallTryParse(numericString, styles);\n      \n      styles = NumberStyles.Integer | NumberStyles.AllowCurrencySymbol;\n      CallTryParse(numericString, styles);\n      \n      numericString = &quot;10345.00&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowDecimalPoint;\n      CallTryParse(numericString, styles);\n      \n      numericString = &quot;10345.72&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowDecimalPoint;\n      CallTryParse(numericString, styles);\n\n      numericString = &quot;22,593&quot;; \n      styles = NumberStyles.Integer | NumberStyles.AllowThousands;\n      CallTryParse(numericString, styles);\n      \n      numericString = &quot;12E-01&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowExponent;\n      CallTryParse(numericString, styles); \n          \n      numericString = &quot;12E03&quot;;\n      CallTryParse(numericString, styles); \n      \n      numericString = &quot;80c1&quot;;\n      CallTryParse(numericString, NumberStyles.HexNumber);\n      \n      numericString = &quot;0x80C1&quot;;\n      CallTryParse(numericString, NumberStyles.HexNumber);      \n   }\n\n   private static void CallTryParse(string stringToConvert, NumberStyles styles)\n   {\n      int number;\n      CultureInfo provider;\n      \n      // If currency symbol is allowed, use en-US culture.\n      if ((styles &amp; NumberStyles.AllowCurrencySymbol) &gt; 0)\n         provider = new CultureInfo(&quot;en-US&quot;);\n      else\n         provider = CultureInfo.InvariantCulture;\n            \n      bool result = Int32.TryParse(stringToConvert, styles, \n                                   provider, out number);\n      if (result)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, number);\n      else\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                           Convert.ToString(stringToConvert));\n   }\n}\n// The example displays the following output to the console:\n//       Converted &#39;106779&#39; to 106779.\n//       Attempted conversion of &#39;-30677&#39; failed.\n//       Converted &#39;-30677&#39; to -30677.\n//       Attempted conversion of &#39;301677-&#39; failed.\n//       Converted &#39;301677-&#39; to -301677.\n//       Attempted conversion of &#39;$10634&#39; failed.\n//       Converted &#39;$10634&#39; to 10634.\n//       Converted &#39;10345.00&#39; to 10345.\n//       Attempted conversion of &#39;10345.72&#39; failed.\n//       Converted &#39;22,593&#39; to 22593.\n//       Attempted conversion of &#39;12E-01&#39; failed.\n//       Converted &#39;12E03&#39; to 12000.\n//       Converted &#39;80c1&#39; to 32961.\n//       Attempted conversion of &#39;0x80C1&#39; failed.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the current instance is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToByte(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToChar_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToChar(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_\" data-linktype=\"relative-path\">ToDecimal</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToDouble(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt16(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt64(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToSByte(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToSingle(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to which to convert this <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides information about the format of the returned value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Int32_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Int32_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Int32.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Int32.yml\">\r\n<meta name=\"APIName\" content=\"System.Int32\">\r\n<meta name=\"APIName\" content=\"System.Int32.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Int32.Equals\">\r\n<meta name=\"APIName\" content=\"System.Int32.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Int32.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Int32.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.Int32.MinValue\">\r\n<meta name=\"APIName\" content=\"System.Int32.Parse\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Int32.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Int32.ToString\">\r\n<meta name=\"APIName\" content=\"System.Int32.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"adf15696-9be4-a230-5cf9-913d6f28f04b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 32-bit signed integer.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Int32\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Int32.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Int32.yml","open_to_public_contributors":true,"api_name":["System.Int32","System.Int32.CompareTo","System.Int32.Equals","System.Int32.GetHashCode","System.Int32.GetTypeCode","System.Int32.MaxValue","System.Int32.MinValue","System.Int32.Parse","System.Int32.IConvertible.ToBoolean","System.Int32.IConvertible.ToByte","System.Int32.IConvertible.ToChar","System.Int32.IConvertible.ToDateTime","System.Int32.IConvertible.ToDecimal","System.Int32.IConvertible.ToDouble","System.Int32.IConvertible.ToInt16","System.Int32.IConvertible.ToInt32","System.Int32.IConvertible.ToInt64","System.Int32.IConvertible.ToSByte","System.Int32.IConvertible.ToSingle","System.Int32.IConvertible.ToType","System.Int32.IConvertible.ToUInt16","System.Int32.IConvertible.ToUInt32","System.Int32.IConvertible.ToUInt64","System.Int32.ToString","System.Int32.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Int32","System::Int32","System.Int32.CompareTo","System::Int32::CompareTo","System.Int32.Equals","System::Int32::Equals","System.Int32.GetHashCode","System::Int32::GetHashCode","System.Int32.GetTypeCode","System::Int32::GetTypeCode","System.Int32.MaxValue","System::Int32::MaxValue","System.Int32.MinValue","System::Int32::MinValue","System.Int32.Parse","System::Int32::Parse","System.Int32.System#IConvertible#ToBoolean","System::Int32::System#IConvertible#ToBoolean","System.Int32.System#IConvertible#ToByte","System::Int32::System#IConvertible#ToByte","System.Int32.System#IConvertible#ToChar","System::Int32::System#IConvertible#ToChar","System.Int32.System#IConvertible#ToDateTime","System::Int32::System#IConvertible#ToDateTime","System.Int32.System#IConvertible#ToDecimal","System::Int32::System#IConvertible#ToDecimal","System.Int32.System#IConvertible#ToDouble","System::Int32::System#IConvertible#ToDouble","System.Int32.System#IConvertible#ToInt16","System::Int32::System#IConvertible#ToInt16","System.Int32.System#IConvertible#ToInt32","System::Int32::System#IConvertible#ToInt32","System.Int32.System#IConvertible#ToInt64","System::Int32::System#IConvertible#ToInt64","System.Int32.System#IConvertible#ToSByte","System::Int32::System#IConvertible#ToSByte","System.Int32.System#IConvertible#ToSingle","System::Int32::System#IConvertible#ToSingle","System.Int32.System#IConvertible#ToType","System::Int32::System#IConvertible#ToType","System.Int32.System#IConvertible#ToUInt16","System::Int32::System#IConvertible#ToUInt16","System.Int32.System#IConvertible#ToUInt32","System::Int32::System#IConvertible#ToUInt32","System.Int32.System#IConvertible#ToUInt64","System::Int32::System#IConvertible#ToUInt64","System.Int32.ToString","System::Int32::ToString","System.Int32.TryParse","System::Int32::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"adf15696-9be4-a230-5cf9-913d6f28f04b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Int32.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Int32 struct | Microsoft Docs","_op_ogTitle":"Int32 struct","description":"Represents a 32-bit signed integer.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Int32","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.int32","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.int32","fileRelativePath":"System.Int32.html"},"themesRelativePathToOutputRoot":"_themes/"}