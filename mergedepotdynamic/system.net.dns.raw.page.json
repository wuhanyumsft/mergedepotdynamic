{"content":"    \r\n    <h1 id=\"System_Net_Dns\">\r\n      <span class=\"lang-csharp\">Dns</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides simple domain name resolution functionality.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Dns</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Dns</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  </p>\n<p> The host information from the DNS query is returned in an instance of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> class. If the specified host has more than one entry in the DNS database, <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> contains multiple IP addresses and aliases.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_BeginGetHostAddresses_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetHostAddresses(String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously returns the Internet Protocol (IP) addresses for the specified host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_BeginGetHostByName_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetHostByName(String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous request for <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> information about the specified DNS host name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_BeginGetHostEntry_System_Net_IPAddress_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetHostEntry(IPAddress,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_BeginGetHostEntry_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetHostEntry(String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_BeginResolve_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginResolve(String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous request to resolve a DNS host name or IP address to an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_EndGetHostAddresses_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetHostAddresses(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_EndGetHostByName_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetHostByName(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_EndGetHostEntry_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetHostEntry(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_EndResolve_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndResolve(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostAddresses_System_String_\" data-linktype=\"self-bookmark\">GetHostAddresses(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the Internet Protocol (IP) addresses for the specified host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostAddressesAsync_System_String_\" data-linktype=\"self-bookmark\">GetHostAddressesAsync(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostByAddress_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">GetHostByAddress(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance from the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostByAddress_System_String_\" data-linktype=\"self-bookmark\">GetHostByAddress(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance from an IP address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostByName_System_String_\" data-linktype=\"self-bookmark\">GetHostByName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the DNS information for the specified DNS host name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostEntry_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">GetHostEntry(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostEntry_System_String_\" data-linktype=\"self-bookmark\">GetHostEntry(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostEntryAsync_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">GetHostEntryAsync(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostEntryAsync_System_String_\" data-linktype=\"self-bookmark\">GetHostEntryAsync(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_GetHostName\" data-linktype=\"self-bookmark\">GetHostName()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the host name of the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Dns_Resolve_System_String_\" data-linktype=\"self-bookmark\">Resolve(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a DNS host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_BeginGetHostAddresses_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Dns_BeginGetHostAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetHostAddresses(String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously returns the Internet Protocol (IP) addresses for the specified host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IAsyncResult BeginGetHostAddresses (string hostNameOrAddress, AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetHostAddresses method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If <code>hostNameOrAddress</code> is an IP address, this address is returned without querying the DNS server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n</div>\n<p> When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  </p>\n<p> The asynchronous BeginGetHostAddresses operation must be completed by calling the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndGetHostAddresses_\" data-linktype=\"relative-path\">EndGetHostAddresses</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostAddresses_\" data-linktype=\"relative-path\">GetHostAddresses</a> method.  </p>\n<p> For more information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a></p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_BeginGetHostByName_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Dns_BeginGetHostByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetHostByName(String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous request for <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> information about the specified DNS host name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IAsyncResult BeginGetHostByName (string hostName, AsyncCallback requestCallback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The DNS name of the host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error was encountered executing the DNS query.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginGetHostByName operation must be completed by calling the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndGetHostByName_\" data-linktype=\"relative-path\">EndGetHostByName</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostByName_\" data-linktype=\"relative-path\">GetHostByName</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_BeginGetHostEntry_System_Net_IPAddress_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Dns_BeginGetHostEntry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetHostEntry(IPAddress,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IAsyncResult BeginGetHostEntry (System.Net.IPAddress address, AsyncCallback requestCallback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The IP address to resolve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>address</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetHostEntry method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  </p>\n<p> <strong>Note</strong> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n<p> The asynchronous BeginGetHostEntry operation must be completed by calling the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndGetHostEntry_\" data-linktype=\"relative-path\">EndGetHostEntry</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostEntry_\" data-linktype=\"relative-path\">GetHostEntry</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_BeginGetHostEntry_\" data-linktype=\"relative-path\">BeginGetHostEntry</a> method to resolve an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Dns#2\">   // Signals when the resolve has finished.\npublic:\n   static ManualResetEvent^ GetHostEntryFinished =\n      gcnew ManualResetEvent( false );\n\n   // define the state object for the callback. \n   // use hostName to correlate calls with the proper result.\n   ref class ResolveState\n   {\n   public:\n      String^ hostName;\n      IPHostEntry^ resolvedIPs;\n\n      ResolveState( String^ host )\n      {\n         hostName = host;\n      }\n\n      property IPHostEntry^ IPs \n      {\n         IPHostEntry^ get()\n         {\n            return resolvedIPs;\n         }\n         void set( IPHostEntry^ IPs )\n         {\n            resolvedIPs = IPs;\n         }\n      }\n\n      property String^ host \n      {\n         String^ get()\n         {\n            return hostName;\n         }\n         void set( String^ host )\n         {\n            hostName = host;\n         }\n      }\n   };\n\n   // Record the IPs in the state object for later use.\n   static void GetHostEntryCallback( IAsyncResult^ ar )\n   {\t  \n      ResolveState^ ioContext = (ResolveState^)( ar-&gt;AsyncState );\n\n      ioContext-&gt;IPs = Dns::EndGetHostEntry( ar );\n      GetHostEntryFinished-&gt;Set();\n   }\n\n\n   // Determine the Internet Protocol(IP) addresses for this \n   // host asynchronously.\npublic:\n   static void DoGetHostEntryAsync( String^ hostName )\n   {\n      GetHostEntryFinished-&gt;Reset();\n      ResolveState^ ioContext = gcnew ResolveState( hostName );\n\n      Dns::BeginGetHostEntry( ioContext-&gt;host,\n         gcnew AsyncCallback( GetHostEntryCallback ), ioContext );\n      // Wait here until the resolve completes \n      // (the callback calls .Set())\n      GetHostEntryFinished-&gt;WaitOne();\n\n      Console::WriteLine(&quot;EndGetHostEntry({0}) returns:&quot;, ioContext-&gt;host);\n      \n      for (int i = 0; i &lt; ioContext-&gt;IPs-&gt;AddressList-&gt;Length; i++)\n      {\t\t\t\t\n\t\tConsole::WriteLine(&quot;    {0}&quot;, ioContext-&gt;IPs-&gt;AddressList[i]-&gt;ToString());\t\t\t\n      }\n      \n\n//      for each ( IPAddress^ ip in ioContext-&gt;IPs )\n //     {\n //        Console::WriteLine( &quot;{0} &quot;, ip );\n //     }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Dns#2\">        // Signals when the resolve has finished.\n        public static ManualResetEvent GetHostEntryFinished = \n            new ManualResetEvent(false);\n\n        // Define the state object for the callback. \n        // Use hostName to correlate calls with the proper result.\n        public class ResolveState\n        {\n            string hostName;\n            IPHostEntry resolvedIPs;\n\n            public ResolveState(string host)\n            {\n                hostName = host;\n            }\n\n            public IPHostEntry IPs\n            {\n                get { return resolvedIPs; } \n                set {resolvedIPs = value;}}\n            public string host {get {return hostName;} \n                set {hostName = value;}}\n        }\n\n        // Record the IPs in the state object for later use.\n        public static void GetHostEntryCallback(IAsyncResult ar)\n        {\n            ResolveState ioContext = (ResolveState)ar.AsyncState;\n\n            ioContext.IPs = Dns.EndGetHostEntry(ar);\n            GetHostEntryFinished.Set();\n        }       \n        \n        // Determine the Internet Protocol (IP) addresses for \n        // this host asynchronously.\n        public static void DoGetHostEntryAsync(string hostname)\n        {\n            GetHostEntryFinished.Reset();\n            ResolveState ioContext= new ResolveState(hostname);\n\n            Dns.BeginGetHostEntry(ioContext.host, \n                new AsyncCallback(GetHostEntryCallback), ioContext);\n\n            // Wait here until the resolve completes (the callback \n            // calls .Set())\n            GetHostEntryFinished.WaitOne();\n\n            Console.WriteLine(&quot;EndGetHostEntry({0}) returns:&quot;, ioContext.host);\n\n            foreach (IPAddress ip in ioContext.IPs.AddressList)\n            {\n                Console.WriteLine(&quot;    {0}&quot;, ip);\n            }\n \n        }\n  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Dns#2\">    &#39; Signals when the resolve has finished.\n    Dim Shared GetHostEntryFinished As ManualResetEvent = New ManualResetEvent(False)\n\n    &#39; Define the state object for the callback. \n    &#39; Use hostName to correlate calls with the proper result.\n    Class ResolveState\n        \n        Dim hostName As String\n        Dim resolvedIPs As IPHostEntry\n\n        Public Sub New(host As String)\n            hostName = host\n        End Sub\n\n        Public Property IPs AS IPHostEntry\n            Get\n                Return resolvedIPs \n            End Get\n            Set\n                resolvedIPs = value\n            End Set\n        End Property\n            \n        Public Property host As [String]\n            Get\n                Return hostName\n            End Get     \n            Set\n                hostName = value\n            End Set    \n        End Property\n    End Class\n\n\n    &#39; Record the IPs in the state object for later use.\n    Shared Sub GetHostEntryCallback(ar As IAsyncResult)\n        \n        Dim ioContext As ResolveState = ar.AsyncState\n\n        ioContext.IPs = Dns.EndGetHostEntry(ar)\n        GetHostEntryFinished.Set()\n    End Sub       \n\n    &#39; Determine the Internet Protocol (IP) addresses for \n    &#39; this host asynchronously.\n    Shared Sub DoGetHostEntryAsync(hostname As String)\n        \n        GetHostEntryFinished.Reset()\n        Dim ioContext As ResolveState = New ResolveState(hostname)\n        \n        Dns.BeginGetHostEntry(ioContext.host,AddressOf GetHostEntryCallback, ioContext)\n\n        &#39; Wait here until the resolve completes (the callback \n        &#39; calls .Set())\n        GetHostEntryFinished.WaitOne()\n\n        Console.WriteLine(&quot;EndGetHostEntry(&quot; + ioContext.host + &quot;) returns:&quot;)\n\n        Dim ip As IPAddress() = ioContext.IPs.AddressList\n        Dim index As Integer\n        For index = 0 To ip.Length - 1\n            Console.WriteLine(ip(index))\n        Next index\n          \n    End Sub\n  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_BeginGetHostEntry_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Dns_BeginGetHostEntry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetHostEntry(String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IAsyncResult BeginGetHostEntry (string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  </p>\n<p> <strong>Note</strong> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n<p> The asynchronous BeginGetHostEntry operation must be completed by calling the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndGetHostEntry_\" data-linktype=\"relative-path\">EndGetHostEntry</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostEntry_\" data-linktype=\"relative-path\">GetHostEntry</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the BeginGetHostEntry method to resolve an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Dns#2\">   // Signals when the resolve has finished.\npublic:\n   static ManualResetEvent^ GetHostEntryFinished =\n      gcnew ManualResetEvent( false );\n\n   // define the state object for the callback. \n   // use hostName to correlate calls with the proper result.\n   ref class ResolveState\n   {\n   public:\n      String^ hostName;\n      IPHostEntry^ resolvedIPs;\n\n      ResolveState( String^ host )\n      {\n         hostName = host;\n      }\n\n      property IPHostEntry^ IPs \n      {\n         IPHostEntry^ get()\n         {\n            return resolvedIPs;\n         }\n         void set( IPHostEntry^ IPs )\n         {\n            resolvedIPs = IPs;\n         }\n      }\n\n      property String^ host \n      {\n         String^ get()\n         {\n            return hostName;\n         }\n         void set( String^ host )\n         {\n            hostName = host;\n         }\n      }\n   };\n\n   // Record the IPs in the state object for later use.\n   static void GetHostEntryCallback( IAsyncResult^ ar )\n   {\t  \n      ResolveState^ ioContext = (ResolveState^)( ar-&gt;AsyncState );\n\n      ioContext-&gt;IPs = Dns::EndGetHostEntry( ar );\n      GetHostEntryFinished-&gt;Set();\n   }\n\n\n   // Determine the Internet Protocol(IP) addresses for this \n   // host asynchronously.\npublic:\n   static void DoGetHostEntryAsync( String^ hostName )\n   {\n      GetHostEntryFinished-&gt;Reset();\n      ResolveState^ ioContext = gcnew ResolveState( hostName );\n\n      Dns::BeginGetHostEntry( ioContext-&gt;host,\n         gcnew AsyncCallback( GetHostEntryCallback ), ioContext );\n      // Wait here until the resolve completes \n      // (the callback calls .Set())\n      GetHostEntryFinished-&gt;WaitOne();\n\n      Console::WriteLine(&quot;EndGetHostEntry({0}) returns:&quot;, ioContext-&gt;host);\n      \n      for (int i = 0; i &lt; ioContext-&gt;IPs-&gt;AddressList-&gt;Length; i++)\n      {\t\t\t\t\n\t\tConsole::WriteLine(&quot;    {0}&quot;, ioContext-&gt;IPs-&gt;AddressList[i]-&gt;ToString());\t\t\t\n      }\n      \n\n//      for each ( IPAddress^ ip in ioContext-&gt;IPs )\n //     {\n //        Console::WriteLine( &quot;{0} &quot;, ip );\n //     }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Dns#2\">        // Signals when the resolve has finished.\n        public static ManualResetEvent GetHostEntryFinished = \n            new ManualResetEvent(false);\n\n        // Define the state object for the callback. \n        // Use hostName to correlate calls with the proper result.\n        public class ResolveState\n        {\n            string hostName;\n            IPHostEntry resolvedIPs;\n\n            public ResolveState(string host)\n            {\n                hostName = host;\n            }\n\n            public IPHostEntry IPs\n            {\n                get { return resolvedIPs; } \n                set {resolvedIPs = value;}}\n            public string host {get {return hostName;} \n                set {hostName = value;}}\n        }\n\n        // Record the IPs in the state object for later use.\n        public static void GetHostEntryCallback(IAsyncResult ar)\n        {\n            ResolveState ioContext = (ResolveState)ar.AsyncState;\n\n            ioContext.IPs = Dns.EndGetHostEntry(ar);\n            GetHostEntryFinished.Set();\n        }       \n        \n        // Determine the Internet Protocol (IP) addresses for \n        // this host asynchronously.\n        public static void DoGetHostEntryAsync(string hostname)\n        {\n            GetHostEntryFinished.Reset();\n            ResolveState ioContext= new ResolveState(hostname);\n\n            Dns.BeginGetHostEntry(ioContext.host, \n                new AsyncCallback(GetHostEntryCallback), ioContext);\n\n            // Wait here until the resolve completes (the callback \n            // calls .Set())\n            GetHostEntryFinished.WaitOne();\n\n            Console.WriteLine(&quot;EndGetHostEntry({0}) returns:&quot;, ioContext.host);\n\n            foreach (IPAddress ip in ioContext.IPs.AddressList)\n            {\n                Console.WriteLine(&quot;    {0}&quot;, ip);\n            }\n \n        }\n  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Dns#2\">    &#39; Signals when the resolve has finished.\n    Dim Shared GetHostEntryFinished As ManualResetEvent = New ManualResetEvent(False)\n\n    &#39; Define the state object for the callback. \n    &#39; Use hostName to correlate calls with the proper result.\n    Class ResolveState\n        \n        Dim hostName As String\n        Dim resolvedIPs As IPHostEntry\n\n        Public Sub New(host As String)\n            hostName = host\n        End Sub\n\n        Public Property IPs AS IPHostEntry\n            Get\n                Return resolvedIPs \n            End Get\n            Set\n                resolvedIPs = value\n            End Set\n        End Property\n            \n        Public Property host As [String]\n            Get\n                Return hostName\n            End Get     \n            Set\n                hostName = value\n            End Set    \n        End Property\n    End Class\n\n\n    &#39; Record the IPs in the state object for later use.\n    Shared Sub GetHostEntryCallback(ar As IAsyncResult)\n        \n        Dim ioContext As ResolveState = ar.AsyncState\n\n        ioContext.IPs = Dns.EndGetHostEntry(ar)\n        GetHostEntryFinished.Set()\n    End Sub       \n\n    &#39; Determine the Internet Protocol (IP) addresses for \n    &#39; this host asynchronously.\n    Shared Sub DoGetHostEntryAsync(hostname As String)\n        \n        GetHostEntryFinished.Reset()\n        Dim ioContext As ResolveState = New ResolveState(hostname)\n        \n        Dns.BeginGetHostEntry(ioContext.host,AddressOf GetHostEntryCallback, ioContext)\n\n        &#39; Wait here until the resolve completes (the callback \n        &#39; calls .Set())\n        GetHostEntryFinished.WaitOne()\n\n        Console.WriteLine(&quot;EndGetHostEntry(&quot; + ioContext.host + &quot;) returns:&quot;)\n\n        Dim ip As IPAddress() = ioContext.IPs.AddressList\n        Dim index As Integer\n        For index = 0 To ip.Length - 1\n            Console.WriteLine(ip(index))\n        Next index\n          \n    End Sub\n  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_BeginResolve_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Dns_BeginResolve_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginResolve(String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous request to resolve a DNS host name or IP address to an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IAsyncResult BeginResolve (string hostName, AsyncCallback requestCallback, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The DNS name of the host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to access DNS information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginResolve operation must be completed by calling the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndResolve_\" data-linktype=\"relative-path\">EndResolve</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_Resolve_\" data-linktype=\"relative-path\">Resolve</a> method.  </p>\n<p> For more information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses BeginResolve to resolve a DNS host name to an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Dns_Begin_EndResolve#1\">Class DnsBeginGetHostByName\n    \n    Class RequestState\n        Public host As IPHostEntry\n        \n        Public Sub New()\n            host = Nothing\n        End Sub &#39;New\n    End Class &#39;RequestState\n    \n    \n    Public Shared Sub Main()\n     Try\n        &#39; Create an instance of the RequestState class.\n        Dim myRequestState As New RequestState()\n        \n        &#39; Begin an asynchronous request for information such as the host name, IP addresses, \n        &#39; or aliases for the specified URI.\n        Dim asyncResult As IAsyncResult = CType(Dns.BeginResolve(&quot;www.contoso.com&quot;, AddressOf RespCallback, myRequestState),IAsyncResult)\n\n        &#39; Wait until asynchronous call completes.\n        While asyncResult.IsCompleted &lt;&gt; True\n        End While\n        \n        Console.WriteLine((&quot;Host name : &quot; + myRequestState.host.HostName))\n        Console.WriteLine(ControlChars.Cr + &quot;IP address list : &quot;)\n        Dim index As Integer\n        For index = 0 To myRequestState.host.AddressList.Length - 1\n            Console.WriteLine(myRequestState.host.AddressList(index))\n        Next index\n        Console.WriteLine(ControlChars.Cr + &quot;Aliases : &quot;)\n\n        For index = 0 To myRequestState.host.Aliases.Length - 1\n            Console.WriteLine(myRequestState.host.Aliases(index))\n        Next index\n    catch e as Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n    End Try\n    End Sub &#39;Main\n    \n    \n    Private Shared Sub RespCallback(ar As IAsyncResult)\n        Try\n            &#39; Convert the IAsyncResult object to a RequestState object.\n            Dim tempRequestState As RequestState = CType(ar.AsyncState, RequestState)\n\n            &#39; End the asynchronous request.\n            tempRequestState.host = Dns.EndResolve(ar)\n            Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n            Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n    End Sub &#39;RespCallback\n</code></pre><pre><code class=\"lang-cs\" name=\"Dns_Begin_EndResolve#1\">class DnsBeginGetHostByName\n{   \n   public static System.Threading.ManualResetEvent allDone = null;\n\n   class RequestState\n   {\n      public IPHostEntry host;\n      public RequestState()\n      {\n         host = null;\n      }\n   }\n\n   public static void Main()\n   {\n     allDone = new ManualResetEvent(false);\n     // Create an instance of the RequestState class.\n     RequestState myRequestState = new RequestState();\n\n     // Begin an asynchronous request for information like host name, IP addresses, or \n     // aliases for specified the specified URI.\n     IAsyncResult asyncResult = Dns.BeginResolve(&quot;www.contoso.com&quot;, new AsyncCallback(RespCallback), myRequestState );\n\n     // Wait until asynchronous call completes.\n     allDone.WaitOne();\n     Console.WriteLine(&quot;Host name : &quot; + myRequestState.host.HostName);\n     Console.WriteLine(&quot;<br>IP address list : &quot;);\n     for(int index=0; index &lt; myRequestState.host.AddressList.Length; index++)\n     {\n       Console.WriteLine(myRequestState.host.AddressList[index]);\n     }      \n     Console.WriteLine(&quot;<br>Aliases : &quot;);\n     for(int index=0; index &lt; myRequestState.host.Aliases.Length; index++)\n     {\n       Console.WriteLine(myRequestState.host.Aliases[index]);\n     }      \n   }\n   \n   private static void RespCallback(IAsyncResult ar)\n   {\n     try \n     {\n       // Convert the IAsyncResult object to a RequestState object.\n       RequestState tempRequestState = (RequestState)ar.AsyncState;\n       // End the asynchronous request.\n       tempRequestState.host = Dns.EndResolve(ar);\n       allDone.Set();\n     }\n\t   catch(ArgumentNullException e) \n     {\n       Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }   \n     catch(Exception e)\n     {\n       Console.WriteLine(&quot;Exception caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dns_Begin_EndResolve#1\">public ref class DnsBeginGetHostByName\n{\npublic:\n   static System::Threading::ManualResetEvent^ allDone = nullptr;\n   ref class RequestState\n   {\n   public:\n      IPHostEntry^ host;\n      RequestState()\n      {\n         host = nullptr;\n      }\n   };\n\n   static void RespCallback( IAsyncResult^ ar )\n   {\n      try\n      {\n         // Convert the IAsyncResult* Object* to a RequestState Object*.\n         RequestState^ tempRequestState = dynamic_cast&lt;RequestState^&gt;(ar-&gt;AsyncState);\n         \n         // End the asynchronous request.\n         tempRequestState-&gt;host = Dns::EndResolve( ar );\n         allDone-&gt;Set();\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n   }\n};\n\nint main()\n{\n   DnsBeginGetHostByName::allDone = gcnew ManualResetEvent( false );\n   \n   // Create an instance of the RequestState class.\n   DnsBeginGetHostByName::RequestState^ myRequestState =\n      gcnew DnsBeginGetHostByName::RequestState;\n   \n   // Begin an asynchronous request for information like host name, IP addresses, or\n   // aliases for specified the specified URI.\n   IAsyncResult^ asyncResult = Dns::BeginResolve( &quot;www.contoso.com&quot;,\n      gcnew AsyncCallback( DnsBeginGetHostByName::RespCallback ), myRequestState );\n   \n   // Wait until asynchronous call completes.\n   DnsBeginGetHostByName::allDone-&gt;WaitOne();\n   Console::WriteLine( &quot;Host name : {0}&quot;, myRequestState-&gt;host-&gt;HostName );\n   Console::WriteLine( &quot;<br>IP address list : &quot; );\n   for ( int index = 0; index &lt; myRequestState-&gt;host-&gt;AddressList-&gt;Length; index++ )\n      Console::WriteLine( myRequestState-&gt;host-&gt;AddressList[ index ] );\n   Console::WriteLine( &quot;<br>Aliases : &quot; );\n   for ( int index = 0; index &lt; myRequestState-&gt;host-&gt;Aliases-&gt;Length; index++ )\n      Console::WriteLine( myRequestState-&gt;host-&gt;Aliases[ index ] );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_EndGetHostAddresses_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Dns_EndGetHostAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetHostAddresses(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPAddress[] EndGetHostAddresses (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to the <span class=\"xref\">stem.Net.Dns.BeginGetHostAddresses*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <span class=\"xref\">stem.Net.Dns.BeginGetHostAddresses*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_BeginGetHostAddresses_\" data-linktype=\"relative-path\">BeginGetHostAddresses</a> method queries a DNS server for the IP addresses associated with a host name. If <code>hostNameOrAddress</code> is an IP address, this address is returned without querying the DNS server.  </p>\n<p> When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_EndGetHostByName_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Dns_EndGetHostByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetHostByName(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry EndGetHostByName (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that is returned by a call to the <span class=\"xref\">stem.Net.Dns.BeginGetHostByName*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> object that contains DNS information about a host.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostByName_\" data-linktype=\"relative-path\">GetHostByName</a> method.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.configuration.ipv6element#System_Net_Configuration_Ipv6Element_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is set to <code>true</code>, the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_EndGetHostEntry_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Dns_EndGetHostEntry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetHostEntry(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry EndGetHostEntry (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to an <span class=\"xref\">stem.Net.Dns.BeginGetHostEntry*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete.  </p>\n<p> The <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<p> To perform this operation synchronously, use a <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostEntry_\" data-linktype=\"relative-path\">GetHostEntry</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_EndResolve_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Dns_EndResolve_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndResolve(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for DNS information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry EndResolve (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that is returned by a call to the <span class=\"xref\">stem.Net.Dns.BeginResolve*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> object that contains DNS information about a host.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.configuration.ipv6element#System_Net_Configuration_Ipv6Element_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set to <code>true</code>, the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_Resolve_\" data-linktype=\"relative-path\">Resolve</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example ends an asynchronous request for DNS host information.  </p>\n<pre><code class=\"lang-vb\" name=\"Dns_Begin_EndResolve#1\">Class DnsBeginGetHostByName\n    \n    Class RequestState\n        Public host As IPHostEntry\n        \n        Public Sub New()\n            host = Nothing\n        End Sub &#39;New\n    End Class &#39;RequestState\n    \n    \n    Public Shared Sub Main()\n     Try\n        &#39; Create an instance of the RequestState class.\n        Dim myRequestState As New RequestState()\n        \n        &#39; Begin an asynchronous request for information such as the host name, IP addresses, \n        &#39; or aliases for the specified URI.\n        Dim asyncResult As IAsyncResult = CType(Dns.BeginResolve(&quot;www.contoso.com&quot;, AddressOf RespCallback, myRequestState),IAsyncResult)\n\n        &#39; Wait until asynchronous call completes.\n        While asyncResult.IsCompleted &lt;&gt; True\n        End While\n        \n        Console.WriteLine((&quot;Host name : &quot; + myRequestState.host.HostName))\n        Console.WriteLine(ControlChars.Cr + &quot;IP address list : &quot;)\n        Dim index As Integer\n        For index = 0 To myRequestState.host.AddressList.Length - 1\n            Console.WriteLine(myRequestState.host.AddressList(index))\n        Next index\n        Console.WriteLine(ControlChars.Cr + &quot;Aliases : &quot;)\n\n        For index = 0 To myRequestState.host.Aliases.Length - 1\n            Console.WriteLine(myRequestState.host.Aliases(index))\n        Next index\n    catch e as Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n    End Try\n    End Sub &#39;Main\n    \n    \n    Private Shared Sub RespCallback(ar As IAsyncResult)\n        Try\n            &#39; Convert the IAsyncResult object to a RequestState object.\n            Dim tempRequestState As RequestState = CType(ar.AsyncState, RequestState)\n\n            &#39; End the asynchronous request.\n            tempRequestState.host = Dns.EndResolve(ar)\n            Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n            Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n    End Sub &#39;RespCallback\n</code></pre><pre><code class=\"lang-cs\" name=\"Dns_Begin_EndResolve#1\">class DnsBeginGetHostByName\n{   \n   public static System.Threading.ManualResetEvent allDone = null;\n\n   class RequestState\n   {\n      public IPHostEntry host;\n      public RequestState()\n      {\n         host = null;\n      }\n   }\n\n   public static void Main()\n   {\n     allDone = new ManualResetEvent(false);\n     // Create an instance of the RequestState class.\n     RequestState myRequestState = new RequestState();\n\n     // Begin an asynchronous request for information like host name, IP addresses, or \n     // aliases for specified the specified URI.\n     IAsyncResult asyncResult = Dns.BeginResolve(&quot;www.contoso.com&quot;, new AsyncCallback(RespCallback), myRequestState );\n\n     // Wait until asynchronous call completes.\n     allDone.WaitOne();\n     Console.WriteLine(&quot;Host name : &quot; + myRequestState.host.HostName);\n     Console.WriteLine(&quot;<br>IP address list : &quot;);\n     for(int index=0; index &lt; myRequestState.host.AddressList.Length; index++)\n     {\n       Console.WriteLine(myRequestState.host.AddressList[index]);\n     }      \n     Console.WriteLine(&quot;<br>Aliases : &quot;);\n     for(int index=0; index &lt; myRequestState.host.Aliases.Length; index++)\n     {\n       Console.WriteLine(myRequestState.host.Aliases[index]);\n     }      \n   }\n   \n   private static void RespCallback(IAsyncResult ar)\n   {\n     try \n     {\n       // Convert the IAsyncResult object to a RequestState object.\n       RequestState tempRequestState = (RequestState)ar.AsyncState;\n       // End the asynchronous request.\n       tempRequestState.host = Dns.EndResolve(ar);\n       allDone.Set();\n     }\n\t   catch(ArgumentNullException e) \n     {\n       Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }   \n     catch(Exception e)\n     {\n       Console.WriteLine(&quot;Exception caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dns_Begin_EndResolve#1\">public ref class DnsBeginGetHostByName\n{\npublic:\n   static System::Threading::ManualResetEvent^ allDone = nullptr;\n   ref class RequestState\n   {\n   public:\n      IPHostEntry^ host;\n      RequestState()\n      {\n         host = nullptr;\n      }\n   };\n\n   static void RespCallback( IAsyncResult^ ar )\n   {\n      try\n      {\n         // Convert the IAsyncResult* Object* to a RequestState Object*.\n         RequestState^ tempRequestState = dynamic_cast&lt;RequestState^&gt;(ar-&gt;AsyncState);\n         \n         // End the asynchronous request.\n         tempRequestState-&gt;host = Dns::EndResolve( ar );\n         allDone-&gt;Set();\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n   }\n};\n\nint main()\n{\n   DnsBeginGetHostByName::allDone = gcnew ManualResetEvent( false );\n   \n   // Create an instance of the RequestState class.\n   DnsBeginGetHostByName::RequestState^ myRequestState =\n      gcnew DnsBeginGetHostByName::RequestState;\n   \n   // Begin an asynchronous request for information like host name, IP addresses, or\n   // aliases for specified the specified URI.\n   IAsyncResult^ asyncResult = Dns::BeginResolve( &quot;www.contoso.com&quot;,\n      gcnew AsyncCallback( DnsBeginGetHostByName::RespCallback ), myRequestState );\n   \n   // Wait until asynchronous call completes.\n   DnsBeginGetHostByName::allDone-&gt;WaitOne();\n   Console::WriteLine( &quot;Host name : {0}&quot;, myRequestState-&gt;host-&gt;HostName );\n   Console::WriteLine( &quot;<br>IP address list : &quot; );\n   for ( int index = 0; index &lt; myRequestState-&gt;host-&gt;AddressList-&gt;Length; index++ )\n      Console::WriteLine( myRequestState-&gt;host-&gt;AddressList[ index ] );\n   Console::WriteLine( &quot;<br>Aliases : &quot; );\n   for ( int index = 0; index &lt; myRequestState-&gt;host-&gt;Aliases-&gt;Length; index++ )\n      Console::WriteLine( myRequestState-&gt;host-&gt;Aliases[ index ] );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostAddresses_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostAddresses(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the Internet Protocol (IP) addresses for the specified host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPAddress[] GetHostAddresses (string hostNameOrAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHostAddresses method queries a DNS server for the IP addresses associated with a host name. If <code>hostNameOrAddress</code> is an IP address, this address is returned without querying the DNS server.  </p>\n<p> When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  </p>\n<p> IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance if only IPv6 results where available for the <code>hostNameOrAddress</code>.parameter.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetHostAddresses method to resolve an IP address to an array of type <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Dns#3\">   // Determine the Internet Protocol(IP) addresses for a host.\npublic:\n   static void DoGetHostAddress(String^ hostname)\n   {\n      array&lt;IPAddress^&gt;^ ips;\n      ips = Dns::GetHostAddresses(hostname);\n\n      Console::WriteLine(&quot;GetHostAddresses({0}) returns:&quot;, hostname);\n      for each ( IPAddress^ ip in ips )\n      {\n         Console::Write( &quot;{0} &quot;, ip );\n      }\n      Console::WriteLine( &quot;&quot; );\n   }\n  \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Dns#3\">        public static void DoGetHostAddresses(string hostname)\n        {\n            IPAddress[] ips;\n\n            ips = Dns.GetHostAddresses(hostname);\n\n            Console.WriteLine(&quot;GetHostAddresses({0}) returns:&quot;, hostname);\n\n            foreach (IPAddress ip in ips)\n            {\n                Console.WriteLine(&quot;    {0}&quot;, ip);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Dns#3\">    Public Sub DoGetHostAddresses(hostName As [String])\n\n        Dim ips As IPAddress()\n \n        ips = Dns.GetHostAddresses(hostname)\n\n        Console.WriteLine(&quot;GetHostAddresses(&quot; + hostname + &quot;) returns: &quot;)\n\n        Dim index As Integer\n        For index = 0 To ips.Length - 1\n             Console.WriteLine(ips(index))\n        Next index\n    End Sub    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostAddressesAsync_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostAddressesAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostAddressesAsync(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Net.IPAddress[]&gt; GetHostAddressesAsync (string hostNameOrAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>[]&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns an array of type <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hostNameOrAddress</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete after the <code>hostNameOrAddress</code> has been resolved.  </p>\n<p> This method queries a DNS server for the IP addresses associated with a host name. If <code>hostNameOrAddress</code> is an IP address, this address is returned without querying the DNS server.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostByAddress_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostByAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostByAddress(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance from the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry GetHostByAddress (System.Net.IPAddress address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a>.  </p>\n<p> An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>address</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> from an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dns_GetHostByAddress_IPAddress#1\">      try\n      {\n         IPAddress^ hostIPAddress = IPAddress::Parse( IpAddressString );\n         IPHostEntry^ hostInfo = Dns::GetHostByAddress( hostIPAddress );\n         \n         // Get the IP address list that resolves to the host names contained in\n         // the Alias property.\n         array&lt;IPAddress^&gt;^address = hostInfo-&gt;AddressList;\n         \n         // Get the alias names of the addresses in the IP address list.\n         array&lt;String^&gt;^alias = hostInfo-&gt;Aliases;\n         Console::WriteLine( &quot;Host name : {0}&quot;, hostInfo-&gt;HostName );\n         Console::WriteLine( &quot;<br>Aliases :&quot; );\n         for ( int index = 0; index &lt; alias-&gt;Length; index++ )\n            Console::WriteLine( alias[ index ] );\n         Console::WriteLine( &quot;<br>IP address list : &quot; );\n         for ( int index = 0; index &lt; address-&gt;Length; index++ )\n            Console::WriteLine( address[ index ] );\n      }\n      catch ( SocketException^ e ) \n      {\n         Console::WriteLine( &quot;SocketException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( FormatException^ e ) \n      {\n         Console::WriteLine( &quot;FormatException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dns_GetHostByAddress_IPAddress#1\">      try \n      {\n         IPAddress hostIPAddress = IPAddress.Parse(IpAddressString);\n         IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);\n         // Get the IP address list that resolves to the host names contained in \n         // the Alias property.\n         IPAddress[] address = hostInfo.AddressList;\n         // Get the alias names of the addresses in the IP address list.\n         String[] alias = hostInfo.Aliases;\n\n         Console.WriteLine(&quot;Host name : &quot; + hostInfo.HostName);\n         Console.WriteLine(&quot;<br>Aliases :&quot;);\n         for(int index=0; index &lt; alias.Length; index++) {\n           Console.WriteLine(alias[index]);\n         } \n         Console.WriteLine(&quot;<br>IP address list : &quot;);\n         for(int index=0; index &lt; address.Length; index++) {\n            Console.WriteLine(address[index]);\n         }\n      }\n      catch(SocketException e) \n      {\n\t Console.WriteLine(&quot;SocketException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(FormatException e)\n      {\n\t Console.WriteLine(&quot;FormatException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(ArgumentNullException e)\n      {\n\t Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n\t  catch(Exception e)\n\t  {\n\t\t  Console.WriteLine(&quot;Exception caught!!!&quot;);\n\t\t  Console.WriteLine(&quot;Source : &quot; + e.Source);\n\t\t  Console.WriteLine(&quot;Message : &quot; + e.Message);\n\t  }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dns_GetHostByAddress_IPAddress#1\">    Public Sub DisplayHostAddress(IpAddressString As [String])\n        Try\n            Dim hostIPAddress As IPAddress = IPAddress.Parse(IpAddressString)\n            \n            &#39; Call the GetHostByAddress(IPAddress) method, passing an IPAddress object as an argument \n            &#39; to obtain an IPHostEntry instance, containing address information for the specified host.\n            \n            Dim hostInfo As IPHostEntry = Dns.GetHostByAddress(hostIPAddress)\n            &#39; Get the IP address list that resolves to the host names contained in \n            &#39; the Alias property.\n            Dim address As IPAddress() = hostInfo.AddressList\n            &#39; Get the alias names of the above addresses in the IP address list.\n            Dim [alias] As [String]() = hostInfo.Aliases\n            \n            Console.WriteLine((&quot;Host name : &quot; + hostInfo.HostName))\n            Console.WriteLine(ControlChars.Cr + &quot;Aliases :&quot;)\n            Dim index As Integer\n            For index = 0 To [alias].Length - 1\n                Console.WriteLine([alias](index))\n            Next index\n            Console.WriteLine(ControlChars.Cr + &quot;IP address list : &quot;)\n\n            For index = 0 To address.Length - 1\n                Console.WriteLine(address(index))\n            Next index\n            \n        Catch e As SocketException\n            Console.WriteLine(&quot;SocketException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n            \n        Catch e As FormatException\n            Console.WriteLine(&quot;FormatException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n            \n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n            \n        Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n    End Sub &#39;DisplayHostAddress\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostByAddress_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostByAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostByAddress(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance from an IP address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry GetHostByAddress (string address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>address</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is not a valid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostByName_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostByName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the DNS information for the specified DNS host name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry GetHostByName (string hostName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The DNS name of the host.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> object that contains host information for the address specified in <code>hostName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostName</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHostByName method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  </p>\n<p> For asynchronous access to DNS information, use the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_BeginGetHostByName_\" data-linktype=\"relative-path\">BeginGetHostByName</a> and <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_EndGetHostByName_\" data-linktype=\"relative-path\">EndGetHostByName</a> methods.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.configuration.ipv6element#System_Net_Configuration_Ipv6Element_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is set to <code>true</code>, the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetHostByName method to get the DNS information for the specified DNS host name.  </p>\n<pre><code class=\"lang-vb\" name=\"Dns_GetHostByName#1\">    Public Sub DisplayHostName(hostName As [String])\n        Try\n            &#39; Call the GetHostByName method, passing a DNS style host name(for example,\n            &#39; &quot;www.contoso.com&quot;) as an argument to obtain an IPHostEntry instance, that \n            &#39; contains information for the specified host.\n            \n            Dim hostInfo As IPHostEntry = Dns.GetHostByName(hostName)\n            &#39; Get the IP address list that resolves to the host names contained in \n            &#39; the Alias property.\n            Dim address As IPAddress() = hostInfo.AddressList\n            &#39; Get the alias names of the the addresses in the IP address list.\n            Dim [alias] As [String]() = hostInfo.Aliases\n            \n            Console.WriteLine((&quot;Host name : &quot; + hostInfo.HostName))\n            Console.WriteLine(ControlChars.Cr + &quot;Aliases : &quot;)\n            Dim index As Integer\n            For index = 0 To [alias].Length - 1\n                Console.WriteLine([alias](index))\n            Next index\n            Console.WriteLine(ControlChars.Cr + &quot;IP address list : &quot;)\n\n            For index = 0 To address.Length - 1\n                Console.WriteLine(address(index))\n            Next index\n        Catch e As SocketException\n            Console.WriteLine(&quot;SocketException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"Dns_GetHostByName#1\">      try \n      {\n         IPHostEntry hostInfo = Dns.GetHostByName(hostName);\n         // Get the IP address list that resolves to the host names contained in the \n         // Alias property.\n         IPAddress[] address = hostInfo.AddressList;\n         // Get the alias names of the addresses in the IP address list.\n         String[] alias = hostInfo.Aliases;\n\n         Console.WriteLine(&quot;Host name : &quot; + hostInfo.HostName);\n         Console.WriteLine(&quot;<br>Aliases : &quot;);\n         for(int index=0; index &lt; alias.Length; index++) {\n           Console.WriteLine(alias[index]);\n         } \n         Console.WriteLine(&quot;<br>IP address list : &quot;);\n         for(int index=0; index &lt; address.Length; index++) {\n            Console.WriteLine(address[index]);\n         }\n      }\n      catch(SocketException e) \n      {\n         Console.WriteLine(&quot;SocketException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(ArgumentNullException e)\n      {\n\t Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n\t  catch(Exception e)\n\t  {\n\t\t  Console.WriteLine(&quot;Exception caught!!!&quot;);\n\t\t  Console.WriteLine(&quot;Source : &quot; + e.Source);\n\t\t  Console.WriteLine(&quot;Message : &quot; + e.Message);\n\t  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dns_GetHostByName#1\">      try\n      {\n         IPHostEntry^ hostInfo = Dns::GetHostByName( hostName );\n         \n         // Get the IP address list that resolves to the host names contained in the\n         // Alias property.\n         array&lt;IPAddress^&gt;^address = hostInfo-&gt;AddressList;\n         \n         // Get the alias names of the addresses in the IP address list.\n         array&lt;String^&gt;^alias = hostInfo-&gt;Aliases;\n         Console::WriteLine( &quot;Host name : {0}&quot;, hostInfo-&gt;HostName );\n         Console::WriteLine( &quot;<br>Aliases : &quot; );\n         for ( int index = 0; index &lt; alias-&gt;Length; index++ )\n            Console::WriteLine( alias[ index ] );\n         Console::WriteLine( &quot;<br>IP address list : &quot; );\n         for ( int index = 0; index &lt; address-&gt;Length; index++ )\n            Console::WriteLine( address[ index ] );\n      }\n      catch ( SocketException^ e ) \n      {\n         Console::WriteLine( &quot;SocketException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostEntry_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostEntry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostEntry(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry GetHostEntry (System.Net.IPAddress address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host specified in <code>address</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>address</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHostEntry method queries a DNS server for the IP addresses and aliases associated with an IP address.  </p>\n<p> IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance if only IPv6 results where available for the <code>address</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostEntry_\" data-linktype=\"relative-path\">GetHostEntry</a> method to resolve an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Dns#1\">public:\n        static void DoGetHostEntry(String^ hostname)\n        {\n            IPHostEntry^ host = Dns::GetHostEntry(hostname);\n\n            Console::WriteLine(&quot;GetHostEntry({0}) returns:&quot;, host-&gt;HostName);\n            \n            for (int i = 0; i &lt; host-&gt;AddressList-&gt;Length; i++)\n            {\t\t\t\t\n\t\t\t\tConsole::WriteLine(&quot;    {0}&quot;, host-&gt;AddressList[i]-&gt;ToString());\t\t\t\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Dns#1\">        public static void DoGetHostEntry(string hostname)\n        {\n            IPHostEntry host;\n\n            host = Dns.GetHostEntry(hostname);\n\n            Console.WriteLine(&quot;GetHostEntry({0}) returns:&quot;, hostname);\n\n            foreach (IPAddress ip in host.AddressList)\n            {\n                Console.WriteLine(&quot;    {0}&quot;, ip);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Dns#1\">    Public Sub DoGetHostEntry(hostName As [String])\n\n        DIM host as IPHostEntry = Dns.GetHostEntry(hostname)\n\n        Console.WriteLine(&quot;GetHostEntry(&quot; + hostname + &quot;) returns: &quot;)\n\n        Dim ip As IPAddress() = host.AddressList\n\n        Dim index As Integer\n        For index = 0 To ip.Length - 1\n             Console.WriteLine(ip(index))\n        Next index\n    End Sub    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostEntry_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostEntry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostEntry(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry GetHostEntry (string hostNameOrAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>hostNameOrAddress</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>hostNameOrAddress</code> parameter is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  </p>\n<p> When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  </p>\n<p> If the host name could not be found, the <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  </p>\n<p> The <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception is also returned if the <code>hostNameOrAddress</code> parameter contains <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">Any</a> or <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IPv6Any\" data-linktype=\"relative-path\">IPv6Any</a>.  </p>\n<p> The GetHostEntry method assumes that if an IP literal string is passed in the <code>hostNameOrAddress</code> parameter that the application wants an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned with all of the properties set. These properties include the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_AddressList_\" data-linktype=\"relative-path\">AddressList</a>, <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a>, and <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a>. As a result, the implementation of the GetHostEntry method exhibits the following behavior when an IP string literal is passed:  </p>\n<ol>\n<li><p>The method tries to parse the address. If the <code>hostNameOrAddress</code> parameter contains a legal IP string literal, then the first phase succeeds.  </p>\n</li>\n<li><p>A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a> property.  </p>\n</li>\n<li><p>The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_AddressList_\" data-linktype=\"relative-path\">AddressList</a> property.  </p>\n<p>For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  </p>\n<p>For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a> property.  </p>\n<p>The <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostAddresses_\" data-linktype=\"relative-path\">GetHostAddresses</a> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  </p>\n<p>IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance if only IPv6 results where available for the <code>hostNameOrAddress</code>.parameter.  </p>\n<p>The <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetHostEntry method to resolve an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Dns#1\">public:\n        static void DoGetHostEntry(String^ hostname)\n        {\n            IPHostEntry^ host = Dns::GetHostEntry(hostname);\n\n            Console::WriteLine(&quot;GetHostEntry({0}) returns:&quot;, host-&gt;HostName);\n            \n            for (int i = 0; i &lt; host-&gt;AddressList-&gt;Length; i++)\n            {\t\t\t\t\n\t\t\t\tConsole::WriteLine(&quot;    {0}&quot;, host-&gt;AddressList[i]-&gt;ToString());\t\t\t\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Dns#1\">        public static void DoGetHostEntry(string hostname)\n        {\n            IPHostEntry host;\n\n            host = Dns.GetHostEntry(hostname);\n\n            Console.WriteLine(&quot;GetHostEntry({0}) returns:&quot;, hostname);\n\n            foreach (IPAddress ip in host.AddressList)\n            {\n                Console.WriteLine(&quot;    {0}&quot;, ip);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Dns#1\">    Public Sub DoGetHostEntry(hostName As [String])\n\n        DIM host as IPHostEntry = Dns.GetHostEntry(hostname)\n\n        Console.WriteLine(&quot;GetHostEntry(&quot; + hostname + &quot;) returns: &quot;)\n\n        Dim ip As IPAddress() = host.AddressList\n\n        Dim index As Integer\n        For index = 0 To ip.Length - 1\n             Console.WriteLine(ip(index))\n        Next index\n    End Sub    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostEntryAsync_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostEntryAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostEntryAsync(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt; GetHostEntryAsync (System.Net.IPAddress address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host specified in <code>address</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>address</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete after the <code>address</code> has been resolved.  </p>\n<p> This method queries a DNS server for the IP addresses and aliases associated with an IP address.  </p>\n<p> IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance if only IPv6 results where available for the <code>address</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostEntryAsync_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostEntryAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostEntryAsync(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt; GetHostEntryAsync (string hostNameOrAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostNameOrAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name or IP address to resolve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>hostNameOrAddress</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>hostNameOrAddress</code> parameter is an invalid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete after the <code>hostNameOrAddress</code> has been resolved.  </p>\n<p> This method queries a DNS server for the IP address that is associated with a host name or IP address.  </p>\n<p> When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  </p>\n<p> If the host name could not be found, the <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  </p>\n<p> The <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception is also returned if the <code>hostNameOrAddress</code> parameter contains <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">Any</a> or <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IPv6Any\" data-linktype=\"relative-path\">IPv6Any</a>.  </p>\n<p> This method assumes that if an IP literal string is passed in the <code>hostNameOrAddress</code> parameter that the application wants an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned with all of the properties set. These properties include the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_AddressList_\" data-linktype=\"relative-path\">AddressList</a>, <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a>, and <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  </p>\n<ol>\n<li><p>The method tries to parse the address. If the <code>hostNameOrAddress</code> parameter contains a legal IP string literal, then the first phase succeeds.  </p>\n</li>\n<li><p>A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a> property.  </p>\n</li>\n<li><p>The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_AddressList_\" data-linktype=\"relative-path\">AddressList</a> property.  </p>\n<p>For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  </p>\n<p>For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_HostName_\" data-linktype=\"relative-path\">HostName</a> property.  </p>\n<p>The <a class=\"xref\" href=\"system.net.dns#System_Net_Dns_GetHostAddresses_\" data-linktype=\"relative-path\">GetHostAddresses</a> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  </p>\n<p>IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance if only IPv6 results where available for the <code>hostNameOrAddress</code>.parameter.  </p>\n<p>The <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_GetHostName\">\r\n    \r\n            <a id=\"System_Net_Dns_GetHostName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHostName()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the host name of the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetHostName ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the DNS host name of the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving the local host name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetHostName method to obtain the host name of the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"Dns_GetHostName#1\">   public void DisplayLocalHostName()\n   {\n      try {\n         // Get the local computer host name.\n         String hostName = Dns.GetHostName();\n         Console.WriteLine(&quot;Computer name :&quot; + hostName);\n      }\n      catch(SocketException e) {\n         Console.WriteLine(&quot;SocketException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n\t  catch(Exception e)\n\t  {\n\t\t  Console.WriteLine(&quot;Exception caught!!!&quot;);\n\t\t  Console.WriteLine(&quot;Source : &quot; + e.Source);\n\t\t  Console.WriteLine(&quot;Message : &quot; + e.Message);\n\t  }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dns_GetHostName#1\">    Public Sub DisplayLocalHostName()\n        Try\n            &#39; Get the local computer host name.\n            Dim hostName As [String] = Dns.GetHostName()\n            Console.WriteLine((&quot;Computer name :&quot; + hostName))\n        Catch e As SocketException\n            Console.WriteLine(&quot;SocketException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dns_GetHostName#1\">public:\n   void DisplayLocalHostName()\n   {\n      try\n      {\n         // Get the local computer host name.\n         String^ hostName = Dns::GetHostName();\n         Console::WriteLine( &quot;Computer name : {0}&quot;, hostName );\n      }\n      catch ( SocketException^ e ) \n      {\n         Console::WriteLine( &quot;SocketException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Dns_Resolve_System_String_\">\r\n    \r\n            <a id=\"System_Net_Dns_Resolve_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resolve(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a DNS host name or IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPHostEntry Resolve (string hostName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A DNS-style host name or IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance that contains address information about the host specified in <code>hostName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>hostName</code> is greater than 255 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered when resolving <code>hostName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Resolve method queries a DNS server for the IP address associated with a host name or IP address.  </p>\n<p> When <code>hostName</code> is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.configuration.ipv6element#System_Net_Configuration_Ipv6Element_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is set to <code>true</code>, the <a class=\"xref\" href=\"system.net.iphostentry#System_Net_IPHostEntry_Aliases_\" data-linktype=\"relative-path\">Aliases</a> property of the <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance returned is not populated by this method and will always be empty.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member emits trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Resolve method to resolve an IP address to an <a class=\"xref\" href=\"system.net.iphostentry\" data-linktype=\"relative-path\">IPHostEntry</a> instance.  </p>\n<pre><code class=\"lang-cs\" name=\"Dns_Resolve#1\">     try {\n         IPHostEntry hostInfo = Dns.Resolve(hostString);\n         // Get the IP address list that resolves to the host names contained in the \n         // Alias property.\n         IPAddress[] address = hostInfo.AddressList;\n         // Get the alias names of the addresses in the IP address list.\n         String[] alias = hostInfo.Aliases;\n\n         Console.WriteLine(&quot;Host name : &quot; + hostInfo.HostName);\n         Console.WriteLine(&quot;<br>Aliases : &quot;);\n         for(int index=0; index &lt; alias.Length; index++) {\n           Console.WriteLine(alias[index]);\n         } \n         Console.WriteLine(&quot;<br>IP Address list :&quot;);\n         for(int index=0; index &lt; address.Length; index++) {\n            Console.WriteLine(address[index]);\n         }\n      }\n      catch(SocketException e) \n      {\n         Console.WriteLine(&quot;SocketException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(ArgumentNullException e)\n      {\n\t Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n         Console.WriteLine(&quot;Source : &quot; + e.Source);\n         Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n\t  catch(NullReferenceException e)\n\t  {\n\t\t  Console.WriteLine(&quot;NullReferenceException caught!!!&quot;);\n\t\t  Console.WriteLine(&quot;Source : &quot; + e.Source);\n\t\t  Console.WriteLine(&quot;Message : &quot; + e.Message);\n\t  }\n\t  catch(Exception e)\n\t  {\n\t\t  Console.WriteLine(&quot;Exception caught!!!&quot;);\n\t\t  Console.WriteLine(&quot;Source : &quot; + e.Source);\n\t\t  Console.WriteLine(&quot;Message : &quot; + e.Message);\n\t  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dns_Resolve#1\">      try\n      {\n         IPHostEntry^ hostInfo = Dns::Resolve( hostString );\n         \n         // Get the IP address list that resolves to the host names contained in the\n         // Alias property.\n         array&lt;IPAddress^&gt;^address = hostInfo-&gt;AddressList;\n         \n         // Get the alias names of the addresses in the IP address list.\n         array&lt;String^&gt;^alias = hostInfo-&gt;Aliases;\n         Console::WriteLine( &quot;Host name : {0}&quot;, hostInfo-&gt;HostName );\n         Console::WriteLine( &quot;<br>Aliases : &quot; );\n         for ( int index = 0; index &lt; alias-&gt;Length; index++ )\n         {\n            Console::WriteLine( alias[ index ] );\n\n         }\n         Console::WriteLine( &quot;<br>IP Address list :&quot; );\n         for ( int index = 0; index &lt; address-&gt;Length; index++ )\n         {\n            Console::WriteLine( address[ index ] );\n\n         }\n      }\n      catch ( SocketException^ e ) \n      {\n         Console::WriteLine( &quot;SocketException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( NullReferenceException^ e ) \n      {\n         Console::WriteLine( &quot;NullReferenceException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dns_Resolve#1\">        Try\n            &#39; Call the Resolve method passing a DNS style host name or an IP address in \n            &#39; dotted-quad notation (for example, &quot;www.contoso.com&quot; or &quot;207.46.131.199&quot;) to \n            &#39; obtain an IPHostEntry instance that contains address information for the \n            &#39; specified host.\n            Dim hostInfo As IPHostEntry = Dns.Resolve(hostString)\n            &#39; Get the IP address list that resolves to the host names contained in the Alias \n            &#39; property.\n            Dim address As IPAddress() = hostInfo.AddressList\n            &#39; Get the alias names of the addresses in the IP address list.\n            Dim [alias] As [String]() = hostInfo.Aliases\n\n            Console.WriteLine((&quot;Host name : &quot; + hostInfo.HostName))\n            Console.WriteLine(ControlChars.Cr + &quot;Aliases : &quot;)\n            Dim index As Integer\n            For index = 0 To [alias].Length - 1\n                Console.WriteLine([alias](index))\n            Next index\n            Console.WriteLine(ControlChars.Cr + &quot;IP Address list :&quot;)\n\n            For index = 0 To address.Length - 1\n                Console.WriteLine(address(index))\n            Next index\n        Catch e As SocketException\n            Console.WriteLine(&quot;SocketException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As NullReferenceException\n            Console.WriteLine(&quot;NullReferenceException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Dns.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Dns.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.BeginGetHostAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.BeginGetHostByName\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.BeginGetHostEntry\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.BeginResolve\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.EndGetHostAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.EndGetHostByName\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.EndGetHostEntry\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.EndResolve\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostAddressesAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostByAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostByName\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostEntry\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostEntryAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.GetHostName\">\r\n<meta name=\"APIName\" content=\"System.Net.Dns.Resolve\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bce56bdf-7e54-0a95-5ff8-6a31d7b39b1e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides simple domain name resolution functionality.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Dns\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Dns.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Dns.yml","open_to_public_contributors":true,"api_name":["System.Net.Dns","System.Net.Dns.BeginGetHostAddresses","System.Net.Dns.BeginGetHostByName","System.Net.Dns.BeginGetHostEntry","System.Net.Dns.BeginResolve","System.Net.Dns.EndGetHostAddresses","System.Net.Dns.EndGetHostByName","System.Net.Dns.EndGetHostEntry","System.Net.Dns.EndResolve","System.Net.Dns.GetHostAddresses","System.Net.Dns.GetHostAddressesAsync","System.Net.Dns.GetHostByAddress","System.Net.Dns.GetHostByName","System.Net.Dns.GetHostEntry","System.Net.Dns.GetHostEntryAsync","System.Net.Dns.GetHostName","System.Net.Dns.Resolve"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Dns","System::Net::Dns","System.Net.Dns.BeginGetHostAddresses","System::Net::Dns::BeginGetHostAddresses","System.Net.Dns.BeginGetHostByName","System::Net::Dns::BeginGetHostByName","System.Net.Dns.BeginGetHostEntry","System::Net::Dns::BeginGetHostEntry","System.Net.Dns.BeginResolve","System::Net::Dns::BeginResolve","System.Net.Dns.EndGetHostAddresses","System::Net::Dns::EndGetHostAddresses","System.Net.Dns.EndGetHostByName","System::Net::Dns::EndGetHostByName","System.Net.Dns.EndGetHostEntry","System::Net::Dns::EndGetHostEntry","System.Net.Dns.EndResolve","System::Net::Dns::EndResolve","System.Net.Dns.GetHostAddresses","System::Net::Dns::GetHostAddresses","System.Net.Dns.GetHostAddressesAsync","System::Net::Dns::GetHostAddressesAsync","System.Net.Dns.GetHostByAddress","System::Net::Dns::GetHostByAddress","System.Net.Dns.GetHostByName","System::Net::Dns::GetHostByName","System.Net.Dns.GetHostEntry","System::Net::Dns::GetHostEntry","System.Net.Dns.GetHostEntryAsync","System::Net::Dns::GetHostEntryAsync","System.Net.Dns.GetHostName","System::Net::Dns::GetHostName","System.Net.Dns.Resolve","System::Net::Dns::Resolve"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bce56bdf-7e54-0a95-5ff8-6a31d7b39b1e","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/Dns.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Dns class | Microsoft Docs","_op_ogTitle":"Dns class","description":"Provides simple domain name resolution functionality.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.Dns","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.dns","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.dns","fileRelativePath":"System.Net.Dns.html"},"themesRelativePathToOutputRoot":"_themes/"}