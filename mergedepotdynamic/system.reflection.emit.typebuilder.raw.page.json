{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_TypeBuilder\">\r\n      <span class=\"lang-csharp\">TypeBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and creates new instances of classes during run time.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._TypeBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TypeBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_AsType\" data-linktype=\"relative-path\">AsType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredConstructors\" data-linktype=\"relative-path\">DeclaredConstructors</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredEvents\" data-linktype=\"relative-path\">DeclaredEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredFields\" data-linktype=\"relative-path\">DeclaredFields</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMembers\" data-linktype=\"relative-path\">DeclaredMembers</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMethods\" data-linktype=\"relative-path\">DeclaredMethods</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredNestedTypes\" data-linktype=\"relative-path\">DeclaredNestedTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredProperties\" data-linktype=\"relative-path\">DeclaredProperties</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GenericTypeParameters\" data-linktype=\"relative-path\">GenericTypeParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredEvent_System_String_\" data-linktype=\"relative-path\">GetDeclaredEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredField_System_String_\" data-linktype=\"relative-path\">GetDeclaredField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethod_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethods_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethods(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredNestedType_System_String_\" data-linktype=\"relative-path\">GetDeclaredNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredProperty_System_String_\" data-linktype=\"relative-path\">GetDeclaredProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_ImplementedInterfaces\" data-linktype=\"relative-path\">ImplementedInterfaces</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_System_Reflection_IReflectableType_GetTypeInfo\" data-linktype=\"relative-path\">IReflectableType.GetTypeInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ContainsGenericParameters\" data-linktype=\"relative-path\">ContainsGenericParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_DefaultBinder\" data-linktype=\"relative-path\">DefaultBinder</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Delimiter\" data-linktype=\"relative-path\">Delimiter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_EmptyTypes\" data-linktype=\"relative-path\">EmptyTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Equals_System_Type_\" data-linktype=\"relative-path\">Equals(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterAttribute\" data-linktype=\"relative-path\">FilterAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterName\" data-linktype=\"relative-path\">FilterName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterNameIgnoreCase\" data-linktype=\"relative-path\">FilterNameIgnoreCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindInterfaces_System_Reflection_TypeFilter_System_Object_\" data-linktype=\"relative-path\">FindInterfaces(TypeFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindMembers_System_Reflection_MemberTypes_System_Reflection_BindingFlags_System_Reflection_MemberFilter_System_Object_\" data-linktype=\"relative-path\">FindMembers(MemberTypes,BindingFlags,MemberFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GenericTypeArguments\" data-linktype=\"relative-path\">GenericTypeArguments</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetArrayRank\" data-linktype=\"relative-path\">GetArrayRank()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Type___\" data-linktype=\"relative-path\">GetConstructor(Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructors\" data-linktype=\"relative-path\">GetConstructors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetDefaultMembers\" data-linktype=\"relative-path\">GetDefaultMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumName_System_Object_\" data-linktype=\"relative-path\">GetEnumName(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumNames\" data-linktype=\"relative-path\">GetEnumNames()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumUnderlyingType\" data-linktype=\"relative-path\">GetEnumUnderlyingType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumValues\" data-linktype=\"relative-path\">GetEnumValues()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEvent_System_String_\" data-linktype=\"relative-path\">GetEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetField_System_String_\" data-linktype=\"relative-path\">GetField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetFields\" data-linktype=\"relative-path\">GetFields()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints\" data-linktype=\"relative-path\">GetGenericParameterConstraints()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetInterface_System_String_\" data-linktype=\"relative-path\">GetInterface(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_\" data-linktype=\"relative-path\">GetMember(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMember(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMembers\" data-linktype=\"relative-path\">GetMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_\" data-linktype=\"relative-path\">GetMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___\" data-linktype=\"relative-path\">GetMethod(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethods\" data-linktype=\"relative-path\">GetMethods()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_System_String_\" data-linktype=\"relative-path\">GetNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes\" data-linktype=\"relative-path\">GetNestedTypes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperties\" data-linktype=\"relative-path\">GetProperties()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_\" data-linktype=\"relative-path\">GetProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_\" data-linktype=\"relative-path\">GetProperty(String,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">GetType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeArray_System_Object___\" data-linktype=\"relative-path\">GetTypeArray(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCode_System_Type_\" data-linktype=\"relative-path\">GetTypeCode(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCodeImpl\" data-linktype=\"relative-path\">GetTypeCodeImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetTypeFromHandle(RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeHandle_System_Object_\" data-linktype=\"relative-path\">GetTypeHandle(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_HasElementType\" data-linktype=\"relative-path\">HasElementType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAnsiClass\" data-linktype=\"relative-path\">IsAnsiClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsArray\" data-linktype=\"relative-path\">IsArray</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoClass\" data-linktype=\"relative-path\">IsAutoClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoLayout\" data-linktype=\"relative-path\">IsAutoLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsByRef\" data-linktype=\"relative-path\">IsByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsClass\" data-linktype=\"relative-path\">IsClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsCOMObject\" data-linktype=\"relative-path\">IsCOMObject</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextful\" data-linktype=\"relative-path\">IsContextful</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextfulImpl\" data-linktype=\"relative-path\">IsContextfulImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnum\" data-linktype=\"relative-path\">IsEnum</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnumDefined_System_Object_\" data-linktype=\"relative-path\">IsEnumDefined(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEquivalentTo_System_Type_\" data-linktype=\"relative-path\">IsEquivalentTo(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsExplicitLayout\" data-linktype=\"relative-path\">IsExplicitLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsImport\" data-linktype=\"relative-path\">IsImport</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInstanceOfType_System_Object_\" data-linktype=\"relative-path\">IsInstanceOfType(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInterface\" data-linktype=\"relative-path\">IsInterface</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsLayoutSequential\" data-linktype=\"relative-path\">IsLayoutSequential</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRef\" data-linktype=\"relative-path\">IsMarshalByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRefImpl\" data-linktype=\"relative-path\">IsMarshalByRefImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNested\" data-linktype=\"relative-path\">IsNested</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedAssembly\" data-linktype=\"relative-path\">IsNestedAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamANDAssem\" data-linktype=\"relative-path\">IsNestedFamANDAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamily\" data-linktype=\"relative-path\">IsNestedFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamORAssem\" data-linktype=\"relative-path\">IsNestedFamORAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPrivate\" data-linktype=\"relative-path\">IsNestedPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPublic\" data-linktype=\"relative-path\">IsNestedPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNotPublic\" data-linktype=\"relative-path\">IsNotPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPointer\" data-linktype=\"relative-path\">IsPointer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPrimitive\" data-linktype=\"relative-path\">IsPrimitive</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSerializable\" data-linktype=\"relative-path\">IsSerializable</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsUnicodeClass\" data-linktype=\"relative-path\">IsUnicodeClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsValueType\" data-linktype=\"relative-path\">IsValueType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsValueTypeImpl\" data-linktype=\"relative-path\">IsValueTypeImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsVisible\" data-linktype=\"relative-path\">IsVisible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Missing\" data-linktype=\"relative-path\">Missing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Equality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Equality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Inequality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Inequality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ReflectionOnlyGetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">ReflectionOnlyGetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_StructLayoutAttribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Type.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Type.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_TypeInitializer\" data-linktype=\"relative-path\">TypeInitializer</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>TypeBuilder is the root class used to control the creation of dynamic classes in the runtime. It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module. A new TypeBuilder can be created from a dynamic module by calling the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineType_\" data-linktype=\"relative-path\">DefineType</a> method, which returns a TypeBuilder object.  </p>\n<p> Reflection emit provides the following options for defining types:  </p>\n<ul>\n<li><p>Define a class or interface with the given name.  </p>\n</li>\n<li><p>Define a class or interface with the given name and attributes.  </p>\n</li>\n<li><p>Define a class with the given name, attributes, and base class.  </p>\n</li>\n<li><p>Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.  </p>\n</li>\n<li><p>Define a class with the given name, attributes, base class, and packing size.  </p>\n</li>\n<li><p>Define a class with the given name, attributes, base class, and the class size as a whole.  </p>\n</li>\n<li><p>Define a class with the given name, attributes, base class, packing size, and the class size as a whole.  </p>\n<p>To create an array type, pointer type, or byref type for an incomplete type that is represented by a TypeBuilder object, use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a> method, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakePointerType_\" data-linktype=\"relative-path\">MakePointerType</a> method, or <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeByRefType_\" data-linktype=\"relative-path\">MakeByRefType</a> method, respectively.  </p>\n<p>Before a type is used, the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method must be called. <strong>CreateType</strong> completes the creation of the type. Following the call to <strong>CreateType</strong>, the caller can instantiate the type by using the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, and invoke members of the type by using the <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_\" data-linktype=\"relative-path\">InvokeMember</a> method. It is an error to invoke methods that change the implementation of a type after <strong>CreateType</strong> has been called. For example, the common language runtime throws an exception if the caller tries to add new members to a type.  </p>\n<p>A class initializer is created by using the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineTypeInitializer_\" data-linktype=\"relative-path\">DefineTypeInitializer</a> method. <strong>DefineTypeInitializer</strong> returns a <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> object.  </p>\n<p>Nested types are defined by calling one of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineNestedType_\" data-linktype=\"relative-path\">DefineNestedType</a> methods.  </p>\n</li>\n</ul>\n<h2 id=\"attributes\">Attributes</h2>\n<p> The TypeBuilder class uses the <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a> enumeration to further specify the characteristics of the type to be created:  </p>\n<ul>\n<li><p>Interfaces are specified using the <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">System.Reflection.TypeAttributes</a> and <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">System.Reflection.TypeAttributes</a> attributes.  </p>\n</li>\n<li><p>Concrete classes (classes that cannot be extended) are specified using the <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">System.Reflection.TypeAttributes</a> attribute.  </p>\n</li>\n<li><p>Several attributes determine type visibility. See the description of the <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a> enumeration.  </p>\n</li>\n<li><p>If <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">System.Reflection.TypeAttributes</a> is specified, the class loader lays out fields in the order they are read from metadata. The class loader considers the specified packing size but ignores any specified field offsets. The metadata preserves the order in which the field definitions are emitted. Even across a merge, the metadata will not reorder the field definitions. The loader will honor the specified field offsets only if <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">System.Reflection.TypeAttributes</a> is specified.  </p>\n</li>\n</ul>\n<h2 id=\"known-issues\">Known Issues</h2>\n<ul>\n<li><p>Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface. However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.  </p>\n</li>\n<li><p>Although TypeBuilder is derived from <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, some of the abstract methods defined in the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> class are not fully implemented in the TypeBuilder class. Calls to these TypeBuilder methods throw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception. The desired functionality can be obtained by retrieving the created type using the <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and reflecting on the retrieved type.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_UnspecifiedTypeSize\" data-linktype=\"self-bookmark\">UnspecifiedTypeSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents that total size for the type is not specified.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_Assembly\" data-linktype=\"self-bookmark\">Assembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the dynamic assembly that contains this type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_AssemblyQualifiedName\" data-linktype=\"self-bookmark\">AssemblyQualifiedName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the full name of this type qualified by the display name of the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_BaseType\" data-linktype=\"self-bookmark\">BaseType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the base type of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DeclaringMethod\" data-linktype=\"self-bookmark\">DeclaringMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method that declared the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type that declared this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_FullName\" data-linktype=\"self-bookmark\">FullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the full path of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GenericParameterAttributes\" data-linktype=\"self-bookmark\">GenericParameterAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates the covariance and special constraints of the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GenericParameterPosition\" data-linktype=\"self-bookmark\">GenericParameterPosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GUID\" data-linktype=\"self-bookmark\">GUID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the GUID of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsConstructedGenericType\" data-linktype=\"self-bookmark\">IsConstructedGenericType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsGenericParameter\" data-linktype=\"self-bookmark\">IsGenericParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current type is a generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsGenericType\" data-linktype=\"self-bookmark\">IsGenericType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current type is a generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsGenericTypeDefinition\" data-linktype=\"self-bookmark\">IsGenericTypeDefinition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> represents a generic type definition from which other generic types can be constructed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsSecurityCritical\" data-linktype=\"self-bookmark\">IsSecurityCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsSecuritySafeCritical\" data-linktype=\"self-bookmark\">IsSecuritySafeCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsSecurityTransparent\" data-linktype=\"self-bookmark\">IsSecurityTransparent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the dynamic module that contains this type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the namespace where this <code>TypeBuilder</code> is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_PackingSize\" data-linktype=\"self-bookmark\">PackingSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the packing size of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type that was used to obtain this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_Size\" data-linktype=\"self-bookmark\">Size</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the total size of a type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_TypeHandle\" data-linktype=\"self-bookmark\">TypeHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported in dynamic modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_TypeToken\" data-linktype=\"self-bookmark\">TypeToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type token of this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_UnderlyingSystemType\" data-linktype=\"self-bookmark\">UnderlyingSystemType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying system type for this <code>TypeBuilder</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_AddDeclarativeSecurity_System_Security_Permissions_SecurityAction_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">AddDeclarativeSecurity(SecurityAction,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds declarative security to this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_AddInterfaceImplementation_System_Type_\" data-linktype=\"self-bookmark\">AddInterfaceImplementation(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an interface that this type implements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_CreateType\" data-linktype=\"self-bookmark\">CreateType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the class. After defining fields and methods on the class, <code>CreateType</code> is called in order to load its <code>Type</code> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_CreateTypeInfo\" data-linktype=\"self-bookmark\">CreateTypeInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object that represents this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineConstructor_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type___\" data-linktype=\"self-bookmark\">DefineConstructor(MethodAttributes,CallingConventions,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new constructor to the type, with the given attributes and signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineConstructor_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type___System_Type_____System_Type_____\" data-linktype=\"self-bookmark\">DefineConstructor(MethodAttributes,CallingConventions,Type[],Type[][],Type[][])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineDefaultConstructor_System_Reflection_MethodAttributes_\" data-linktype=\"self-bookmark\">DefineDefaultConstructor(MethodAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineEvent_System_String_System_Reflection_EventAttributes_System_Type_\" data-linktype=\"self-bookmark\">DefineEvent(String,EventAttributes,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new event to the type, with the given name, attributes and event type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineField_System_String_System_Type_System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineField(String,Type,FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new field to the type, with the given name, attributes, and field type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineField_System_String_System_Type_System_Type___System_Type___System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineField(String,Type,Type[],Type[],FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_System_String___\" data-linktype=\"self-bookmark\">DefineGenericParameters(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> objects that can be used to set their constraints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineInitializedData_System_String_System_Byte___System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineInitializedData(String,Byte[],FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines initialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_\" data-linktype=\"self-bookmark\">DefineMethod(String,MethodAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new method to the type, with the specified name and method attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_\" data-linktype=\"self-bookmark\">DefineMethod(String,MethodAttributes,CallingConventions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new method to the type, with the specified name, method attributes, and calling convention.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineMethod(String,MethodAttributes,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new method to the type, with the specified name, method attributes, and method signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineMethod(String,MethodAttributes,CallingConventions,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\" data-linktype=\"self-bookmark\">DefineMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineMethodOverride_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">DefineMethodOverride(MethodInfo,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a given method body that implements a given method declaration, potentially with a different name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_\" data-linktype=\"self-bookmark\">DefineNestedType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name and attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name, attributes, and the type that it extends.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Int32_\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes,Type,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes,Type,PackingSize)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_System_Int32_\" data-linktype=\"self-bookmark\">DefineNestedType(String,TypeAttributes,Type,PackingSize,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a nested type, given its name, attributes, size, and the type that it extends.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\" data-linktype=\"self-bookmark\">DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\" data-linktype=\"self-bookmark\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\" data-linktype=\"self-bookmark\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][],CallingConvention,CharSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <code>PInvoke</code> flags, and custom modifiers for the parameters and return type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineProperty(String,PropertyAttributes,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new property to the type, with the given name and property signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineProperty(String,PropertyAttributes,CallingConventions,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\" data-linktype=\"self-bookmark\">DefineProperty(String,PropertyAttributes,Type,Type[],Type[],Type[],Type[][],Type[][])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new property to the type, with the given name, property signature, and custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\" data-linktype=\"self-bookmark\">DefineProperty(String,PropertyAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineTypeInitializer\" data-linktype=\"self-bookmark\">DefineTypeInitializer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the initializer for this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_DefineUninitializedData_System_String_System_Int32_System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineUninitializedData(String,Int32,FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an uninitialized data field in the <code>.sdata</code> section of the portable executable (PE) file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetAttributeFlagsImpl\" data-linktype=\"self-bookmark\">GetAttributeFlagsImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetConstructor_System_Type_System_Reflection_ConstructorInfo_\" data-linktype=\"self-bookmark\">GetConstructor(Type,ConstructorInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetConstructors_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetConstructors(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the public and non-public constructors defined for this class, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes of the current type that are assignable to a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetElementType\" data-linktype=\"self-bookmark\">GetElementType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvent(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the event with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetEvents\" data-linktype=\"self-bookmark\">GetEvents()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public events declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetEvents_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvents(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public events that are declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetField_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetField(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field specified by the given name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetField_System_Type_System_Reflection_FieldInfo_\" data-linktype=\"self-bookmark\">GetField(Type,FieldInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetFields_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetFields(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public fields that are declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetGenericArguments\" data-linktype=\"self-bookmark\">GetGenericArguments()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetGenericTypeDefinition\" data-linktype=\"self-bookmark\">GetGenericTypeDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a generic type definition from which the current type can be obtained.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetInterface_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetInterface(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetInterfaceMap_System_Type_\" data-linktype=\"self-bookmark\">GetInterfaceMap(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an interface mapping for the requested interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetInterfaces\" data-linktype=\"self-bookmark\">GetInterfaces()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of all the interfaces implemented on this type and its base types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMember(String,MemberTypes,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the public and non-public members declared or inherited by this type, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetMembers_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMembers(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the members for the public and non-public members declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetMethod_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">GetMethod(Type,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetMethods_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMethods(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the public and non-public methods declared or inherited by this type, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedType(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public nested types that are declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetNestedTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedTypes(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public nested types that are declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetProperties_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetProperties(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the public and non-public properties declared or inherited by this type, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_HasElementTypeImpl\" data-linktype=\"self-bookmark\">HasElementTypeImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\" data-linktype=\"self-bookmark\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsArrayImpl\" data-linktype=\"self-bookmark\">IsArrayImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\" data-linktype=\"self-bookmark\">IsAssignableFrom(TypeInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object can be assigned to this object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsAssignableFrom_System_Type_\" data-linktype=\"self-bookmark\">IsAssignableFrom(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> can be assigned to this object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsByRefImpl\" data-linktype=\"self-bookmark\">IsByRefImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsCOMObjectImpl\" data-linktype=\"self-bookmark\">IsCOMObjectImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsCreated\" data-linktype=\"self-bookmark\">IsCreated()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current dynamic type has been created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a custom attribute is applied to the current type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsPointerImpl\" data-linktype=\"self-bookmark\">IsPointerImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsPrimitiveImpl\" data-linktype=\"self-bookmark\">IsPrimitiveImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_IsSubclassOf_System_Type_\" data-linktype=\"self-bookmark\">IsSubclassOf(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this type is derived from a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_MakeArrayType\" data-linktype=\"self-bookmark\">MakeArrayType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a one-dimensional array of the current type, with a lower bound of zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_MakeArrayType_System_Int32_\" data-linktype=\"self-bookmark\">MakeArrayType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents an array of the current type, with the specified number of dimensions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_MakeByRefType\" data-linktype=\"self-bookmark\">MakeByRefType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_MakeGenericType_System_Type___\" data-linktype=\"self-bookmark\">MakeGenericType(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_MakePointerType\" data-linktype=\"self-bookmark\">MakePointerType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of an unmanaged pointer to the current type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_SetParent_System_Type_\" data-linktype=\"self-bookmark\">SetParent(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the base type of the type currently under construction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the name of the type excluding the namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_TypeBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_TypeBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_TypeBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_TypeBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_UnspecifiedTypeSize\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnspecifiedTypeSize</div>        \r\n          </div>\r\n    \r\n            <p>Represents that total size for the type is not specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int UnspecifiedTypeSize = 0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_Assembly\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_Assembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the dynamic assembly that contains this type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly Assembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the dynamic assembly that contains this type definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_AssemblyQualifiedName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_AssemblyQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AssemblyQualifiedName</div>        \r\n          </div>\r\n    \r\n            <p>Returns the full name of this type qualified by the display name of the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string AssemblyQualifiedName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The full name of this type qualified by the display name of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The format of the returned string is the concatenation of the full name of the type (<a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_FullName_\" data-linktype=\"relative-path\">FullName</a>) and the display name of the assembly (<a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_FullName_\" data-linktype=\"relative-path\">FullName</a>), separated by a comma and a space.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for a description of the format of the display name of an assembly.  </p>\n<h2 id=\"version-information\">Version Information</h2>\n<p> In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_BaseType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_BaseType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseType</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the base type of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type BaseType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the base type of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DeclaringMethod\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DeclaringMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method that declared the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodBase DeclaringMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> When emitting code, a generic type parameter is represented by a <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object rather than by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type that declared this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. The type that declared this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_FullName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_FullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullName</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the full path of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string FullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the full path of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned format is &quot;enclosingTypeFullName+nestedTypeName&quot; for nested types and &quot;typeName&quot; for non-nested types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GenericParameterAttributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GenericParameterAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericParameterAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates the covariance and special constraints of the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a> values that describes the covariance and special constraints of the current generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> When emitting code, a generic type parameter is represented by a <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object rather than by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GenericParameterPosition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GenericParameterPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericParameterPosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GenericParameterPosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>If the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> When emitting code, a generic type parameter is represented by a <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object rather than by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.  </p>\n</div>\n<p> If the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> does not represent a generic type parameter, the value of this property is undefined. Use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property to determine whether the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> represents a generic type parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GUID\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GUID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GUID</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the GUID of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Guid GUID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the GUID of this type</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsConstructedGenericType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsConstructedGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsConstructedGenericType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsConstructedGenericType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this object represents a constructed generic type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsGenericParameter\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsGenericParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current type is a generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> When emitting code, a generic type parameter is represented by a <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object rather than by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsGenericType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current type is a generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the type represented by the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object is generic; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type definition if the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method has been used to give it generic type parameters. An instance of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> class that is generic is always a generic type definition.  </p>\n<p> For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsGenericTypeDefinition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsGenericTypeDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericTypeDefinition</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> represents a generic type definition from which other generic types can be constructed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericTypeDefinition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type definition; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type definition if the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method has been used to give it generic type parameters. An instance of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> class that is generic is always a generic type definition.  </p>\n<p> A <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> can be used to build generic type definitions, but not constructed generic types. To get a constructed generic type, call the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method on a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> that represents a generic type definition.  </p>\n<p> For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsSecurityCritical\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsSecurityCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecurityCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current type is security-critical or security-safe-critical; <code>false</code> if it is transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current dynamic type has not been created by calling the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsSecurityCritical, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe-critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  </p>\n<p> By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, or <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Default inheritance is limited to the runtime&#39;s evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  </p>\n</div>\n<p> For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsSecuritySafeCritical\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsSecuritySafeCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecuritySafeCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecuritySafeCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current type is security-safe-critical; <code>false</code> if it is security-critical or transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current dynamic type has not been created by calling the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, IsSecuritySafeCritical, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe-critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  </p>\n<p> By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, or <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Default inheritance is limited to the runtime&#39;s evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  </p>\n</div>\n<p> For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsSecurityTransparent\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsSecurityTransparent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityTransparent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSecurityTransparent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the type is security-transparent; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current dynamic type has not been created by calling the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and IsSecurityTransparent properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe-critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<p> The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  </p>\n<p> By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a>, or <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"relative-path\">System.AppDomain.DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Default inheritance is limited to the runtime&#39;s evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  </p>\n</div>\n<p> For more information about reflection emit and transparency, see <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the dynamic module that contains this type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the dynamic module that contains this type definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> name of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_Namespace\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the namespace where this <code>TypeBuilder</code> is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Namespace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the namespace where this <code>TypeBuilder</code> is defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_PackingSize\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_PackingSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PackingSize</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the packing size of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.PackingSize PackingSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.packingsize\" data-linktype=\"relative-path\">PackingSize</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves the packing size of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type that was used to obtain this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. The type that was used to obtain this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_Size\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_Size_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Size</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the total size of a type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Size { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Read-only. Retrieves this type’s total size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_TypeHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_TypeHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeHandle</div>        \r\n          </div>\r\n    \r\n            <p>Not supported in dynamic modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeTypeHandle TypeHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </div>\r\n                  <p>Read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Not supported in dynamic modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_TypeToken\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_TypeToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeToken</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type token of this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeToken TypeToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typetoken\" data-linktype=\"relative-path\">TypeToken</a></div>\r\n                  </div>\r\n                  <p>Read-only. Returns the <code>TypeToken</code> of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_UnderlyingSystemType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_UnderlyingSystemType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlyingSystemType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying system type for this <code>TypeBuilder</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type UnderlyingSystemType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. Returns the underlying system type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This type is an enumeration, but there is no underlying system type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_AddDeclarativeSecurity_System_Security_Permissions_SecurityAction_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_AddDeclarativeSecurity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddDeclarativeSecurity(SecurityAction,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Adds declarative security to this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The security action to be taken such as Demand, Assert, and so on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of permissions the action applies to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> is invalid (<code>RequestMinimum</code>, <code>RequestOptional</code>, and <code>RequestRefuse</code> are invalid).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> The permission set <code>pset</code> contains an action that was added earlier by <code>AddDeclarativeSecurity</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>pset</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>AddDeclarativeSecurity</code> may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the <code>AddDeclarativeSecurity</code> method to add a security demand for <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag to a dynamic type named <code>MyDynamicClass</code>, in an assembly named EmittedExample.dll. The example produces no console output; after you run it, you can use <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine EmittedExample.dll. In <code>MyDynamicClass</code>, open the <code>.class public auto ansi</code> statement to see the declarative permission.  </p>\n<pre><code class=\"lang-cpp\" name=\"TypeBuilder_AddDeclarativeSecurity#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Security;\nusing namespace System::Security::Permissions;\n\nint main()\n{\n   // Create a simple name for the assembly; create the assembly and module.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName(&quot;EmittedAssembly&quot;);\n   AssemblyBuilder^ myAssemblyBuilder = \n       AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n   ModuleBuilder^ myModuleBuilder = \n       myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedAssembly&quot;, &quot;EmittedAssembly.dll&quot;);\n   \n   // Define a public class named &quot;MyDynamicClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyDynamicClass&quot;, TypeAttributes::Public );\n   \n\n   // Create a permission set and add a security permission\n   // with the ControlEvidence flag.\n   //\n   PermissionSet^ myPermissionSet = gcnew PermissionSet(PermissionState::None);\n   myPermissionSet-&gt;AddPermission(\n      gcnew SecurityPermission(SecurityPermissionFlag::ControlEvidence));\n\n   // Add the permission set to the MyDynamicClass type,\n   // as a declarative security demand.\n   //\n   myTypeBuilder-&gt;AddDeclarativeSecurity(SecurityAction::Demand, myPermissionSet);\n\n   \n   Type^ myType = myTypeBuilder-&gt;CreateType();\n   myAssemblyBuilder-&gt;Save(&quot;EmittedAssembly.dll&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_AddDeclarativeSecurity#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security\nImports System.Security.Permissions\n\nNamespace CustomAttribute_Sample\n\n   Class MyApplication\n      \n      Shared Sub Main()\n         &#39; Create a simple name for the assembly; create the assembly and the module.        \n         Dim myAssemblyName As New AssemblyName(&quot;EmittedAssembly&quot;)\n         Dim myAssemblyBuilder As AssemblyBuilder = _\n                  AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                          myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n         Dim myModuleBuilder As ModuleBuilder = _\n                  myAssemblyBuilder.DefineDynamicModule(&quot;EmittedAssembly&quot;, &quot;EmittedAssembly.dll&quot;)\n\n         &#39; Define a public class named &quot;MyDynamicClass&quot; in the assembly.\n         Dim myTypeBuilder As TypeBuilder = _\n                  myModuleBuilder.DefineType(&quot;MyDynamicClass&quot;, TypeAttributes.Public)\n\n\n         &#39; Create a permission set and add a security permission\n         &#39; with the ControlEvidence flag.\n         &#39;\n         Dim myPermissionSet As New PermissionSet(PermissionState.None)\n         Dim ce As New SecurityPermission(SecurityPermissionFlag.ControlEvidence)\n         myPermissionSet.AddPermission(ce)\n\n         &#39; Add the permission set to the MyDynamicClass type,\n         &#39; as a declarative security demand.\n         &#39;\n         myTypeBuilder.AddDeclarativeSecurity(SecurityAction.Demand, myPermissionSet)\n\n\n         Dim myType As Type = myTypeBuilder.CreateType()\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      End Sub \n   End Class \nEnd Namespace \n</code></pre><pre><code class=\"lang-cs\" name=\"TypeBuilder_AddDeclarativeSecurity#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security;\nusing System.Security.Permissions;\n\nnamespace CustomAttribute_Sample\n{\n   public class MyApplication \n   {\n      static void Main()\n      {\n         // Create a simple name for the assembly, and create the assembly and module.\n         AssemblyName myAssemblyName = new AssemblyName(&quot;EmittedAssembly&quot;);\n         AssemblyBuilder myAssemblyBuilder =\n            AppDomain.CurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         ModuleBuilder myModuleBuilder = \n            myAssemblyBuilder.DefineDynamicModule(&quot;EmittedAssembly&quot;, &quot;EmittedAssembly.dll&quot;);\n\n         // Define a public class named &quot;MyDynamicClass&quot; in the assembly.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;MyDynamicClass&quot;,\n            TypeAttributes.Public);\n\n\n         // Create a permission set and add a security permission\n         // with the ControlEvidence flag.\n         //\n         PermissionSet myPermissionSet = new PermissionSet(PermissionState.None);\n         myPermissionSet.AddPermission(\n             new SecurityPermission(SecurityPermissionFlag.ControlEvidence));\n\n         // Add the permission set to the MyDynamicClass type,\n         // as a declarative security demand.\n         //\n         myTypeBuilder.AddDeclarativeSecurity(SecurityAction.Demand, myPermissionSet);\n\n\n         Type myType = myTypeBuilder.CreateType();\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_AddInterfaceImplementation_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_AddInterfaceImplementation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddInterfaceImplementation(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an interface that this type implements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddInterfaceImplementation (Type interfaceType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaceType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface that this type implements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>interfaceType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the implementation of an interface on a dynamically created type using <code>AddInterfaceImplementation</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_Sample_4#3\">      // Mark the class as implementing &#39;IHello&#39; interface.\n      helloWorldTypeBuilder.AddInterfaceImplementation(typeof(IHello));\n      MethodBuilder myMethodBuilder =\n         helloWorldTypeBuilder.DefineMethod(&quot;SayHello&quot;,\n                              MethodAttributes.Public|MethodAttributes.Virtual,\n                              null,\n                              null);\n      // Generate IL for &#39;SayHello&#39; method.\n      ILGenerator myMethodIL = myMethodBuilder.GetILGenerator();\n      myMethodIL.EmitWriteLine(myGreetingField);\n      myMethodIL.Emit(OpCodes.Ret);\n     MethodInfo sayHelloMethod = typeof(IHello).GetMethod(&quot;SayHello&quot;);\n     helloWorldTypeBuilder.DefineMethodOverride(myMethodBuilder,sayHelloMethod);\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_Sample_4#3\">      &#39; Mark the class as implementing &#39;IHello&#39; interface.\n      helloWorldTypeBuilder.AddInterfaceImplementation(GetType(IHello))\n      Dim myMethodBuilder As MethodBuilder = helloWorldTypeBuilder.DefineMethod(&quot;SayHello&quot;, _\n                           MethodAttributes.Public Or MethodAttributes.Virtual, Nothing, Nothing)\n      &#39; Generate IL for &#39;SayHello&#39; method.\n      Dim myMethodIL As ILGenerator = myMethodBuilder.GetILGenerator()\n      myMethodIL.EmitWriteLine(myGreetingField)\n      myMethodIL.Emit(OpCodes.Ret)\n      Dim sayHelloMethod As MethodInfo = GetType(IHello).GetMethod(&quot;SayHello&quot;)\n      helloWorldTypeBuilder.DefineMethodOverride(myMethodBuilder, sayHelloMethod)\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_Sample_4#3\">   // Mark the class as implementing &#39;IHello&#39; interface.\n   helloWorldTypeBuilder-&gt;AddInterfaceImplementation( IHello::typeid );\n   MethodBuilder^ myMethodBuilder =\n      helloWorldTypeBuilder-&gt;DefineMethod( &quot;SayHello&quot;,\n         (MethodAttributes)(MethodAttributes::Public | MethodAttributes::Virtual),\n         nullptr,\n         nullptr );\n   // Generate IL for &#39;SayHello&#39; method.\n   ILGenerator^ myMethodIL = myMethodBuilder-&gt;GetILGenerator();\n   myMethodIL-&gt;EmitWriteLine( myGreetingField );\n   myMethodIL-&gt;Emit( OpCodes::Ret );\n   MethodInfo^ sayHelloMethod = IHello::typeid-&gt;GetMethod( &quot;SayHello&quot; );\n   helloWorldTypeBuilder-&gt;DefineMethodOverride( myMethodBuilder, sayHelloMethod );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_CreateType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_CreateType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateType()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the class. After defining fields and methods on the class, <code>CreateType</code> is called in order to load its <code>Type</code> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type CreateType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns the new <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The enclosing type has not been created.  </p>\n<p> -or-  </p>\n<p> This type is non-abstract and contains an abstract method.  </p>\n<p> -or-  </p>\n<p> This type is not an abstract class or an interface and has a method without a method body.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The type contains invalid Microsoft intermediate language (MSIL) code.  </p>\n<p> -or-  </p>\n<p> The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The type cannot be loaded. For example, it contains a <code>static</code> method that has the calling convention <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this type is a nested type, the CreateType method must be called on the enclosing type before it is called on the nested type.  </p>\n<p> If the current type derives from an incomplete type or implements incomplete interfaces, call the CreateType method on the parent type and the interface types before calling it on the current type.  </p>\n<p> If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the CreateType method on the enclosing type will generate a <a class=\"xref\" href=\"system.appdomain#System_AppDomain_TypeResolve\" data-linktype=\"relative-path\">System.AppDomain.TypeResolve</a> event. This is because the loader cannot determine the size of the enclosing type until the nested type has been completed. The caller should define a handler for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_TypeResolve\" data-linktype=\"relative-path\">TypeResolve</a> event to complete the definition of the nested type by calling CreateType on the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents the nested type. The code example for this topic shows how to define such an event handler.  </p>\n<p> A type is created only once, no matter how many times the CreateType method is called. All calls return the same <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to define an event handler for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_TypeResolve\" data-linktype=\"relative-path\">System.AppDomain.TypeResolve</a> event, in order to call the CreateType method on a nested type during a CreateType call on the enclosing type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.TypeBuilder.CreateType Example#1\">\nusing System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Threading;\nusing System.Text;\nusing System.Resources;\nusing System.Collections;\nusing System.IO;\n\ninternal class NestedEnum {    \n    internal static TypeBuilder enumType = null;\n    internal static Type tNested = null;   \n    internal static Type tNesting = null;\n\n    public static void Main(String[] args) {\n\tAssemblyName asmName = new AssemblyName();\n\tasmName.Name = &quot;NestedEnum&quot;;\n\tAssemblyBuilder asmBuild = Thread.GetDomain().DefineDynamicAssembly(asmName, AssemblyBuilderAccess.RunAndSave);\n\tModuleBuilder modBuild = asmBuild.DefineDynamicModule(&quot;ModuleOne&quot;, &quot;NestedEnum.dll&quot;);       \n\n\t// Hook up the event listening.\n\tTypeResolveHandler typeResolveHandler = new TypeResolveHandler(modBuild);\n\t// Add a listener for the type resolve events.\n\tAppDomain currentDomain = Thread.GetDomain();\n\tResolveEventHandler resolveHandler = new ResolveEventHandler(typeResolveHandler.ResolveEvent);\n\tcurrentDomain.TypeResolve += resolveHandler;\n\n\tTypeBuilder tb = modBuild.DefineType(&quot;AType&quot;, TypeAttributes.Public);\n\tTypeBuilder eb = tb.DefineNestedType(&quot;AnEnum&quot;, TypeAttributes.NestedPublic | TypeAttributes.Sealed, typeof(Enum), null);\n\teb.DefineField(&quot;value__&quot;, typeof(int), FieldAttributes.Private | FieldAttributes.SpecialName);\n\tFieldBuilder fb = eb.DefineField(&quot;Field1&quot;, eb, FieldAttributes.Public | FieldAttributes.Literal | FieldAttributes.Static);\n\tfb.SetConstant(1);\n\n\tenumType = eb;\n\n\t// Comment out this field.\n\t// When this field is defined, the loader cannot determine the size\n\t// of the type. Therefore, a TypeResolve event is generated when the\n\t// nested type is completed.\n\ttb.DefineField(&quot;Field2&quot;, eb, FieldAttributes.Public);        \n\n\ttNesting = tb.CreateType();\n\tif (tNesting == null)\n\t    Console.WriteLine(&quot;NestingType CreateType failed but didn&#39;t throw!&quot;);\t\n\n\ttry {\n\t    tNested = eb.CreateType();\n\t    if (tNested == null)\n\t\tConsole.WriteLine(&quot;NestedType CreateType failed but didn&#39;t throw!&quot;);\t\n\t}\n\tcatch {\n\t    // This is needed because you might have already completed the type in the TypeResolve event.\n\t}\n\n\tif (tNested != null) {\n\t    Type x = tNested.DeclaringType;\n\t    if (x == null)\n\t\tConsole.WriteLine(&quot;Declaring type was null.&quot;);\n\t    else \n\t\tConsole.WriteLine(x.Name);\n\t}\n\n\tasmBuild.Save( &quot;NestedEnum.dll&quot; );\n\n\t// Remove the listener for the type resolve events.\n\tcurrentDomain.TypeResolve -= resolveHandler;\n    }\n}\n\n// Helper class called when a resolve type event is raised.\ninternal class TypeResolveHandler \n{\n    private Module m_Module;\n\n    public TypeResolveHandler(Module mod)\n    {\n\tm_Module = mod;\n    }\n\n    public Assembly ResolveEvent(Object sender, ResolveEventArgs args)\n    {\n\tConsole.WriteLine(args.Name);\n\t// Use args.Name to look up the type name. In this case, you are getting AnEnum.\n\ttry {\n\t    NestedEnum.tNested = NestedEnum.enumType.CreateType();\n\t}\n\tcatch {\n\t    // This is needed to throw away InvalidOperationException.\n\t    // Loader might send the TypeResolve event more than once\n\t    // and the type might be complete already.\n\t}\n\n\t// Complete the type.\t\t    \n\treturn m_Module.Assembly;\n    }\n}\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.TypeBuilder.CreateType Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Threading;\nusing namespace System::Text;\nusing namespace System::Resources;\nusing namespace System::Collections;\nusing namespace System::IO;\n\n// Helper class called when a resolve type event is raised.\nref class TypeResolveHandler\n{\nprivate:\n   Module^ m_Module;\n\npublic:\n   TypeResolveHandler( Module^ mod )\n   {\n      m_Module = mod;\n   }\n\n   Assembly^ ResolveEvent( Object^ sender, ResolveEventArgs^ args );\n};\n\nref class NestedEnum\n{\ninternal:\n   static TypeBuilder^ enumType = nullptr;\n   static Type^ tNested = nullptr;\n   static Type^ tNesting = nullptr;\n\npublic:\n   static void Main()\n   {\n      AssemblyName^ asmName = gcnew AssemblyName;\n      asmName-&gt;Name = &quot;NestedEnum&quot;;\n      AssemblyBuilder^ asmBuild = Thread::GetDomain()-&gt;DefineDynamicAssembly( asmName, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modBuild = asmBuild-&gt;DefineDynamicModule( &quot;ModuleOne&quot;, &quot;NestedEnum.dll&quot; );\n      \n      // Hook up the event listening.\n      TypeResolveHandler^ typeResolveHandler = gcnew TypeResolveHandler( modBuild );\n      \n      // Add a listener for the type resolve events.\n      AppDomain^ currentDomain = Thread::GetDomain();\n      ResolveEventHandler^ resolveHandler = gcnew ResolveEventHandler( typeResolveHandler, &amp;TypeResolveHandler::ResolveEvent );\n      currentDomain-&gt;TypeResolve += resolveHandler;\n      TypeBuilder^ tb = modBuild-&gt;DefineType( &quot;AType&quot;, TypeAttributes::Public );\n      TypeBuilder^ eb = tb-&gt;DefineNestedType( &quot;AnEnum&quot;, static_cast&lt;TypeAttributes&gt;(TypeAttributes::NestedPublic | TypeAttributes::Sealed), Enum::typeid, 0 );\n      eb-&gt;DefineField( &quot;value__&quot;, int::typeid, static_cast&lt;FieldAttributes&gt;(FieldAttributes::Private | FieldAttributes::SpecialName) );\n      FieldBuilder^ fb = eb-&gt;DefineField( &quot;Field1&quot;, eb, static_cast&lt;FieldAttributes&gt;(FieldAttributes::Public | FieldAttributes::Literal | FieldAttributes::Static) );\n      fb-&gt;SetConstant( 1 );\n      enumType = eb;\n      \n      // Comment out this field.\n      // When this field is defined, the loader cannot determine the size\n      // of the type. Therefore, a TypeResolve event is generated when the\n      // nested type is completed.\n      tb-&gt;DefineField( &quot;Field2&quot;, eb, FieldAttributes::Public );\n      tNesting = tb-&gt;CreateType();\n      if ( tNesting == nullptr )\n            Console::WriteLine( &quot;NestingType CreateType failed but didn&#39;t throw!&quot; );\n\n      try\n      {\n         tNested = eb-&gt;CreateType();\n         if ( tNested == nullptr )\n                  Console::WriteLine( &quot;NestedType CreateType failed but didn&#39;t throw!&quot; );\n      }\n      catch ( Exception^ ) \n      {\n         \n         // This is needed because you might have already completed the type in the TypeResolve event.\n      }\n\n      if ( tNested != nullptr )\n      {\n         Type^ x = tNested-&gt;DeclaringType;\n         if ( x == nullptr )\n                  Console::WriteLine( &quot;Declaring type is null.&quot; );\n         else\n                  Console::WriteLine( x-&gt;Name );\n      }\n\n      asmBuild-&gt;Save( &quot;NestedEnum.dll&quot; );\n      \n      // Remove the listener for the type resolve events.\n      currentDomain-&gt;TypeResolve -= resolveHandler;\n   }\n\n};\n\nAssembly^ TypeResolveHandler::ResolveEvent( Object^ sender, ResolveEventArgs^ args )\n{\n   Console::WriteLine( args-&gt;Name );\n   \n   // Use args.Name to look up the type name. In this case, you are getting AnEnum.\n   try\n   {\n      NestedEnum::tNested = NestedEnum::enumType-&gt;CreateType();\n   }\n   catch ( Exception^ ) \n   {\n      \n      // This is needed to throw away InvalidOperationException.\n      // Loader might send the TypeResolve event more than once\n      // and the type might be complete already.\n   }\n\n   \n   // Complete the type.\n   return m_Module-&gt;Assembly;\n}\n\nint main()\n{\n   NestedEnum::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.TypeBuilder.CreateType Example#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Threading\nImports System.Text\nImports System.Resources\nImports System.Collections\nImports System.IO\n\nFriend Class NestedEnum\n   Friend Shared enumType As TypeBuilder = Nothing\n   Friend Shared tNested As Type = Nothing\n   Friend Shared tNesting As Type = Nothing\n   \n   Public Shared Sub Main()\n      Dim asmName As New AssemblyName()\n      asmName.Name = &quot;NestedEnum&quot;\n      Dim asmBuild As AssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(asmName, AssemblyBuilderAccess.RunAndSave)\n      Dim modBuild As ModuleBuilder = asmBuild.DefineDynamicModule(&quot;ModuleOne&quot;, &quot;NestedEnum.dll&quot;)\n      \n      &#39; Hook up the event listening.\n      Dim typeResolveHandler As New TypeResolveHandler(modBuild)\n      &#39; Add a listener for the type resolve events.\n      Dim currentDomain As AppDomain = Thread.GetDomain()\n      Dim resolveHandler As ResolveEventHandler = AddressOf typeResolveHandler.ResolveEvent\n      AddHandler currentDomain.TypeResolve, resolveHandler \n      \n      Dim tb As TypeBuilder = modBuild.DefineType(&quot;AType&quot;, TypeAttributes.Public)\n      Dim eb As TypeBuilder = tb.DefineNestedType(&quot;AnEnum&quot;, TypeAttributes.NestedPublic Or TypeAttributes.Sealed, GetType([Enum]))\n      eb.DefineField(&quot;value__&quot;, GetType(Integer), FieldAttributes.Private Or FieldAttributes.SpecialName)\n      Dim fb As FieldBuilder = eb.DefineField(&quot;Field1&quot;, eb, FieldAttributes.Public Or FieldAttributes.Literal Or FieldAttributes.Static)\n      fb.SetConstant(1)\n      \n      enumType = eb\n      \n      &#39; Comment out this field.\n      &#39; When this field is defined, the loader cannot determine the size\n      &#39; of the type. Therefore, a TypeResolve event is generated when the\n      &#39; nested type is completed.\n      tb.DefineField(&quot;Field2&quot;, eb, FieldAttributes.Public)\n      \n      tNesting = tb.CreateType()\n      If tNesting Is Nothing Then\n         Console.WriteLine(&quot;NestingType CreateType failed but didn&#39;t throw!&quot;)\n      End If \n      Try\n         tNested = eb.CreateType()\n         If tNested Is Nothing Then\n            Console.WriteLine(&quot;NestedType CreateType failed but didn&#39;t throw!&quot;)\n         End If\n      Catch\n      End Try &#39; This is needed because you might have already completed the type in the TypeResolve event.\n      \n      If Not (tNested Is Nothing) Then\n         Dim x As Type = tNested.DeclaringType\n         If x Is Nothing Then\n            Console.WriteLine(&quot;Declaring type is Nothing.&quot;)\n         Else\n            Console.WriteLine(x.Name)\n         End If\n      End If \n      asmBuild.Save(&quot;NestedEnum.dll&quot;)\n      \n      &#39; Remove the listener for the type resolve events.\n      RemoveHandler currentDomain.TypeResolve, resolveHandler \n   End Sub &#39;Main\nEnd Class &#39;NestedEnum\n\n\n&#39; Helper class called when a resolve type event is raised.\nFriend Class TypeResolveHandler\n   Private m_Module As [Module]\n   \n   \n   Public Sub New([mod] As [Module])\n      m_Module = [mod]\n   End Sub &#39;New\n   \n   \n   Public Function ResolveEvent(sender As [Object], args As ResolveEventArgs) As [Assembly]\n      Console.WriteLine(args.Name)\n      &#39; Use args.Name to look up the type name. In this case, you are getting AnEnum.\n      Try\n         NestedEnum.tNested = NestedEnum.enumType.CreateType()\n      Catch\n      End Try &#39; This is needed to throw away InvalidOperationException.\n      &#39; Loader might send the TypeResolve event more than once\n      &#39; and the type might be complete already.\n      \n      &#39; Complete the type.\t\t    \n      Return m_Module.Assembly\n   End Function &#39;ResolveEvent\nEnd Class &#39;TypeResolveHandler\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_CreateTypeInfo\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_CreateTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateTypeInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object that represents this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.TypeInfo CreateTypeInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineConstructor_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineConstructor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineConstructor(MethodAttributes,CallingConventions,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new constructor to the type, with the given attributes and signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types of the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.  </p>\n<p> If you define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:  </p>\n<ul>\n<li><p>If you want a default constructor that simply calls the default constructor of the base class, you can use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineDefaultConstructor_\" data-linktype=\"relative-path\">DefineDefaultConstructor</a> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method is called.  </p>\n</li>\n<li><p>If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the DefineConstructor method to create one, and provide your own implementation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of <code>DefineConstructor</code> to set a constructor&#39;s particular signature and attributes on a dynamic type and return a corresponding <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> for MSIL population.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_Sample_4#2\">      // Define the constructor.\n      Type[] constructorArgs = { typeof(String) };\n      ConstructorBuilder myConstructorBuilder = \n         helloWorldTypeBuilder.DefineConstructor(MethodAttributes.Public, \n                            CallingConventions.Standard, constructorArgs);\n      // Generate IL for the method.The constructor stores its argument in the private field.\n      ILGenerator myConstructorIL = myConstructorBuilder.GetILGenerator();\n      myConstructorIL.Emit(OpCodes.Ldarg_0);\n      myConstructorIL.Emit(OpCodes.Ldarg_1);\n      myConstructorIL.Emit(OpCodes.Stfld, myGreetingField);\n      myConstructorIL.Emit(OpCodes.Ret);\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_Sample_4#2\">      &#39; Define the constructor.\n      Dim constructorArgs As Type() = {GetType(String)}\n      Dim myConstructorBuilder As ConstructorBuilder = helloWorldTypeBuilder.DefineConstructor _\n                           (MethodAttributes.Public, CallingConventions.Standard, constructorArgs)\n      &#39; Generate IL for the method.The constructor stores its argument in the private field.\n      Dim myConstructorIL As ILGenerator = myConstructorBuilder.GetILGenerator()\n      myConstructorIL.Emit(OpCodes.Ldarg_0)\n      myConstructorIL.Emit(OpCodes.Ldarg_1)\n      myConstructorIL.Emit(OpCodes.Stfld, myGreetingField)\n      myConstructorIL.Emit(OpCodes.Ret)\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_Sample_4#2\">   // Define the constructor.\n   array&lt;Type^&gt;^ constructorArgs = {String::typeid};\n   ConstructorBuilder^ myConstructorBuilder =\n      helloWorldTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public,\n         CallingConventions::Standard, constructorArgs );\n   // Generate IL for the method.The constructor stores its argument in the private field.\n   ILGenerator^ myConstructorIL = myConstructorBuilder-&gt;GetILGenerator();\n   myConstructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   myConstructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   myConstructorIL-&gt;Emit( OpCodes::Stfld, myGreetingField );\n   myConstructorIL-&gt;Emit( OpCodes::Ret );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineConstructor_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type___System_Type_____System_Type_____\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineConstructor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineConstructor(MethodAttributes,CallingConventions,Type[],Type[][],Type[][])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no required custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no optional custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for designers of managed compilers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineDefaultConstructor_System_Reflection_MethodAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineDefaultConstructor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDefaultConstructor(MethodAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <code>MethodAttributes</code> object representing the attributes to be applied to the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a></div>\r\n                  </div>\r\n                  <p>Returns the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The parent type (base type) does not have a default constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:  </p>\n<ul>\n<li><p>You have defined another constructor and you also want a default constructor that simply calls the base class constructor.  </p>\n</li>\n<li><p>You want to set the attributes on the default constructor to something other than <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>, <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>, <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>, <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>, and <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of <code>DefineConstructor</code> to set a constructor&#39;s particular signature and attributes on a dynamic type and return a corresponding <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> for MSIL population.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_Sample_4#2\">      // Define the constructor.\n      Type[] constructorArgs = { typeof(String) };\n      ConstructorBuilder myConstructorBuilder = \n         helloWorldTypeBuilder.DefineConstructor(MethodAttributes.Public, \n                            CallingConventions.Standard, constructorArgs);\n      // Generate IL for the method.The constructor stores its argument in the private field.\n      ILGenerator myConstructorIL = myConstructorBuilder.GetILGenerator();\n      myConstructorIL.Emit(OpCodes.Ldarg_0);\n      myConstructorIL.Emit(OpCodes.Ldarg_1);\n      myConstructorIL.Emit(OpCodes.Stfld, myGreetingField);\n      myConstructorIL.Emit(OpCodes.Ret);\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_Sample_4#2\">      &#39; Define the constructor.\n      Dim constructorArgs As Type() = {GetType(String)}\n      Dim myConstructorBuilder As ConstructorBuilder = helloWorldTypeBuilder.DefineConstructor _\n                           (MethodAttributes.Public, CallingConventions.Standard, constructorArgs)\n      &#39; Generate IL for the method.The constructor stores its argument in the private field.\n      Dim myConstructorIL As ILGenerator = myConstructorBuilder.GetILGenerator()\n      myConstructorIL.Emit(OpCodes.Ldarg_0)\n      myConstructorIL.Emit(OpCodes.Ldarg_1)\n      myConstructorIL.Emit(OpCodes.Stfld, myGreetingField)\n      myConstructorIL.Emit(OpCodes.Ret)\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_Sample_4#2\">   // Define the constructor.\n   array&lt;Type^&gt;^ constructorArgs = {String::typeid};\n   ConstructorBuilder^ myConstructorBuilder =\n      helloWorldTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public,\n         CallingConventions::Standard, constructorArgs );\n   // Generate IL for the method.The constructor stores its argument in the private field.\n   ILGenerator^ myConstructorIL = myConstructorBuilder-&gt;GetILGenerator();\n   myConstructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   myConstructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   myConstructorIL-&gt;Emit( OpCodes::Stfld, myGreetingField );\n   myConstructorIL-&gt;Emit( OpCodes::Ret );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineEvent_System_String_System_Reflection_EventAttributes_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineEvent(String,EventAttributes,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new event to the type, with the given name, attributes and event type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventattributes\" data-linktype=\"relative-path\">EventAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventtype</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.eventbuilder\" data-linktype=\"relative-path\">EventBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>eventtype</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineField_System_String_System_Type_System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineField(String,Type,FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new field to the type, with the given name, attributes, and field type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the field. <code>fieldName</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the field</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>fieldName</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is System.Void.  </p>\n<p> -or-  </p>\n<p> A total size was specified for the parent class of this field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>fieldName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineField_System_String_System_Type_System_Type___System_Type___System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineField(String,Type,Type[],Type[],FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the field. <code>fieldName</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the field</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers for the field, such as <a class=\"xref\" href=\"microsoft.visualc.isconstmodifier\" data-linktype=\"relative-path\">IsConstModifier</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers for the field, such as <a class=\"xref\" href=\"microsoft.visualc.isconstmodifier\" data-linktype=\"relative-path\">IsConstModifier</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>fieldName</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is System.Void.  </p>\n<p> -or-  </p>\n<p> A total size was specified for the parent class of this field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>fieldName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for designers of managed compilers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineGenericParameters_System_String___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineGenericParameters(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> objects that can be used to set their constraints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>names</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of names for the generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> objects that can be used to define the constraints of the generic type parameters for the current type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Generic type parameters have already been defined for this type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>names</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>names</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>names</code> is an empty array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method makes the current type a generic type. If the method is called again on the same type, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see <a href=\"../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md\" data-linktype=\"relative-path\">How to: Define a Generic Type with Reflection Emit</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EmitGenericType#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Collections::Generic;\n\n// Dummy class to satisfy TFirst constraints.\n//\npublic ref class Example {};\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic ref class ExampleBase {};\npublic interface class IExampleA {};\npublic interface class IExampleB {};\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic ref class ExampleDerived : ExampleBase, IExampleA, IExampleB {};\n\n// List the constraint flags. The GenericParameterAttributes\n// enumeration contains two sets of attributes, variance and\n// constraints. For this example, only constraints are used.\n//\nstatic void ListConstraintAttributes( Type^ t )\n{\n   // Mask off the constraint flags. \n   GenericParameterAttributes constraints = \n       t-&gt;GenericParameterAttributes &amp; \n       GenericParameterAttributes::SpecialConstraintMask;\n\n   if ((constraints &amp; GenericParameterAttributes::ReferenceTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    ReferenceTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::NotNullableValueTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    NotNullableValueTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::DefaultConstructorConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    DefaultConstructorConstraint&quot;);\n}\n\nstatic void DisplayGenericParameters( Type^ t )\n{\n   if (!t-&gt;IsGenericType)\n   {\n       Console::WriteLine( L&quot;Type &#39;{0}&#39; is not generic.&quot; );\n       return;\n   }\n   if (!t-&gt;IsGenericTypeDefinition)\n       t = t-&gt;GetGenericTypeDefinition();\n\n   array&lt;Type^&gt;^ typeParameters = t-&gt;GetGenericArguments();\n   Console::WriteLine( L&quot;\\r<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;, \n       typeParameters-&gt;Length, t );\n\n   for each ( Type^ tParam in typeParameters )\n   {\n       Console::WriteLine( L&quot;\\r<br>Type parameter {0}:&quot;, \n           tParam-&gt;ToString() );\n\n       for each (Type^ c in tParam-&gt;GetGenericParameterConstraints())\n       {\n           if (c-&gt;IsInterface)\n               Console::WriteLine( L&quot;    Interface constraint: {0}&quot;, c);\n           else\n               Console::WriteLine( L&quot;    Base type constraint: {0}&quot;, c);\n       }\n       ListConstraintAttributes(tParam);\n   }\n}\n\nvoid main()\n{\n   // Define a dynamic assembly to contain the sample type. The\n   // assembly will be run and also saved to disk, so\n   // AssemblyBuilderAccess.RunAndSave is specified.\n   //\n   AppDomain^ myDomain = AppDomain::CurrentDomain;\n   AssemblyName^ myAsmName = gcnew AssemblyName( L&quot;GenericEmitExample1&quot; );\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( \n       myAsmName, AssemblyBuilderAccess::RunAndSave );\n\n   // An assembly is made up of executable modules. For a single-\n   // module assembly, the module name and file name are the same \n   // as the assembly name. \n   //\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( \n       myAsmName-&gt;Name, String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Get type objects for the base class trivial interfaces to\n   // be used as constraints.\n   //\n   Type^ baseType = ExampleBase::typeid; \n   Type^ interfaceA = IExampleA::typeid; \n   Type^ interfaceB = IExampleB::typeid;\n   \n   // Define the sample type.\n   //\n   TypeBuilder^ myType = myModule-&gt;DefineType( L&quot;Sample&quot;, \n       TypeAttributes::Public );\n   \n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Define type parameters for the type. Until you do this, \n   // the type is not generic, as the preceding and following \n   // WriteLine statements show. The type parameter names are\n   // specified as an array of strings. To make the code\n   // easier to read, each GenericTypeParameterBuilder is placed\n   // in a variable with the same name as the type parameter.\n   // \n   array&lt;String^&gt;^typeParamNames = {L&quot;TFirst&quot;,L&quot;TSecond&quot;};\n   array&lt;GenericTypeParameterBuilder^&gt;^typeParams = \n       myType-&gt;DefineGenericParameters( typeParamNames );\n\n   GenericTypeParameterBuilder^ TFirst = typeParams[0];\n   GenericTypeParameterBuilder^ TSecond = typeParams[1];\n\n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Apply constraints to the type parameters.\n   //\n   // A type that is substituted for the first parameter, TFirst,\n   // must be a reference type and must have a parameterless\n   // constructor.\n   TFirst-&gt;SetGenericParameterAttributes( \n       GenericParameterAttributes::DefaultConstructorConstraint | \n       GenericParameterAttributes::ReferenceTypeConstraint \n   );\n\n   // A type that is substituted for the second type\n   // parameter must implement IExampleA and IExampleB, and\n   // inherit from the trivial test class ExampleBase. The\n   // interface constraints are specified as an array\n   // containing the interface types. \n   array&lt;Type^&gt;^interfaceTypes = { interfaceA, interfaceB };\n   TSecond-&gt;SetInterfaceConstraints( interfaceTypes );\n   TSecond-&gt;SetBaseTypeConstraint( baseType );\n\n   // The following code adds a private field named ExampleField,\n   // of type TFirst.\n   FieldBuilder^ exField = \n       myType-&gt;DefineField(&quot;ExampleField&quot;, TFirst, \n           FieldAttributes::Private);\n\n   // Define a static method that takes an array of TFirst and \n   // returns a List&lt;TFirst&gt; containing all the elements of \n   // the array. To define this method it is necessary to create\n   // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n   // generic type definition, generic&lt;T&gt; List. \n   // The parameter type is created by using the\n   // MakeArrayType method. \n   //\n   Type^ listOf = List::typeid;\n   Type^ listOfTFirst = listOf-&gt;MakeGenericType(TFirst);\n   array&lt;Type^&gt;^ mParamTypes = { TFirst-&gt;MakeArrayType() };\n\n   MethodBuilder^ exMethod = \n       myType-&gt;DefineMethod(&quot;ExampleMethod&quot;, \n           MethodAttributes::Public | MethodAttributes::Static, \n           listOfTFirst, \n           mParamTypes);\n\n   // Emit the method body. \n   // The method body consists of just three opcodes, to load \n   // the input array onto the execution stack, to call the \n   // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n   // which does all the work of putting the input elements into\n   // the list, and to return, leaving the list on the stack. The\n   // hard work is getting the constructor.\n   // \n   // The GetConstructor method is not supported on a \n   // GenericTypeParameterBuilder, so it is not possible to get \n   // the constructor of List&lt;TFirst&gt; directly. There are two\n   // steps, first getting the constructor of generic&lt;T&gt; List and then\n   // calling a method that converts it to the corresponding \n   // constructor of List&lt;TFirst&gt;.\n   //\n   // The constructor needed here is the one that takes an\n   // IEnumerable&lt;T&gt;. Note, however, that this is not the \n   // generic type definition of generic&lt;T&gt; IEnumerable; instead, the\n   // T from generic&lt;T&gt; List must be substituted for the T of \n   // generic&lt;T&gt; IEnumerable. (This seems confusing only because both\n   // types have type parameters named T. That is why this example\n   // uses the somewhat silly names TFirst and TSecond.) To get\n   // the type of the constructor argument, take the generic\n   // type definition generic&lt;T&gt; IEnumerable and \n   // call MakeGenericType with the first generic type parameter\n   // of generic&lt;T&gt; List. The constructor argument list must be passed\n   // as an array, with just one argument in this case.\n   // \n   // Now it is possible to get the constructor of generic&lt;T&gt; List,\n   // using GetConstructor on the generic type definition. To get\n   // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n   // the constructor from generic&lt;T&gt; List to the static\n   // TypeBuilder.GetConstructor method.\n   //\n   ILGenerator^ ilgen = exMethod-&gt;GetILGenerator();\n        \n   Type^ ienumOf = IEnumerable::typeid;\n   Type^ TfromListOf = listOf-&gt;GetGenericArguments()[0];\n   Type^ ienumOfT = ienumOf-&gt;MakeGenericType(TfromListOf);\n   array&lt;Type^&gt;^ ctorArgs = {ienumOfT};\n\n   ConstructorInfo^ ctorPrep = listOf-&gt;GetConstructor(ctorArgs);\n   ConstructorInfo^ ctor = \n       TypeBuilder::GetConstructor(listOfTFirst, ctorPrep);\n\n   ilgen-&gt;Emit(OpCodes::Ldarg_0);\n   ilgen-&gt;Emit(OpCodes::Newobj, ctor);\n   ilgen-&gt;Emit(OpCodes::Ret);\n\n   // Create the type and save the assembly. \n   Type^ finished = myType-&gt;CreateType();\n   myAssembly-&gt;Save( String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Invoke the method.\n   // ExampleMethod is not generic, but the type it belongs to is\n   // generic, so in order to get a MethodInfo that can be invoked\n   // it is necessary to create a constructed type. The Example \n   // class satisfies the constraints on TFirst, because it is a \n   // reference type and has a default constructor. In order to\n   // have a class that satisfies the constraints on TSecond, \n   // this code example defines the ExampleDerived type. These\n   // two types are passed to MakeGenericMethod to create the\n   // constructed type.\n   //\n   array&lt;Type^&gt;^ typeArgs = \n       { Example::typeid, ExampleDerived::typeid };\n   Type^ constructed = finished-&gt;MakeGenericType(typeArgs);\n   MethodInfo^ mi = constructed-&gt;GetMethod(&quot;ExampleMethod&quot;);\n\n   // Create an array of Example objects, as input to the generic\n   // method. This array must be passed as the only element of an \n   // array of arguments. The first argument of Invoke is \n   // null, because ExampleMethod is static. Display the count\n   // on the resulting List&lt;Example&gt;.\n   // \n   array&lt;Example^&gt;^ input = { gcnew Example(), gcnew Example() };\n   array&lt;Object^&gt;^ arguments = { input };\n\n   List&lt;Example^&gt;^ listX = \n       (List&lt;Example^&gt;^) mi-&gt;Invoke(nullptr, arguments);\n\n   Console::WriteLine(\n       &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n       listX-&gt;Count);\n\n   DisplayGenericParameters(finished);\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"EmitGenericType#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Collections.Generic\n\n&#39; Define a trivial base class and two trivial interfaces \n&#39; to use when demonstrating constraints.\n&#39;\nPublic Class ExampleBase\nEnd Class\n\nPublic Interface IExampleA\nEnd Interface\n\nPublic Interface IExampleB\nEnd Interface\n\n&#39; Define a trivial type that can substitute for type parameter \n&#39; TSecond.\n&#39;\nPublic Class ExampleDerived\n    Inherits ExampleBase\n    Implements IExampleA, IExampleB\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;GenericEmitExample1&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.RunAndSave)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Get type objects for the base class trivial interfaces to\n        &#39; be used as constraints.\n        &#39;\n        Dim baseType As Type = GetType(ExampleBase)\n        Dim interfaceA As Type = GetType(IExampleA)\n        Dim interfaceB As Type = GetType(IExampleB)\n                \n        &#39; Define the sample type.\n        &#39;\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Define type parameters for the type. Until you do this, \n        &#39; the type is not generic, as the preceding and following \n        &#39; WriteLine statements show. The type parameter names are\n        &#39; specified as an array of strings. To make the code\n        &#39; easier to read, each GenericTypeParameterBuilder is placed\n        &#39; in a variable with the same name as the type parameter.\n        &#39; \n        Dim typeParamNames() As String = {&quot;TFirst&quot;, &quot;TSecond&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        Dim TFirst As GenericTypeParameterBuilder = typeParams(0)\n        Dim TSecond As GenericTypeParameterBuilder = typeParams(1)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Apply constraints to the type parameters.\n        &#39;\n        &#39; A type that is substituted for the first parameter, TFirst,\n        &#39; must be a reference type and must have a parameterless\n        &#39; constructor.\n        TFirst.SetGenericParameterAttributes( _\n            GenericParameterAttributes.DefaultConstructorConstraint _\n            Or GenericParameterAttributes.ReferenceTypeConstraint)\n\n        &#39; A type that is substituted for the second type\n        &#39; parameter must implement IExampleA and IExampleB, and\n        &#39; inherit from the trivial test class ExampleBase. The\n        &#39; interface constraints are specified as an array \n        &#39; containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType)\n        Dim interfaceTypes() As Type = {interfaceA, interfaceB}\n        TSecond.SetInterfaceConstraints(interfaceTypes)\n\n        &#39; The following code adds a private field named ExampleField,\n        &#39; of type TFirst.\n        Dim exField As FieldBuilder = _\n            myType.DefineField(&quot;ExampleField&quot;, TFirst, _\n                FieldAttributes.Private)\n\n        &#39; Define a Shared method that takes an array of TFirst and \n        &#39; returns a List(Of TFirst) containing all the elements of \n        &#39; the array. To define this method it is necessary to create\n        &#39; the type List(Of TFirst) by calling MakeGenericType on the\n        &#39; generic type definition, List(Of T). (The T is omitted with\n        &#39; the GetType operator when you get the generic type \n        &#39; definition.) The parameter type is created by using the\n        &#39; MakeArrayType method. \n        &#39;\n        Dim listOf As Type = GetType(List(Of ))\n        Dim listOfTFirst As Type = listOf.MakeGenericType(TFirst)\n        Dim mParamTypes() As Type = { TFirst.MakeArrayType() }\n\n        Dim exMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;ExampleMethod&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                listOfTFirst, _\n                mParamTypes)\n\n        &#39; Emit the method body. \n        &#39; The method body consists of just three opcodes, to load \n        &#39; the input array onto the execution stack, to call the \n        &#39; List(Of TFirst) constructor that takes IEnumerable(Of TFirst),\n        &#39; which does all the work of putting the input elements into\n        &#39; the list, and to return, leaving the list on the stack. The\n        &#39; hard work is getting the constructor.\n        &#39; \n        &#39; The GetConstructor method is not supported on a \n        &#39; GenericTypeParameterBuilder, so it is not possible to get \n        &#39; the constructor of List(Of TFirst) directly. There are two\n        &#39; steps, first getting the constructor of List(Of T) and then\n        &#39; calling a method that converts it to the corresponding \n        &#39; constructor of List(Of TFirst).\n        &#39;\n        &#39; The constructor needed here is the one that takes an\n        &#39; IEnumerable(Of T). Note, however, that this is not the \n        &#39; generic type definition of IEnumerable(Of T); instead, the\n        &#39; T from List(Of T) must be substituted for the T of \n        &#39; IEnumerable(Of T). (This seems confusing only because both\n        &#39; types have type parameters named T. That is why this example\n        &#39; uses the somewhat silly names TFirst and TSecond.) To get\n        &#39; the type of the constructor argument, take the generic\n        &#39; type definition IEnumerable(Of T) (expressed as \n        &#39; IEnumerable(Of ) when you use the GetType operator) and \n        &#39; call MakeGenericType with the first generic type parameter\n        &#39; of List(Of T). The constructor argument list must be passed\n        &#39; as an array, with just one argument in this case.\n        &#39; \n        &#39; Now it is possible to get the constructor of List(Of T),\n        &#39; using GetConstructor on the generic type definition. To get\n        &#39; the constructor of List(Of TFirst), pass List(Of TFirst) and\n        &#39; the constructor from List(Of T) to the static\n        &#39; TypeBuilder.GetConstructor method.\n        &#39;\n        Dim ilgen As ILGenerator = exMethod.GetILGenerator()\n        \n        Dim ienumOf As Type = GetType(IEnumerable(Of ))\n        Dim listOfTParams() As Type = listOf.GetGenericArguments()\n        Dim TfromListOf As Type = listOfTParams(0)\n        Dim ienumOfT As Type = ienumOf.MakeGenericType(TfromListOf)\n        Dim ctorArgs() As Type = { ienumOfT }\n\n        Dim ctorPrep As ConstructorInfo = _\n            listOf.GetConstructor(ctorArgs)\n        Dim ctor As ConstructorInfo = _\n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep)\n\n        ilgen.Emit(OpCodes.Ldarg_0)\n        ilgen.Emit(OpCodes.Newobj, ctor)\n        ilgen.Emit(OpCodes.Ret)\n\n        &#39; Create the type and save the assembly. \n        Dim finished As Type = myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Invoke the method.\n        &#39; ExampleMethod is not generic, but the type it belongs to is\n        &#39; generic, so in order to get a MethodInfo that can be invoked\n        &#39; it is necessary to create a constructed type. The Example \n        &#39; class satisfies the constraints on TFirst, because it is a \n        &#39; reference type and has a default constructor. In order to\n        &#39; have a class that satisfies the constraints on TSecond, \n        &#39; this code example defines the ExampleDerived type. These\n        &#39; two types are passed to MakeGenericMethod to create the\n        &#39; constructed type.\n        &#39;\n        Dim typeArgs() As Type = _\n            { GetType(Example), GetType(ExampleDerived) }\n        Dim constructed As Type = finished.MakeGenericType(typeArgs)\n        Dim mi As MethodInfo = constructed.GetMethod(&quot;ExampleMethod&quot;)\n\n        &#39; Create an array of Example objects, as input to the generic\n        &#39; method. This array must be passed as the only element of an \n        &#39; array of arguments. The first argument of Invoke is \n        &#39; Nothing, because ExampleMethod is Shared. Display the count\n        &#39; on the resulting List(Of Example).\n        &#39; \n        Dim input() As Example = { New Example(), New Example() }\n        Dim arguments() As Object = { input }\n\n        Dim listX As List(Of Example) = mi.Invoke(Nothing, arguments)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;There are {0} elements in the List(Of Example).&quot;, _\n            listX.Count _ \n        )\n\n        DisplayGenericParameters(finished)\n    End Sub\n\n    Private Shared Sub DisplayGenericParameters(ByVal t As Type)\n\n        If Not t.IsGenericType Then\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;)\n            Return\n        End If\n        If Not t.IsGenericTypeDefinition Then _\n            t = t.GetGenericTypeDefinition()\n\n        Dim typeParameters() As Type = t.GetGenericArguments()\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Listing {0} type parameters for type &#39;{1}&#39;.&quot;, _\n            typeParameters.Length, t)\n\n        For Each tParam As Type In typeParameters\n\n            Console.WriteLine(vbCrLf &amp; &quot;Type parameter {0}:&quot;, _\n                tParam.ToString())\n\n            For Each c As Type In tParam.GetGenericParameterConstraints()\n                If c.IsInterface Then\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c)\n                Else\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c)\n                End If\n            Next \n\n            ListConstraintAttributes(tParam)\n        Next tParam\n    End Sub\n\n    &#39; List the constraint flags. The GenericParameterAttributes\n    &#39; enumeration contains two sets of attributes, variance and\n    &#39; constraints. For this example, only constraints are used.\n    &#39;\n    Private Shared Sub ListConstraintAttributes(ByVal t As Type)\n\n        &#39; Mask off the constraint flags. \n        Dim constraints As GenericParameterAttributes = _\n            t.GenericParameterAttributes And _\n            GenericParameterAttributes.SpecialConstraintMask\n\n        If (constraints And GenericParameterAttributes.ReferenceTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.NotNullableValueTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.DefaultConstructorConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;)\n\n    End Sub \n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Type &#39;Sample&#39; is generic: False\n&#39;Type &#39;Sample&#39; is generic: True\n&#39;\n&#39;There are 2 elements in the List(Of Example).\n&#39;\n&#39;Listing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n&#39;\n&#39;Type parameter TFirst:\n&#39;    ReferenceTypeConstraint\n&#39;    DefaultConstructorConstraint\n&#39;\n&#39;Type parameter TSecond:\n&#39;    Interface constraint: IExampleA\n&#39;    Interface constraint: IExampleB\n&#39;    Base type constraint: ExampleBase\n</code></pre><pre><code class=\"lang-cs\" name=\"EmitGenericType#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Collections.Generic;\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic class ExampleBase {}\n\npublic interface IExampleA {}\n\npublic interface IExampleB {}\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic class ExampleDerived : ExampleBase, IExampleA, IExampleB {}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;GenericEmitExample1&quot;);\n        AssemblyBuilder myAssembly = \n            myDomain.DefineDynamicAssembly(myAsmName, \n                AssemblyBuilderAccess.RunAndSave);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = \n            myAssembly.DefineDynamicModule(myAsmName.Name, \n               myAsmName.Name + &quot;.dll&quot;);\n\n        // Get type objects for the base class trivial interfaces to\n        // be used as constraints.\n        //\n        Type baseType = typeof(ExampleBase);\n        Type interfaceA = typeof(IExampleA);\n        Type interfaceB = typeof(IExampleB);\n                \n        // Define the sample type.\n        //\n        TypeBuilder myType = \n            myModule.DefineType(&quot;Sample&quot;, TypeAttributes.Public);\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Define type parameters for the type. Until you do this, \n        // the type is not generic, as the preceding and following \n        // WriteLine statements show. The type parameter names are\n        // specified as an array of strings. To make the code\n        // easier to read, each GenericTypeParameterBuilder is placed\n        // in a variable with the same name as the type parameter.\n        // \n        string[] typeParamNames = {&quot;TFirst&quot;, &quot;TSecond&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        GenericTypeParameterBuilder TFirst = typeParams[0];\n        GenericTypeParameterBuilder TSecond = typeParams[1];\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Apply constraints to the type parameters.\n        //\n        // A type that is substituted for the first parameter, TFirst,\n        // must be a reference type and must have a parameterless\n        // constructor.\n        TFirst.SetGenericParameterAttributes(\n            GenericParameterAttributes.DefaultConstructorConstraint |\n            GenericParameterAttributes.ReferenceTypeConstraint);\n\n        // A type that is substituted for the second type\n        // parameter must implement IExampleA and IExampleB, and\n        // inherit from the trivial test class ExampleBase. The\n        // interface constraints are specified as an array \n        // containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType);\n        Type[] interfaceTypes = {interfaceA, interfaceB};\n        TSecond.SetInterfaceConstraints(interfaceTypes);\n\n        // The following code adds a private field named ExampleField,\n        // of type TFirst.\n        FieldBuilder exField = \n            myType.DefineField(&quot;ExampleField&quot;, TFirst, \n                FieldAttributes.Private);\n\n        // Define a static method that takes an array of TFirst and \n        // returns a List&lt;TFirst&gt; containing all the elements of \n        // the array. To define this method it is necessary to create\n        // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n        // generic type definition, List&lt;T&gt;. (The T is omitted with\n        // the typeof operator when you get the generic type \n        // definition.) The parameter type is created by using the\n        // MakeArrayType method. \n        //\n        Type listOf = typeof(List&lt;&gt;);\n        Type listOfTFirst = listOf.MakeGenericType(TFirst);\n        Type[] mParamTypes = {TFirst.MakeArrayType()};\n\n        MethodBuilder exMethod = \n            myType.DefineMethod(&quot;ExampleMethod&quot;, \n                MethodAttributes.Public | MethodAttributes.Static, \n                listOfTFirst, \n                mParamTypes);\n\n        // Emit the method body. \n        // The method body consists of just three opcodes, to load \n        // the input array onto the execution stack, to call the \n        // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n        // which does all the work of putting the input elements into\n        // the list, and to return, leaving the list on the stack. The\n        // hard work is getting the constructor.\n        // \n        // The GetConstructor method is not supported on a \n        // GenericTypeParameterBuilder, so it is not possible to get \n        // the constructor of List&lt;TFirst&gt; directly. There are two\n        // steps, first getting the constructor of List&lt;T&gt; and then\n        // calling a method that converts it to the corresponding \n        // constructor of List&lt;TFirst&gt;.\n        //\n        // The constructor needed here is the one that takes an\n        // IEnumerable&lt;T&gt;. Note, however, that this is not the \n        // generic type definition of IEnumerable&lt;T&gt;; instead, the\n        // T from List&lt;T&gt; must be substituted for the T of \n        // IEnumerable&lt;T&gt;. (This seems confusing only because both\n        // types have type parameters named T. That is why this example\n        // uses the somewhat silly names TFirst and TSecond.) To get\n        // the type of the constructor argument, take the generic\n        // type definition IEnumerable&lt;T&gt; (expressed as \n        // IEnumerable&lt;&gt; when you use the typeof operator) and \n        // call MakeGenericType with the first generic type parameter\n        // of List&lt;T&gt;. The constructor argument list must be passed\n        // as an array, with just one argument in this case.\n        // \n        // Now it is possible to get the constructor of List&lt;T&gt;,\n        // using GetConstructor on the generic type definition. To get\n        // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n        // the constructor from List&lt;T&gt; to the static\n        // TypeBuilder.GetConstructor method.\n        //\n        ILGenerator ilgen = exMethod.GetILGenerator();\n        \n        Type ienumOf = typeof(IEnumerable&lt;&gt;);\n        Type TfromListOf = listOf.GetGenericArguments()[0];\n        Type ienumOfT = ienumOf.MakeGenericType(TfromListOf);\n        Type[] ctorArgs = {ienumOfT};\n\n        ConstructorInfo ctorPrep = listOf.GetConstructor(ctorArgs);\n        ConstructorInfo ctor = \n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep);\n\n        ilgen.Emit(OpCodes.Ldarg_0);\n        ilgen.Emit(OpCodes.Newobj, ctor);\n        ilgen.Emit(OpCodes.Ret);\n\n        // Create the type and save the assembly. \n        Type finished = myType.CreateType();\n        myAssembly.Save(myAsmName.Name+&quot;.dll&quot;);\n\n        // Invoke the method.\n        // ExampleMethod is not generic, but the type it belongs to is\n        // generic, so in order to get a MethodInfo that can be invoked\n        // it is necessary to create a constructed type. The Example \n        // class satisfies the constraints on TFirst, because it is a \n        // reference type and has a default constructor. In order to\n        // have a class that satisfies the constraints on TSecond, \n        // this code example defines the ExampleDerived type. These\n        // two types are passed to MakeGenericMethod to create the\n        // constructed type.\n        //\n        Type[] typeArgs = {typeof(Example), typeof(ExampleDerived)};\n        Type constructed = finished.MakeGenericType(typeArgs);\n        MethodInfo mi = constructed.GetMethod(&quot;ExampleMethod&quot;);\n\n        // Create an array of Example objects, as input to the generic\n        // method. This array must be passed as the only element of an \n        // array of arguments. The first argument of Invoke is \n        // null, because ExampleMethod is static. Display the count\n        // on the resulting List&lt;Example&gt;.\n        // \n        Example[] input = {new Example(), new Example()};\n        object[] arguments = {input};\n\n        List&lt;Example&gt; listX = \n            (List&lt;Example&gt;) mi.Invoke(null, arguments);\n\n        Console.WriteLine(\n            &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n            listX.Count);\n\n        DisplayGenericParameters(finished);\n    }\n\n    private static void DisplayGenericParameters(Type t)\n    {\n        if (!t.IsGenericType)\n        {\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;);\n            return;\n        }\n        if (!t.IsGenericTypeDefinition) \n        {\n            t = t.GetGenericTypeDefinition();\n        }\n\n        Type[] typeParameters = t.GetGenericArguments();\n        Console.WriteLine(&quot;<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;,\n            typeParameters.Length, t);\n\n        foreach( Type tParam in typeParameters )\n        {\n            Console.WriteLine(&quot;\\r<br>Type parameter {0}:&quot;, tParam.ToString());\n\n            foreach( Type c in tParam.GetGenericParameterConstraints() )\n            {\n                if (c.IsInterface)\n                {\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c);\n                }\n            }\n\n            ListConstraintAttributes(tParam);\n        }\n    }\n\n    // List the constraint flags. The GenericParameterAttributes\n    // enumeration contains two sets of attributes, variance and\n    // constraints. For this example, only constraints are used.\n    //\n    private static void ListConstraintAttributes(Type t)\n    {\n        // Mask off the constraint flags. \n        GenericParameterAttributes constraints = \n            t.GenericParameterAttributes &amp; GenericParameterAttributes.SpecialConstraintMask;\n\n        if ((constraints &amp; GenericParameterAttributes.ReferenceTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.NotNullableValueTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.DefaultConstructorConstraint)\n            !=GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineInitializedData_System_String_System_Byte___System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineInitializedData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineInitializedData(String,Byte[],FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines initialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name used to refer to the data. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The blob of data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes for the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>A field to reference the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>data</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The field that you create with this method will be <code>static</code>, even if you do not include <code>FieldAttributes.Static</code> in the <code>attributes</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethod(String,MethodAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new method to the type, with the specified name and method attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> representing the newly defined method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The type of the parent of this method is an interface, and this method is not virtual (<code>Overridable</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method&#39;s generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method.  </p>\n<p> This method overload defines a method with <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">System.Reflection.CallingConventions</a>. If you need to define a method without a signature, with a different calling convention, use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_\" data-linktype=\"relative-path\">DefineMethod(String,MethodAttributes,CallingConventions)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a generic method named <code>DemoMethod</code> whose parameter type and return type are specified by its generic type parameters. The method is defined without a signature, using the standard calling convention. The <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method is used to make <code>DemoMethod</code> a generic method, and the newly defined type parameters are then used for the signature and return type.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"GenericMethodBuilder#4\">        // Define a Shared, Public method with standard calling\n        // conventions. Do not specify the parameter types or the\n        // return type, because type parameters will be used for \n        // those types, and the type parameters have not been\n        // defined yet.\n        MethodBuilder demoMethod = demoType.DefineMethod(\n            &quot;DemoMethod&quot;, \n            MethodAttributes.Public | MethodAttributes.Static\n        );\n</code></pre><pre><code class=\"lang-cpp\" name=\"GenericMethodBuilder#4\">    // Define a Shared, Public method with standard calling\n    // conventions. Do not specify the parameter types or the\n    // return type, because type parameters will be used for\n    // those types, and the type parameters have not been\n    // defined yet.\n    MethodBuilder^ sampleMethodBuilder =\n        sampleTypeBuilder-&gt;DefineMethod(&quot;SampleMethod&quot;,\n        MethodAttributes::Public | MethodAttributes::Static);\n</code></pre><pre><code class=\"lang-vb\" name=\"GenericMethodBuilder#4\">        &#39; Define a Shared, Public method with standard calling\n        &#39; conventions. Do not specify the parameter types or the\n        &#39; return type, because type parameters will be used for \n        &#39; those types, and the type parameters have not been\n        &#39; defined yet.\n        Dim demoMethod As MethodBuilder = _\n            demoType.DefineMethod(&quot;DemoMethod&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static)\n</code></pre><pre><code class=\"lang-cs\" name=\"GenericMethodBuilder#3\">        // Defining generic parameters for the method makes it a\n        // generic method. By convention, type parameters are \n        // single alphabetic characters. T and U are used here.\n        //\n        string[] typeParamNames = {&quot;T&quot;, &quot;U&quot;};\n        GenericTypeParameterBuilder[] typeParameters = \n            demoMethod.DefineGenericParameters(typeParamNames);\n\n        // The second type parameter is constrained to be a \n        // reference type.\n        typeParameters[1].SetGenericParameterAttributes( \n            GenericParameterAttributes.ReferenceTypeConstraint);\n</code></pre><pre><code class=\"lang-cpp\" name=\"GenericMethodBuilder#3\">    // Defining generic parameters for the method makes it a\n    // generic method. By convention, type parameters are\n    // single alphabetic characters. T and U are used here.\n    //\n    array&lt;String^&gt;^ genericTypeNames = {&quot;T&quot;, &quot;U&quot;};\n    array&lt;GenericTypeParameterBuilder^&gt;^ genericTypes =\n        sampleMethodBuilder-&gt;DefineGenericParameters(\n        genericTypeNames);\n</code></pre><pre><code class=\"lang-vb\" name=\"GenericMethodBuilder#3\">        &#39; Defining generic parameters for the method makes it a\n        &#39; generic method. By convention, type parameters are \n        &#39; single alphabetic characters. T and U are used here.\n        &#39;\n        Dim typeParamNames() As String = {&quot;T&quot;, &quot;U&quot;}\n        Dim typeParameters() As GenericTypeParameterBuilder = _\n            demoMethod.DefineGenericParameters(typeParamNames)\n\n        &#39; The second type parameter is constrained to be a \n        &#39; reference type.\n        typeParameters(1).SetGenericParameterAttributes( _\n            GenericParameterAttributes.ReferenceTypeConstraint)\n</code></pre><pre><code class=\"lang-cs\" name=\"GenericMethodBuilder#5\">        // Set parameter types for the method. The method takes\n        // one parameter, and its type is specified by the first\n        // type parameter, T.\n        Type[] parms = {typeParameters[0]};\n        demoMethod.SetParameters(parms);\n\n        // Set the return type for the method. The return type is\n        // specified by the second type parameter, U.\n        demoMethod.SetReturnType(typeParameters[1]);\n</code></pre><pre><code class=\"lang-cpp\" name=\"GenericMethodBuilder#5\">    // Set parameter types for the method. The method takes\n    // one parameter, and its type is specified by the first\n    // type parameter, T.\n    array&lt;Type^&gt;^ parameterTypes = {genericTypes[0]};\n    sampleMethodBuilder-&gt;SetParameters(parameterTypes);\n\n    // Set the return type for the method. The return type is\n    // specified by the second type parameter, U.\n    sampleMethodBuilder-&gt;SetReturnType(genericTypes[1]);\n</code></pre><pre><code class=\"lang-vb\" name=\"GenericMethodBuilder#5\">        &#39; Set parameter types for the method. The method takes\n        &#39; one parameter, and its type is specified by the first\n        &#39; type parameter, T.\n        Dim params() As Type = {typeParameters(0)}\n        demoMethod.SetParameters(params)\n\n        &#39; Set the return type for the method. The return type is\n        &#39; specified by the second type parameter, U.\n        demoMethod.SetReturnType(typeParameters(1))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethod(String,MethodAttributes,CallingConventions)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new method to the type, with the specified name, method attributes, and calling convention.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> representing the newly defined method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The type of the parent of this method is an interface and this method is not virtual (<code>Overridable</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method&#39;s generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethod(String,MethodAttributes,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new method to the type, with the specified name, method attributes, and method signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The type of the parent of this method is an interface, and this method is not virtual (<code>Overridable</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of <code>DefineMethod</code> to set a constructor&#39;s particular signature and attributes on a dynamic type and to return a corresponding <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> for MSIL population.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefineNestedType1#2\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\n\npublic interface IMyInterface\n{\n   String HelloMethod(String parameter);\n}\n\npublic class Example\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      Type myNestedClassType = CreateCallee(Thread.GetDomain());\n      // Cretae an instance of &#39;MyNestedClass&#39;.\n      IMyInterface myInterface =\n         (IMyInterface)Activator.CreateInstance(myNestedClassType);\n      Console.WriteLine(myInterface.HelloMethod(&quot;Bill&quot;));\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static Type CreateCallee(AppDomain myAppDomain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;Example&quot;;\n      // Create the callee dynamic assembly.\n      AssemblyBuilder myAssembly =\n         myAppDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n      // Define a public class named &quot;MyHelloWorld&quot;.\n      TypeBuilder myHelloWorldType =\n         myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public);\n      // Define a public nested class named &#39;MyNestedClass&#39;.\n      TypeBuilder myNestedClassType =\n         myHelloWorldType.DefineNestedType(&quot;MyNestedClass&quot;,\n            TypeAttributes.NestedPublic, typeof(Example),\n            new Type[]{typeof(IMyInterface)});\n      // Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType.AddInterfaceImplementation(typeof(IMyInterface));\n      // Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      MethodBuilder myHelloMethod =\n         myNestedClassType.DefineMethod(&quot;HelloMethod&quot;,\n            MethodAttributes.Public | MethodAttributes.Virtual,\n            typeof(String), new Type[]{typeof(String)});\n      // Generate IL for &#39;GetGreeting&#39; method.\n      ILGenerator myMethodIL = myHelloMethod.GetILGenerator();\n      myMethodIL.Emit(OpCodes.Ldstr, &quot;Hi! &quot;);\n      myMethodIL.Emit(OpCodes.Ldarg_1);\n      MethodInfo infoMethod =\n         typeof(String).GetMethod(&quot;Concat&quot;,new Type[]{typeof(string),typeof(string)});\n      myMethodIL.Emit(OpCodes.Call, infoMethod);\n      myMethodIL.Emit(OpCodes.Ret);\n\n      MethodInfo myHelloMethodInfo =\n         typeof(IMyInterface).GetMethod(&quot;HelloMethod&quot;);\n      // Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType.DefineMethodOverride(myHelloMethod, myHelloMethodInfo);\n      // Create &#39;MyHelloWorld&#39; type.\n      Type myType = myHelloWorldType.CreateType();\n      // Create &#39;MyNestedClass&#39; type.\n      return myNestedClassType.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefineNestedType1#2\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\n\nPublic Interface IMyInterface\n   Function HelloMethod(parameter As String) As String\nEnd Interface &#39;IMyInterface\n\nPublic Class Example\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Dim myNestedClassType As Type = CreateCallee(Thread.GetDomain())\n      &#39; Create an instance of &#39;MyNestedClass&#39;.\n      Dim myInterface As IMyInterface = _\n            CType(Activator.CreateInstance(myNestedClassType), IMyInterface)\n      Console.WriteLine(myInterface.HelloMethod(&quot;Bill&quot;))\n   End Sub &#39;Main\n\n   &#39; Create the callee transient dynamic assembly.\n   Private Shared Function CreateCallee(myAppDomain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;Example&quot;\n      &#39; Create the callee dynamic assembly.\n      Dim myAssembly As AssemblyBuilder = _\n               myAppDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in the callee assembly.\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Define a public class named &quot;MyHelloWorld&quot;.\n      Dim myHelloWorldType As TypeBuilder = _\n               myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define a public nested class named &#39;MyNestedClass&#39;.\n      Dim myNestedClassType As TypeBuilder = _\n               myHelloWorldType.DefineNestedType(&quot;MyNestedClass&quot;, TypeAttributes.NestedPublic, _\n               GetType(Example), New Type() {GetType(IMyInterface)})\n      &#39; Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType.AddInterfaceImplementation(GetType(IMyInterface))\n      &#39; Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      Dim myHelloMethod As MethodBuilder = _\n               myNestedClassType.DefineMethod(&quot;HelloMethod&quot;, MethodAttributes.Public Or _\n               MethodAttributes.Virtual, GetType(String), New Type() {GetType(String)})\n      &#39; Generate IL for &#39;GetGreeting&#39; method.\n      Dim myMethodIL As ILGenerator = myHelloMethod.GetILGenerator()\n      myMethodIL.Emit(OpCodes.Ldstr, &quot;Hi! &quot;)\n      myMethodIL.Emit(OpCodes.Ldarg_1)\n      Dim infoMethod As MethodInfo = _\n               GetType(String).GetMethod(&quot;Concat&quot;, New Type() {GetType(String), GetType(String)})\n      myMethodIL.Emit(OpCodes.Call, infoMethod)\n      myMethodIL.Emit(OpCodes.Ret)\n\n      Dim myHelloMethodInfo As MethodInfo = GetType(IMyInterface).GetMethod(&quot;HelloMethod&quot;)\n      &#39; Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType.DefineMethodOverride(myHelloMethod, myHelloMethodInfo)\n      &#39; Create &#39;MyHelloWorld&#39; type.\n      Dim myType As Type = myHelloWorldType.CreateType()\n      &#39; Create &#39;MyNestedClass&#39; type.\n      Return myNestedClassType.CreateType()\n   End Function &#39;CreateCallee\nEnd Class &#39;Example\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefineNestedType1#2\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\npublic interface class IMyInterface\n{\n   String^ HelloMethod( String^ parameter );\n};\n\npublic ref class EmittedClass\n{\npublic:\n   // Because this method calls Activator::CreateInstance, \n   // it requires full trust. \n   [System::Security::Permissions::PermissionSetAttribute\n\t(System::Security::Permissions::SecurityAction::Demand, Name = &quot;FullTrust&quot;)]\n   static void Main()\n   {\n      Type^ myNestedClassType = CreateCallee( Thread::GetDomain() );\n      \n      // Create an instance of &#39;MyNestedClass&#39;.\n      IMyInterface^ myInterface = dynamic_cast&lt;IMyInterface^&gt;(Activator::CreateInstance( myNestedClassType ));\n      Console::WriteLine( myInterface-&gt;HelloMethod( &quot;Bill&quot; ) );\n   }\n\nprivate:\n\n   // Create the callee transient dynamic assembly.\n   static Type^ CreateCallee( AppDomain^ myAppDomain )\n   {\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedClass&quot;;\n      \n      // Create the callee dynamic assembly.\n      AssemblyBuilder^ myAssembly = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n      \n      // Define a public class named &quot;MyHelloWorld&quot;.\n      TypeBuilder^ myHelloWorldType = myModule-&gt;DefineType( &quot;MyHelloWorld&quot;, TypeAttributes::Public );\n      \n      // Define a public nested class named &#39;MyNestedClass&#39;.\n      array&lt;Type^&gt;^temp0 = {IMyInterface::typeid};\n      TypeBuilder^ myNestedClassType = myHelloWorldType-&gt;DefineNestedType( &quot;MyNestedClass&quot;, TypeAttributes::NestedPublic, EmittedClass::typeid, temp0 );\n      \n      // Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType-&gt;AddInterfaceImplementation( IMyInterface::typeid );\n      \n      // Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      array&lt;Type^&gt;^temp1 = {String::typeid};\n      MethodBuilder^ myHelloMethod = myNestedClassType-&gt;DefineMethod( &quot;HelloMethod&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Virtual), String::typeid, temp1 );\n      \n      // Generate IL for &#39;GetGreeting&#39; method.\n      ILGenerator^ myMethodIL = myHelloMethod-&gt;GetILGenerator();\n      myMethodIL-&gt;Emit( OpCodes::Ldstr, &quot;Hi! &quot; );\n      myMethodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      array&lt;Type^&gt;^temp2 = {String::typeid,String::typeid};\n      MethodInfo^ infoMethod = String::typeid-&gt;GetMethod( &quot;Concat&quot;, temp2 );\n      myMethodIL-&gt;Emit( OpCodes::Call, infoMethod );\n      myMethodIL-&gt;Emit( OpCodes::Ret );\n      MethodInfo^ myHelloMethodInfo = IMyInterface::typeid-&gt;GetMethod( &quot;HelloMethod&quot; );\n      \n      // Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType-&gt;DefineMethodOverride( myHelloMethod, myHelloMethodInfo );\n      \n      // Create &#39;MyHelloWorld&#39; type.\n      Type^ myType = myHelloWorldType-&gt;CreateType();\n      \n      // Create &#39;MyNestedClass&#39; type.\n      return myNestedClassType-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   EmittedClass::Main();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethod(String,MethodAttributes,CallingConventions,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> representing the newly defined method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The type of the parent of this method is an interface, and this method is not virtual (<code>Overridable</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of <code>DefineMethod</code> to set a constructor&#39;s particular signature and attributes on a dynamic type and to return a corresponding <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> for MSIL population.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefineNestedType1#2\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\n\npublic interface IMyInterface\n{\n   String HelloMethod(String parameter);\n}\n\npublic class Example\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      Type myNestedClassType = CreateCallee(Thread.GetDomain());\n      // Cretae an instance of &#39;MyNestedClass&#39;.\n      IMyInterface myInterface =\n         (IMyInterface)Activator.CreateInstance(myNestedClassType);\n      Console.WriteLine(myInterface.HelloMethod(&quot;Bill&quot;));\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static Type CreateCallee(AppDomain myAppDomain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;Example&quot;;\n      // Create the callee dynamic assembly.\n      AssemblyBuilder myAssembly =\n         myAppDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n      // Define a public class named &quot;MyHelloWorld&quot;.\n      TypeBuilder myHelloWorldType =\n         myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public);\n      // Define a public nested class named &#39;MyNestedClass&#39;.\n      TypeBuilder myNestedClassType =\n         myHelloWorldType.DefineNestedType(&quot;MyNestedClass&quot;,\n            TypeAttributes.NestedPublic, typeof(Example),\n            new Type[]{typeof(IMyInterface)});\n      // Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType.AddInterfaceImplementation(typeof(IMyInterface));\n      // Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      MethodBuilder myHelloMethod =\n         myNestedClassType.DefineMethod(&quot;HelloMethod&quot;,\n            MethodAttributes.Public | MethodAttributes.Virtual,\n            typeof(String), new Type[]{typeof(String)});\n      // Generate IL for &#39;GetGreeting&#39; method.\n      ILGenerator myMethodIL = myHelloMethod.GetILGenerator();\n      myMethodIL.Emit(OpCodes.Ldstr, &quot;Hi! &quot;);\n      myMethodIL.Emit(OpCodes.Ldarg_1);\n      MethodInfo infoMethod =\n         typeof(String).GetMethod(&quot;Concat&quot;,new Type[]{typeof(string),typeof(string)});\n      myMethodIL.Emit(OpCodes.Call, infoMethod);\n      myMethodIL.Emit(OpCodes.Ret);\n\n      MethodInfo myHelloMethodInfo =\n         typeof(IMyInterface).GetMethod(&quot;HelloMethod&quot;);\n      // Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType.DefineMethodOverride(myHelloMethod, myHelloMethodInfo);\n      // Create &#39;MyHelloWorld&#39; type.\n      Type myType = myHelloWorldType.CreateType();\n      // Create &#39;MyNestedClass&#39; type.\n      return myNestedClassType.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefineNestedType1#2\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\n\nPublic Interface IMyInterface\n   Function HelloMethod(parameter As String) As String\nEnd Interface &#39;IMyInterface\n\nPublic Class Example\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Dim myNestedClassType As Type = CreateCallee(Thread.GetDomain())\n      &#39; Create an instance of &#39;MyNestedClass&#39;.\n      Dim myInterface As IMyInterface = _\n            CType(Activator.CreateInstance(myNestedClassType), IMyInterface)\n      Console.WriteLine(myInterface.HelloMethod(&quot;Bill&quot;))\n   End Sub &#39;Main\n\n   &#39; Create the callee transient dynamic assembly.\n   Private Shared Function CreateCallee(myAppDomain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;Example&quot;\n      &#39; Create the callee dynamic assembly.\n      Dim myAssembly As AssemblyBuilder = _\n               myAppDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in the callee assembly.\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Define a public class named &quot;MyHelloWorld&quot;.\n      Dim myHelloWorldType As TypeBuilder = _\n               myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define a public nested class named &#39;MyNestedClass&#39;.\n      Dim myNestedClassType As TypeBuilder = _\n               myHelloWorldType.DefineNestedType(&quot;MyNestedClass&quot;, TypeAttributes.NestedPublic, _\n               GetType(Example), New Type() {GetType(IMyInterface)})\n      &#39; Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType.AddInterfaceImplementation(GetType(IMyInterface))\n      &#39; Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      Dim myHelloMethod As MethodBuilder = _\n               myNestedClassType.DefineMethod(&quot;HelloMethod&quot;, MethodAttributes.Public Or _\n               MethodAttributes.Virtual, GetType(String), New Type() {GetType(String)})\n      &#39; Generate IL for &#39;GetGreeting&#39; method.\n      Dim myMethodIL As ILGenerator = myHelloMethod.GetILGenerator()\n      myMethodIL.Emit(OpCodes.Ldstr, &quot;Hi! &quot;)\n      myMethodIL.Emit(OpCodes.Ldarg_1)\n      Dim infoMethod As MethodInfo = _\n               GetType(String).GetMethod(&quot;Concat&quot;, New Type() {GetType(String), GetType(String)})\n      myMethodIL.Emit(OpCodes.Call, infoMethod)\n      myMethodIL.Emit(OpCodes.Ret)\n\n      Dim myHelloMethodInfo As MethodInfo = GetType(IMyInterface).GetMethod(&quot;HelloMethod&quot;)\n      &#39; Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType.DefineMethodOverride(myHelloMethod, myHelloMethodInfo)\n      &#39; Create &#39;MyHelloWorld&#39; type.\n      Dim myType As Type = myHelloWorldType.CreateType()\n      &#39; Create &#39;MyNestedClass&#39; type.\n      Return myNestedClassType.CreateType()\n   End Function &#39;CreateCallee\nEnd Class &#39;Example\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefineNestedType1#2\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\npublic interface class IMyInterface\n{\n   String^ HelloMethod( String^ parameter );\n};\n\npublic ref class EmittedClass\n{\npublic:\n   // Because this method calls Activator::CreateInstance, \n   // it requires full trust. \n   [System::Security::Permissions::PermissionSetAttribute\n\t(System::Security::Permissions::SecurityAction::Demand, Name = &quot;FullTrust&quot;)]\n   static void Main()\n   {\n      Type^ myNestedClassType = CreateCallee( Thread::GetDomain() );\n      \n      // Create an instance of &#39;MyNestedClass&#39;.\n      IMyInterface^ myInterface = dynamic_cast&lt;IMyInterface^&gt;(Activator::CreateInstance( myNestedClassType ));\n      Console::WriteLine( myInterface-&gt;HelloMethod( &quot;Bill&quot; ) );\n   }\n\nprivate:\n\n   // Create the callee transient dynamic assembly.\n   static Type^ CreateCallee( AppDomain^ myAppDomain )\n   {\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedClass&quot;;\n      \n      // Create the callee dynamic assembly.\n      AssemblyBuilder^ myAssembly = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n      \n      // Define a public class named &quot;MyHelloWorld&quot;.\n      TypeBuilder^ myHelloWorldType = myModule-&gt;DefineType( &quot;MyHelloWorld&quot;, TypeAttributes::Public );\n      \n      // Define a public nested class named &#39;MyNestedClass&#39;.\n      array&lt;Type^&gt;^temp0 = {IMyInterface::typeid};\n      TypeBuilder^ myNestedClassType = myHelloWorldType-&gt;DefineNestedType( &quot;MyNestedClass&quot;, TypeAttributes::NestedPublic, EmittedClass::typeid, temp0 );\n      \n      // Implement &#39;IMyInterface&#39; interface.\n      myNestedClassType-&gt;AddInterfaceImplementation( IMyInterface::typeid );\n      \n      // Define &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      array&lt;Type^&gt;^temp1 = {String::typeid};\n      MethodBuilder^ myHelloMethod = myNestedClassType-&gt;DefineMethod( &quot;HelloMethod&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Virtual), String::typeid, temp1 );\n      \n      // Generate IL for &#39;GetGreeting&#39; method.\n      ILGenerator^ myMethodIL = myHelloMethod-&gt;GetILGenerator();\n      myMethodIL-&gt;Emit( OpCodes::Ldstr, &quot;Hi! &quot; );\n      myMethodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      array&lt;Type^&gt;^temp2 = {String::typeid,String::typeid};\n      MethodInfo^ infoMethod = String::typeid-&gt;GetMethod( &quot;Concat&quot;, temp2 );\n      myMethodIL-&gt;Emit( OpCodes::Call, infoMethod );\n      myMethodIL-&gt;Emit( OpCodes::Ret );\n      MethodInfo^ myHelloMethodInfo = IMyInterface::typeid-&gt;GetMethod( &quot;HelloMethod&quot; );\n      \n      // Implement &#39;HelloMethod&#39; of &#39;IMyInterface&#39;.\n      myNestedClassType-&gt;DefineMethodOverride( myHelloMethod, myHelloMethodInfo );\n      \n      // Create &#39;MyHelloWorld&#39; type.\n      Type^ myType = myHelloWorldType-&gt;CreateType();\n      \n      // Create &#39;MyNestedClass&#39; type.\n      return myNestedClassType-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   EmittedClass::Main();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the method. If the return type has no required custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the method. If the return type has no optional custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no required custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no optional custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> object representing the newly added method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The type of the parent of this method is an interface, and this method is not virtual (<code>Overridable</code> in Visual Basic).  </p>\n<p> -or-  </p>\n<p> The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload if you need to specify custom modifiers. If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_\" data-linktype=\"relative-path\">DefineMethod(String,MethodAttributes)</a> or <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_\" data-linktype=\"relative-path\">DefineMethod(String,MethodAttributes,CallingConventions)</a> method overloads to define the method and then use the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method to define the parameter and return types with custom modifiers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineMethodOverride_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineMethodOverride_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineMethodOverride(MethodInfo,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a given method body that implements a given method declaration, potentially with a different name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfoBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method body to be used. This should be a <code>MethodBuilder</code> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodInfoDeclaration</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method whose declaration is to be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>methodInfoBody</code> does not belong to this class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>methodInfoBody</code> or <code>methodInfoDeclaration</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>methodInfoBody</code> is not the type represented by this <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not use this method to emit method overrides or interface implementations. To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.  </p>\n<p> The DefineMethodOverride method is used when a method body and a method declaration have different names. For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.  </p>\n<p> <code>DefineMethodOverride</code> defines a <code>methodimpl</code>, which consists of a pair of metadata tokens. One token points to an implementation, and the other token points to a declaration that the body implements. The body must be defined on the type the method impl is defined on, and the body must be virtual (<code>Overridable</code> in Visual Basic). The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type. If the declaration is on an interface only, the slot defined for the interface is altered. If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced. The overridden method cannot be the actual method that is declared. If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information about method impls, see <code>MethodImpl</code> in the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> After the DefineMethodOverride method is called, some features of <code>methodInfoBody</code> cannot be changed. For example, you cannot apply an attribute to a generic type parameter of <code>methodInfoBody</code> by using the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_SetGenericParameterAttributes_\" data-linktype=\"relative-path\">SetGenericParameterAttributes</a> method. If you must use the DefineMethodOverride method, do so after all characteristics of <code>methodInfoBody</code> have been defined.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example contains an interface <code>I</code> with a method <code>M()</code>, a base class <code>A</code> that implements the interface, and a derived class <code>C</code> that overrides the base class implementation of <code>M()</code> and also provides a separate explicit implementation of <code>I.M()</code>.  </p>\n<p> The <code>main()</code> method of the code example shows how to emit the derived class <code>C</code>. The override of <code>A.M()</code> is accomplished simply by emitting a method <code>M()</code> with the same signature. However, to provide a separate implementation of <code>I.M()</code>, you must define a method body and then use the DefineMethodOverride method to associate that method body with a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing <code>I.M()</code>. The name of the method body does not matter.  </p>\n<p> The code example creates an instance of the emitted class. It obtains a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for <code>I.M()</code>, and uses it to invoke the emitted class&#39;s explicit interface implementation. It then obtains a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for <code>A.M()</code>, and uses it to invoke the emitted class&#39;s override of that method.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder.DefineMethodOverride#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic interface I \n{\n    void M();\n}\n\npublic class A \n{\n    public virtual void M() { Console.WriteLine(&quot;In method A.M&quot;); }\n}\n\n// The object of this code example is to emit code equivalent to\n// the following C# code:\n//\npublic class C : A, I \n{\n    public override void M() \n    { \n        Console.WriteLine(&quot;Overriding A.M from C.M&quot;); \n    }\n\n    // In order to provide a different implementation from C.M when \n    // emitting the following explicit interface implementation, \n    // it is necessary to use a MethodImpl.\n    //\n    void I.M() \n    {\n        Console.WriteLine(&quot;The I.M implementation of C&quot;); \n    }\n}\n\nclass Test \n{\n    static void Main() \n    {\n        string name = &quot;DefineMethodOverrideExample&quot;;\n        AssemblyName asmName = new AssemblyName(name);\n        AssemblyBuilder ab = \n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                asmName, AssemblyBuilderAccess.RunAndSave);\n        ModuleBuilder mb = ab.DefineDynamicModule(name, name + &quot;.dll&quot;);\n\n        TypeBuilder tb = \n            mb.DefineType(&quot;C&quot;, TypeAttributes.Public, typeof(A));\n        tb.AddInterfaceImplementation(typeof(I));\n\n        // Build the method body for the explicit interface \n        // implementation. The name used for the method body \n        // can be anything. Here, it is the name of the method,\n        // qualified by the interface name.\n        //\n        MethodBuilder mbIM = tb.DefineMethod(&quot;I.M&quot;, \n            MethodAttributes.Private | MethodAttributes.HideBySig |\n                MethodAttributes.NewSlot | MethodAttributes.Virtual | \n                MethodAttributes.Final,\n            null,\n            Type.EmptyTypes);\n        ILGenerator il = mbIM.GetILGenerator();\n        il.Emit(OpCodes.Ldstr, &quot;The I.M implementation of C&quot;);\n        il.Emit(OpCodes.Call, typeof(Console).GetMethod(&quot;WriteLine&quot;, \n            new Type[] { typeof(string) }));\n        il.Emit(OpCodes.Ret);\n\n        // DefineMethodOverride is used to associate the method \n        // body with the interface method that is being implemented.\n        //\n        tb.DefineMethodOverride(mbIM, typeof(I).GetMethod(&quot;M&quot;));\n\n        MethodBuilder mbM = tb.DefineMethod(&quot;M&quot;, \n            MethodAttributes.Public | MethodAttributes.ReuseSlot | \n                MethodAttributes.Virtual | MethodAttributes.HideBySig, \n            null, \n            Type.EmptyTypes);\n        il = mbM.GetILGenerator();\n        il.Emit(OpCodes.Ldstr, &quot;Overriding A.M from C.M&quot;);\n        il.Emit(OpCodes.Call, typeof(Console).GetMethod(&quot;WriteLine&quot;, \n            new Type[] { typeof(string) }));\n        il.Emit(OpCodes.Ret);\n\n        Type tc = tb.CreateType();\n\n        // Save the emitted assembly, to examine with Ildasm.exe.\n        ab.Save(name + &quot;.dll&quot;);\n\n        Object test = Activator.CreateInstance(tc);\n\n        MethodInfo mi = typeof(I).GetMethod(&quot;M&quot;);\n        mi.Invoke(test, null);\n\n        mi = typeof(A).GetMethod(&quot;M&quot;);\n        mi.Invoke(test, null);\n    }\n}\n\n/* This code example produces the following output:\n\nThe I.M implementation of C\nOverriding A.M from C.M\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder.DefineMethodOverride#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic interface class I \n{\n    void M();\n};\n\npublic ref class A \n{\npublic:\n    virtual void M() { Console::WriteLine(&quot;In method A.M&quot;); }\n};\n\n// The object of this code example is to emit code equivalent to\n// the following C++ code:\n//\npublic ref class C : A, I \n{\npublic:\n    virtual void M() override \n    { \n        Console::WriteLine(&quot;Overriding A.M from C.M&quot;); \n    }\n\nprivate:\n    // In order to provide a different implementation from C.M when \n    // emitting the following explicit interface implementation, \n    // it is necessary to use a MethodImpl.\n    //\n    virtual void IM() sealed = I::M \n    {\n        Console::WriteLine(&quot;The I::M implementation of C&quot;);\n    }\n};\n\nvoid main() \n{\n    String^ name = &quot;DefineMethodOverrideExample&quot;;\n    AssemblyName^ asmName = gcnew AssemblyName(name);\n    AssemblyBuilder^ ab = \n        AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n            asmName, AssemblyBuilderAccess::RunAndSave);\n    ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(name, name + &quot;.dll&quot;);\n\n    TypeBuilder^ tb = \n        mb-&gt;DefineType(&quot;C&quot;, TypeAttributes::Public, A::typeid);\n    tb-&gt;AddInterfaceImplementation(I::typeid);\n\n    // Build the method body for the explicit interface \n    // implementation. The name used for the method body \n    // can be anything. Here, it is the name of the method,\n    // qualified by the interface name.\n    //\n    MethodBuilder^ mbIM = tb-&gt;DefineMethod(&quot;I.M&quot;, \n        MethodAttributes::Private | MethodAttributes::HideBySig |\n            MethodAttributes::NewSlot | MethodAttributes::Virtual | \n            MethodAttributes::Final,\n        nullptr,\n        Type::EmptyTypes);\n    ILGenerator^ il = mbIM-&gt;GetILGenerator();\n    il-&gt;Emit(OpCodes::Ldstr, &quot;The I.M implementation of C&quot;);\n    il-&gt;Emit(OpCodes::Call, Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n        gcnew array&lt;Type^&gt; { String::typeid }));\n    il-&gt;Emit(OpCodes::Ret);\n\n    // DefineMethodOverride is used to associate the method \n    // body with the interface method that is being implemented.\n    //\n    tb-&gt;DefineMethodOverride(mbIM, I::typeid-&gt;GetMethod(&quot;M&quot;));\n\n    MethodBuilder^ mbM = tb-&gt;DefineMethod(&quot;M&quot;, \n        MethodAttributes::Public | MethodAttributes::ReuseSlot | \n            MethodAttributes::Virtual | MethodAttributes::HideBySig, \n        nullptr, \n        Type::EmptyTypes);\n    il = mbM-&gt;GetILGenerator();\n    il-&gt;Emit(OpCodes::Ldstr, &quot;Overriding A.M from C.M&quot;);\n    il-&gt;Emit(OpCodes::Call, Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n        gcnew array&lt;Type^&gt; { String::typeid }));\n    il-&gt;Emit(OpCodes::Ret);\n\n    Type^ tc = tb-&gt;CreateType();\n\n    // Save the emitted assembly, to examine with Ildasm.exe.\n    ab-&gt;Save(name + &quot;.dll&quot;);\n\n    Object^ test = Activator::CreateInstance(tc);\n\n    MethodInfo^ mi = I::typeid-&gt;GetMethod(&quot;M&quot;);\n    mi-&gt;Invoke(test, nullptr);\n\n    mi = A::typeid-&gt;GetMethod(&quot;M&quot;);\n    mi-&gt;Invoke(test, nullptr);\n}\n\n/* This code example produces the following output:\n\nThe I.M implementation of C\nOverriding A.M from C.M\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder.DefineMethodOverride#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Interface I\n    Sub M() \nEnd Interface\n\nPublic Class A\n    Public Overridable Sub M() \n        Console.WriteLine(&quot;In method A.M&quot;)\n    End Sub\nEnd Class\n\n&#39; The object of this code example is to emit code equivalent to\n&#39; the following C# code:\n&#39;\nPublic Class C\n    Inherits A\n    Implements I\n    \n    Public Overrides Sub M() \n        Console.WriteLine(&quot;Overriding A.M from C.M&quot;)\n    End Sub\n    \n    &#39; In order to provide a different implementation from C.M when \n    &#39; emitting the following explicit interface implementation, \n    &#39; it is necessary to use a MethodImpl.\n    &#39;\n    Private Sub IM() Implements I.M\n        Console.WriteLine(&quot;The I.M implementation of C&quot;)\n    End Sub\nEnd Class\n\nClass Test\n    \n    Shared Sub Main() \n\n        Dim name As String = &quot;DefineMethodOverrideExample&quot;\n        Dim asmName As New AssemblyName(name)\n        Dim ab As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                asmName, AssemblyBuilderAccess.RunAndSave)\n        Dim mb As ModuleBuilder = _\n            ab.DefineDynamicModule(name, name &amp; &quot;.dll&quot;)\n        \n        Dim tb As TypeBuilder = _\n            mb.DefineType(&quot;C&quot;, TypeAttributes.Public, GetType(A))\n        tb.AddInterfaceImplementation(GetType(I))\n        \n        &#39; Build the method body for the explicit interface \n        &#39; implementation. The name used for the method body \n        &#39; can be anything. Here, it is the name of the method,\n        &#39; qualified by the interface name.\n        &#39;\n        Dim mbIM As MethodBuilder = _\n            tb.DefineMethod(&quot;I.M&quot;, _\n            MethodAttributes.Private Or MethodAttributes.HideBySig Or _\n                MethodAttributes.NewSlot Or MethodAttributes.Virtual Or _\n                MethodAttributes.Final, _\n            Nothing, _\n            Type.EmptyTypes)\n        Dim il As ILGenerator = mbIM.GetILGenerator()\n        il.Emit(OpCodes.Ldstr, &quot;The I.M implementation of C&quot;)\n        il.Emit(OpCodes.Call, GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n            New Type() {GetType(String)}))\n        il.Emit(OpCodes.Ret)\n        \n        &#39; DefineMethodOverride is used to associate the method \n        &#39; body with the interface method that is being implemented.\n        &#39;\n        tb.DefineMethodOverride(mbIM, GetType(I).GetMethod(&quot;M&quot;))\n        \n        Dim mbM As MethodBuilder = tb.DefineMethod(&quot;M&quot;, _\n            MethodAttributes.Public Or MethodAttributes.ReuseSlot Or _\n                MethodAttributes.Virtual Or MethodAttributes.HideBySig, _\n            Nothing, _\n            Type.EmptyTypes)\n        il = mbM.GetILGenerator()\n        il.Emit(OpCodes.Ldstr, &quot;Overriding A.M from C.M&quot;)\n        il.Emit(OpCodes.Call, GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n            New Type() {GetType(String)}))\n        il.Emit(OpCodes.Ret)\n        \n        Dim tc As Type = tb.CreateType()\n        \n        &#39; Save the emitted assembly, to examine with Ildasm.exe.\n        ab.Save(name &amp; &quot;.dll&quot;)\n        \n        Dim test As Object = Activator.CreateInstance(tc)\n        \n        Dim mi As MethodInfo = GetType(I).GetMethod(&quot;M&quot;)\n        mi.Invoke(test, Nothing)\n        \n        mi = GetType(A).GetMethod(&quot;M&quot;)\n        mi.Invoke(test, Nothing)\n    \n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;The I.M implementation of C\n&#39;Overriding A.M from C.M\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name and attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The nested attribute is not specified.  </p>\n<p> -or-  </p>\n<p> This type is sealed.  </p>\n<p> -or-  </p>\n<p> This type is an array.  </p>\n<p> -or-  </p>\n<p> This type is an interface, but the nested type is not an interface.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name, attributes, and the type that it extends.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the nested type extends.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The nested attribute is not specified.  </p>\n<p> -or-  </p>\n<p> This type is sealed.  </p>\n<p> -or-  </p>\n<p> This type is an array.  </p>\n<p> -or-  </p>\n<p> This type is an interface, but the nested type is not an interface.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes,Type,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the nested type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The nested attribute is not specified.  </p>\n<p> -or-  </p>\n<p> This type is sealed.  </p>\n<p> -or-  </p>\n<p> This type is an array.  </p>\n<p> -or-  </p>\n<p> This type is an interface, but the nested type is not an interface.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes,Type,PackingSize)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the nested type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.packingsize\" data-linktype=\"relative-path\">PackingSize</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The packing size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The nested attribute is not specified.  </p>\n<p> -or-  </p>\n<p> This type is sealed.  </p>\n<p> -or-  </p>\n<p> This type is an array.  </p>\n<p> -or-  </p>\n<p> This type is an interface, but the nested type is not an interface.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the nested type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaces</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interfaces that the nested type implements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The nested attribute is not specified.  </p>\n<p> -or-  </p>\n<p> This type is sealed.  </p>\n<p> -or-  </p>\n<p> This type is an array.  </p>\n<p> -or-  </p>\n<p> This type is an interface, but the nested type is not an interface.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or greater than 1023.  </p>\n<p> -or-  </p>\n<p> This operation would create a type with a duplicate <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.FullName*</span> in the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of the <code>interfaces</code> array is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create nested types even after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called on the enclosing type.  </p>\n<p> The nested type needs to be complete before you can reflect on it using <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>, <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_\" data-linktype=\"relative-path\">GetNestedType</a>, or <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes_\" data-linktype=\"relative-path\">GetNestedTypes</a>.  </p>\n<p> See the description of <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> for the order in which nested types and nesting types should be completed.  </p>\n<p> A duplicate name is not necessarily created if <code>name</code> is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineNestedType(String,TypeAttributes,Type,PackingSize,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a nested type, given its name, attributes, size, and the type that it extends.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The short name of the type. <code>name</code> cannot contain embedded null values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the nested type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.packingsize\" data-linktype=\"relative-path\">PackingSize</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The packing size of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined nested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <code>PInvoke</code> method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dllName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DLL in which the <code>PInvoke</code> method is defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCallConv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.callingconvention\" data-linktype=\"relative-path\">CallingConvention</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The native calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCharSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s native character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined <code>PInvoke</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static.  </p>\n<p> -or-  </p>\n<p> The parent type is an interface.  </p>\n<p> -or-  </p>\n<p> The method is abstract.  </p>\n<p> -or-  </p>\n<p> The method was previously defined.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> or <code>dllName</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>dllName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some DLL import attributes (see the description of <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a>) cannot be specified as arguments to this method. For example, the DLL import attribute <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> must be added after the <code>PInvoke</code> method is created, if the method returns a value. The example shows how to do this.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the DefinePInvokeMethod method to create a <code>PInvoke</code> method, and how to add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag to the method implementation flags after you create the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> and <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetImplementationFlags_\" data-linktype=\"relative-path\">SetImplementationFlags</a> methods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To get a non-zero return value, you must add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag.  </p>\n</div>\n<p> The example creates a dynamic assembly with one dynamic module and a single type, <code>MyType</code>, that contains the <code>PInvoke</code> method. The <code>PInvoke</code> method represents the Win32 <code>GetTickCount</code> function.  </p>\n<p> When the example is run, it executes the <code>PInvoke</code> method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the <code>MyType</code> class and the <code>static</code> (<code>Shared</code> in Visual Basic) <code>PInvoke</code> method it contains. You can compile a Visual Basic or C# program that uses the static <code>MyType.GetTickCount</code> method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, <code>/r:PInvokeTest.dll</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using System;\nusing System.Text;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName asmName = new AssemblyName(&quot;PInvokeTest&quot;);           \n        AssemblyBuilder dynamicAsm = AppDomain.CurrentDomain.DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess.RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder dynamicMod = \n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder tb = dynamicMod.DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes.Public | TypeAttributes.UnicodeClass\n        );\n    \n        MethodBuilder mb = tb.DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,\n            CallingConventions.Standard,\n            typeof(int),\n            Type.EmptyTypes,\n            CallingConvention.Winapi,\n            CharSet.Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb.SetImplementationFlags(\n            mb.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type t = tb.CreateType();\n\n        MethodInfo mi = t.GetMethod(&quot;GetTickCount&quot;);\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(null, null));\n\n        // Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; + asmName.Name + &quot;.dll&quot;);\n        dynamicAsm.Save(asmName.Name + &quot;.dll&quot;);\n    }\n}\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1312576235\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\n    void main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName^ asmName = gcnew AssemblyName(&quot;PInvokeTest&quot;);\n        AssemblyBuilder^ dynamicAsm = AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess::RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder^ dynamicMod = \n            dynamicAsm-&gt;DefineDynamicModule(asmName-&gt;Name, asmName-&gt;Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder^ tb = dynamicMod-&gt;DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes::Public | TypeAttributes::UnicodeClass\n        );\n    \n        MethodBuilder^ mb = tb-&gt;DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::PinvokeImpl,\n            CallingConventions::Standard,\n            int::typeid,\n            Type::EmptyTypes,\n            CallingConvention::Winapi,\n            CharSet::Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb-&gt;SetImplementationFlags(\n            mb-&gt;GetMethodImplementationFlags() | MethodImplAttributes::PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type^ t = tb-&gt;CreateType();\n\n        MethodInfo^ mi = t-&gt;GetMethod(&quot;GetTickCount&quot;);\n        Console::WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console::WriteLine(&quot;GetTickCount returned: {0}&quot;, mi-&gt;Invoke(nullptr, nullptr));\n\n        // Produce the .dll file.\n        Console::WriteLine(&quot;Saving: &quot; + asmName-&gt;Name + &quot;.dll&quot;);\n        dynamicAsm-&gt;Save(asmName-&gt;Name + &quot;.dll&quot;);\n    };\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1314410994\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">Imports System\nImports System.Text\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        \n        &#39; Create the AssemblyBuilder.\n        Dim asmName As New AssemblyName(&quot;PInvokeTest&quot;)\n        Dim dynamicAsm As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, _\n                AssemblyBuilderAccess.RunAndSave)\n        \n        &#39; Create the module.\n        Dim dynamicMod As ModuleBuilder = _\n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name &amp; &quot;.dll&quot;)\n        \n        &#39; Create the TypeBuilder for the class that will contain the \n        &#39; signature for the PInvoke call.\n        Dim tb As TypeBuilder = dynamicMod.DefineType(&quot;MyType&quot;, _\n            TypeAttributes.Public Or TypeAttributes.UnicodeClass)\n        \n        Dim mb As MethodBuilder = tb.DefinePInvokeMethod( _\n            &quot;GetTickCount&quot;, _\n            &quot;Kernel32.dll&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static Or MethodAttributes.PinvokeImpl, _\n            CallingConventions.Standard, _\n            GetType(Integer), _\n            Type.EmptyTypes, _\n            CallingConvention.Winapi, _\n            CharSet.Ansi)\n\n        &#39; Add PreserveSig to the method implementation flags. NOTE: If this line\n        &#39; is commented out, the return value will be zero when the method is\n        &#39; invoked.\n        mb.SetImplementationFlags( _\n            mb.GetMethodImplementationFlags() Or MethodImplAttributes.PreserveSig)\n        \n        &#39; The PInvoke method does not have a method body.\n        \n        &#39; Create the class and test the method.\n        Dim t As Type = tb.CreateType()\n\n        Dim mi As MethodInfo = t.GetMethod(&quot;GetTickCount&quot;)\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;)\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(Nothing, Nothing))\n\n        &#39; Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; &amp; asmName.Name &amp; &quot;.dll&quot;)\n        dynamicAsm.Save(asmName.Name &amp; &quot;.dll&quot;)\n    \n    End Sub  \nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Testing PInvoke method...\n&#39;GetTickCount returned: 1313078714\n&#39;Saving: PInvokeTest.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <code>PInvoke</code> method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dllName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DLL in which the <code>PInvoke</code> method is defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the entry point in the DLL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCallConv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.callingconvention\" data-linktype=\"relative-path\">CallingConvention</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The native calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCharSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s native character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined <code>PInvoke</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static.  </p>\n<p> -or-  </p>\n<p> The parent type is an interface.  </p>\n<p> -or-  </p>\n<p> The method is abstract.  </p>\n<p> -or-  </p>\n<p> The method was previously defined.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code>, <code>dllName</code>, or <code>entryName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some DLL import attributes (see the description of <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a>) cannot be specified as arguments to this method. For example, the DLL import attribute <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> must be added after the <code>PInvoke</code> method is created, if the method returns a value. The example shows how to do this.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the DefinePInvokeMethod method to create a <code>PInvoke</code> method, and how to add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag to the method implementation flags after you create the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> and <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetImplementationFlags_\" data-linktype=\"relative-path\">SetImplementationFlags</a> methods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To get a non-zero return value, you must add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag.  </p>\n</div>\n<p> The example creates a dynamic assembly with one dynamic module and a single type, <code>MyType</code>, that contains the <code>PInvoke</code> method. The <code>PInvoke</code> method represents the Win32 <code>GetTickCount</code> function.  </p>\n<p> When the example is run, it executes the <code>PInvoke</code> method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the <code>MyType</code> class and the <code>static</code> (<code>Shared</code> in Visual Basic) <code>PInvoke</code> method it contains. You can compile a Visual Basic or C# program that uses the static <code>MyType.GetTickCount</code> method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, <code>/r:PInvokeTest.dll</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using System;\nusing System.Text;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName asmName = new AssemblyName(&quot;PInvokeTest&quot;);           \n        AssemblyBuilder dynamicAsm = AppDomain.CurrentDomain.DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess.RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder dynamicMod = \n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder tb = dynamicMod.DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes.Public | TypeAttributes.UnicodeClass\n        );\n    \n        MethodBuilder mb = tb.DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,\n            CallingConventions.Standard,\n            typeof(int),\n            Type.EmptyTypes,\n            CallingConvention.Winapi,\n            CharSet.Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb.SetImplementationFlags(\n            mb.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type t = tb.CreateType();\n\n        MethodInfo mi = t.GetMethod(&quot;GetTickCount&quot;);\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(null, null));\n\n        // Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; + asmName.Name + &quot;.dll&quot;);\n        dynamicAsm.Save(asmName.Name + &quot;.dll&quot;);\n    }\n}\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1312576235\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\n    void main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName^ asmName = gcnew AssemblyName(&quot;PInvokeTest&quot;);\n        AssemblyBuilder^ dynamicAsm = AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess::RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder^ dynamicMod = \n            dynamicAsm-&gt;DefineDynamicModule(asmName-&gt;Name, asmName-&gt;Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder^ tb = dynamicMod-&gt;DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes::Public | TypeAttributes::UnicodeClass\n        );\n    \n        MethodBuilder^ mb = tb-&gt;DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::PinvokeImpl,\n            CallingConventions::Standard,\n            int::typeid,\n            Type::EmptyTypes,\n            CallingConvention::Winapi,\n            CharSet::Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb-&gt;SetImplementationFlags(\n            mb-&gt;GetMethodImplementationFlags() | MethodImplAttributes::PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type^ t = tb-&gt;CreateType();\n\n        MethodInfo^ mi = t-&gt;GetMethod(&quot;GetTickCount&quot;);\n        Console::WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console::WriteLine(&quot;GetTickCount returned: {0}&quot;, mi-&gt;Invoke(nullptr, nullptr));\n\n        // Produce the .dll file.\n        Console::WriteLine(&quot;Saving: &quot; + asmName-&gt;Name + &quot;.dll&quot;);\n        dynamicAsm-&gt;Save(asmName-&gt;Name + &quot;.dll&quot;);\n    };\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1314410994\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">Imports System\nImports System.Text\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        \n        &#39; Create the AssemblyBuilder.\n        Dim asmName As New AssemblyName(&quot;PInvokeTest&quot;)\n        Dim dynamicAsm As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, _\n                AssemblyBuilderAccess.RunAndSave)\n        \n        &#39; Create the module.\n        Dim dynamicMod As ModuleBuilder = _\n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name &amp; &quot;.dll&quot;)\n        \n        &#39; Create the TypeBuilder for the class that will contain the \n        &#39; signature for the PInvoke call.\n        Dim tb As TypeBuilder = dynamicMod.DefineType(&quot;MyType&quot;, _\n            TypeAttributes.Public Or TypeAttributes.UnicodeClass)\n        \n        Dim mb As MethodBuilder = tb.DefinePInvokeMethod( _\n            &quot;GetTickCount&quot;, _\n            &quot;Kernel32.dll&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static Or MethodAttributes.PinvokeImpl, _\n            CallingConventions.Standard, _\n            GetType(Integer), _\n            Type.EmptyTypes, _\n            CallingConvention.Winapi, _\n            CharSet.Ansi)\n\n        &#39; Add PreserveSig to the method implementation flags. NOTE: If this line\n        &#39; is commented out, the return value will be zero when the method is\n        &#39; invoked.\n        mb.SetImplementationFlags( _\n            mb.GetMethodImplementationFlags() Or MethodImplAttributes.PreserveSig)\n        \n        &#39; The PInvoke method does not have a method body.\n        \n        &#39; Create the class and test the method.\n        Dim t As Type = tb.CreateType()\n\n        Dim mi As MethodInfo = t.GetMethod(&quot;GetTickCount&quot;)\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;)\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(Nothing, Nothing))\n\n        &#39; Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; &amp; asmName.Name &amp; &quot;.dll&quot;)\n        dynamicAsm.Save(asmName.Name &amp; &quot;.dll&quot;)\n    \n    End Sub  \nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Testing PInvoke method...\n&#39;GetTickCount returned: 1313078714\n&#39;Saving: PInvokeTest.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefinePInvokeMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][],CallingConvention,CharSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a <code>PInvoke</code> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <code>PInvoke</code> flags, and custom modifiers for the parameters and return type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <code>PInvoke</code> method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dllName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DLL in which the <code>PInvoke</code> method is defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the entry point in the DLL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the method. If the return type has no required custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the method. If the return type has no optional custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no required custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no optional custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCallConv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.callingconvention\" data-linktype=\"relative-path\">CallingConvention</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The native calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCharSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s native character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> representing the defined <code>PInvoke</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static.  </p>\n<p> -or-  </p>\n<p> The parent type is an interface.  </p>\n<p> -or-  </p>\n<p> The method is abstract.  </p>\n<p> -or-  </p>\n<p> The method was previously defined.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.  </p>\n<p> -or-  </p>\n<p> The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code>, <code>dllName</code>, or <code>entryName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some DLL import attributes (see the description of <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a>) cannot be specified as arguments to this method. For example, the DLL import attribute <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> must be added after the <code>PInvoke</code> method is created, if the method returns a value. The example shows how to do this.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the DefinePInvokeMethod method to create a <code>PInvoke</code> method, and how to add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag to the method implementation flags after you create the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> and <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetImplementationFlags_\" data-linktype=\"relative-path\">SetImplementationFlags</a> methods.  </p>\n<p> The example creates a dynamic assembly with one dynamic module and a single type, <code>MyType</code>, that contains the <code>PInvoke</code> method. The <code>PInvoke</code> method represents the Win32 <code>GetTickCount</code> function.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To get a non-zero return value, you must add the <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> flag.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The example uses an overload that does not specify custom modifiers. To specify custom modifiers, change the example code to use this method overload instead.  </p>\n</div>\n<p> When the example is run, it executes the <code>PInvoke</code> method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the <code>MyType</code> class and the <code>static</code> (<code>Shared</code> in Visual Basic) <code>PInvoke</code> method it contains. You can compile a Visual Basic or C# program that uses the static <code>MyType.GetTickCount</code> method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, <code>/r:PInvokeTest.dll</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using System;\nusing System.Text;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName asmName = new AssemblyName(&quot;PInvokeTest&quot;);           \n        AssemblyBuilder dynamicAsm = AppDomain.CurrentDomain.DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess.RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder dynamicMod = \n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder tb = dynamicMod.DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes.Public | TypeAttributes.UnicodeClass\n        );\n    \n        MethodBuilder mb = tb.DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,\n            CallingConventions.Standard,\n            typeof(int),\n            Type.EmptyTypes,\n            CallingConvention.Winapi,\n            CharSet.Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb.SetImplementationFlags(\n            mb.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type t = tb.CreateType();\n\n        MethodInfo mi = t.GetMethod(&quot;GetTickCount&quot;);\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(null, null));\n\n        // Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; + asmName.Name + &quot;.dll&quot;);\n        dynamicAsm.Save(asmName.Name + &quot;.dll&quot;);\n    }\n}\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1312576235\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\n    void main()\n    {\n        // Create the AssemblyBuilder.\n        AssemblyName^ asmName = gcnew AssemblyName(&quot;PInvokeTest&quot;);\n        AssemblyBuilder^ dynamicAsm = AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n            asmName, \n            AssemblyBuilderAccess::RunAndSave\n        );\n\n        // Create the module.\n        ModuleBuilder^ dynamicMod = \n            dynamicAsm-&gt;DefineDynamicModule(asmName-&gt;Name, asmName-&gt;Name + &quot;.dll&quot;);\n\n        // Create the TypeBuilder for the class that will contain the \n        // signature for the PInvoke call.\n        TypeBuilder^ tb = dynamicMod-&gt;DefineType(\n            &quot;MyType&quot;, \n            TypeAttributes::Public | TypeAttributes::UnicodeClass\n        );\n    \n        MethodBuilder^ mb = tb-&gt;DefinePInvokeMethod(\n            &quot;GetTickCount&quot;,\n            &quot;Kernel32.dll&quot;,\n            MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::PinvokeImpl,\n            CallingConventions::Standard,\n            int::typeid,\n            Type::EmptyTypes,\n            CallingConvention::Winapi,\n            CharSet::Ansi);\n\n        // Add PreserveSig to the method implementation flags. NOTE: If this line\n        // is commented out, the return value will be zero when the method is\n        // invoked.\n        mb-&gt;SetImplementationFlags(\n            mb-&gt;GetMethodImplementationFlags() | MethodImplAttributes::PreserveSig);\n\n        // The PInvoke method does not have a method body. \n\n        // Create the class and test the method.\n        Type^ t = tb-&gt;CreateType();\n\n        MethodInfo^ mi = t-&gt;GetMethod(&quot;GetTickCount&quot;);\n        Console::WriteLine(&quot;Testing PInvoke method...&quot;);\n        Console::WriteLine(&quot;GetTickCount returned: {0}&quot;, mi-&gt;Invoke(nullptr, nullptr));\n\n        // Produce the .dll file.\n        Console::WriteLine(&quot;Saving: &quot; + asmName-&gt;Name + &quot;.dll&quot;);\n        dynamicAsm-&gt;Save(asmName-&gt;Name + &quot;.dll&quot;);\n    };\n\n/* This example produces output similar to the following:\n\nTesting PInvoke method...\nGetTickCount returned: 1314410994\nSaving: PInvokeTest.dll\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefinePInvokeMethod_Fix#1\">Imports System\nImports System.Text\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        \n        &#39; Create the AssemblyBuilder.\n        Dim asmName As New AssemblyName(&quot;PInvokeTest&quot;)\n        Dim dynamicAsm As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, _\n                AssemblyBuilderAccess.RunAndSave)\n        \n        &#39; Create the module.\n        Dim dynamicMod As ModuleBuilder = _\n            dynamicAsm.DefineDynamicModule(asmName.Name, asmName.Name &amp; &quot;.dll&quot;)\n        \n        &#39; Create the TypeBuilder for the class that will contain the \n        &#39; signature for the PInvoke call.\n        Dim tb As TypeBuilder = dynamicMod.DefineType(&quot;MyType&quot;, _\n            TypeAttributes.Public Or TypeAttributes.UnicodeClass)\n        \n        Dim mb As MethodBuilder = tb.DefinePInvokeMethod( _\n            &quot;GetTickCount&quot;, _\n            &quot;Kernel32.dll&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static Or MethodAttributes.PinvokeImpl, _\n            CallingConventions.Standard, _\n            GetType(Integer), _\n            Type.EmptyTypes, _\n            CallingConvention.Winapi, _\n            CharSet.Ansi)\n\n        &#39; Add PreserveSig to the method implementation flags. NOTE: If this line\n        &#39; is commented out, the return value will be zero when the method is\n        &#39; invoked.\n        mb.SetImplementationFlags( _\n            mb.GetMethodImplementationFlags() Or MethodImplAttributes.PreserveSig)\n        \n        &#39; The PInvoke method does not have a method body.\n        \n        &#39; Create the class and test the method.\n        Dim t As Type = tb.CreateType()\n\n        Dim mi As MethodInfo = t.GetMethod(&quot;GetTickCount&quot;)\n        Console.WriteLine(&quot;Testing PInvoke method...&quot;)\n        Console.WriteLine(&quot;GetTickCount returned: {0}&quot;, mi.Invoke(Nothing, Nothing))\n\n        &#39; Produce the .dll file.\n        Console.WriteLine(&quot;Saving: &quot; &amp; asmName.Name &amp; &quot;.dll&quot;)\n        dynamicAsm.Save(asmName.Name &amp; &quot;.dll&quot;)\n    \n    End Sub  \nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Testing PInvoke method...\n&#39;GetTickCount returned: 1313078714\n&#39;Saving: PInvokeTest.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineProperty(String,PropertyAttributes,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new property to the type, with the given name and property signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">PropertyAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.propertybuilder\" data-linktype=\"relative-path\">PropertyBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> Any of the elements of the <code>parameterTypes</code> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates how to define a dynamic property and obtain a <a class=\"xref\" href=\"system.reflection.emit.propertybuilder\" data-linktype=\"relative-path\">PropertyBuilder</a> for specification. Note that a <code>PropertyBuilder</code> must also have a corresponding <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, which will house the IL logic for the property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.PropertyBuilder Example#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass PropertyBuilderDemo\n\n{\n\n   public static Type BuildDynamicTypeWithProperties() \n   {\n        AppDomain myDomain = Thread.GetDomain();\n        AssemblyName myAsmName = new AssemblyName();\n        myAsmName.Name = &quot;MyDynamicAssembly&quot;;\n\n        // To generate a persistable assembly, specify AssemblyBuilderAccess.RunAndSave.\n        AssemblyBuilder myAsmBuilder = myDomain.DefineDynamicAssembly(myAsmName,\n                                                        AssemblyBuilderAccess.RunAndSave);\n        // Generate a persistable single-module assembly.\n        ModuleBuilder myModBuilder = \n            myAsmBuilder.DefineDynamicModule(myAsmName.Name, myAsmName.Name + &quot;.dll&quot;);\n\n        TypeBuilder myTypeBuilder = myModBuilder.DefineType(&quot;CustomerData&quot;, \n                                                        TypeAttributes.Public);\n\n        FieldBuilder customerNameBldr = myTypeBuilder.DefineField(&quot;customerName&quot;,\n                                                        typeof(string),\n                                                        FieldAttributes.Private);\n\n        // The last argument of DefineProperty is null, because the\n        // property has no parameters. (If you don&#39;t specify null, you must\n        // specify an array of Type objects. For a parameterless property,\n        // use an array with no elements: new Type[] {})\n        PropertyBuilder custNamePropBldr = myTypeBuilder.DefineProperty(&quot;CustomerName&quot;,\n                                                         PropertyAttributes.HasDefault,\n                                                         typeof(string),\n                                                         null);\n\n        // The property set and property get methods require a special\n        // set of attributes.\n        MethodAttributes getSetAttr = \n            MethodAttributes.Public | MethodAttributes.SpecialName |\n                MethodAttributes.HideBySig;\n\n        // Define the &quot;get&quot; accessor method for CustomerName.\n        MethodBuilder custNameGetPropMthdBldr = \n            myTypeBuilder.DefineMethod(&quot;get_CustomerName&quot;,\n                                       getSetAttr,        \n                                       typeof(string),\n                                       Type.EmptyTypes);\n\n        ILGenerator custNameGetIL = custNameGetPropMthdBldr.GetILGenerator();\n\n        custNameGetIL.Emit(OpCodes.Ldarg_0);\n        custNameGetIL.Emit(OpCodes.Ldfld, customerNameBldr);\n        custNameGetIL.Emit(OpCodes.Ret);\n\n        // Define the &quot;set&quot; accessor method for CustomerName.\n        MethodBuilder custNameSetPropMthdBldr = \n            myTypeBuilder.DefineMethod(&quot;set_CustomerName&quot;,\n                                       getSetAttr,     \n                                       null,\n                                       new Type[] { typeof(string) });\n\n        ILGenerator custNameSetIL = custNameSetPropMthdBldr.GetILGenerator();\n\n        custNameSetIL.Emit(OpCodes.Ldarg_0);\n        custNameSetIL.Emit(OpCodes.Ldarg_1);\n        custNameSetIL.Emit(OpCodes.Stfld, customerNameBldr);\n        custNameSetIL.Emit(OpCodes.Ret);\n\n        // Last, we must map the two methods created above to our PropertyBuilder to \n        // their corresponding behaviors, &quot;get&quot; and &quot;set&quot; respectively. \n        custNamePropBldr.SetGetMethod(custNameGetPropMthdBldr);\n        custNamePropBldr.SetSetMethod(custNameSetPropMthdBldr);\n\n\n        Type retval = myTypeBuilder.CreateType();\n\n        // Save the assembly so it can be examined with Ildasm.exe,\n        // or referenced by a test program.\n        myAsmBuilder.Save(myAsmName.Name + &quot;.dll&quot;);\n        return retval;\n   }\n\n   public static void Main() \n   {\n        Type custDataType = BuildDynamicTypeWithProperties();\n        \n        PropertyInfo[] custDataPropInfo = custDataType.GetProperties();\n        foreach (PropertyInfo pInfo in custDataPropInfo) {\n           Console.WriteLine(&quot;Property &#39;{0}&#39; created!&quot;, pInfo.ToString());\n        }\n\n        Console.WriteLine(&quot;---&quot;);\n        // Note that when invoking a property, you need to use the proper BindingFlags -\n        // BindingFlags.SetProperty when you invoke the &quot;set&quot; behavior, and \n        // BindingFlags.GetProperty when you invoke the &quot;get&quot; behavior. Also note that\n        // we invoke them based on the name we gave the property, as expected, and not\n        // the name of the methods we bound to the specific property behaviors.\n\n        object custData = Activator.CreateInstance(custDataType);\n        custDataType.InvokeMember(&quot;CustomerName&quot;, BindingFlags.SetProperty,\n                                      null, custData, new object[]{ &quot;Joe User&quot; });\n\n        Console.WriteLine(&quot;The customerName field of instance custData has been set to &#39;{0}&#39;.&quot;,\n                           custDataType.InvokeMember(&quot;CustomerName&quot;, BindingFlags.GetProperty,\n                                                      null, custData, new object[]{ }));\n   }\n\n}\n\n// --- O U T P U T ---\n// The output should be as follows:\n// -------------------\n// Property &#39;System.String CustomerName [System.String]&#39; created!\n// ---\n// The customerName field of instance custData has been set to &#39;Joe User&#39;.\n// -------------------\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.PropertyBuilder Example#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ BuildDynamicTypeWithProperties()\n{\n   AppDomain^ myDomain = Thread::GetDomain();\n   AssemblyName^ myAsmName = gcnew AssemblyName;\n   myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n   \n   // To generate a persistable assembly, specify AssemblyBuilderAccess::RunAndSave.\n   AssemblyBuilder^ myAsmBuilder = \n       myDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n   \n   // Generate a persistable single-module assembly.\n   ModuleBuilder^ myModBuilder = \n       myAsmBuilder-&gt;DefineDynamicModule( myAsmName-&gt;Name, myAsmName-&gt;Name + &quot;.dll&quot; );\n   TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( &quot;CustomerData&quot;, TypeAttributes::Public );\n\n   // Define a private field to hold the property value.\n   FieldBuilder^ customerNameBldr = myTypeBuilder-&gt;DefineField( &quot;customerName&quot;, String::typeid, FieldAttributes::Private );\n   \n   // The last argument of DefineProperty is an empty array of Type\n   // objects, because the property has no parameters. (Alternatively,\n   // you can specify a null value.)\n   PropertyBuilder^ custNamePropBldr = \n       myTypeBuilder-&gt;DefineProperty( &quot;CustomerName&quot;, PropertyAttributes::HasDefault, String::typeid, gcnew array&lt;Type^&gt;(0) );\n   \n   // The property set and property get methods require a special\n   // set of attributes.\n   MethodAttributes getSetAttr = \n       MethodAttributes::Public | MethodAttributes::SpecialName |\n           MethodAttributes::HideBySig;\n\n   // Define the &quot;get&quot; accessor method for CustomerName.\n   MethodBuilder^ custNameGetPropMthdBldr = \n       myTypeBuilder-&gt;DefineMethod( &quot;get_CustomerName&quot;, \n                                    getSetAttr,\n                                    String::typeid, \n                                    Type::EmptyTypes );\n\n   ILGenerator^ custNameGetIL = custNameGetPropMthdBldr-&gt;GetILGenerator();\n   custNameGetIL-&gt;Emit( OpCodes::Ldarg_0 );\n   custNameGetIL-&gt;Emit( OpCodes::Ldfld, customerNameBldr );\n   custNameGetIL-&gt;Emit( OpCodes::Ret );\n   \n   // Define the &quot;set&quot; accessor method for CustomerName.\n   array&lt;Type^&gt;^temp2 = {String::typeid};\n   MethodBuilder^ custNameSetPropMthdBldr = \n       myTypeBuilder-&gt;DefineMethod( &quot;set_CustomerName&quot;, \n                                    getSetAttr,\n                                    nullptr, \n                                    temp2 );\n\n   ILGenerator^ custNameSetIL = custNameSetPropMthdBldr-&gt;GetILGenerator();\n   custNameSetIL-&gt;Emit( OpCodes::Ldarg_0 );\n   custNameSetIL-&gt;Emit( OpCodes::Ldarg_1 );\n   custNameSetIL-&gt;Emit( OpCodes::Stfld, customerNameBldr );\n   custNameSetIL-&gt;Emit( OpCodes::Ret );\n   \n   // Last, we must map the two methods created above to our PropertyBuilder to\n   // their corresponding behaviors, &quot;get&quot; and &quot;set&quot; respectively.\n   custNamePropBldr-&gt;SetGetMethod( custNameGetPropMthdBldr );\n   custNamePropBldr-&gt;SetSetMethod( custNameSetPropMthdBldr );\n\n   Type^ retval = myTypeBuilder-&gt;CreateType();\n\n   // Save the assembly so it can be examined with Ildasm.exe,\n   // or referenced by a test program.\n   myAsmBuilder-&gt;Save(myAsmName-&gt;Name + &quot;.dll&quot;);\n   return retval;\n}\n\nint main()\n{\n   Type^ custDataType = BuildDynamicTypeWithProperties();\n   array&lt;PropertyInfo^&gt;^custDataPropInfo = custDataType-&gt;GetProperties();\n   System::Collections::IEnumerator^ myEnum = custDataPropInfo-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      PropertyInfo^ pInfo = safe_cast&lt;PropertyInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Property &#39;{0}&#39; created!&quot;, pInfo );\n   }\n\n   Console::WriteLine( &quot;---&quot; );\n   \n   // Note that when invoking a property, you need to use the proper BindingFlags -\n   // BindingFlags::SetProperty when you invoke the &quot;set&quot; behavior, and\n   // BindingFlags::GetProperty when you invoke the &quot;get&quot; behavior. Also note that\n   // we invoke them based on the name we gave the property, as expected, and not\n   // the name of the methods we bound to the specific property behaviors.\n   Object^ custData = Activator::CreateInstance( custDataType );\n   array&lt;Object^&gt;^temp3 = {&quot;Joe User&quot;};\n   custDataType-&gt;InvokeMember( &quot;CustomerName&quot;, BindingFlags::SetProperty, nullptr, custData, temp3 );\n   Console::WriteLine( &quot;The customerName field of instance custData has been set to &#39;{0}&#39;.&quot;, custDataType-&gt;InvokeMember( &quot;CustomerName&quot;, BindingFlags::GetProperty, nullptr, custData, gcnew array&lt;Object^&gt;(0) ) );\n}\n\n// --- O U T P U T ---\n// The output should be as follows:\n// -------------------\n// Property &#39;System.String CustomerName [System.String]&#39; created!\n// ---\n// The customerName field of instance custData has been set to &#39;Joe User&#39;.\n// -------------------\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.PropertyBuilder Example#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nClass PropertyBuilderDemo\n   \n   Public Shared Function BuildDynamicTypeWithProperties() As Type\n      Dim myDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      &#39; To generate a persistable assembly, specify AssemblyBuilderAccess.RunAndSave.\n      Dim myAsmBuilder As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAsmName, _\n                                                        AssemblyBuilderAccess.RunAndSave)\n      \n      &#39; Generate a persistable, single-module assembly.\n      Dim myModBuilder As ModuleBuilder = _\n          myAsmBuilder.DefineDynamicModule(myAsmName.Name, myAsmName.Name &amp; &quot;.dll&quot;)\n      \n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(&quot;CustomerData&quot;, TypeAttributes.Public)\n      \n      &#39; Define a private field to hold the property value.\n      Dim customerNameBldr As FieldBuilder = myTypeBuilder.DefineField(&quot;customerName&quot;, _\n                                             GetType(String), FieldAttributes.Private)\n      \n      &#39; The last argument of DefineProperty is Nothing, because the\n      &#39; property has no parameters. (If you don&#39;t specify Nothing, you must\n      &#39; specify an array of Type objects. For a parameterless property,\n      &#39; use an array with no elements: New Type() {})\n      Dim custNamePropBldr As PropertyBuilder = _\n          myTypeBuilder.DefineProperty(&quot;CustomerName&quot;, _\n                                       PropertyAttributes.HasDefault, _\n                                       GetType(String), _\n                                       Nothing)\n      \n      &#39; The property set and property get methods require a special\n      &#39; set of attributes.\n      Dim getSetAttr As MethodAttributes = _\n          MethodAttributes.Public Or MethodAttributes.SpecialName _\n              Or MethodAttributes.HideBySig\n\n      &#39; Define the &quot;get&quot; accessor method for CustomerName.\n      Dim custNameGetPropMthdBldr As MethodBuilder = _\n          myTypeBuilder.DefineMethod(&quot;GetCustomerName&quot;, _\n                                     getSetAttr, _\n                                     GetType(String), _\n                                     Type.EmptyTypes)\n      \n      Dim custNameGetIL As ILGenerator = custNameGetPropMthdBldr.GetILGenerator()\n      \n      custNameGetIL.Emit(OpCodes.Ldarg_0)\n      custNameGetIL.Emit(OpCodes.Ldfld, customerNameBldr)\n      custNameGetIL.Emit(OpCodes.Ret)\n      \n      &#39; Define the &quot;set&quot; accessor method for CustomerName.\n      Dim custNameSetPropMthdBldr As MethodBuilder = _\n          myTypeBuilder.DefineMethod(&quot;get_CustomerName&quot;, _\n                                     getSetAttr, _\n                                     Nothing, _\n                                     New Type() {GetType(String)})\n      \n      Dim custNameSetIL As ILGenerator = custNameSetPropMthdBldr.GetILGenerator()\n      \n      custNameSetIL.Emit(OpCodes.Ldarg_0)\n      custNameSetIL.Emit(OpCodes.Ldarg_1)\n      custNameSetIL.Emit(OpCodes.Stfld, customerNameBldr)\n      custNameSetIL.Emit(OpCodes.Ret)\n      \n      &#39; Last, we must map the two methods created above to our PropertyBuilder to \n      &#39; their corresponding behaviors, &quot;get&quot; and &quot;set&quot; respectively. \n      custNamePropBldr.SetGetMethod(custNameGetPropMthdBldr)\n      custNamePropBldr.SetSetMethod(custNameSetPropMthdBldr)\n            \n      Dim retval As Type = myTypeBuilder.CreateType()\n\n      &#39; Save the assembly so it can be examined with Ildasm.exe,\n      &#39; or referenced by a test program.\n      myAsmBuilder.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n      return retval\n   End Function &#39;BuildDynamicTypeWithProperties\n    \n   \n   Public Shared Sub Main()\n      Dim custDataType As Type = BuildDynamicTypeWithProperties()\n      \n      Dim custDataPropInfo As PropertyInfo() = custDataType.GetProperties()\n      Dim pInfo As PropertyInfo\n      For Each pInfo In  custDataPropInfo\n         Console.WriteLine(&quot;Property &#39;{0}&#39; created!&quot;, pInfo.ToString())\n      Next pInfo\n      \n      Console.WriteLine(&quot;---&quot;)\n      &#39; Note that when invoking a property, you need to use the proper BindingFlags -\n      &#39; BindingFlags.SetProperty when you invoke the &quot;set&quot; behavior, and \n      &#39; BindingFlags.GetProperty when you invoke the &quot;get&quot; behavior. Also note that\n      &#39; we invoke them based on the name we gave the property, as expected, and not\n      &#39; the name of the methods we bound to the specific property behaviors.\n      Dim custData As Object = Activator.CreateInstance(custDataType)\n      custDataType.InvokeMember(&quot;CustomerName&quot;, BindingFlags.SetProperty, Nothing, _\n                                custData, New Object() {&quot;Joe User&quot;})\n      \n      Console.WriteLine(&quot;The customerName field of instance custData has been set to &#39;{0}&#39;.&quot;, _\n                        custDataType.InvokeMember(&quot;CustomerName&quot;, BindingFlags.GetProperty, _\n                        Nothing, custData, New Object() {}))\n   End Sub &#39;Main\nEnd Class &#39;PropertyBuilderDemo\n\n\n&#39; --- O U T P U T ---\n&#39; The output should be as follows:\n&#39; -------------------\n&#39; Property &#39;System.String CustomerName [System.String]&#39; created!\n&#39; ---\n&#39; The customerName field of instance custData has been set to &#39;Joe User&#39;.\n&#39; -------------------\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineProperty(String,PropertyAttributes,CallingConventions,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">PropertyAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the property accessors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.propertybuilder\" data-linktype=\"relative-path\">PropertyBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> Any of the elements of the <code>parameterTypes</code> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineProperty(String,PropertyAttributes,Type,Type[],Type[],Type[],Type[][],Type[][])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new property to the type, with the given name, property signature, and custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">PropertyAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the property. If the return type has no required custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the property. If the return type has no optional custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no required custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no optional custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.propertybuilder\" data-linktype=\"relative-path\">PropertyBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>  </p>\n<p> -or-  </p>\n<p> Any of the elements of the <code>parameterTypes</code> array is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for designers of managed compilers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_System_String_System_Reflection_PropertyAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineProperty(String,PropertyAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">PropertyAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention of the property accessors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the property. If the return type has no required custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>, for the return type of the property. If the return type has no optional custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeRequiredCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no required custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypeOptionalCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>. If a particular parameter has no optional custom modifiers, specify <code>null</code> instead of an array of types. If none of the parameters have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.propertybuilder\" data-linktype=\"relative-path\">PropertyBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> Any of the elements of the <code>parameterTypes</code> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for designers of managed compilers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n</div>\n<p> This method overload is introduced in the  .NET Framework 3.5  or later.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineTypeInitializer\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineTypeInitializer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineTypeInitializer()</div>        \r\n          </div>\r\n    \r\n            <p>Defines the initializer for this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a></div>\r\n                  </div>\r\n                  <p>Returns a type initializer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initializer created is always public.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates how to create an initialization constructor using <code>DefineTypeInitializer</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"TypeBuilder_Properties1#3\">// Create the callee transient dynamic assembly.\nTypeBuilder^ CreateCallee( AppDomain^ myDomain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n   \n   // Create the callee dynamic assembly.\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n   \n   // Create a dynamic module named &quot;CalleeModule&quot; in the callee assembly.\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n   \n   // Define a public class named &quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   \n   // Define a private String field named &quot;Greeting&quot; in the type.\n   FieldBuilder^ greetingField = helloWorldClass-&gt;DefineField( &quot;Greeting&quot;, String::typeid, FieldAttributes::Private );\n   \n   // Create the constructor.\n   ConstructorBuilder^ constructor = helloWorldClass-&gt;DefineTypeInitializer();\n   \n   // Generate IL for the method. The constructor calls its base class\n   // constructor. The constructor stores its argument in the private field.\n   ILGenerator^ constructorIL = constructor-&gt;GetILGenerator();\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ConstructorInfo^ superConstructor = Object::typeid-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   constructorIL-&gt;Emit( OpCodes::Call, superConstructor );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   constructorIL-&gt;Emit( OpCodes::Stfld, greetingField );\n   constructorIL-&gt;Emit( OpCodes::Ret );\n   helloWorldClass-&gt;CreateType();\n   return (helloWorldClass);\n}\n\nint main()\n{\n   // Create the &quot;HelloWorld&quot; class\n   TypeBuilder^ helloWorldClass = CreateCallee( Thread::GetDomain() );\n   Console::WriteLine( &quot;Full Name : {0}&quot;, helloWorldClass-&gt;FullName );\n   Console::WriteLine( &quot;Constructors :&quot; );\n   array&lt;ConstructorInfo^&gt;^info = helloWorldClass-&gt;GetConstructors( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance) );\n   for ( int index = 0; index &lt; info-&gt;Length; index++ )\n      Console::WriteLine( info[ index ] );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_Properties1#3\">Public Class MyApplication\n\n   Public Shared Sub Main()\n      &#39; Create the &quot;HelloWorld&quot; class\n      Dim helloWorldClass As TypeBuilder = CreateCallee(Thread.GetDomain())\n      Console.WriteLine(&quot;Full Name : &quot; + helloWorldClass.FullName)\n      Console.WriteLine(&quot;Constructors :&quot;)\n      Dim info As ConstructorInfo() = helloWorldClass.GetConstructors(BindingFlags.Public Or _\n                                                                     BindingFlags.Instance)\n      Dim index As Integer\n      For index = 0 To info.Length - 1\n         Console.WriteLine(info(index).ToString())\n      Next index\n   End Sub &#39;Main\n\n   &#39; Create the callee transient dynamic assembly.\n   Private Shared Function CreateCallee(myDomain As AppDomain) As TypeBuilder\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create the callee dynamic assembly.\n      Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                               AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module named &quot;CalleeModule&quot; in the callee assembly.\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n\n      &#39; Define a public class named &quot;HelloWorld&quot; in the assembly.\n      Dim helloWorldClass As TypeBuilder = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define a private String field named &quot;Greeting&quot; in the type.\n      Dim greetingField As FieldBuilder = helloWorldClass.DefineField(&quot;Greeting&quot;, GetType(String), _\n                                                                     FieldAttributes.Private)\n\n      &#39; Create the constructor.\n      Dim constructor As ConstructorBuilder = helloWorldClass.DefineTypeInitializer()\n\n      &#39; Generate IL for the method. The constructor calls its base class\n      &#39; constructor. The constructor stores its argument in the private field.\n      Dim constructorIL As ILGenerator = constructor.GetILGenerator()\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      Dim superConstructor As ConstructorInfo = GetType(Object).GetConstructor(New Type() {})\n      constructorIL.Emit(OpCodes.Call, superConstructor)\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      constructorIL.Emit(OpCodes.Ldarg_1)\n      constructorIL.Emit(OpCodes.Stfld, greetingField)\n      constructorIL.Emit(OpCodes.Ret)\n\n      helloWorldClass.CreateType()\n      Return helloWorldClass\n   End Function &#39;CreateCallee\nEnd Class &#39;MyApplication\n</code></pre><pre><code class=\"lang-cs\" name=\"TypeBuilder_Properties1#3\">public class MyApplication\n{\n   public static void Main()\n   {\n      // Create the &quot;HelloWorld&quot; class\n      TypeBuilder helloWorldClass = CreateCallee(Thread.GetDomain());\n      Console.WriteLine(&quot;Full Name : &quot; + helloWorldClass.FullName);\n      Console.WriteLine(&quot;Constructors :&quot;);\n      ConstructorInfo[] info =\n         helloWorldClass.GetConstructors(BindingFlags.Public|BindingFlags.Instance);\n      for(int index=0; index &lt; info.Length; index++)\n         Console.WriteLine(info[index].ToString());\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static TypeBuilder CreateCallee(AppDomain myDomain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the callee dynamic assembly.\n      AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(myAssemblyName,\n         AssemblyBuilderAccess.Run);\n      // Create a dynamic module named &quot;CalleeModule&quot; in the callee assembly.\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n\n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder helloWorldClass = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n      // Define a private String field named &quot;Greeting&quot; in the type.\n      FieldBuilder greetingField = helloWorldClass.DefineField(&quot;Greeting&quot;, typeof(String),\n         FieldAttributes.Private);\n\n      // Create the constructor.\n      ConstructorBuilder constructor = helloWorldClass.DefineTypeInitializer();\n\n      // Generate IL for the method. The constructor calls its base class\n      // constructor. The constructor stores its argument in the private field.\n      ILGenerator constructorIL = constructor.GetILGenerator();\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);\n      constructorIL.Emit(OpCodes.Call, superConstructor);\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      constructorIL.Emit(OpCodes.Ldarg_1);\n      constructorIL.Emit(OpCodes.Stfld, greetingField);\n      constructorIL.Emit(OpCodes.Ret);\n\n      helloWorldClass.CreateType();\n      return(helloWorldClass);\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_DefineUninitializedData_System_String_System_Int32_System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_DefineUninitializedData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUninitializedData(String,Int32,FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an uninitialized data field in the <code>.sdata</code> section of the portable executable (PE) file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name used to refer to the data. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the data field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes for the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>A field to reference the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>size</code> is less than or equal to zero, or greater than or equal to 0x003f0000.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The field that you create with this method will be <code>static</code>, even if you do not include <code>FieldAttributes.Static</code> in the <code>attributes</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of <code>DefineUninitializedData</code> to create an uninitialized data field in a dynamic type:  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder_DefineUninitializedData#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\nusing System.Security.Permissions;\n\npublic sealed class Example\n{\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      Type myHelloWorldType = CreateCallee(Thread.GetDomain());\n      object myHelloWorldInstance =\n      Activator.CreateInstance(myHelloWorldType);\n      FieldInfo myGreetingFieldInfo =\n      myHelloWorldType.GetField(&quot;MyGreeting&quot;);\n      object oval = Activator.CreateInstance(myGreetingFieldInfo.FieldType);\n      IntPtr myIntPtr = Marshal.AllocHGlobal(4);\n      Random rand = new Random();\n      int iTempSeed = rand.Next();\n      byte[] bINITBYTE = GetRandBytes( iTempSeed, 4);\n      IntPtr intptrTemp = myIntPtr;\n      for ( int j = 0; j &lt; 4; j++ )\n      {\n         Marshal.WriteByte( myIntPtr, bINITBYTE[j]);\n         myIntPtr = (IntPtr)((int)myIntPtr + 1);\n      }\n      myIntPtr = intptrTemp;\n      Object oValNew = Marshal.PtrToStructure( myIntPtr, myGreetingFieldInfo.FieldType);\n      Marshal.FreeHGlobal( myIntPtr );\n\n      myIntPtr = Marshal.AllocHGlobal(4);\n      object myObj = myGreetingFieldInfo.GetValue(myHelloWorldInstance);\n      Marshal.StructureToPtr(myObj, myIntPtr, true);\n      intptrTemp = myIntPtr;\n      Console.WriteLine(&quot;The value of &#39;MyGreeting&#39; field : &quot;);\n      for ( int j = 0; j &lt; 4; j++ )\n      {\n         Marshal.WriteByte( myIntPtr, bINITBYTE[j]);\n         Console.WriteLine(bINITBYTE[j]);\n         myIntPtr = (IntPtr)((int)myIntPtr + 1);\n      }\n   }\n\n   private static byte[] GetRandBytes( int iRandSeed, int iSize )\n   {\n      byte[] barr = new byte[iSize];\n      Random randTemp = new Random( iRandSeed );\n      randTemp.NextBytes( barr );\n      return barr;\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static Type CreateCallee(AppDomain myDomain)\n   {\n      // Create a simple name for the callee assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedClass&quot;;\n\n      // Create the callee dynamic assembly.\n      AssemblyBuilder myAssembly =\n         myDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n\n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder myModule =\n         myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n\n      // Define a public class named &quot;MyHelloWorld&quot;\n      TypeBuilder myHelloWorldType =\n         myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public);\n\n      // Define a &#39;MyGreeting&#39; field and initialize it.\n      FieldBuilder myFieldBuilder =\n         myHelloWorldType.DefineUninitializedData(&quot;MyGreeting&quot;,4,FieldAttributes.Public);\n\n      // Create the &#39;MyHelloWorld&#39; class.\n      return(myHelloWorldType.CreateType());\n   }\n\n   private Example() {}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeBuilder_DefineUninitializedData#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Security::Permissions;\n\npublic ref class Example\n{\npublic:\n   [SecurityPermission(SecurityAction::Demand, Flags=SecurityPermissionFlag::UnmanagedCode)]\n   static void Main()\n   {\n      Type^ myHelloWorldType = CreateCallee( Thread::GetDomain() );\n      Object^ myHelloWorldInstance = Activator::CreateInstance( myHelloWorldType );\n      FieldInfo^ myGreetingFieldInfo = myHelloWorldType-&gt;GetField( &quot;MyGreeting&quot; );\n      Object^ oval = Activator::CreateInstance( myGreetingFieldInfo-&gt;FieldType );\n      IntPtr myIntPtr = Marshal::AllocHGlobal( 4 );\n      Random^ rand = gcnew Random;\n      int iTempSeed = rand-&gt;Next();\n      array&lt;Byte&gt;^bINITBYTE = GetRandBytes( iTempSeed, 4 );\n      IntPtr intptrTemp = myIntPtr;\n      for ( int j = 0; j &lt; 4; j++ )\n      {\n         Marshal::WriteByte( myIntPtr, bINITBYTE[ j ] );\n         myIntPtr = (IntPtr)((int)myIntPtr + 1);\n\n      }\n      myIntPtr = intptrTemp;\n      Object^ oValNew = Marshal::PtrToStructure( myIntPtr, myGreetingFieldInfo-&gt;FieldType );\n      Marshal::FreeHGlobal( myIntPtr );\n      myIntPtr = Marshal::AllocHGlobal( 4 );\n      Object^ myObj = myGreetingFieldInfo-&gt;GetValue( myHelloWorldInstance );\n      Marshal::StructureToPtr( myObj, myIntPtr, true );\n      intptrTemp = myIntPtr;\n      Console::WriteLine( &quot;The value of &#39;MyGreeting&#39; field : &quot; );\n      for ( int j = 0; j &lt; 4; j++ )\n      {\n         Marshal::WriteByte( myIntPtr, bINITBYTE[ j ] );\n         Console::WriteLine( bINITBYTE[ j ] );\n         myIntPtr = (IntPtr)((int)myIntPtr + 1);\n\n      }\n   }\n\n\nprivate:\n   static array&lt;Byte&gt;^ GetRandBytes( int iRandSeed, int iSize )\n   {\n      array&lt;Byte&gt;^barr = gcnew array&lt;Byte&gt;(iSize);\n      Random^ randTemp = gcnew Random( iRandSeed );\n      randTemp-&gt;NextBytes( barr );\n      return barr;\n   }\n\n\n   // Create the callee transient dynamic assembly.\n   static Type^ CreateCallee( AppDomain^ myDomain )\n   {\n      \n      // Create a simple name for the callee assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedClass&quot;;\n      \n      // Create the callee dynamic assembly.\n      AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module in the callee assembly.\n      ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n      \n      // Define a public class named &quot;MyHelloWorld&quot;\n      TypeBuilder^ myHelloWorldType = myModule-&gt;DefineType( &quot;MyHelloWorld&quot;, TypeAttributes::Public );\n      \n      // Define a &#39;MyGreeting&#39; field and initialize it.\n      FieldBuilder^ myFieldBuilder = myHelloWorldType-&gt;DefineUninitializedData( &quot;MyGreeting&quot;, 4, FieldAttributes::Public );\n      \n      // Create the &#39;MyHelloWorld&#39; class.\n      return (myHelloWorldType-&gt;CreateType());\n   }\n\n};\n\nint main()\n{\n   Example::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_DefineUninitializedData#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\n\nModule Example\n\n   Sub Main()\n      Dim myHelloWorldType As Type = CreateCallee(Thread.GetDomain())\n      Dim myHelloWorldInstance As Object = Activator.CreateInstance(myHelloWorldType)\n      Dim myGreetingFieldInfo As FieldInfo = myHelloWorldType.GetField(&quot;MyGreeting&quot;)\n      Dim oval As Object = Activator.CreateInstance(myGreetingFieldInfo.FieldType)\n      Dim myIntPtr As IntPtr = Marshal.AllocHGlobal(4)\n      Dim rand As New Random()\n      Dim iTempSeed As Integer = rand.Next()\n      Dim bINITBYTE As Byte() = GetRandBytes(iTempSeed, 4)\n      Dim intptrTemp As IntPtr = myIntPtr\n      Dim j As Integer\n      For j = 0 To 3\n         Marshal.WriteByte(myIntPtr, bINITBYTE(j))\n         myIntPtr = intptr.op_Explicit(myIntPtr.ToInt32 + 1)\n      Next j\n      myIntPtr = intptrTemp\n      Dim oValNew As [Object] = Marshal.PtrToStructure(myIntPtr, myGreetingFieldInfo.FieldType)\n      Marshal.FreeHGlobal(myIntPtr)\n\n      myIntPtr = Marshal.AllocHGlobal(4)\n      Dim myObj As Object = myGreetingFieldInfo.GetValue(myHelloWorldInstance)\n      Marshal.StructureToPtr(myObj, myIntPtr, True)\n      intptrTemp = myIntPtr\n      Console.WriteLine(&quot;The value of &#39;MyGreeting&#39; field : &quot;)\n\n      For j = 0 To 3\n         Marshal.WriteByte(myIntPtr, bINITBYTE(j))\n         Console.WriteLine(bINITBYTE(j))\n         myIntPtr = intptr.op_Explicit(myIntPtr.ToInt32 + 1)\n      Next j\n   End Sub &#39;Main\n\n\n   Private Function GetRandBytes(ByVal iRandSeed As Integer, ByVal iSize As Integer) As Byte()\n      Dim barr(iSize) As Byte\n      Dim randTemp As New Random(iRandSeed)\n      randTemp.NextBytes(barr)\n      Return barr\n   End Function &#39;GetRandBytes\n\n\n   &#39; Create the callee transient dynamic assembly.\n   Private Function CreateCallee(ByVal myDomain As AppDomain) As Type\n      &#39; Create a simple name for the callee assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedClass&quot;\n\n      &#39; Create the callee dynamic assembly.\n      Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n\n\n      &#39; Create a dynamic module in the callee assembly.\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n\n      &#39; Define a public class named &quot;MyHelloWorld&quot;\n      Dim myHelloWorldType As TypeBuilder = myModule.DefineType(&quot;MyHelloWorld&quot;, TypeAttributes.Public)\n\n      &#39; Define a &#39;MyGreeting&#39; field and initialize it.\n      Dim myFieldBuilder As FieldBuilder = myHelloWorldType.DefineUninitializedData(&quot;MyGreeting&quot;, 4, FieldAttributes.Public)\n\n      &#39; Create the &#39;MyHelloWorld&#39; class.\n      Return myHelloWorldType.CreateType()\n   End Function &#39;CreateCallee\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetAttributeFlagsImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetAttributeFlagsImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeFlagsImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetConstructor_System_Type_System_Reflection_ConstructorInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetConstructor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructor(Type,ConstructorInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructed generic type whose constructor is returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A constructor on the generic type definition of <code>type</code>, which specifies which constructor of <code>type</code> to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object that represents the constructor of <code>type</code> corresponding to <code>constructor</code>, which specifies a constructor belonging to the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not represent a generic type.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not of type <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a>.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>constructor</code> is not a generic type definition.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>constructor</code> is not the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetConstructor method provides a way to get a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.  </p>\n<p> For example, suppose you have a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents the type <code>G&lt;T&gt;</code> in C# syntax (<code>G(Of T)</code> in Visual Basic, <code>generic &lt;T&gt; ref class G</code> in C++) and a <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> object that represents a constructor of <code>G&lt;T&gt;</code>. Suppose that <code>G&lt;T&gt;</code> has a generic method with type parameter <code>U</code> that creates an instance of the constructed type <code>G&lt;U&gt;</code>. In order to emit the code to create an instance of the constructed type, you need a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object that represents the constructor of this constructed type — in other words, that creates an instance of <code>G&lt;U&gt;</code>. To do this, first call the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method on the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object, specifying the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object that represents <code>U</code> as the type argument. Then call the GetConstructor method with the return value of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method as parameter <code>type</code> and the <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> object that represents the constructor of <code>G&lt;U&gt;</code> as parameter <code>constructor</code>. The return value is the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object you need to emit the function call. The code example demonstrates this scenario.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example contains source code for a generic class named <code>Sample</code> that has a type parameter named <code>T</code>. The class has a field named <code>Field</code>, of type <code>T</code>, and a generic method named <code>GM</code> with its own type parameter, named <code>U</code>. Method <code>GM</code> creates an instance of <code>Sample</code>, substituting its own type parameter <code>U</code> for the type parameter of <code>Sample</code>, and stores its input parameter in <code>Field</code>. This source code is compiled but not used; you can view it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> and compare it to the code emitted by class <code>Example</code>.  </p>\n<p> The code in class <code>Example</code> demonstrates the use of the GetConstructor method to emit generic code. The <code>Main</code> method of class <code>Example</code> creates a dynamic assembly containing a class named <code>Sample</code> and uses the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method to make it generic by adding a type parameter named <code>T</code>. A default constructor and a field named <code>Field</code>, of type <code>T</code>, are added to class <code>Sample</code>. A method <code>GM</code> is added and turned into a generic method by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method. The type parameter of <code>GM</code> is named <code>U</code>. After the type parameter is defined, the signature of <code>GM</code> is added by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method. There is no return type and no required or custom modifiers, so all the parameters of this method are <code>null</code> except <code>parameterTypes</code>; <code>parameterTypes</code> sets the type of the method&#39;s only parameter to <code>U</code>, the method&#39;s generic type parameter. The body of the method creates an instance of the constructed type <code>Sample&lt;U&gt;</code> (<code>Sample(Of U)</code> in Visual Basic), assigns the method&#39;s parameter to <code>Field</code>, and then prints the value of <code>Field</code>. The GetConstructor method is used to create a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> that represents the default constructor of the constructed generic type <code>Sample&lt;U&gt;</code> in the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Newobj\" data-linktype=\"relative-path\">System.Reflection.Emit.OpCodes.Newobj</a> instruction that creates the instance.  </p>\n<p> A dummy type is defined to hold the entry-point method <code>Main</code>. In the body of <code>Main</code>, the static <code>GM</code> method is invoked on the constructed generic type <code>Sample&lt;int&gt;</code> (<code>Sample(Of Integer)</code> in Visual Basic), with type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> substituted for <code>U</code>.  </p>\n<p> When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to compare the emitted code with the code for the <code>Sample</code> class that is compiled into the code example itself.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder.GetField_Generic#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// Compare the MSIL in this class to the MSIL\n// generated by the Reflection.Emit code in class\n// Example.\npublic class Sample&lt;T&gt;\n{\n  public T Field;\n  public static void GM&lt;U&gt;(U val)\n  {\n    Sample&lt;U&gt; s = new Sample&lt;U&gt;();\n    s.Field = val;\n    Console.WriteLine(s.Field);\n  }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = \n            new AssemblyName(&quot;TypeBuilderGetFieldExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.exe&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Class | TypeAttributes.Public);\n\n        // Add a type parameter, making the type generic.\n        string[] typeParamNames = {&quot;T&quot;};  \n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a default constructor. Normally it would \n        // not be necessary to define the default constructor,\n        // but in this case it is needed for the call to\n        // TypeBuilder.GetConstructor, which gets the default\n        // constructor for the generic type constructed from \n        // Sample&lt;T&gt;, in the generic method GM&lt;U&gt;.\n        ConstructorBuilder ctor = myType.DefineDefaultConstructor(\n            MethodAttributes.PrivateScope | MethodAttributes.Public |\n            MethodAttributes.HideBySig | MethodAttributes.SpecialName |\n            MethodAttributes.RTSpecialName);\n\n        // Add a field of type T, with the name Field.\n        FieldBuilder myField = myType.DefineField(&quot;Field&quot;, \n            typeParams[0],\n            FieldAttributes.Public);\n\n        // Add a method and make it generic, with a type \n        // parameter named U. Note how similar this is to \n        // the way Sample is turned into a generic type. The\n        // method has no signature, because the type of its\n        // only parameter is U, which is not yet defined.\n        MethodBuilder genMethod = myType.DefineMethod(&quot;GM&quot;, \n            MethodAttributes.Public | MethodAttributes.Static);\n        string[] methodParamNames = {&quot;U&quot;};\n        GenericTypeParameterBuilder[] methodParams = \n            genMethod.DefineGenericParameters(methodParamNames);\n        \n        // Now add a signature for genMethod, specifying U\n        // as the type of the parameter. There is no return value\n        // and no custom modifiers.\n        genMethod.SetSignature(null, null, null, \n            new Type[] { methodParams[0] }, null, null);\n\n        // Emit a method body for the generic method.\n        ILGenerator ilg = genMethod.GetILGenerator();\n        // Construct the type Sample&lt;U&gt; using MakeGenericType.\n        Type SampleOfU = myType.MakeGenericType( methodParams[0] );\n        // Create a local variable to store the instance of\n        // Sample&lt;U&gt;.\n        ilg.DeclareLocal(SampleOfU);\n        // Call the default constructor. Note that it is \n        // necessary to have the default constructor for the\n        // constructed generic type Sample&lt;U&gt;; use the \n        // TypeBuilder.GetConstructor method to obtain this \n        // constructor.\n        ConstructorInfo ctorOfU = TypeBuilder.GetConstructor(\n            SampleOfU, ctor);\n        ilg.Emit(OpCodes.Newobj, ctorOfU);\n        // Store the instance in the local variable; load it\n        // again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0); \n        ilg.Emit(OpCodes.Ldloc_0); \n        ilg.Emit(OpCodes.Ldarg_0);\n        // In order to store the value in the field of the\n        // instance of Sample&lt;U&gt;, it is necessary to have \n        // a FieldInfo representing the field of the \n        // constructed type. Use TypeBuilder.GetField to \n        // obtain this FieldInfo.\n        FieldInfo FieldOfU = TypeBuilder.GetField(\n            SampleOfU, myField);\n        // Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU);\n        // Load the instance, load the field value, box it\n        // (specifying the type of the type parameter, U), and\n        // print it.\n        ilg.Emit(OpCodes.Ldloc_0);\n        ilg.Emit(OpCodes.Ldfld, FieldOfU);\n        ilg.Emit(OpCodes.Box, methodParams[0]);\n        MethodInfo writeLineObj = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                new Type[] { typeof(object) });\n        ilg.EmitCall(OpCodes.Call, writeLineObj, null);\n        ilg.Emit(OpCodes.Ret);\n\n        // Emit an entry point method; this must be in a\n        // non-generic type.\n        TypeBuilder dummy = myModule.DefineType(&quot;Dummy&quot;, \n            TypeAttributes.Class | TypeAttributes.NotPublic);\n        MethodBuilder entryPoint = dummy.DefineMethod(&quot;Main&quot;, \n            MethodAttributes.Public | MethodAttributes.Static,\n            null, null);\n        ilg = entryPoint.GetILGenerator();\n        // In order to call the static generic method GM, it is\n        // necessary to create a constructed type from the \n        // generic type definition for Sample. This can be any\n        // constructed type; in this case Sample&lt;int&gt; is used.\n        Type SampleOfInt = \n            myType.MakeGenericType( typeof(int) );\n        // Next get a MethodInfo representing the static generic\n        // method GM on type Sample&lt;int&gt;.\n        MethodInfo SampleOfIntGM = TypeBuilder.GetMethod(SampleOfInt, \n            genMethod);\n        // Next get a MethodInfo for GM&lt;string&gt;, which is the \n        // instantiation of GM that Main calls.\n        MethodInfo GMOfString = \n            SampleOfIntGM.MakeGenericMethod( typeof(string) );\n        // Finally, emit the call. Push a string onto\n        // the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;);\n        ilg.EmitCall(OpCodes.Call, GMOfString, null);\n        ilg.Emit(OpCodes.Ret);\n\n        myType.CreateType();\n        dummy.CreateType();\n        myAssembly.SetEntryPoint(entryPoint);\n        myAssembly.Save(myAsmName.Name + &quot;.exe&quot;);\n\n        Console.WriteLine(myAsmName.Name + &quot;.exe has been saved.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder.GetField_Generic#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\n&#39; Compare the MSIL in this class to the MSIL\n&#39; generated by the Reflection.Emit code in class\n&#39; Example.\nPublic Class Sample(Of T)\n    Public Field As T\n    Public Shared Sub GM(Of U)(ByVal val As U)\n        Dim s As New Sample(Of U)\n        s.Field = val\n        Console.WriteLine(s.Field)\n    \n    End Sub\nEnd Class \n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;TypeBuilderGetFieldExample&quot;)\n        Dim myAssembly As AssemblyBuilder = _\n            myDomain.DefineDynamicAssembly(myAsmName, _\n                AssemblyBuilderAccess.Save)\n        Dim myModule As ModuleBuilder = _\n            myAssembly.DefineDynamicModule(myAsmName.Name, _\n                myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Class Or TypeAttributes.Public)\n        \n        &#39; Add a type parameter, making the type generic.\n        Dim typeParamNames() As String = { &quot;T&quot; }\n        Dim typeParams As GenericTypeParameterBuilder() = _\n            myType.DefineGenericParameters(typeParamNames)\n        \n        &#39; Define a default constructor. Normally it would \n        &#39; not be necessary to define the default constructor,\n        &#39; but in this case it is needed for the call to\n        &#39; TypeBuilder.GetConstructor, which gets the default\n        &#39; constructor for the generic type constructed from \n        &#39; Sample(Of T), in the generic method GM(Of U).\n        Dim ctor As ConstructorBuilder = _\n            myType.DefineDefaultConstructor( _\n                MethodAttributes.PrivateScope Or MethodAttributes.Public _\n                Or MethodAttributes.HideBySig Or MethodAttributes.SpecialName _\n                Or MethodAttributes.RTSpecialName)\n        \n        &#39; Add a field of type T, with the name Field.\n        Dim myField As FieldBuilder = myType.DefineField( _\n            &quot;Field&quot;, typeParams(0), FieldAttributes.Public)\n        \n        &#39; Add a method and make it generic, with a type \n        &#39; parameter named U. Note how similar this is to \n        &#39; the way Sample is turned into a generic type. The\n        &#39; method has no signature, because the type of its\n        &#39; only parameter is U, which is not yet defined.\n        Dim genMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;GM&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static)\n        Dim methodParamNames() As String = { &quot;U&quot; }\n        Dim methodParams As GenericTypeParameterBuilder() = _\n            genMethod.DefineGenericParameters(methodParamNames)\n\n        &#39; Now add a signature for genMethod, specifying U\n        &#39; as the type of the parameter. There is no return value\n        &#39; and no custom modifiers.\n        genMethod.SetSignature(Nothing, Nothing, Nothing, _\n            New Type() { methodParams(0) }, Nothing, Nothing)\n        \n        &#39; Emit a method body for the generic method.\n        Dim ilg As ILGenerator = genMethod.GetILGenerator()\n        &#39; Construct the type Sample(Of U) using MakeGenericType.\n        Dim SampleOfU As Type = _\n            myType.MakeGenericType(methodParams(0))\n        &#39; Create a local variable to store the instance of\n        &#39; Sample(Of U).\n        ilg.DeclareLocal(SampleOfU)\n        &#39; Call the default constructor. Note that it is \n        &#39; necessary to have the default constructor for the\n        &#39; constructed generic type Sample(Of U); use the \n        &#39; TypeBuilder.GetConstructor method to obtain this \n        &#39; constructor.\n        Dim ctorOfU As ConstructorInfo = _\n            TypeBuilder.GetConstructor(SampleOfU, ctor)\n        ilg.Emit(OpCodes.Newobj, ctorOfU)\n        &#39; Store the instance in the local variable; load it\n        &#39; again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0)\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldarg_0)\n        &#39; In order to store the value in the field of the\n        &#39; instance of Sample(Of U), it is necessary to have \n        &#39; a FieldInfo representing the field of the \n        &#39; constructed type. Use TypeBuilder.GetField to \n        &#39; obtain this FieldInfo.\n        Dim FieldOfU As FieldInfo = _\n            TypeBuilder.GetField(SampleOfU, myField)\n        &#39; Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU)\n        &#39; Load the instance, load the field value, box it\n        &#39; (specifying the type of the type parameter, U), \n        &#39; and print it.\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldfld, FieldOfU)\n        ilg.Emit(OpCodes.Box, methodParams(0))\n        Dim writeLineObj As MethodInfo = _\n            GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                New Type() {GetType(Object)})\n        ilg.EmitCall(OpCodes.Call, writeLineObj, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        &#39; Emit an entry point method; this must be in a\n        &#39; non-generic type.\n        Dim dummy As TypeBuilder = _\n            myModule.DefineType(&quot;Dummy&quot;, _\n                TypeAttributes.Class Or TypeAttributes.NotPublic)\n        Dim entryPoint As MethodBuilder = _\n            dummy.DefineMethod(&quot;Main&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                Nothing, Nothing)\n        ilg = entryPoint.GetILGenerator()\n        &#39; In order to call the static generic method GM, it is\n        &#39; necessary to create a constructed type from the \n        &#39; generic type definition for Sample. This can be ANY\n        &#39; constructed type; in this case Sample(Of Integer)\n        &#39; is used.\n        Dim SampleOfInt As Type = _\n            myType.MakeGenericType(GetType(Integer))\n        &#39; Next get a MethodInfo representing the static generic\n        &#39; method GM on type Sample(Of Integer).\n        Dim SampleOfIntGM As MethodInfo = _\n            TypeBuilder.GetMethod(SampleOfInt, genMethod)\n        &#39; Next get a MethodInfo for GM(Of String), which is the \n        &#39; instantiation of generic method GM that is called\n        &#39; by Sub Main.\n        Dim GMOfString As MethodInfo = _\n            SampleOfIntGM.MakeGenericMethod(GetType(String))\n        &#39; Finally, emit the call. Push a string onto\n        &#39; the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;)\n        ilg.EmitCall(OpCodes.Call, GMOfString, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        myType.CreateType()\n        dummy.CreateType()\n        myAssembly.SetEntryPoint(entryPoint)\n        myAssembly.Save(myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        Console.WriteLine(myAsmName.Name &amp; &quot;.exe has been saved.&quot;)\n    \n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetConstructorImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetConstructors_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetConstructors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructors(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the public and non-public constructors defined for this class, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> as in <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of objects representing all the custom attributes of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported for incomplete types. Retrieve the type using <span class=\"xref\">stem.Type.GetType*</span> and call <span class=\"xref\">stem.Reflection.MemberInfo.GetCustomAttributes*</span> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes of the current type that are assignable to a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to search for. Only attributes that are assignable to this type are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of custom attributes defined on the current type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported for incomplete types. Retrieve the type using <span class=\"xref\">stem.Type.GetType*</span> and call <span class=\"xref\">stem.Reflection.MemberInfo.GetCustomAttributes*</span> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type must be a type provided by the underlying runtime system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetElementType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetElementType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementType()</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetElementType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>This method is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvent(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the event with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> values that limits the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> object representing the event declared or inherited by this type with the specified name, or <code>null</code> if there are no matches.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetEvents\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public events declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetEvents_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public events that are declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> values that limits the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetField_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field specified by the given name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the field to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> as in <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetField_System_Type_System_Reflection_FieldInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(Type,FieldInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructed generic type whose field is returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>field</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A field on the generic type definition of <code>type</code>, which specifies which field of <code>type</code> to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object that represents the field of <code>type</code> corresponding to <code>field</code>, which specifies a field belonging to the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> does not represent a generic type.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not of type <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a>.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>field</code> is not a generic type definition.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>field</code> is not the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetField method provides a way to get a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object that represents a field of a constructed generic type whose generic type definition is represented by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.  </p>\n<p> For example, suppose you have a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents the type <code>G&lt;T&gt;</code> in C# syntax (<code>G(Of T)</code> in Visual Basic, <code>generic &lt;T&gt; ref class G</code> in C++) and a <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> object that represents a field <code>public T F</code> in C# syntax (<code>Public F As T</code> in Visual Basic, <code>public: T F</code> in C++) that is defined by <code>G&lt;T&gt;</code>. Suppose that <code>G&lt;T&gt;</code> has a generic method with type parameter <code>U</code> that creates an instance of the constructed type <code>G&lt;U&gt;</code> and calls field <code>F</code> on that instance. In order to emit the function call, you need a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object that represents <code>F</code> on the constructed type — in other words, that is of type <code>U</code> rather than type <code>T</code>. To do this, first call the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method on the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object, specifying the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object that represents <code>U</code> as the type argument. Then call the GetField method with the return value of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method as parameter <code>type</code> and the <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> object that represents <code>F</code> as parameter <code>field</code>. The return value is the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object you need to emit the function call. The code example demonstrates this scenario.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example contains source code for a generic class named Sample that has a type parameter named <code>T</code>. The class has a field named <code>Field</code>, of type <code>T</code>, and a generic method named <code>GM</code> with its own type parameter, named <code>U</code>. Method <code>GM</code> creates an instance of <code>Sample</code>, substituting its own type parameter <code>U</code> for the type parameter of <code>Sample</code>, and stores its input parameter in <code>Field</code>. This source code is compiled but not used; you can view it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> and compare it to the code emitted by class <code>Example</code>.  </p>\n<p> The code in class <code>Example</code> demonstrates the use of the GetField method to emit generic code. The <code>Main</code> method of class <code>Example</code> creates a dynamic assembly containing a class named <code>Sample</code>, and uses the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method to make it generic by adding a type parameter named <code>T</code>. A default constructor and a field named <code>Field</code>, of type <code>T</code>, are added to class <code>Sample</code>. A method <code>GM</code> is added and turned into a generic method by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method. The type parameter of <code>GM</code> is named <code>U</code>. After the type parameter is defined, the signature of <code>GM</code> is added by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method. There is no return type and no required or custom modifiers, so all the parameters of this method are <code>null</code> except <code>parameterTypes</code>; <code>parameterTypes</code> sets the type of the method&#39;s only parameter to <code>U</code>, the method&#39;s generic type parameter. The body of the method creates an instance of the constructed type <code>Sample&lt;U&gt;</code> (<code>Sample(Of U)</code> in Visual Basic), assigns the method&#39;s parameter to <code>Field</code>, and then prints the value of <code>Field</code>. The GetField method is used to create a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents the field of the constructed generic type <code>Sample&lt;U&gt;</code> in the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stfld\" data-linktype=\"relative-path\">System.Reflection.Emit.OpCodes.Stfld</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldfld\" data-linktype=\"relative-path\">System.Reflection.Emit.OpCodes.Ldfld</a> instructions.  </p>\n<p> A dummy type is defined to hold the entry-point method <code>Main</code>. In the body of <code>Main</code>, the static <code>GM</code> method is invoked on the constructed generic type <code>Sample&lt;int&gt;</code> (<code>Sample(Of Integer)</code> in Visual Basic), with type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> substituted for <code>U</code>.  </p>\n<p> When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to compare the emitted code with the code for the <code>Sample</code> class that is compiled into the code example itself.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder.GetField_Generic#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// Compare the MSIL in this class to the MSIL\n// generated by the Reflection.Emit code in class\n// Example.\npublic class Sample&lt;T&gt;\n{\n  public T Field;\n  public static void GM&lt;U&gt;(U val)\n  {\n    Sample&lt;U&gt; s = new Sample&lt;U&gt;();\n    s.Field = val;\n    Console.WriteLine(s.Field);\n  }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = \n            new AssemblyName(&quot;TypeBuilderGetFieldExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.exe&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Class | TypeAttributes.Public);\n\n        // Add a type parameter, making the type generic.\n        string[] typeParamNames = {&quot;T&quot;};  \n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a default constructor. Normally it would \n        // not be necessary to define the default constructor,\n        // but in this case it is needed for the call to\n        // TypeBuilder.GetConstructor, which gets the default\n        // constructor for the generic type constructed from \n        // Sample&lt;T&gt;, in the generic method GM&lt;U&gt;.\n        ConstructorBuilder ctor = myType.DefineDefaultConstructor(\n            MethodAttributes.PrivateScope | MethodAttributes.Public |\n            MethodAttributes.HideBySig | MethodAttributes.SpecialName |\n            MethodAttributes.RTSpecialName);\n\n        // Add a field of type T, with the name Field.\n        FieldBuilder myField = myType.DefineField(&quot;Field&quot;, \n            typeParams[0],\n            FieldAttributes.Public);\n\n        // Add a method and make it generic, with a type \n        // parameter named U. Note how similar this is to \n        // the way Sample is turned into a generic type. The\n        // method has no signature, because the type of its\n        // only parameter is U, which is not yet defined.\n        MethodBuilder genMethod = myType.DefineMethod(&quot;GM&quot;, \n            MethodAttributes.Public | MethodAttributes.Static);\n        string[] methodParamNames = {&quot;U&quot;};\n        GenericTypeParameterBuilder[] methodParams = \n            genMethod.DefineGenericParameters(methodParamNames);\n        \n        // Now add a signature for genMethod, specifying U\n        // as the type of the parameter. There is no return value\n        // and no custom modifiers.\n        genMethod.SetSignature(null, null, null, \n            new Type[] { methodParams[0] }, null, null);\n\n        // Emit a method body for the generic method.\n        ILGenerator ilg = genMethod.GetILGenerator();\n        // Construct the type Sample&lt;U&gt; using MakeGenericType.\n        Type SampleOfU = myType.MakeGenericType( methodParams[0] );\n        // Create a local variable to store the instance of\n        // Sample&lt;U&gt;.\n        ilg.DeclareLocal(SampleOfU);\n        // Call the default constructor. Note that it is \n        // necessary to have the default constructor for the\n        // constructed generic type Sample&lt;U&gt;; use the \n        // TypeBuilder.GetConstructor method to obtain this \n        // constructor.\n        ConstructorInfo ctorOfU = TypeBuilder.GetConstructor(\n            SampleOfU, ctor);\n        ilg.Emit(OpCodes.Newobj, ctorOfU);\n        // Store the instance in the local variable; load it\n        // again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0); \n        ilg.Emit(OpCodes.Ldloc_0); \n        ilg.Emit(OpCodes.Ldarg_0);\n        // In order to store the value in the field of the\n        // instance of Sample&lt;U&gt;, it is necessary to have \n        // a FieldInfo representing the field of the \n        // constructed type. Use TypeBuilder.GetField to \n        // obtain this FieldInfo.\n        FieldInfo FieldOfU = TypeBuilder.GetField(\n            SampleOfU, myField);\n        // Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU);\n        // Load the instance, load the field value, box it\n        // (specifying the type of the type parameter, U), and\n        // print it.\n        ilg.Emit(OpCodes.Ldloc_0);\n        ilg.Emit(OpCodes.Ldfld, FieldOfU);\n        ilg.Emit(OpCodes.Box, methodParams[0]);\n        MethodInfo writeLineObj = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                new Type[] { typeof(object) });\n        ilg.EmitCall(OpCodes.Call, writeLineObj, null);\n        ilg.Emit(OpCodes.Ret);\n\n        // Emit an entry point method; this must be in a\n        // non-generic type.\n        TypeBuilder dummy = myModule.DefineType(&quot;Dummy&quot;, \n            TypeAttributes.Class | TypeAttributes.NotPublic);\n        MethodBuilder entryPoint = dummy.DefineMethod(&quot;Main&quot;, \n            MethodAttributes.Public | MethodAttributes.Static,\n            null, null);\n        ilg = entryPoint.GetILGenerator();\n        // In order to call the static generic method GM, it is\n        // necessary to create a constructed type from the \n        // generic type definition for Sample. This can be any\n        // constructed type; in this case Sample&lt;int&gt; is used.\n        Type SampleOfInt = \n            myType.MakeGenericType( typeof(int) );\n        // Next get a MethodInfo representing the static generic\n        // method GM on type Sample&lt;int&gt;.\n        MethodInfo SampleOfIntGM = TypeBuilder.GetMethod(SampleOfInt, \n            genMethod);\n        // Next get a MethodInfo for GM&lt;string&gt;, which is the \n        // instantiation of GM that Main calls.\n        MethodInfo GMOfString = \n            SampleOfIntGM.MakeGenericMethod( typeof(string) );\n        // Finally, emit the call. Push a string onto\n        // the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;);\n        ilg.EmitCall(OpCodes.Call, GMOfString, null);\n        ilg.Emit(OpCodes.Ret);\n\n        myType.CreateType();\n        dummy.CreateType();\n        myAssembly.SetEntryPoint(entryPoint);\n        myAssembly.Save(myAsmName.Name + &quot;.exe&quot;);\n\n        Console.WriteLine(myAsmName.Name + &quot;.exe has been saved.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder.GetField_Generic#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\n&#39; Compare the MSIL in this class to the MSIL\n&#39; generated by the Reflection.Emit code in class\n&#39; Example.\nPublic Class Sample(Of T)\n    Public Field As T\n    Public Shared Sub GM(Of U)(ByVal val As U)\n        Dim s As New Sample(Of U)\n        s.Field = val\n        Console.WriteLine(s.Field)\n    \n    End Sub\nEnd Class \n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;TypeBuilderGetFieldExample&quot;)\n        Dim myAssembly As AssemblyBuilder = _\n            myDomain.DefineDynamicAssembly(myAsmName, _\n                AssemblyBuilderAccess.Save)\n        Dim myModule As ModuleBuilder = _\n            myAssembly.DefineDynamicModule(myAsmName.Name, _\n                myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Class Or TypeAttributes.Public)\n        \n        &#39; Add a type parameter, making the type generic.\n        Dim typeParamNames() As String = { &quot;T&quot; }\n        Dim typeParams As GenericTypeParameterBuilder() = _\n            myType.DefineGenericParameters(typeParamNames)\n        \n        &#39; Define a default constructor. Normally it would \n        &#39; not be necessary to define the default constructor,\n        &#39; but in this case it is needed for the call to\n        &#39; TypeBuilder.GetConstructor, which gets the default\n        &#39; constructor for the generic type constructed from \n        &#39; Sample(Of T), in the generic method GM(Of U).\n        Dim ctor As ConstructorBuilder = _\n            myType.DefineDefaultConstructor( _\n                MethodAttributes.PrivateScope Or MethodAttributes.Public _\n                Or MethodAttributes.HideBySig Or MethodAttributes.SpecialName _\n                Or MethodAttributes.RTSpecialName)\n        \n        &#39; Add a field of type T, with the name Field.\n        Dim myField As FieldBuilder = myType.DefineField( _\n            &quot;Field&quot;, typeParams(0), FieldAttributes.Public)\n        \n        &#39; Add a method and make it generic, with a type \n        &#39; parameter named U. Note how similar this is to \n        &#39; the way Sample is turned into a generic type. The\n        &#39; method has no signature, because the type of its\n        &#39; only parameter is U, which is not yet defined.\n        Dim genMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;GM&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static)\n        Dim methodParamNames() As String = { &quot;U&quot; }\n        Dim methodParams As GenericTypeParameterBuilder() = _\n            genMethod.DefineGenericParameters(methodParamNames)\n\n        &#39; Now add a signature for genMethod, specifying U\n        &#39; as the type of the parameter. There is no return value\n        &#39; and no custom modifiers.\n        genMethod.SetSignature(Nothing, Nothing, Nothing, _\n            New Type() { methodParams(0) }, Nothing, Nothing)\n        \n        &#39; Emit a method body for the generic method.\n        Dim ilg As ILGenerator = genMethod.GetILGenerator()\n        &#39; Construct the type Sample(Of U) using MakeGenericType.\n        Dim SampleOfU As Type = _\n            myType.MakeGenericType(methodParams(0))\n        &#39; Create a local variable to store the instance of\n        &#39; Sample(Of U).\n        ilg.DeclareLocal(SampleOfU)\n        &#39; Call the default constructor. Note that it is \n        &#39; necessary to have the default constructor for the\n        &#39; constructed generic type Sample(Of U); use the \n        &#39; TypeBuilder.GetConstructor method to obtain this \n        &#39; constructor.\n        Dim ctorOfU As ConstructorInfo = _\n            TypeBuilder.GetConstructor(SampleOfU, ctor)\n        ilg.Emit(OpCodes.Newobj, ctorOfU)\n        &#39; Store the instance in the local variable; load it\n        &#39; again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0)\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldarg_0)\n        &#39; In order to store the value in the field of the\n        &#39; instance of Sample(Of U), it is necessary to have \n        &#39; a FieldInfo representing the field of the \n        &#39; constructed type. Use TypeBuilder.GetField to \n        &#39; obtain this FieldInfo.\n        Dim FieldOfU As FieldInfo = _\n            TypeBuilder.GetField(SampleOfU, myField)\n        &#39; Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU)\n        &#39; Load the instance, load the field value, box it\n        &#39; (specifying the type of the type parameter, U), \n        &#39; and print it.\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldfld, FieldOfU)\n        ilg.Emit(OpCodes.Box, methodParams(0))\n        Dim writeLineObj As MethodInfo = _\n            GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                New Type() {GetType(Object)})\n        ilg.EmitCall(OpCodes.Call, writeLineObj, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        &#39; Emit an entry point method; this must be in a\n        &#39; non-generic type.\n        Dim dummy As TypeBuilder = _\n            myModule.DefineType(&quot;Dummy&quot;, _\n                TypeAttributes.Class Or TypeAttributes.NotPublic)\n        Dim entryPoint As MethodBuilder = _\n            dummy.DefineMethod(&quot;Main&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                Nothing, Nothing)\n        ilg = entryPoint.GetILGenerator()\n        &#39; In order to call the static generic method GM, it is\n        &#39; necessary to create a constructed type from the \n        &#39; generic type definition for Sample. This can be ANY\n        &#39; constructed type; in this case Sample(Of Integer)\n        &#39; is used.\n        Dim SampleOfInt As Type = _\n            myType.MakeGenericType(GetType(Integer))\n        &#39; Next get a MethodInfo representing the static generic\n        &#39; method GM on type Sample(Of Integer).\n        Dim SampleOfIntGM As MethodInfo = _\n            TypeBuilder.GetMethod(SampleOfInt, genMethod)\n        &#39; Next get a MethodInfo for GM(Of String), which is the \n        &#39; instantiation of generic method GM that is called\n        &#39; by Sub Main.\n        Dim GMOfString As MethodInfo = _\n            SampleOfIntGM.MakeGenericMethod(GetType(String))\n        &#39; Finally, emit the call. Push a string onto\n        &#39; the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;)\n        ilg.EmitCall(OpCodes.Call, GMOfString, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        myType.CreateType()\n        dummy.CreateType()\n        myAssembly.SetEntryPoint(entryPoint)\n        myAssembly.Save(myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        Console.WriteLine(myAsmName.Name &amp; &quot;.exe has been saved.&quot;)\n    \n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetFields_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public fields that are declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetFields method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.  </p>\n<p> Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetGenericArguments\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetGenericArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericArguments()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetGenericArguments ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.  </p>\n<p> A <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object represents a generic type definition if the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method has been used to give it generic type parameters. This method retrieves the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> objects that represent the generic type parameters.  </p>\n<p> For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetGenericTypeDefinition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetGenericTypeDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericTypeDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a generic type definition from which the current type can be obtained.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetGenericTypeDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing a generic type definition from which the current type can be obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current type is not generic. That is, <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you call the GetGenericTypeDefinition method on a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object for which the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property returns <code>true</code>, the GetGenericTypeDefinition property returns the current instance. A <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> that represents a generic type is always a generic type definition.  </p>\n<p> If you used the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method to construct a generic type from a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents a generic type definition, using the <a class=\"xref\" href=\"system.type#System_Type_GetGenericTypeDefinition_\" data-linktype=\"relative-path\">GetGenericTypeDefinition</a> method on the constructed type gets back the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents the generic type definition.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetInterface_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetInterface_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterface(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetInterface (string name, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the search is case-insensitive. If <code>false</code>, the search is case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the implemented interface. Returns null if no interface matching name is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetInterfaceMap_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetInterfaceMap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaceMap(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an interface mapping for the requested interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaceType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the interface for which the mapping is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.interfacemapping\" data-linktype=\"relative-path\">InterfaceMapping</a></div>\r\n                  </div>\r\n                  <p>Returns the requested interface mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetInterfaces\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetInterfaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaces()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of all the interfaces implemented on this type and its base types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetInterfaces ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the implemented interfaces. If none are defined, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMember(String,MemberTypes,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the public and non-public members declared or inherited by this type, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the member to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, as in <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetMembers_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetMembers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMembers(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the members for the public and non-public members declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetMethod_System_Type_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod(Type,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructed generic type whose method is returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A method on the generic type definition of <code>type</code>, which specifies which method of <code>type</code> to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the method of <code>type</code> corresponding to <code>method</code>, which specifies a method belonging to the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is a generic method that is not a generic method definition.  </p>\n<p> -or-  </p>\n<p> <code>type</code> does not represent a generic type.  </p>\n<p> -or-  </p>\n<p> <code>type</code> is not of type <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a>.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>method</code> is not a generic type definition.  </p>\n<p> -or-  </p>\n<p> The declaring type of <code>method</code> is not the generic type definition of <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetMethod method provides a way to get a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents a method of a constructed generic type whose generic type definition is represented by a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.  </p>\n<p> For example, suppose you have a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object that represents the type <code>G&lt;T&gt;</code> in C# syntax (<code>G(Of T)</code> in Visual Basic, <code>generic &lt;T&gt; ref class G</code> in C++) and a <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> object that represents a method <code>T M()</code> in C# syntax (<code>Function M() As T</code> in Visual Basic, <code>T M()</code> in C++) that is defined by <code>G&lt;T&gt;</code>. Suppose that <code>G&lt;T&gt;</code> has a generic method with type parameter <code>U</code> that creates an instance of the constructed type <code>G&lt;U&gt;</code> and calls method <code>M</code> on that instance. In order to emit the function call, you need a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents <code>M</code> on the constructed type — in other words, that returns type <code>U</code> rather than type <code>T</code>. To do this, first call the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method on the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object, specifying the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object that represents <code>U</code> as the type argument. Then call the GetMethod method with the return value of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeGenericType_\" data-linktype=\"relative-path\">MakeGenericType</a> method as parameter <code>type</code> and the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> object that represents <code>T M()</code> as parameter <code>method</code>. The return value is the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object you need to emit the function call. The code example demonstrates a scenario similar to this.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example contains source code for a generic class named <code>Sample</code> that has a type parameter named <code>T</code>. The class has a field named <code>Field</code>, of type <code>T</code>, and a generic method named <code>GM</code> with its own type parameter, named <code>U</code>. Method <code>GM</code> creates an instance of <code>Sample</code>, substituting its own type parameter <code>U</code> for the type parameter of <code>Sample</code>, and stores its input parameter in <code>Field</code>. This source code is compiled but not used; you can view it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> and compare it to the code emitted by class <code>Example</code>.  </p>\n<p> The code in class <code>Example</code> demonstrates the use of the GetMethod method to emit generic code. The <code>Main</code> method of class <code>Example</code> creates a dynamic assembly containing a class named <code>Sample</code> and uses the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method to make it generic by adding a type parameter named <code>T</code>. A default constructor and a field named <code>Field</code>, of type <code>T</code>, are added to class <code>Sample</code>. A method <code>GM</code> is added and turned into a generic method by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method. The type parameter of <code>GM</code> is named <code>U</code>. After the type parameter is defined, the signature of <code>GM</code> is added by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetSignature_\" data-linktype=\"relative-path\">SetSignature</a> method. There is no return type and no required or custom modifiers, so all the parameters of this method are <code>null</code> except <code>parameterTypes</code>; <code>parameterTypes</code> sets the type of the method&#39;s only parameter to <code>U</code>, the method&#39;s generic type parameter. The body of the method creates an instance of the constructed type <code>Sample&lt;U&gt;</code> (<code>Sample(Of U)</code> in Visual Basic), assigns the method&#39;s parameter to <code>Field</code>, and then prints the value of <code>Field</code>. A dummy type is defined to hold the entry-point method <code>Main</code>. In the body of <code>Main</code>, the static <code>GM</code> method is invoked on the constructed generic type <code>Sample&lt;int&gt;</code> (<code>Sample(Of Integer)</code> in Visual Basic), with type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> substituted for <code>U</code>. The GetMethod method is used to create a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the static <code>GM</code> method of the constructed generic type <code>Sample&lt;U&gt;</code>, and the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> method is then used to create a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that can emitted in a method call.  </p>\n<p> When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to compare the emitted code with the code for the <code>Sample</code> class that is compiled into the code example itself.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeBuilder.GetField_Generic#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// Compare the MSIL in this class to the MSIL\n// generated by the Reflection.Emit code in class\n// Example.\npublic class Sample&lt;T&gt;\n{\n  public T Field;\n  public static void GM&lt;U&gt;(U val)\n  {\n    Sample&lt;U&gt; s = new Sample&lt;U&gt;();\n    s.Field = val;\n    Console.WriteLine(s.Field);\n  }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = \n            new AssemblyName(&quot;TypeBuilderGetFieldExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.exe&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Class | TypeAttributes.Public);\n\n        // Add a type parameter, making the type generic.\n        string[] typeParamNames = {&quot;T&quot;};  \n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a default constructor. Normally it would \n        // not be necessary to define the default constructor,\n        // but in this case it is needed for the call to\n        // TypeBuilder.GetConstructor, which gets the default\n        // constructor for the generic type constructed from \n        // Sample&lt;T&gt;, in the generic method GM&lt;U&gt;.\n        ConstructorBuilder ctor = myType.DefineDefaultConstructor(\n            MethodAttributes.PrivateScope | MethodAttributes.Public |\n            MethodAttributes.HideBySig | MethodAttributes.SpecialName |\n            MethodAttributes.RTSpecialName);\n\n        // Add a field of type T, with the name Field.\n        FieldBuilder myField = myType.DefineField(&quot;Field&quot;, \n            typeParams[0],\n            FieldAttributes.Public);\n\n        // Add a method and make it generic, with a type \n        // parameter named U. Note how similar this is to \n        // the way Sample is turned into a generic type. The\n        // method has no signature, because the type of its\n        // only parameter is U, which is not yet defined.\n        MethodBuilder genMethod = myType.DefineMethod(&quot;GM&quot;, \n            MethodAttributes.Public | MethodAttributes.Static);\n        string[] methodParamNames = {&quot;U&quot;};\n        GenericTypeParameterBuilder[] methodParams = \n            genMethod.DefineGenericParameters(methodParamNames);\n        \n        // Now add a signature for genMethod, specifying U\n        // as the type of the parameter. There is no return value\n        // and no custom modifiers.\n        genMethod.SetSignature(null, null, null, \n            new Type[] { methodParams[0] }, null, null);\n\n        // Emit a method body for the generic method.\n        ILGenerator ilg = genMethod.GetILGenerator();\n        // Construct the type Sample&lt;U&gt; using MakeGenericType.\n        Type SampleOfU = myType.MakeGenericType( methodParams[0] );\n        // Create a local variable to store the instance of\n        // Sample&lt;U&gt;.\n        ilg.DeclareLocal(SampleOfU);\n        // Call the default constructor. Note that it is \n        // necessary to have the default constructor for the\n        // constructed generic type Sample&lt;U&gt;; use the \n        // TypeBuilder.GetConstructor method to obtain this \n        // constructor.\n        ConstructorInfo ctorOfU = TypeBuilder.GetConstructor(\n            SampleOfU, ctor);\n        ilg.Emit(OpCodes.Newobj, ctorOfU);\n        // Store the instance in the local variable; load it\n        // again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0); \n        ilg.Emit(OpCodes.Ldloc_0); \n        ilg.Emit(OpCodes.Ldarg_0);\n        // In order to store the value in the field of the\n        // instance of Sample&lt;U&gt;, it is necessary to have \n        // a FieldInfo representing the field of the \n        // constructed type. Use TypeBuilder.GetField to \n        // obtain this FieldInfo.\n        FieldInfo FieldOfU = TypeBuilder.GetField(\n            SampleOfU, myField);\n        // Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU);\n        // Load the instance, load the field value, box it\n        // (specifying the type of the type parameter, U), and\n        // print it.\n        ilg.Emit(OpCodes.Ldloc_0);\n        ilg.Emit(OpCodes.Ldfld, FieldOfU);\n        ilg.Emit(OpCodes.Box, methodParams[0]);\n        MethodInfo writeLineObj = \n            typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                new Type[] { typeof(object) });\n        ilg.EmitCall(OpCodes.Call, writeLineObj, null);\n        ilg.Emit(OpCodes.Ret);\n\n        // Emit an entry point method; this must be in a\n        // non-generic type.\n        TypeBuilder dummy = myModule.DefineType(&quot;Dummy&quot;, \n            TypeAttributes.Class | TypeAttributes.NotPublic);\n        MethodBuilder entryPoint = dummy.DefineMethod(&quot;Main&quot;, \n            MethodAttributes.Public | MethodAttributes.Static,\n            null, null);\n        ilg = entryPoint.GetILGenerator();\n        // In order to call the static generic method GM, it is\n        // necessary to create a constructed type from the \n        // generic type definition for Sample. This can be any\n        // constructed type; in this case Sample&lt;int&gt; is used.\n        Type SampleOfInt = \n            myType.MakeGenericType( typeof(int) );\n        // Next get a MethodInfo representing the static generic\n        // method GM on type Sample&lt;int&gt;.\n        MethodInfo SampleOfIntGM = TypeBuilder.GetMethod(SampleOfInt, \n            genMethod);\n        // Next get a MethodInfo for GM&lt;string&gt;, which is the \n        // instantiation of GM that Main calls.\n        MethodInfo GMOfString = \n            SampleOfIntGM.MakeGenericMethod( typeof(string) );\n        // Finally, emit the call. Push a string onto\n        // the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;);\n        ilg.EmitCall(OpCodes.Call, GMOfString, null);\n        ilg.Emit(OpCodes.Ret);\n\n        myType.CreateType();\n        dummy.CreateType();\n        myAssembly.SetEntryPoint(entryPoint);\n        myAssembly.Save(myAsmName.Name + &quot;.exe&quot;);\n\n        Console.WriteLine(myAsmName.Name + &quot;.exe has been saved.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder.GetField_Generic#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\n&#39; Compare the MSIL in this class to the MSIL\n&#39; generated by the Reflection.Emit code in class\n&#39; Example.\nPublic Class Sample(Of T)\n    Public Field As T\n    Public Shared Sub GM(Of U)(ByVal val As U)\n        Dim s As New Sample(Of U)\n        s.Field = val\n        Console.WriteLine(s.Field)\n    \n    End Sub\nEnd Class \n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;TypeBuilderGetFieldExample&quot;)\n        Dim myAssembly As AssemblyBuilder = _\n            myDomain.DefineDynamicAssembly(myAsmName, _\n                AssemblyBuilderAccess.Save)\n        Dim myModule As ModuleBuilder = _\n            myAssembly.DefineDynamicModule(myAsmName.Name, _\n                myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Class Or TypeAttributes.Public)\n        \n        &#39; Add a type parameter, making the type generic.\n        Dim typeParamNames() As String = { &quot;T&quot; }\n        Dim typeParams As GenericTypeParameterBuilder() = _\n            myType.DefineGenericParameters(typeParamNames)\n        \n        &#39; Define a default constructor. Normally it would \n        &#39; not be necessary to define the default constructor,\n        &#39; but in this case it is needed for the call to\n        &#39; TypeBuilder.GetConstructor, which gets the default\n        &#39; constructor for the generic type constructed from \n        &#39; Sample(Of T), in the generic method GM(Of U).\n        Dim ctor As ConstructorBuilder = _\n            myType.DefineDefaultConstructor( _\n                MethodAttributes.PrivateScope Or MethodAttributes.Public _\n                Or MethodAttributes.HideBySig Or MethodAttributes.SpecialName _\n                Or MethodAttributes.RTSpecialName)\n        \n        &#39; Add a field of type T, with the name Field.\n        Dim myField As FieldBuilder = myType.DefineField( _\n            &quot;Field&quot;, typeParams(0), FieldAttributes.Public)\n        \n        &#39; Add a method and make it generic, with a type \n        &#39; parameter named U. Note how similar this is to \n        &#39; the way Sample is turned into a generic type. The\n        &#39; method has no signature, because the type of its\n        &#39; only parameter is U, which is not yet defined.\n        Dim genMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;GM&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static)\n        Dim methodParamNames() As String = { &quot;U&quot; }\n        Dim methodParams As GenericTypeParameterBuilder() = _\n            genMethod.DefineGenericParameters(methodParamNames)\n\n        &#39; Now add a signature for genMethod, specifying U\n        &#39; as the type of the parameter. There is no return value\n        &#39; and no custom modifiers.\n        genMethod.SetSignature(Nothing, Nothing, Nothing, _\n            New Type() { methodParams(0) }, Nothing, Nothing)\n        \n        &#39; Emit a method body for the generic method.\n        Dim ilg As ILGenerator = genMethod.GetILGenerator()\n        &#39; Construct the type Sample(Of U) using MakeGenericType.\n        Dim SampleOfU As Type = _\n            myType.MakeGenericType(methodParams(0))\n        &#39; Create a local variable to store the instance of\n        &#39; Sample(Of U).\n        ilg.DeclareLocal(SampleOfU)\n        &#39; Call the default constructor. Note that it is \n        &#39; necessary to have the default constructor for the\n        &#39; constructed generic type Sample(Of U); use the \n        &#39; TypeBuilder.GetConstructor method to obtain this \n        &#39; constructor.\n        Dim ctorOfU As ConstructorInfo = _\n            TypeBuilder.GetConstructor(SampleOfU, ctor)\n        ilg.Emit(OpCodes.Newobj, ctorOfU)\n        &#39; Store the instance in the local variable; load it\n        &#39; again, and load the parameter of genMethod.\n        ilg.Emit(OpCodes.Stloc_0)\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldarg_0)\n        &#39; In order to store the value in the field of the\n        &#39; instance of Sample(Of U), it is necessary to have \n        &#39; a FieldInfo representing the field of the \n        &#39; constructed type. Use TypeBuilder.GetField to \n        &#39; obtain this FieldInfo.\n        Dim FieldOfU As FieldInfo = _\n            TypeBuilder.GetField(SampleOfU, myField)\n        &#39; Store the value in the field. \n        ilg.Emit(OpCodes.Stfld, FieldOfU)\n        &#39; Load the instance, load the field value, box it\n        &#39; (specifying the type of the type parameter, U), \n        &#39; and print it.\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.Emit(OpCodes.Ldfld, FieldOfU)\n        ilg.Emit(OpCodes.Box, methodParams(0))\n        Dim writeLineObj As MethodInfo = _\n            GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                New Type() {GetType(Object)})\n        ilg.EmitCall(OpCodes.Call, writeLineObj, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        &#39; Emit an entry point method; this must be in a\n        &#39; non-generic type.\n        Dim dummy As TypeBuilder = _\n            myModule.DefineType(&quot;Dummy&quot;, _\n                TypeAttributes.Class Or TypeAttributes.NotPublic)\n        Dim entryPoint As MethodBuilder = _\n            dummy.DefineMethod(&quot;Main&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                Nothing, Nothing)\n        ilg = entryPoint.GetILGenerator()\n        &#39; In order to call the static generic method GM, it is\n        &#39; necessary to create a constructed type from the \n        &#39; generic type definition for Sample. This can be ANY\n        &#39; constructed type; in this case Sample(Of Integer)\n        &#39; is used.\n        Dim SampleOfInt As Type = _\n            myType.MakeGenericType(GetType(Integer))\n        &#39; Next get a MethodInfo representing the static generic\n        &#39; method GM on type Sample(Of Integer).\n        Dim SampleOfIntGM As MethodInfo = _\n            TypeBuilder.GetMethod(SampleOfInt, genMethod)\n        &#39; Next get a MethodInfo for GM(Of String), which is the \n        &#39; instantiation of generic method GM that is called\n        &#39; by Sub Main.\n        Dim GMOfString As MethodInfo = _\n            SampleOfIntGM.MakeGenericMethod(GetType(String))\n        &#39; Finally, emit the call. Push a string onto\n        &#39; the stack, as the argument for the generic method.\n        ilg.Emit(OpCodes.Ldstr, &quot;Hello, world!&quot;)\n        ilg.EmitCall(OpCodes.Call, GMOfString, Nothing)\n        ilg.Emit(OpCodes.Ret)\n        \n        myType.CreateType()\n        dummy.CreateType()\n        myAssembly.SetEntryPoint(entryPoint)\n        myAssembly.Save(myAsmName.Name &amp; &quot;.exe&quot;)\n        \n        Console.WriteLine(myAsmName.Name &amp; &quot;.exe has been saved.&quot;)\n    \n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetMethods_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the public and non-public methods declared or inherited by this type, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> as in <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedType(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public nested types that are declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of the nested type to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitmask comprised of one or more <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> that specify how the search is conducted.  </p>\n<p> -or-  </p>\n<p> Zero, to conduct a case-sensitive search for public methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the nested type that matches the specified requirements, if found; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.  </p>\n<p> If this type is complete, for example, if <code>CreateType</code> has been called on this type, but there are nested types that are not complete, then <code>GetNestedTypes</code> will only return those nested types for which <code>CreateType</code> has been called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetNestedTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetNestedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedTypes(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public nested types that are declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, as in <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing all the types nested within the current <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that match the specified binding constraints.  </p>\n<p> An empty array of type <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, if no types are nested within the current <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, or if none of the nested types match the binding constraints.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.  </p>\n<p> If this type is complete, for example, if <code>CreateType</code> has been called on this type, but there are nested types that are not complete, then <code>GetNestedTypes</code> will only return those nested types for which <code>CreateType</code> has been called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetProperties_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProperties(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the public and non-public properties declared or inherited by this type, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This invocation attribute. This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <code>PropertyInfo</code> objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_GetPropertyImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_HasElementTypeImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_HasElementTypeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasElementTypeImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool HasElementTypeImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_InvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The invocation attribute. This must be a bit flag from <code>BindingFlags</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <code>MemberInfo</code> objects using reflection. If binder is <code>null</code>, the default binder is used. See <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to invoke the specified member. If the member is static, this parameter is ignored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <code>CultureInfo</code> used to govern the coercion of types. If this is null, the <code>CultureInfo</code> for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namedParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Returns the return value of the invoked member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported for incomplete types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.  </p>\n<p> The binder will find all of the matching methods. These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder. After the method is selected, it will be invoked. Accessibility is checked at that point. The search can control which set of methods are searched based upon the accessibility attribute associated with the method. The <code>IBinder.BindToMethod</code> method is responsible for selecting the method to be invoked. The default binder selects the most specific match.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.  </p>\n</div>\n<p> This method is not currently supported. You can retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsArrayImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsArrayImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsArrayImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsArrayImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsAssignableFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssignableFrom(TypeInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object can be assigned to this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>typeInfo</code> can be assigned to this object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsAssignableFrom_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsAssignableFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssignableFrom(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> can be assigned to this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAssignableFrom (Type c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>c</code> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <code>c</code>, or if the current type is an interface that <code>c</code> supports. <code>false</code> if none of these conditions are valid, or if <code>c</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsByRefImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsByRefImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsByRefImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsByRefImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsCOMObjectImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsCOMObjectImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCOMObjectImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsCOMObjectImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsCreated\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCreated()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current dynamic type has been created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsCreated ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> method has been called; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called, the type represented by the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object is complete. Exceptions are thrown on any further attempts to add members or change other characteristics of the type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a custom attribute is applied to the current type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to search for. Only attributes that are assignable to this type are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code>, or an attribute derived from <code>attributeType</code>, is defined on this type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported for incomplete types. Retrieve the type using <span class=\"xref\">stem.Type.GetType*</span> and call <span class=\"xref\">stem.Reflection.MemberInfo.IsDefined*</span> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsPointerImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsPointerImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPointerImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPointerImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsPrimitiveImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsPrimitiveImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrimitiveImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPrimitiveImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_IsSubclassOf_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_IsSubclassOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubclassOf(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this type is derived from a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubclassOf (Type c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that is to be checked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Read-only. Returns <code>true</code> if this type is the same as the type <code>c</code>, or is a subtype of type <code>c</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_MakeArrayType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a one-dimensional array of the current type, with a lower bound of zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakeArrayType method provides a way to generate an array type with any possible element type, including generic types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract type named <code>Sample</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>Sample</code>, a pointer to type <code>Sample</code>, and an array of type <code>Sample</code>. It returns a two-dimensional array of type <code>Sample</code>. The code example saves the dynamic module to disk, so you can examine it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MakeXxxTypeBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;MakeXxxTypeExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, \n            AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(\n            &quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Define a method that takes a ref argument of type Sample,\n        // a pointer to type Sample, and an array of Sample objects. The\n        // method returns a two-dimensional array of Sample objects.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects.\n        //\n        Type byRefMyType = myType.MakeByRefType();\n        Type pointerMyType = myType.MakePointerType();\n        Type arrayMyType = myType.MakeArrayType();\n        Type twoDimArrayMyType = myType.MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefMyType, pointerMyType, arrayMyType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this code example code, you can use ildasm.exe \n        // to open MakeXxxTypeExample.dll, examine the Sample type,\n        // and verify the parameter types and return type of the\n        // TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual \n                | MethodAttributes.Public,\n            twoDimArrayMyType,\n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxTypeBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxTypeExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Define a method that takes a ByRef argument of type Sample,\n        &#39; a pointer to type Sample, and an array of Sample objects. The\n        &#39; method returns a two-dimensional array of Sample objects.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects.\n        &#39;\n        Dim byRefMyType As Type = myType.MakeByRefType\n        Dim pointerMyType As Type = myType.MakePointerType\n        Dim arrayMyType As Type = myType.MakeArrayType\n        Dim twoDimArrayMyType As Type = myType.MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefMyType, pointerMyType, arrayMyType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this code example code, you can use ildasm.exe \n        &#39; to open MakeXxxTypeExample.dll, examine the Sample type,\n        &#39; and verify the parameter types and return type of the\n        &#39; TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayMyType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_MakeArrayType_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents an array of the current type, with the specified number of dimensions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType (int rank);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rank</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of dimensions for the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a one-dimensional array of the current type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>rank</code> is not a valid array dimension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a> method provides a way to generate an array type with any possible element type, including generic types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract type named <code>Sample</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>Sample</code>, a pointer to type <code>Sample</code>, and an array of type <code>Sample</code>. It returns a two-dimensional array of type <code>Sample</code>. The code example saves the dynamic module to disk, so you can examine it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MakeXxxTypeBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;MakeXxxTypeExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, \n            AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(\n            &quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Define a method that takes a ref argument of type Sample,\n        // a pointer to type Sample, and an array of Sample objects. The\n        // method returns a two-dimensional array of Sample objects.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects.\n        //\n        Type byRefMyType = myType.MakeByRefType();\n        Type pointerMyType = myType.MakePointerType();\n        Type arrayMyType = myType.MakeArrayType();\n        Type twoDimArrayMyType = myType.MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefMyType, pointerMyType, arrayMyType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this code example code, you can use ildasm.exe \n        // to open MakeXxxTypeExample.dll, examine the Sample type,\n        // and verify the parameter types and return type of the\n        // TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual \n                | MethodAttributes.Public,\n            twoDimArrayMyType,\n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxTypeBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxTypeExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Define a method that takes a ByRef argument of type Sample,\n        &#39; a pointer to type Sample, and an array of Sample objects. The\n        &#39; method returns a two-dimensional array of Sample objects.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects.\n        &#39;\n        Dim byRefMyType As Type = myType.MakeByRefType\n        Dim pointerMyType As Type = myType.MakePointerType\n        Dim arrayMyType As Type = myType.MakeArrayType\n        Dim twoDimArrayMyType As Type = myType.MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefMyType, pointerMyType, arrayMyType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this code example code, you can use ildasm.exe \n        &#39; to open MakeXxxTypeExample.dll, examine the Sample type,\n        &#39; and verify the parameter types and return type of the\n        &#39; TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayMyType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_MakeByRefType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_MakeByRefType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeByRefType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeByRefType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakeByRefType method provides a way to generate <code>ref</code> types (<code>ByRef</code> in Visual Basic) for parameter lists.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Using Microsoft intermediate language (MSIL) syntax, if the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> represents <code>MyType</code>, then the type returned by this method would be <code>MyType&amp;</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract type named <code>Sample</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>Sample</code>, a pointer to type <code>Sample</code>, and an array of type <code>Sample</code>. It returns a two-dimensional array of type <code>Sample</code>. The code example saves the dynamic module to disk, so you can examine it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MakeXxxTypeBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;MakeXxxTypeExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, \n            AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(\n            &quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Define a method that takes a ref argument of type Sample,\n        // a pointer to type Sample, and an array of Sample objects. The\n        // method returns a two-dimensional array of Sample objects.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects.\n        //\n        Type byRefMyType = myType.MakeByRefType();\n        Type pointerMyType = myType.MakePointerType();\n        Type arrayMyType = myType.MakeArrayType();\n        Type twoDimArrayMyType = myType.MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefMyType, pointerMyType, arrayMyType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this code example code, you can use ildasm.exe \n        // to open MakeXxxTypeExample.dll, examine the Sample type,\n        // and verify the parameter types and return type of the\n        // TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual \n                | MethodAttributes.Public,\n            twoDimArrayMyType,\n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxTypeBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxTypeExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Define a method that takes a ByRef argument of type Sample,\n        &#39; a pointer to type Sample, and an array of Sample objects. The\n        &#39; method returns a two-dimensional array of Sample objects.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects.\n        &#39;\n        Dim byRefMyType As Type = myType.MakeByRefType\n        Dim pointerMyType As Type = myType.MakePointerType\n        Dim arrayMyType As Type = myType.MakeArrayType\n        Dim twoDimArrayMyType As Type = myType.MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefMyType, pointerMyType, arrayMyType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this code example code, you can use ildasm.exe \n        &#39; to open MakeXxxTypeExample.dll, examine the Sample type,\n        &#39; and verify the parameter types and return type of the\n        &#39; TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayMyType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_MakeGenericType_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_MakeGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeGenericType(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeGenericType (Type[] typeArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types to be substituted for the type parameters of the current generic type definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the constructed type formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current type does not represent the definition of a generic type. That is, <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> returns <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeArguments</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> Any element of <code>typeArguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Type.Module*</span> property of any element of <code>typeArguments</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.Module.Assembly*</span> property of the module of any element of <code>typeArguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method when your emitted code requires a type constructed from the current generic type definition. It is not necessary to call the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method before calling the MakeGenericType method on a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> that represents a generic type definition. If the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> does not represent the definition of a generic type, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.  </p>\n<p> The object returned by this method functions as a placeholder for a constructed generic type in your emitted code. It is an instance of a class derived from <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that has limited capabilities. In particular:  </p>\n<ul>\n<li><p>To get methods, fields, and constructors for these constructed generic types, use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_GetMethod_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"relative-path\">GetMethod(Type,MethodInfo)</a>, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_GetField_System_Type_System_Reflection_FieldInfo_\" data-linktype=\"relative-path\">GetField(Type,FieldInfo)</a>, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_GetConstructor_System_Type_System_Reflection_ConstructorInfo_\" data-linktype=\"relative-path\">GetConstructor(Type,ConstructorInfo)</a> method overloads.  </p>\n</li>\n<li><p>Two instances that represent the same constructed type do not compare as equal. For example, in the following code <code>t1.Equals(t2)</code> returns <code>false</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.TypeBuilder.MakeGenericType#1\">            Dim t1 As Type = tbldr.MakeGenericType(GetType(String))\n            Dim t2 As Type = tbldr.MakeGenericType(GetType(String))\n            Dim result As Boolean = t1.Equals(t2)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.TypeBuilder.MakeGenericType#1\">            Type^ t1 = tbldr-&gt;MakeGenericType(String::typeid);\n            Type^ t2 = tbldr-&gt;MakeGenericType(String::typeid);\n            bool result = t1-&gt;Equals(t2);\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.TypeBuilder.MakeGenericType#1\">            Type t1 = tbldr.MakeGenericType(typeof(string));\n            Type t2 = tbldr.MakeGenericType(typeof(string));\n            bool result = t1.Equals(t2);\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_MakePointerType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_MakePointerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakePointerType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of an unmanaged pointer to the current type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakePointerType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of an unmanaged pointer to the current type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakePointerType method provides a way to generate pointer types for parameter lists.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Using Microsoft intermediate language (MSIL) syntax, if the current <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> represents <code>MyType</code>, then the type returned by this method would be <code>MyType*</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract type named <code>Sample</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>Sample</code>, a pointer to type <code>Sample</code>, and an array of type <code>Sample</code>. It returns a two-dimensional array of type <code>Sample</code>. The code example saves the dynamic module to disk, so you can examine it with the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MakeXxxTypeBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;MakeXxxTypeExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, \n            AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, \n            myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(\n            &quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Define a method that takes a ref argument of type Sample,\n        // a pointer to type Sample, and an array of Sample objects. The\n        // method returns a two-dimensional array of Sample objects.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects.\n        //\n        Type byRefMyType = myType.MakeByRefType();\n        Type pointerMyType = myType.MakePointerType();\n        Type arrayMyType = myType.MakeArrayType();\n        Type twoDimArrayMyType = myType.MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefMyType, pointerMyType, arrayMyType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this code example code, you can use ildasm.exe \n        // to open MakeXxxTypeExample.dll, examine the Sample type,\n        // and verify the parameter types and return type of the\n        // TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual \n                | MethodAttributes.Public,\n            twoDimArrayMyType,\n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxTypeBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxTypeExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Define a method that takes a ByRef argument of type Sample,\n        &#39; a pointer to type Sample, and an array of Sample objects. The\n        &#39; method returns a two-dimensional array of Sample objects.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects.\n        &#39;\n        Dim byRefMyType As Type = myType.MakeByRefType\n        Dim pointerMyType As Type = myType.MakePointerType\n        Dim arrayMyType As Type = myType.MakeArrayType\n        Dim twoDimArrayMyType As Type = myType.MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefMyType, pointerMyType, arrayMyType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this code example code, you can use ildasm.exe \n        &#39; to open MakeXxxTypeExample.dll, examine the Sample type,\n        &#39; and verify the parameter types and return type of the\n        &#39; TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayMyType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class to define the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>customBuilder</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on how to format <code>binaryAttribute</code>, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_SetParent_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_SetParent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetParent(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the base type of the type currently under construction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetParent (Type parent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new base type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The type was previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> <code>parent</code> is <code>null</code>, and the current instance represents an interface whose attributes do not include <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a>.  </p>\n<p> -or-  </p>\n<p> For the current dynamic type, the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericType*</span> property is <code>true</code>, but the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>parent</code> is an interface. This exception condition is new in the .NET Framework version 2.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>parent</code> is <code>null</code>, <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is used as the base type.  </p>\n<p> In the .NET Framework versions 1.0 and 1.1, no exception is thrown if <code>parent</code> is an interface type, but a <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown when the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method is called.  </p>\n<p> The SetParent method does not check for most invalid parent types. For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a> type. In all these cases, exceptions are thrown by the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the name of the type excluding the namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The name of the type excluding the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_TypeBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_TypeBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_TypeBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_TypeBuilder_System_Runtime_InteropServices__TypeBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_TypeBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.TypeBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.TypeBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.BaseType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.CreateType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.CreateTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DeclaringMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineConstructor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineEvent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineGenericParameters\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineInitializedData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineMethodOverride\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineNestedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineProperty\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineTypeInitializer\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.DefineUninitializedData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.FullName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GenericParameterAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GenericParameterPosition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetConstructor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetConstructorImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetConstructors\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetElementType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetEvent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetEvents\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetFields\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetGenericArguments\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetInterface\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetInterfaceMap\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetInterfaces\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetMembers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetNestedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetNestedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetProperties\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GetPropertyImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.GUID\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.HasElementTypeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.InvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsArrayImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsAssignableFrom\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsByRefImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsConstructedGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsCreated\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsGenericParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsPointerImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsSecurityCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsSecurityTransparent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.IsSubclassOf\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.MakeArrayType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.MakeByRefType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.MakeGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.MakePointerType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.PackingSize\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.SetParent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.Size\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder._TypeBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder._TypeBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder._TypeBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder._TypeBuilder.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.ToString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.TypeHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.TypeToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.UnderlyingSystemType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b1480e6f-a3c1-384e-d708-87df55b8fade\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and creates new instances of classes during run time.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.TypeBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.TypeBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.TypeBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.TypeBuilder","System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity","System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation","System.Reflection.Emit.TypeBuilder.Assembly","System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName","System.Reflection.Emit.TypeBuilder.BaseType","System.Reflection.Emit.TypeBuilder.CreateType","System.Reflection.Emit.TypeBuilder.CreateTypeInfo","System.Reflection.Emit.TypeBuilder.DeclaringMethod","System.Reflection.Emit.TypeBuilder.DeclaringType","System.Reflection.Emit.TypeBuilder.DefineConstructor","System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor","System.Reflection.Emit.TypeBuilder.DefineEvent","System.Reflection.Emit.TypeBuilder.DefineField","System.Reflection.Emit.TypeBuilder.DefineGenericParameters","System.Reflection.Emit.TypeBuilder.DefineInitializedData","System.Reflection.Emit.TypeBuilder.DefineMethod","System.Reflection.Emit.TypeBuilder.DefineMethodOverride","System.Reflection.Emit.TypeBuilder.DefineNestedType","System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod","System.Reflection.Emit.TypeBuilder.DefineProperty","System.Reflection.Emit.TypeBuilder.DefineTypeInitializer","System.Reflection.Emit.TypeBuilder.DefineUninitializedData","System.Reflection.Emit.TypeBuilder.FullName","System.Reflection.Emit.TypeBuilder.GenericParameterAttributes","System.Reflection.Emit.TypeBuilder.GenericParameterPosition","System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl","System.Reflection.Emit.TypeBuilder.GetConstructor","System.Reflection.Emit.TypeBuilder.GetConstructorImpl","System.Reflection.Emit.TypeBuilder.GetConstructors","System.Reflection.Emit.TypeBuilder.GetCustomAttributes","System.Reflection.Emit.TypeBuilder.GetElementType","System.Reflection.Emit.TypeBuilder.GetEvent","System.Reflection.Emit.TypeBuilder.GetEvents","System.Reflection.Emit.TypeBuilder.GetField","System.Reflection.Emit.TypeBuilder.GetFields","System.Reflection.Emit.TypeBuilder.GetGenericArguments","System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition","System.Reflection.Emit.TypeBuilder.GetInterface","System.Reflection.Emit.TypeBuilder.GetInterfaceMap","System.Reflection.Emit.TypeBuilder.GetInterfaces","System.Reflection.Emit.TypeBuilder.GetMember","System.Reflection.Emit.TypeBuilder.GetMembers","System.Reflection.Emit.TypeBuilder.GetMethod","System.Reflection.Emit.TypeBuilder.GetMethodImpl","System.Reflection.Emit.TypeBuilder.GetMethods","System.Reflection.Emit.TypeBuilder.GetNestedType","System.Reflection.Emit.TypeBuilder.GetNestedTypes","System.Reflection.Emit.TypeBuilder.GetProperties","System.Reflection.Emit.TypeBuilder.GetPropertyImpl","System.Reflection.Emit.TypeBuilder.GUID","System.Reflection.Emit.TypeBuilder.HasElementTypeImpl","System.Reflection.Emit.TypeBuilder.InvokeMember","System.Reflection.Emit.TypeBuilder.IsArrayImpl","System.Reflection.Emit.TypeBuilder.IsAssignableFrom","System.Reflection.Emit.TypeBuilder.IsByRefImpl","System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl","System.Reflection.Emit.TypeBuilder.IsConstructedGenericType","System.Reflection.Emit.TypeBuilder.IsCreated","System.Reflection.Emit.TypeBuilder.IsDefined","System.Reflection.Emit.TypeBuilder.IsGenericParameter","System.Reflection.Emit.TypeBuilder.IsGenericType","System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition","System.Reflection.Emit.TypeBuilder.IsPointerImpl","System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl","System.Reflection.Emit.TypeBuilder.IsSecurityCritical","System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical","System.Reflection.Emit.TypeBuilder.IsSecurityTransparent","System.Reflection.Emit.TypeBuilder.IsSubclassOf","System.Reflection.Emit.TypeBuilder.MakeArrayType","System.Reflection.Emit.TypeBuilder.MakeByRefType","System.Reflection.Emit.TypeBuilder.MakeGenericType","System.Reflection.Emit.TypeBuilder.MakePointerType","System.Reflection.Emit.TypeBuilder.Module","System.Reflection.Emit.TypeBuilder.Name","System.Reflection.Emit.TypeBuilder.Namespace","System.Reflection.Emit.TypeBuilder.PackingSize","System.Reflection.Emit.TypeBuilder.ReflectedType","System.Reflection.Emit.TypeBuilder.SetCustomAttribute","System.Reflection.Emit.TypeBuilder.SetParent","System.Reflection.Emit.TypeBuilder.Size","System.Reflection.Emit.TypeBuilder._TypeBuilder.GetIDsOfNames","System.Reflection.Emit.TypeBuilder._TypeBuilder.GetTypeInfo","System.Reflection.Emit.TypeBuilder._TypeBuilder.GetTypeInfoCount","System.Reflection.Emit.TypeBuilder._TypeBuilder.Invoke","System.Reflection.Emit.TypeBuilder.ToString","System.Reflection.Emit.TypeBuilder.TypeHandle","System.Reflection.Emit.TypeBuilder.TypeToken","System.Reflection.Emit.TypeBuilder.UnderlyingSystemType","System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.TypeBuilder","System::Reflection::Emit::TypeBuilder","System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity","System::Reflection::Emit::TypeBuilder::AddDeclarativeSecurity","System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation","System::Reflection::Emit::TypeBuilder::AddInterfaceImplementation","System.Reflection.Emit.TypeBuilder.Assembly","System::Reflection::Emit::TypeBuilder::Assembly","System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName","System::Reflection::Emit::TypeBuilder::AssemblyQualifiedName","System.Reflection.Emit.TypeBuilder.BaseType","System::Reflection::Emit::TypeBuilder::BaseType","System.Reflection.Emit.TypeBuilder.CreateType","System::Reflection::Emit::TypeBuilder::CreateType","System.Reflection.Emit.TypeBuilder.CreateTypeInfo","System::Reflection::Emit::TypeBuilder::CreateTypeInfo","System.Reflection.Emit.TypeBuilder.DeclaringMethod","System::Reflection::Emit::TypeBuilder::DeclaringMethod","System.Reflection.Emit.TypeBuilder.DeclaringType","System::Reflection::Emit::TypeBuilder::DeclaringType","System.Reflection.Emit.TypeBuilder.DefineConstructor","System::Reflection::Emit::TypeBuilder::DefineConstructor","System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor","System::Reflection::Emit::TypeBuilder::DefineDefaultConstructor","System.Reflection.Emit.TypeBuilder.DefineEvent","System::Reflection::Emit::TypeBuilder::DefineEvent","System.Reflection.Emit.TypeBuilder.DefineField","System::Reflection::Emit::TypeBuilder::DefineField","System.Reflection.Emit.TypeBuilder.DefineGenericParameters","System::Reflection::Emit::TypeBuilder::DefineGenericParameters","System.Reflection.Emit.TypeBuilder.DefineInitializedData","System::Reflection::Emit::TypeBuilder::DefineInitializedData","System.Reflection.Emit.TypeBuilder.DefineMethod","System::Reflection::Emit::TypeBuilder::DefineMethod","System.Reflection.Emit.TypeBuilder.DefineMethodOverride","System::Reflection::Emit::TypeBuilder::DefineMethodOverride","System.Reflection.Emit.TypeBuilder.DefineNestedType","System::Reflection::Emit::TypeBuilder::DefineNestedType","System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod","System::Reflection::Emit::TypeBuilder::DefinePInvokeMethod","System.Reflection.Emit.TypeBuilder.DefineProperty","System::Reflection::Emit::TypeBuilder::DefineProperty","System.Reflection.Emit.TypeBuilder.DefineTypeInitializer","System::Reflection::Emit::TypeBuilder::DefineTypeInitializer","System.Reflection.Emit.TypeBuilder.DefineUninitializedData","System::Reflection::Emit::TypeBuilder::DefineUninitializedData","System.Reflection.Emit.TypeBuilder.FullName","System::Reflection::Emit::TypeBuilder::FullName","System.Reflection.Emit.TypeBuilder.GenericParameterAttributes","System::Reflection::Emit::TypeBuilder::GenericParameterAttributes","System.Reflection.Emit.TypeBuilder.GenericParameterPosition","System::Reflection::Emit::TypeBuilder::GenericParameterPosition","System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl","System::Reflection::Emit::TypeBuilder::GetAttributeFlagsImpl","System.Reflection.Emit.TypeBuilder.GetConstructor","System::Reflection::Emit::TypeBuilder::GetConstructor","System.Reflection.Emit.TypeBuilder.GetConstructorImpl","System::Reflection::Emit::TypeBuilder::GetConstructorImpl","System.Reflection.Emit.TypeBuilder.GetConstructors","System::Reflection::Emit::TypeBuilder::GetConstructors","System.Reflection.Emit.TypeBuilder.GetCustomAttributes","System::Reflection::Emit::TypeBuilder::GetCustomAttributes","System.Reflection.Emit.TypeBuilder.GetElementType","System::Reflection::Emit::TypeBuilder::GetElementType","System.Reflection.Emit.TypeBuilder.GetEvent","System::Reflection::Emit::TypeBuilder::GetEvent","System.Reflection.Emit.TypeBuilder.GetEvents","System::Reflection::Emit::TypeBuilder::GetEvents","System.Reflection.Emit.TypeBuilder.GetField","System::Reflection::Emit::TypeBuilder::GetField","System.Reflection.Emit.TypeBuilder.GetFields","System::Reflection::Emit::TypeBuilder::GetFields","System.Reflection.Emit.TypeBuilder.GetGenericArguments","System::Reflection::Emit::TypeBuilder::GetGenericArguments","System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition","System::Reflection::Emit::TypeBuilder::GetGenericTypeDefinition","System.Reflection.Emit.TypeBuilder.GetInterface","System::Reflection::Emit::TypeBuilder::GetInterface","System.Reflection.Emit.TypeBuilder.GetInterfaceMap","System::Reflection::Emit::TypeBuilder::GetInterfaceMap","System.Reflection.Emit.TypeBuilder.GetInterfaces","System::Reflection::Emit::TypeBuilder::GetInterfaces","System.Reflection.Emit.TypeBuilder.GetMember","System::Reflection::Emit::TypeBuilder::GetMember","System.Reflection.Emit.TypeBuilder.GetMembers","System::Reflection::Emit::TypeBuilder::GetMembers","System.Reflection.Emit.TypeBuilder.GetMethod","System::Reflection::Emit::TypeBuilder::GetMethod","System.Reflection.Emit.TypeBuilder.GetMethodImpl","System::Reflection::Emit::TypeBuilder::GetMethodImpl","System.Reflection.Emit.TypeBuilder.GetMethods","System::Reflection::Emit::TypeBuilder::GetMethods","System.Reflection.Emit.TypeBuilder.GetNestedType","System::Reflection::Emit::TypeBuilder::GetNestedType","System.Reflection.Emit.TypeBuilder.GetNestedTypes","System::Reflection::Emit::TypeBuilder::GetNestedTypes","System.Reflection.Emit.TypeBuilder.GetProperties","System::Reflection::Emit::TypeBuilder::GetProperties","System.Reflection.Emit.TypeBuilder.GetPropertyImpl","System::Reflection::Emit::TypeBuilder::GetPropertyImpl","System.Reflection.Emit.TypeBuilder.GUID","System::Reflection::Emit::TypeBuilder::GUID","System.Reflection.Emit.TypeBuilder.HasElementTypeImpl","System::Reflection::Emit::TypeBuilder::HasElementTypeImpl","System.Reflection.Emit.TypeBuilder.InvokeMember","System::Reflection::Emit::TypeBuilder::InvokeMember","System.Reflection.Emit.TypeBuilder.IsArrayImpl","System::Reflection::Emit::TypeBuilder::IsArrayImpl","System.Reflection.Emit.TypeBuilder.IsAssignableFrom","System::Reflection::Emit::TypeBuilder::IsAssignableFrom","System.Reflection.Emit.TypeBuilder.IsByRefImpl","System::Reflection::Emit::TypeBuilder::IsByRefImpl","System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl","System::Reflection::Emit::TypeBuilder::IsCOMObjectImpl","System.Reflection.Emit.TypeBuilder.IsConstructedGenericType","System::Reflection::Emit::TypeBuilder::IsConstructedGenericType","System.Reflection.Emit.TypeBuilder.IsCreated","System::Reflection::Emit::TypeBuilder::IsCreated","System.Reflection.Emit.TypeBuilder.IsDefined","System::Reflection::Emit::TypeBuilder::IsDefined","System.Reflection.Emit.TypeBuilder.IsGenericParameter","System::Reflection::Emit::TypeBuilder::IsGenericParameter","System.Reflection.Emit.TypeBuilder.IsGenericType","System::Reflection::Emit::TypeBuilder::IsGenericType","System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition","System::Reflection::Emit::TypeBuilder::IsGenericTypeDefinition","System.Reflection.Emit.TypeBuilder.IsPointerImpl","System::Reflection::Emit::TypeBuilder::IsPointerImpl","System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl","System::Reflection::Emit::TypeBuilder::IsPrimitiveImpl","System.Reflection.Emit.TypeBuilder.IsSecurityCritical","System::Reflection::Emit::TypeBuilder::IsSecurityCritical","System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical","System::Reflection::Emit::TypeBuilder::IsSecuritySafeCritical","System.Reflection.Emit.TypeBuilder.IsSecurityTransparent","System::Reflection::Emit::TypeBuilder::IsSecurityTransparent","System.Reflection.Emit.TypeBuilder.IsSubclassOf","System::Reflection::Emit::TypeBuilder::IsSubclassOf","System.Reflection.Emit.TypeBuilder.MakeArrayType","System::Reflection::Emit::TypeBuilder::MakeArrayType","System.Reflection.Emit.TypeBuilder.MakeByRefType","System::Reflection::Emit::TypeBuilder::MakeByRefType","System.Reflection.Emit.TypeBuilder.MakeGenericType","System::Reflection::Emit::TypeBuilder::MakeGenericType","System.Reflection.Emit.TypeBuilder.MakePointerType","System::Reflection::Emit::TypeBuilder::MakePointerType","System.Reflection.Emit.TypeBuilder.Module","System::Reflection::Emit::TypeBuilder::Module","System.Reflection.Emit.TypeBuilder.Name","System::Reflection::Emit::TypeBuilder::Name","System.Reflection.Emit.TypeBuilder.Namespace","System::Reflection::Emit::TypeBuilder::Namespace","System.Reflection.Emit.TypeBuilder.PackingSize","System::Reflection::Emit::TypeBuilder::PackingSize","System.Reflection.Emit.TypeBuilder.ReflectedType","System::Reflection::Emit::TypeBuilder::ReflectedType","System.Reflection.Emit.TypeBuilder.SetCustomAttribute","System::Reflection::Emit::TypeBuilder::SetCustomAttribute","System.Reflection.Emit.TypeBuilder.SetParent","System::Reflection::Emit::TypeBuilder::SetParent","System.Reflection.Emit.TypeBuilder.Size","System::Reflection::Emit::TypeBuilder::Size","System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames","System::Reflection::Emit::TypeBuilder::System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames","System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo","System::Reflection::Emit::TypeBuilder::System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo","System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount","System::Reflection::Emit::TypeBuilder::System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount","System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke","System::Reflection::Emit::TypeBuilder::System#Runtime#InteropServices#_TypeBuilder#Invoke","System.Reflection.Emit.TypeBuilder.ToString","System::Reflection::Emit::TypeBuilder::ToString","System.Reflection.Emit.TypeBuilder.TypeHandle","System::Reflection::Emit::TypeBuilder::TypeHandle","System.Reflection.Emit.TypeBuilder.TypeToken","System::Reflection::Emit::TypeBuilder::TypeToken","System.Reflection.Emit.TypeBuilder.UnderlyingSystemType","System::Reflection::Emit::TypeBuilder::UnderlyingSystemType","System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize","System::Reflection::Emit::TypeBuilder::UnspecifiedTypeSize"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b1480e6f-a3c1-384e-d708-87df55b8fade","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/TypeBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TypeBuilder class | Microsoft Docs","_op_ogTitle":"TypeBuilder class","description":"Defines and creates new instances of classes during run time.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.TypeBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.typebuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.typebuilder","fileRelativePath":"System.Reflection.Emit.TypeBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}