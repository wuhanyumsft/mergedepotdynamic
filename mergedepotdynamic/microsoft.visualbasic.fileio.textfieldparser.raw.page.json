{"content":"    \r\n    <h1 id=\"Microsoft_VisualBasic_FileIO_TextFieldParser\">\r\n      <span class=\"lang-csharp\">TextFieldParser</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides methods and properties for parsing structured text files.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TextFieldParser : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TextFieldParser</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <code>TextFieldParser</code> object provides methods and properties for parsing structured text files. Parsing a text file with the <code>TextFieldParser</code> is similar to iterating over a text file, while the <code>ReadFields</code> method to extract fields of text is similar to splitting the strings.  </p>\n<p> The <code>TextFieldParser</code> can parse two types of files: delimited or fixed-width. Some properties, such as <code>Delimiters</code> and <code>HasFieldsEnclosedInQuotes</code> are meaningful only when working with delimited files, while the <code>FieldWidths</code> property is meaningful only when working with fixed-width files.  </p>\n<p> The following table lists examples of tasks involving the <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code> object.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a text file with multiple formats</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Text Files with Multiple Formats</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">TextFieldParser(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_TextReader_\" data-linktype=\"self-bookmark\">TextFieldParser(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_\" data-linktype=\"self-bookmark\">TextFieldParser(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_\" data-linktype=\"self-bookmark\">TextFieldParser(Stream,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">TextFieldParser(String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\" data-linktype=\"self-bookmark\">TextFieldParser(Stream,Encoding,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_System_Text_Encoding_System_Boolean_\" data-linktype=\"self-bookmark\">TextFieldParser(String,Encoding,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">TextFieldParser(Stream,Encoding,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_CommentTokens\" data-linktype=\"self-bookmark\">CommentTokens</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines comment tokens. A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_Delimiters\" data-linktype=\"self-bookmark\">Delimiters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the delimiters for a text file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_EndOfData\" data-linktype=\"self-bookmark\">EndOfData</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns <code>True</code> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLine\" data-linktype=\"self-bookmark\">ErrorLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLineNumber\" data-linktype=\"self-bookmark\">ErrorLineNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of the line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_FieldWidths\" data-linktype=\"self-bookmark\">FieldWidths</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Denotes the width of each column in the text file being parsed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_HasFieldsEnclosedInQuotes\" data-linktype=\"self-bookmark\">HasFieldsEnclosedInQuotes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_LineNumber\" data-linktype=\"self-bookmark\">LineNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the current line number, or returns -1 if no more characters are available in the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType\" data-linktype=\"self-bookmark\">TextFieldType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the file to be parsed is delimited or fixed-width.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_TrimWhiteSpace\" data-linktype=\"self-bookmark\">TrimWhiteSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether leading and trailing white space should be trimmed from field values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current <code>TextFieldParser</code> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases resources used by the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases resources used by the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_PeekChars_System_Int32_\" data-linktype=\"self-bookmark\">PeekChars(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of characters without advancing the cursor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_ReadFields\" data-linktype=\"self-bookmark\">ReadFields()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_ReadLine\" data-linktype=\"self-bookmark\">ReadLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the current line as a string and advances the cursor to the next line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_ReadToEnd\" data-linktype=\"self-bookmark\">ReadToEnd()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the remainder of the text file and returns it as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_SetDelimiters_System_String___\" data-linktype=\"self-bookmark\">SetDelimiters(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the delimiters for the reader to the specified values, and sets the field type to <code>Delimited</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_FileIO_TextFieldParser_SetFieldWidths_System_Int32___\" data-linktype=\"self-bookmark\">SetFieldWidths(Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the delimiters for the reader to the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. The stream to be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> cannot be read from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file or stream that is represented by the <code>stream</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_TextReader_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (System.IO.TextReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>. The <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> stream to be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>reader</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file or stream that is represented by the <code>reader</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>String</code>. The complete path of the file to be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file specified by the <code>path</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(Stream,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. The stream to be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>. The character encoding to use if encoding is not determined from file. Default is <span class=\"xref\">stem.Text.Encoding.UTF8*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> or <code>defaultEncoding</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> cannot be read from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file or stream that is represented by the <code>stream</code> parameter.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (string path, System.Text.Encoding defaultEncoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>String</code>. The complete path of the file to be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>. The character encoding to use if encoding is not determined from file. Default is <span class=\"xref\">stem.Text.Encoding.UTF8*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is an empty string or <code>defaultEncoding</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file specified by the <code>path</code> parameter.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(Stream,Encoding,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. The stream to be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>. The character encoding to use if encoding is not determined from file. Default is <span class=\"xref\">stem.Text.Encoding.UTF8*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detectEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Boolean</code>. Indicates whether to look for byte order marks at the beginning of the file. Default is <code>True</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> or <code>defaultEncoding</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> cannot be read from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file or stream that is represented by the <code>stream</code> parameter.  </p>\n<p> If the <code>detectEncoding</code> parameter is <code>True</code>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks. Otherwise, the encoding specified by <code>defaultEncoding</code> is used.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_String_System_Text_Encoding_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(String,Encoding,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>String</code>. The complete path of the file to be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>. The character encoding to use if encoding is not determined from file. Default is <span class=\"xref\">stem.Text.Encoding.UTF8*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detectEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Boolean</code>. Indicates whether to look for byte order marks at the beginning of the file. Default is <code>True</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is an empty string or <code>defaultEncoding</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file specified by the <code>path</code> parameter.  </p>\n<p> If the <code>detectEncoding</code> parameter is <code>True</code>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks. Otherwise, the encoding specified by <code>defaultEncoding</code> is used.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldParser(Stream,Encoding,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>TextFieldParser</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. The stream to be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>. The character encoding to use if encoding is not determined from file. Default is <span class=\"xref\">stem.Text.Encoding.UTF8*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detectEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Boolean</code>. Indicates whether to look for byte order marks at the beginning of the file. Default is <code>True</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>leaveOpen</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Boolean</code>. Indicates whether to leave <code>stream</code> open when the <code>TextFieldParser</code> object is closed. Default is <code>False</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> or <code>defaultEncoding</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> cannot be read from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <code>TextFieldParser</code> object to parse the file or stream that is represented by the <code>stream</code> parameter.  </p>\n<p> If the <code>detectEncoding</code> parameter is <code>True</code>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks. Otherwise, the encoding specified by <code>defaultEncoding</code> is used.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_CommentTokens\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_CommentTokens_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommentTokens</div>        \r\n          </div>\r\n    \r\n            <p>Defines comment tokens. A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] CommentTokens { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array that contains all of the comment tokens for the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A comment token includes white space.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is an advanced member; it does not show in IntelliSense unless you click the <strong>All</strong> tab.  </p>\n<p> Zero-length comment tokens are ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example specifies that for the <code>TextFieldParser</code>, <code>FileReader</code> lines beginning with a single quotation mark (&#39;) should be ignored.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#5\">            FileReader.TextFieldType = \n                Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.CommentTokens = New String() {&quot;&#39;&quot;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Delimiters\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Delimiters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delimiters</div>        \r\n          </div>\r\n    \r\n            <p>Defines the delimiters for a text file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Delimiters { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array that contains all of the field delimiters for the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A delimiter value is set to a newline character, an empty string, or <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is meaningful only if the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType_\" data-linktype=\"relative-path\">TextFieldType</a> property is set to <code>FieldType.Delimited</code>.  </p>\n<p> Defining the delimiters for a text file can also be accomplished with the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_SetDelimiters_\" data-linktype=\"relative-path\">SetDelimiters</a> method.  </p>\n<p> The following table lists an example of a task involving the <code>Delimiters</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example specifies that the delimiter for the <code>TextFieldParser</code> object, <code>FileReader</code>, is a comma (,).  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#9\">            FileReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.Delimiters = New String() {&quot;,&quot;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_EndOfData\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_EndOfData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndOfData</div>        \r\n          </div>\r\n    \r\n            <p>Returns <code>True</code> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndOfData { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>True</code> if there is no more data to read; otherwise, <code>False</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property can be used when reading from files to determine the end of the data being read.  </p>\n<p> The following table lists examples of tasks involving the <code>EndOfData</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>EndofData</code> property to loop through all the fields in the file with the <code>TextFieldReader</code>, <code>FileReader</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#6\">        Dim StdFormat As Integer() = {5, 10, 11, -1}\n        Dim ErrorFormat As Integer() = {5, 5, -1}\n        Using FileReader As New  Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;estfile.txt&quot;)\n\n            FileReader.TextFieldType = FileIO.FieldType.FixedWidth\n            FileReader.FieldWidths = StdFormat\n            Dim CurrentRow As String()\n            While Not FileReader.EndOfData\n                Try\n                    Dim RowType As String = FileReader.PeekChars(3)\n                    If String.Compare(RowType, &quot;Err&quot;) = 0 Then\n                        &#39; If this line describes an error, the format of the row will be different.\n                        FileReader.SetFieldWidths(ErrorFormat)\n                        CurrentRow = FileReader.ReadFields\n                        FileReader.SetFieldWidths(StdFormat)\n                    Else\n                        &#39; Otherwise parse the fields normally\n                        CurrentRow = FileReader.ReadFields\n                        For Each newString As String In CurrentRow\n                            My.Computer.FileSystem.WriteAllText(&quot;newFile.txt&quot;, newString, True)\n                        Next\n                    End If\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.  Skipping&quot;)\n                End Try\n            End While\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLine\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorLine</div>        \r\n          </div>\r\n    \r\n            <p>Returns the line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ErrorLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exceptions have been thrown, an empty string is returned.  </p>\n<p> The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLineNumber_\" data-linktype=\"relative-path\">ErrorLineNumber</a> property can be used to display the number of the line that caused the exception.  </p>\n<p> The following table lists examples of tasks involving the <code>ErrorLine</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>ErrorLine</code> property to display the line causing the current <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#1\">        Dim FileReader As Microsoft.VisualBasic.FileIO.TextFieldParser\n        FileReader = My.Computer.FileSystem.OpenTextFieldParser(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est.txt&quot;)\n        Dim currentRow As String()\n        While Not FileReader.EndOfData\n            Try\n                currentRow = FileReader.ReadFields\n                For Each currentField As String In currentRow\n                    My.Computer.FileSystem.WriteAllText(\n                        &quot;C://testfile.txt&quot;, currentField, True)\n                Next\n            Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                MsgBox(&quot;Line &quot; &amp; FileReader.ErrorLine &amp; &quot; is not valid.&quot;)\n            End Try\n        End While\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLineNumber\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorLineNumber</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of the line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ErrorLineNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of the line that caused the most recent <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exceptions have been thrown, -1 is returned.  </p>\n<p> The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLine_\" data-linktype=\"relative-path\">ErrorLine</a> property can be used to display the number of the line that caused the exception. Blank lines and comments are not ignored when determining the line number.  </p>\n<p> The following table lists examples of tasks involving the <code>ErrorLineNumber</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>ErrorLineNumber</code> property to display the location of the line causing the current <a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a> exception.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#3\">        Dim FileReader As Microsoft.VisualBasic.FileIO.TextFieldParser\n        FileReader = My.Computer.FileSystem.OpenTextFieldParser(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est.txt&quot;)\n        Dim currentRow As String()\n        While Not FileReader.EndOfData\n            Try\n                currentRow = FileReader.ReadFields\n                For Each currentField As String In currentRow\n                    My.Computer.FileSystem.WriteAllText(\n                        &quot;C://testfile.txt&quot;, currentField, True)\n                Next\n            Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                MsgBox(&quot;Line &quot; &amp; FileReader.ErrorLineNumber &amp; &quot; is not valid.&quot;)\n            End Try\n        End While\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_FieldWidths\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_FieldWidths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldWidths</div>        \r\n          </div>\r\n    \r\n            <p>Denotes the width of each column in the text file being parsed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int[] FieldWidths { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An integer array that contains the width of each column in the text file that is being parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A width value in any location other than the last entry of the array is less than or equal to zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is meaningful only if the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType_\" data-linktype=\"relative-path\">TextFieldType</a> property is set to <code>FieldType.FixedWidth</code>. If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.  </p>\n<p> The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_SetFieldWidths_\" data-linktype=\"relative-path\">SetFieldWidths</a> method can also be used to set field widths.  </p>\n<p> The following table lists examples of tasks involving the <code>FieldWidths</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a fixed-width text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example reads the file <code>ParserText.txt</code>, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#16\">        Using MyReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n\n            MyReader.TextFieldType = \n                Microsoft.VisualBasic.FileIO.FieldType.FixedWidth\n            MyReader.FieldWidths = {5, 10, 11, -1}\n            Dim currentRow As String()\n            While Not MyReader.EndOfData\n                Try\n                    currentRow = MyReader.ReadFields()\n                    Dim currentField As String\n                    For Each currentField In currentRow\n                        MsgBox(currentField)\n                    Next\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; \n                    &quot;is not valid and will be skipped.&quot;)\n                End Try\n            End While\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_HasFieldsEnclosedInQuotes\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_HasFieldsEnclosedInQuotes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasFieldsEnclosedInQuotes</div>        \r\n          </div>\r\n    \r\n            <p>Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasFieldsEnclosedInQuotes { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>True</code> if fields are enclosed in quotation marks; otherwise, <code>False</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is an advanced member; it does not show in IntelliSense unless you click the <strong>All</strong> tab.  </p>\n<p> If the property is <code>True</code>, the parser assumes that fields are enclosed in quotation marks (&quot; &quot;) and may contain line endings.  </p>\n<p> If a field is enclosed in quotation marks, for example, <code>abc, &quot;field2a,field2b&quot;, field3</code> and this property is <code>True</code>, then all text enclosed in quotation marks will be returned as is; this example would return <code>abc|field2a,field2b|field3</code>. Setting this property to <code>False</code> would make this example return <code>abc|&quot;field2a|field2b&quot;|field3</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example sets the <code>HasFieldsEnclosedInQuotes</code> property to <code>True</code> for <code>myReader</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#18\">            FileReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.Delimiters = New String() {&quot;,&quot;}\n            FileReader.CommentTokens = New String() {&quot;&quot;}\n            FileReader.HasFieldsEnclosedInQuotes = True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_LineNumber\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_LineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineNumber</div>        \r\n          </div>\r\n    \r\n            <p>Returns the current line number, or returns -1 if no more characters are available in the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long LineNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The current line number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is an advanced member; it does not show in IntelliSense unless you click the <strong>All</strong> tab.  </p>\n<p> Blank lines and comments are not ignored when determining the line number.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example searches for the name &quot;Jones&quot; in the text file and reports what line(s) it occurs on.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#11\">        Using FileReader As New Microsoft.VisualBasic.FileIO.TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n            FileReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.Delimiters = New String() {&quot;,&quot;}\n            Dim currentRow As String()\n            While Not FileReader.EndOfData\n                Try\n                    currentRow = FileReader.ReadFields()\n                    Dim currentField As String\n                    For Each currentField In currentRow\n                        If currentField = &quot;Jones&quot; Then\n                            MsgBox(&quot;The name Jones occurs on line &quot; &amp; \n                            FileReader.LineNumber)\n                        End If\n                    Next\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; \n                   &quot;is not valid and will be skipped.&quot;)\n                End Try\n            End While\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFieldType</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the file to be parsed is delimited or fixed-width.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.fileio.fieldtype\" data-linktype=\"relative-path\">FieldType</a></div>\r\n                  </div>\r\n                  <p>A TextFieldType value that indicates whether the file to be parsed is delimited or fixed-width.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value of this property is delimited.  </p>\n<p> The following table lists examples of tasks involving the <code>TextFieldType</code> property.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width text file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a text file with multiple formats</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Text Files with Multiple Formats</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates a <code>TextFieldParser</code>, <code>FileReader</code>, and specifies that it is delimited.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#19\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n\n            FileReader.TextFieldType = \n                Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.SetDelimiters(&quot;,&quot;)\n        End Using\n</code></pre><p> This example creates a <code>TextFieldParser</code>, <code>FileReader</code>, and specifies that it is fixed-width.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#20\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n\n            FileReader.TextFieldType = \n                Microsoft.VisualBasic.FileIO.FieldType.FixedWidth\n            FileReader.FieldWidths = New Integer() {5, 10, 11, -1}\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_TrimWhiteSpace\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_TrimWhiteSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimWhiteSpace</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether leading and trailing white space should be trimmed from field values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TrimWhiteSpace { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>True</code> if leading and trailing white space should be trimmed from field values; otherwise, <code>False</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for this property is <code>True</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates a <code>TextFieldParser</code>, <code>FileReader</code>, and sets the <code>TrimWhiteSpace</code> property to <code>True</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#7\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n\n            FileReader.TextFieldType = \n                Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            FileReader.SetDelimiters(&quot;,&quot;)\n            FileReader.TrimWhiteSpace = True\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Close\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current <code>TextFieldParser</code> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example closes the <code>TextFieldParser``FileReader</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#14\">            FileReader.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases resources used by the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases resources used by the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Boolean. <code>True</code> releases both managed and unmanaged resources; <code>False</code> releases only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Finalize\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Allows the <a class=\"xref\" href=\"microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~TextFieldParser ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_PeekChars_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_PeekChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekChars(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of characters without advancing the cursor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PeekChars (int numberOfChars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>numberOfChars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Int32</code>. Number of characters to read. Required.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the specified number of characters read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>numberOfChars</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>numberOfChars</code> value must be less than the total number of characters in the line. If it is not, the string returned by <code>PeekChars</code> will be truncated to the length of the line.  </p>\n<p> Blank lines are ignored.  </p>\n<p> End-of-line characters are not returned.  </p>\n<p> The <code>PeekChars</code> method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.  </p>\n<p> The following table lists examples of tasks involving the <code>PeekChars</code> method.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Determine the format of a field before parsing it</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Text Files with Multiple Formats</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>PeekChars</code> to find the end of the data and stop parsing the file at that point.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#8\">        Using MyReader As New Microsoft.VisualBasic.FileIO.TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n            MyReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            MyReader.Delimiters = New String() {&quot;,&quot;}\n            MyReader.CommentTokens = New String() {&quot;&#39;&quot;}\n            Dim currentRow As String()\n            While (MyReader.PeekChars(1) IsNot &quot;&quot;)\n                Try\n                    currentRow = MyReader.ReadFields()\n                    For Each currentField As String In currentRow\n                        My.Computer.FileSystem.WriteAllText(\n                           &quot;C://testfile.txt&quot;, currentField, True)\n                    Next\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.  Skipping&quot;)\n                End Try\n            End While\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadFields\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadFields()</div>        \r\n          </div>\r\n    \r\n            <p>Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] ReadFields ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings that contains field values for the current line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a></div>\r\n                  </div>\r\n                  <p>A field cannot be parsed by using the specified format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to allow users to parse text files in multiple formats, the <code>ReadFields</code> method examines the values of <code>TextFieldType</code>, <code>Delimiters</code>, and <code>FieldWidths</code>, if they are specified, each time it is called. Users need to correctly configure the <code>TextFieldType</code> and <code>FieldWidths</code> or <code>Delimiters</code> properties, as appropriate. If <code>TextFieldType</code> is set to <code>Delimited</code>, and <code>Delimiters</code> is not set, or if <code>TextFieldType</code> is set to <code>FixedWidth</code> and <code>FieldWidths</code>, an exception is thrown.  </p>\n<p> If <code>ReadFields</code> encounters blank lines, they are skipped and the next non-blank line is returned.  </p>\n<p> If the <code>ReadFields</code> method cannot parse the current line, it raises an exception and does not move to the next line. This enables your application to attempt to parse the line again.  </p>\n<p> The following table lists examples of tasks involving the <code>ReadFields</code> method.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read from a delimited file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a></td>\n</tr>\n<tr>\n<td>Read from a fixed-width file</td>\n<td><a href=\"../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>ReadFields</code> method to read from the comma-delimited file <code>ParserText.txt</code>. The example writes the fields to <code>Testfile.txt</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#2\">        Using MyReader As New Microsoft.VisualBasic.FileIO.TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n            MyReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            MyReader.Delimiters = New String() {&quot;,&quot;}\n            Dim currentRow As String()\n            While Not MyReader.EndOfData\n                Try\n                    currentRow = MyReader.ReadFields()\n                    For Each currentField As String In currentRow\n                        My.Computer.FileSystem.WriteAllText(\n                            &quot;C://testfile.txt&quot;, currentField, True)\n                    Next\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.  Skipping&quot;)\n                End Try\n            End While\n        End Using\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadLine\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadLine()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the current line as a string and advances the cursor to the next line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ReadLine ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current line from the file or stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ReadLine</code> method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.  </p>\n<p> <code>Nothing</code> is returned if the end of the file is reached.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example reads through the file <code>ParserText.txt</code> and writes it to <code>Testfile.txt</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#15\">        Using MyReader As New Microsoft.VisualBasic.FileIO.TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n            MyReader.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited\n            MyReader.Delimiters = New String() {&quot;,&quot;}\n            Dim currentRow As String\n            While Not MyReader.EndOfData\n                Try\n                    currentRow = MyReader.ReadLine()\n                    My.Computer.FileSystem.WriteAllText(\n                       &quot;C://testfile.txt&quot;, currentRow, True)\n                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.  Skipping&quot;)\n                End Try\n            End While\n        End Using\n</code></pre><p> If <code>Testfile.txt</code> does not exist, it is created by the <code>WriteAllText</code> method.  </p>\n<p> This example writes the fields as a single string; to have each line display on its own line in the destination file, a <code>VbCrLf</code> character should be appended at the end of each line.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadToEnd\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_ReadToEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToEnd()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the remainder of the text file and returns it as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ReadToEnd ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The remaining text from the file or stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is an advanced member; it does not show in IntelliSense unless you click the <strong>All</strong> tab.  </p>\n<p> If there is nothing more to read because the end of the file has been reached, <code>Nothing</code> is returned.  </p>\n<p> The <code>ReadToEnd</code> method does not ignore blank lines and comments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>ReadToEnd</code> method to read the entire file <code>ParserText.txt</code> and write it to the file <code>Testfile.txt</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#10\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\ParserText.txt&quot;)\n\n            Dim allText As String = FileReader.ReadToEnd\n            My.Computer.FileSystem.WriteAllText(&quot;C://testfile.txt&quot;, allText, True)\n        End Using\n</code></pre><p> If <code>Testfile.txt</code> does not exist, it is created by the <code>WriteAllText</code> method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_SetDelimiters_System_String___\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_SetDelimiters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetDelimiters(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the delimiters for the reader to the specified values, and sets the field type to <code>Delimited</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetDelimiters (string[] delimiters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Array of type <code>String</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A delimiter is zero-length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The existing contents of the <code>Delimiters</code> property are cleared when this method is set.  </p>\n<p> This method provides a way to set delimiters without creating an array.  </p>\n<p> The following table lists an example of a task involving the <code>SetDelimiters</code> method.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parse a text file</td>\n<td><a href=\"../Topic/Parsing%20Text%20Files%20with%20the%20TextFieldParser%20Object%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Parsing Text Files with the TextFieldParser Object</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example opens a text field parser and defines the delimiter as <code>vbTab</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#4\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log&quot;)\n\n            FileReader.SetDelimiters(vbTab)\n        End Using\n</code></pre><p> Replace the path <code>C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log</code> with the path and name of the file you wish to parse.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_SetFieldWidths_System_Int32___\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_FileIO_TextFieldParser_SetFieldWidths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetFieldWidths(Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the delimiters for the reader to the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetFieldWidths (int[] fieldWidths);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldWidths</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Array of <code>Integer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The existing contents of the <code>Delimiters</code> property are cleared when this is set.  </p>\n<p> This method provides a way to set delimiters without creating an array.  </p>\n<p> The following table lists example of tasks involving the <code>SetFieldWidths</code> method.  </p>\n<table>\n<thead>\n<tr>\n<th>To</th>\n<th>See</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parse a text file.</td>\n<td><a href=\"../Topic/Parsing%20Text%20Files%20with%20the%20TextFieldParser%20Object%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Parsing Text Files with the TextFieldParser Object</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example opens a text-field parser and defines the field width as <code>5</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#12\">        Using FileReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log&quot;)\n\n            FileReader.SetFieldWidths(5)\n        End Using\n</code></pre><p> Replace the path <code>C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log</code> with the path and name of the file you wish to parse.  </p>\n<p> The following example opens a text-field parser and defines the field widths as <code>5</code>, <code>10</code>, and variable.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTextFieldParser#13\">        Using MyReader As New Microsoft.VisualBasic.FileIO.\n            TextFieldParser(&quot;C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log&quot;)\n\n            MyReader.SetFieldWidths(5, 10, -1)\n        End Using\n</code></pre><p> Replace the path <code>C:\\logs&nbsp;&nbsp;&nbsp;&nbsp;est.log</code> with the path and name of the file you wish to parse.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.FileIO.TextFieldParser.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.FileIO.TextFieldParser.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser..ctor\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.Close\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace\">\r\n<meta name=\"APILocation\" content=\"Microsoft.VisualBasic.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"79d0e5ca-ef1c-bbe1-7d59-17be60aa3e9f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides methods and properties for parsing structured text files.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.VisualBasic.FileIO/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.VisualBasic.FileIO.TextFieldParser\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.FileIO.TextFieldParser.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.FileIO.TextFieldParser.yml","open_to_public_contributors":true,"api_name":["Microsoft.VisualBasic.FileIO.TextFieldParser","Microsoft.VisualBasic.FileIO.TextFieldParser..ctor","Microsoft.VisualBasic.FileIO.TextFieldParser.Close","Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens","Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters","Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose","Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData","Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine","Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber","Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths","Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize","Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes","Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber","Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd","Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters","Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths","Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType","Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace"],"api_location":["Microsoft.VisualBasic.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.VisualBasic.FileIO.TextFieldParser","Microsoft::VisualBasic::FileIO::TextFieldParser","Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor","Microsoft::VisualBasic::FileIO::TextFieldParser::#ctor","Microsoft.VisualBasic.FileIO.TextFieldParser.Close","Microsoft::VisualBasic::FileIO::TextFieldParser::Close","Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens","Microsoft::VisualBasic::FileIO::TextFieldParser::CommentTokens","Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters","Microsoft::VisualBasic::FileIO::TextFieldParser::Delimiters","Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose","Microsoft::VisualBasic::FileIO::TextFieldParser::Dispose","Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData","Microsoft::VisualBasic::FileIO::TextFieldParser::EndOfData","Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine","Microsoft::VisualBasic::FileIO::TextFieldParser::ErrorLine","Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber","Microsoft::VisualBasic::FileIO::TextFieldParser::ErrorLineNumber","Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths","Microsoft::VisualBasic::FileIO::TextFieldParser::FieldWidths","Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize","Microsoft::VisualBasic::FileIO::TextFieldParser::Finalize","Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes","Microsoft::VisualBasic::FileIO::TextFieldParser::HasFieldsEnclosedInQuotes","Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber","Microsoft::VisualBasic::FileIO::TextFieldParser::LineNumber","Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars","Microsoft::VisualBasic::FileIO::TextFieldParser::PeekChars","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields","Microsoft::VisualBasic::FileIO::TextFieldParser::ReadFields","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine","Microsoft::VisualBasic::FileIO::TextFieldParser::ReadLine","Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd","Microsoft::VisualBasic::FileIO::TextFieldParser::ReadToEnd","Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters","Microsoft::VisualBasic::FileIO::TextFieldParser::SetDelimiters","Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths","Microsoft::VisualBasic::FileIO::TextFieldParser::SetFieldWidths","Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType","Microsoft::VisualBasic::FileIO::TextFieldParser::TextFieldType","Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace","Microsoft::VisualBasic::FileIO::TextFieldParser::TrimWhiteSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"79d0e5ca-ef1c-bbe1-7d59-17be60aa3e9f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.VisualBasic.FileIO/TextFieldParser.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TextFieldParser class | Microsoft Docs","_op_ogTitle":"TextFieldParser class","description":"Provides methods and properties for parsing structured text files.\n","toc_asset_id":"_splitted/Microsoft.VisualBasic.FileIO/toc.json","toc_rel":"_splitted/Microsoft.VisualBasic.FileIO/toc.json","source_url":"","ms.assetid":"Microsoft.VisualBasic.FileIO.TextFieldParser","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.fileio.textfieldparser","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.fileio.textfieldparser","fileRelativePath":"Microsoft.VisualBasic.FileIO.TextFieldParser.html"},"themesRelativePathToOutputRoot":"_themes/"}