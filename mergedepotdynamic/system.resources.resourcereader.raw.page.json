{"content":"    \r\n    <h1 id=\"System_Resources_ResourceReader\">\r\n      <span class=\"lang-csharp\">ResourceReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.  </p>\n<p> <strong>Security Note</strong>: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see <a href=\"https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks\" data-linktype=\"external\">Untrusted Data Security Risks</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class ResourceReader : System.Resources.IResourceReader</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ResourceReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ResourceReader class provides a standard implementation of the <a class=\"xref\" href=\"system.resources.iresourcereader\" data-linktype=\"relative-path\">IResourceReader</a> interface. A ResourceReader instance represents either a standalone .resources file or a .resources file that is embedded in an assembly. It is used to enumerate the resources in a .resources file and retrieve its name/value pairs. It differs from the <a class=\"xref\" href=\"system.resources.resourcemanager\" data-linktype=\"relative-path\">ResourceManager</a> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly. The <a class=\"xref\" href=\"system.resources.resourcemanager\" data-linktype=\"relative-path\">ResourceManager</a> class is used to retrieve resources whose names are known in advance, whereas the ResourceReader class is useful for retrieving resources whose number or precise names are not known at compile time. For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance. Resources can then be named generically (such as <code>Section1</code>, <code>Section1Item1</code>, <code>Section1Item2</code>, and so on) and retrieved by using a ResourceReader object.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> For more information about using the ResourceReader class, see the following sections:  </p>\n<ul>\n<li><p><a href=\"#instantiate\" data-linktype=\"self-bookmark\">Instantiating a ResourceReader object</a>  </p>\n</li>\n<li><p><a href=\"#enumerate\" data-linktype=\"self-bookmark\">Enumerating a ResourceReader object&#39;s resources</a>  </p>\n<ul>\n<li><p><a href=\"#idictionaryenumerator\" data-linktype=\"self-bookmark\">Retrieving resources by using IDictionaryEnumerator properties</a>  </p>\n</li>\n<li><p><a href=\"#getresourcedata\" data-linktype=\"self-bookmark\">Retrieving resources by name with GetResourceData</a>  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"instantiate\"></a>   </p>\n<h2 id=\"instantiating-a-resourcereader-object\">Instantiating a ResourceReader Object</h2>\n<p> A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <a href=\"../Topic/Resgen.exe%20(Resource%20File%20Generator).md\" data-linktype=\"relative-path\">Resgen.exe (Resource File Generator)</a>. A ResourceReader object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.  </p>\n<p> To instantiate a ResourceReader object that reads from a standalone .resources file, use the ResourceReader class constructor with either an input stream or a string that contains the .resources file name. The following example illustrates both approaches. The first instantiates a ResourceReader object that represents a .resources file named <code>Resources1.resources</code> by using its file name. The second instantiates a ResourceReader object that represents a .resources file named <code>Resources2.resources</code> by using a stream created from the file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#2\">      // Instantiate a standalone .resources file from its filename.\n      var rr1 = new System.Resources.ResourceReader(&quot;Resources1.resources&quot;);\n\n      // Instantiate a standalone .resources file from a stream.\n      var fs = new System.IO.FileStream(@&quot;.\\Resources2.resources&quot;,\n                                        System.IO.FileMode.Open);\n      var rr2 = new System.Resources.ResourceReader(fs);      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#2\">      &#39; Instantiate a standalone .resources file from its filename.\n      Dim rr1 As New System.Resources.ResourceReader(&quot;Resources1.resources&quot;)\n\n      &#39; Instantiate a standalone .resources file from a stream.\n      Dim fs As New System.IO.FileStream(&quot;.\\Resources2.resources&quot;,\n                                         System.IO.FileMode.Open)\n      Dim rr2 As New System.Resources.ResourceReader(fs)      \n</code></pre><p> To create a ResourceReader object that represents an embedded .resources file, instantiate an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object from the assembly in which the .resources file is embedded. Its <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceStream_\" data-linktype=\"relative-path\">GetManifestResourceStream</a> method returns a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object that can be passed to the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader__ctor_System_IO_Stream_\" data-linktype=\"relative-path\">ResourceReader(Stream)</a> constructor. The following example instantiates a ResourceReader object that represents an embedded .resources file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#3\">      System.Reflection.Assembly assem = \n                   System.Reflection.Assembly.LoadFrom(@&quot;.\\MyLibrary.dll&quot;); \n      System.IO.Stream fs = \n                   assem.GetManifestResourceStream(&quot;MyCompany.LibraryResources.resources&quot;);\n      var rr = new System.Resources.ResourceReader(fs); \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#3\">      Dim assem As System.Reflection.Assembly = \n                   System.Reflection.Assembly.LoadFrom(&quot;.\\MyLibrary.dll&quot;) \n      Dim fs As System.IO.Stream = \n                   assem.GetManifestResourceStream(&quot;MyCompany.LibraryResources.resources&quot;)\n      Dim rr As New System.Resources.ResourceReader(fs) \n</code></pre><p><a name=\"enumerate\"></a>   </p>\n<h2 id=\"enumerating-a-resourcereader-objects-resources\">Enumerating a ResourceReader Object&#39;s Resources</h2>\n<p> To enumerate the resources in a .resources file, you call the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method, which returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">System.Collections.IDictionaryEnumerator</a> object. You call the <code>IDictionaryEnumerator.MoveNext</code> method to move from one resource to the next. The method returns <code>false</code> when all the resources in the .resources file have been enumerated.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although the ResourceReader class implements the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface and the <a class=\"xref\" href=\"system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method, the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method does not provide the <a class=\"xref\" href=\"system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> implementation. Instead, the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method  returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> interface object that provides access to each resource&#39;s name/value pair.  </p>\n</div>\n<p> You can retrieve the individual resources in the collection in two ways:  </p>\n<ul>\n<li><p>You can iterate each resource in the <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">System.Collections.IDictionaryEnumerator</a> collection and use <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">System.Collections.IDictionaryEnumerator</a> properties to retrieve the resource name and value. We recommend this technique when all the resources are of the same type, or you know the data type of each resource.  </p>\n</li>\n<li><p>You can retrieve the name of each resource when you iterate the <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">System.Collections.IDictionaryEnumerator</a> collection and call the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a> method to retrieve the resource&#39;s data. We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.  </p>\n</li>\n</ul>\n<p><a name=\"idictionaryenumerator\"></a>   </p>\n<h3 id=\"retrieving-resources-by-using-idictionaryenumerator-properties\">Retrieving Resources by Using IDictionaryEnumerator Properties</h3>\n<p> The first method of enumerating the resources in a .resources file involves directly retrieving each resource&#39;s name/value pair. After you call the <code>IDictionaryEnumerator.MoveNext</code> method to move to each resource in the collection, you can retrieve the resource name from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Key_\" data-linktype=\"relative-path\">Key</a> property and the resource data from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property.  </p>\n<p> The following example shows how to retrieve the name and value of each resource in a .resources file by using the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Key_\" data-linktype=\"relative-path\">Key</a> and <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> properties. To run the example, create the following text file named ApplicationResources.txt to define string resources.  </p>\n<pre><code>Title=&quot;Contact Information&quot;  \nLabel1=&quot;First Name:&quot;  \nLabel2=&quot;Middle Name:&quot;  \nLabel3=&quot;Last Name:&quot;  \nLabel4=&quot;SSN:&quot;  \nLabel5=&quot;Street Address:&quot;  \nLabel6=&quot;City:&quot;  \nLabel7=&quot;State:&quot;  \nLabel8=&quot;Zip Code:&quot;  \nLabel9=&quot;Home Phone:&quot;  \nLabel10=&quot;Business Phone:&quot;  \nLabel11=&quot;Mobile Phone:&quot;  \nLabel12=&quot;Other Phone:&quot;  \nLabel13=&quot;Fax:&quot;  \nLabel14=&quot;Email Address:&quot;  \nLabel15=&quot;Alternate Email Address:&quot;\n</code></pre><p> You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:  </p>\n<p> <strong>resgen ApplicationResources.txt</strong>  </p>\n<p> The following example then uses the ResourceReader class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#1\">using System;\nusing System.Collections;\nusing System.Resources;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;Resources in ApplicationResources.resources:&quot;);\n      ResourceReader res = new ResourceReader(@&quot;.\\ApplicationResources.resources&quot;);\n      IDictionaryEnumerator dict = res.GetEnumerator();\n      while (dict.MoveNext())\n         Console.WriteLine(&quot;   {0}: &#39;{1}&#39; (Type {2})&quot;, \n                           dict.Key, dict.Value, dict.Value.GetType().Name);\n      res.Close();\n   }\n}\n// The example displays the following output:\n//       Resources in ApplicationResources.resources:\n//          Label3: &#39;&quot;Last Name:&quot;&#39; (Type String)\n//          Label2: &#39;&quot;Middle Name:&quot;&#39; (Type String)\n//          Label1: &#39;&quot;First Name:&quot;&#39; (Type String)\n//          Label7: &#39;&quot;State:&quot;&#39; (Type String)\n//          Label6: &#39;&quot;City:&quot;&#39; (Type String)\n//          Label5: &#39;&quot;Street Address:&quot;&#39; (Type String)\n//          Label4: &#39;&quot;SSN:&quot;&#39; (Type String)\n//          Label9: &#39;&quot;Home Phone:&quot;&#39; (Type String)\n//          Label8: &#39;&quot;Zip Code:&quot;&#39; (Type String)\n//          Title: &#39;&quot;Contact Information&quot;&#39; (Type String)\n//          Label12: &#39;&quot;Other Phone:&quot;&#39; (Type String)\n//          Label13: &#39;&quot;Fax:&quot;&#39; (Type String)\n//          Label10: &#39;&quot;Business Phone:&quot;&#39; (Type String)\n//          Label11: &#39;&quot;Mobile Phone:&quot;&#39; (Type String)\n//          Label14: &#39;&quot;Email Address:&quot;&#39; (Type String)\n//          Label15: &#39;&quot;Alternate Email Address:&quot;&#39; (Type String)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#1\">Imports System.Collections\nImports System.Resources\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(&quot;Resources in ApplicationResources.resources:&quot;)\n      Dim res As New ResourceReader(&quot;.\\ApplicationResources.resources&quot;)\n      Dim dict As IDictionaryEnumerator = res.GetEnumerator()\n      Do While dict.MoveNext()\n         Console.WriteLine(&quot;   {0}: &#39;{1}&#39; (Type {2})&quot;, dict.Key, dict.Value, dict.Value.GetType().Name)\n      Loop\n      res.Close()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Resources in ApplicationResources.resources:\n&#39;          Label3: &#39;&quot;Last Name:&quot;&#39; (Type String)\n&#39;          Label2: &#39;&quot;Middle Name:&quot;&#39; (Type String)\n&#39;          Label1: &#39;&quot;First Name:&quot;&#39; (Type String)\n&#39;          Label7: &#39;&quot;State:&quot;&#39; (Type String)\n&#39;          Label6: &#39;&quot;City:&quot;&#39; (Type String)\n&#39;          Label5: &#39;&quot;Street Address:&quot;&#39; (Type String)\n&#39;          Label4: &#39;&quot;SSN:&quot;&#39; (Type String)\n&#39;          Label9: &#39;&quot;Home Phone:&quot;&#39; (Type String)\n&#39;          Label8: &#39;&quot;Zip Code:&quot;&#39; (Type String)\n&#39;          Title: &#39;&quot;Contact Information&quot;&#39; (Type String)\n&#39;          Label12: &#39;&quot;Other Phone:&quot;&#39; (Type String)\n&#39;          Label13: &#39;&quot;Fax:&quot;&#39; (Type String)\n&#39;          Label10: &#39;&quot;Business Phone:&quot;&#39; (Type String)\n&#39;          Label11: &#39;&quot;Mobile Phone:&quot;&#39; (Type String)\n&#39;          Label14: &#39;&quot;Email Address:&quot;&#39; (Type String)\n&#39;          Label15: &#39;&quot;Alternate Email Address:&quot;&#39; (Type String)\n</code></pre><p> The attempt to retrieve resource data from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property can throw the following exceptions:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> if the data is not in the expected format.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> if the assembly that contains the type to which the data belongs cannot be found.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> if the type to which the data belongs cannot be cannot be found.  </p>\n<p>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type. If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a> method, as the following section shows. This approach provides you with some information about the data type that the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property attempted to return.  </p>\n</li>\n</ul>\n<p><a name=\"getresourcedata\"></a>   </p>\n<h3 id=\"retrieving-resources-by-name-with-getresourcedata\">Retrieving Resources by Name with GetResourceData</h3>\n<p> The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <code>IDictionaryEnumerator.MoveNext</code> method. For each resource, you retrieve the resource&#39;s name from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Key_\" data-linktype=\"relative-path\">Key</a> property, which is then passed to the [GetResourceData(String,â€‚String,â€‚Byte&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt; method to retrieve the resource&#39;s data. This is returned as a byte array in the <code>resourceData</code> argument.  </p>\n<p> This approach is more awkward than retrieving the resource name and value from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Key_\" data-linktype=\"relative-path\">Key</a> and <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> properties, because it returns the actual bytes that form the resource value. However, if the attempt to retrieve the resource throws an exception, the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a> method can help identify the source of the exception by supplying information about the resource&#39;s data type. For more information about the string that indicates the resource&#39;s data type, see <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a>.  </p>\n<p> The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown. It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <code>DateTimeTZI</code> object. To run the example, do the following:  </p>\n<ol>\n<li><p>Create an assembly named Library.dll that contains the <code>DateTimeTZI</code> structure. The following is the source code for the assembly.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#4\">&lt;Serializable&gt; Public Structure DateTimeTZI\n  Dim [Date] As DateTime\n  Dim TimeZone As TimeZoneInfo\n   \n  Public Sub New([date] As DateTime, tz As TimeZoneInfo)\n     Me.[Date] = [date]\n     Me.TimeZone = tz\n  End Sub\n  \n  Public Overrides Function ToString() As String\n     Return String.Format(&quot;{0:dd/MM/yyyy hh:mm:ss tt} {1}&quot;, \n                          [Date], TimeZone.StandardName)\n  End Function\nEnd Structure\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#4\">using System;\n\n[Serializable] public struct DateTimeTZI\n{\n  DateTime Date;\n  TimeZoneInfo TimeZone;\n   \n  public DateTimeTZI(DateTime date, TimeZoneInfo tz)\n  {\n     this.Date = date;\n     this.TimeZone = tz;\n  }\n\n   public override string ToString()\n   {\n     return String.Format(&quot;{0:dd/MM/yyyy hh:mm:ss tt} {1}&quot;, \n                          Date, TimeZone.StandardName);\n   }\n}\n</code></pre><p> Compile the source code in C# by using the following command:  </p>\n<pre><code>csc /t:library library.cs\n</code></pre><p> Or, you can compile it in Visual Basic by using the following command:  </p>\n<pre><code>vbc library.vb /t:library\n</code></pre></li>\n<li><p>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#5\">using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.IO;\nusing System.Resources;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Text;\n\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Bitmap as stream.\n      MemoryStream bitmapStream = new MemoryStream();\n      Bitmap bmp = new Bitmap(@&quot;.\\ContactsIcon.jpg&quot;);\n      bmp.Save(bitmapStream, ImageFormat.Jpeg);\n          \n      // Define resources to be written.\n      using (ResourceWriter rw = new ResourceWriter(@&quot;.\\ContactResources.resources&quot;))\n      {\n         rw.AddResource(&quot;Title&quot;, &quot;Contact List&quot;);\n         rw.AddResource(&quot;NColumns&quot;, 5);         \n         rw.AddResource(&quot;Icon&quot;, bitmapStream);         \n         rw.AddResource(&quot;Header1&quot;, &quot;Name&quot;);\n         rw.AddResource(&quot;Header2&quot;, &quot;City&quot;);\n         rw.AddResource(&quot;Header3&quot;, &quot;State&quot;);  \n         rw.AddResource(&quot;VersionDate&quot;, new DateTimeTZI(\n                        new DateTime(2012, 5, 18),  \n                        TimeZoneInfo.Local));\n         rw.AddResource(&quot;ClientVersion&quot;, true);\n         rw.Generate();\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#5\">Imports System.Drawing\nImports System.IO\nImports System.Resources\nImports System.Runtime.Serialization.Formatters.Binary\n\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      &#39; Bitmap as stream.\n      Dim bitmapStream As New MemoryStream()\n      Dim bmp As New Bitmap(&quot;.\\ContactsIcon.jpg&quot;)\n      bmp.Save(bitmapStream, Imaging.ImageFormat.jpeg)\n          \n      &#39; Define resources to be written.\n      Using rw As New ResourceWriter(&quot;.\\ContactResources.resources&quot;)\n         rw.AddResource(&quot;Title&quot;, &quot;Contact List&quot;)\n         rw.AddResource(&quot;NColumns&quot;, 5)         \n         rw.AddResource(&quot;Icon&quot;, bitmapStream)         \n         rw.AddResource(&quot;Header1&quot;, &quot;Name&quot;)\n         rw.AddResource(&quot;Header2&quot;, &quot;City&quot;)\n         rw.AddResource(&quot;Header3&quot;, &quot;State&quot;)  \n         rw.AddResource(&quot;VersionDate&quot;, New DateTimeTZI(#05/18/2012#, \n                                                       TimeZoneInfo.Local))\n         rw.AddResource(&quot;ClientVersion&quot;, True)\n         rw.Generate()\n      End Using\n   End Sub\nEnd Module\n</code></pre><p> The source code file is named CreateResources.cs. You can compile it in C# by using the following command:  </p>\n<pre><code>csc CreateResources.cs /r:library.dll\n</code></pre><p> Or, you can compile it in Visual Basic by using the following command:  </p>\n<pre><code>vbc CreateResources.vb /r:library.dll\n</code></pre></li>\n<li><p>Compile and run the following code to enumerate the resources in the ContactResources.resources file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Class#6\">using System;\nusing System.Collections;\nusing System.Drawing;\nusing System.IO;\nusing System.Resources;\nusing System.Runtime.Serialization.Formatters.Binary;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ResourceReader rdr = new ResourceReader(@&quot;.\\ContactResources.resources&quot;);  \n      IDictionaryEnumerator dict = rdr.GetEnumerator();\n      while (dict.MoveNext()) {\n         Console.WriteLine(&quot;Resource Name: {0}&quot;, dict.Key);\n         try {\n            Console.WriteLine(&quot;   Value: {0}&quot;, dict.Value);\n         }\n         catch (FileNotFoundException) {\n            Console.WriteLine(&quot;   Exception: A file cannot be found.&quot;);\n            DisplayResourceInfo(rdr, (string) dict.Key, false);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;   Exception: Corrupted data.&quot;);\n            DisplayResourceInfo(rdr, (string) dict.Key, true);\n         }\n         catch (TypeLoadException) {\n            Console.WriteLine(&quot;   Exception: Cannot load the data type.&quot;);\n            DisplayResourceInfo(rdr, (string) dict.Key, false);   \n         }\n      } \n   }\n\n   private static void DisplayResourceInfo(ResourceReader rr, \n                                   string key, bool loaded)\n   {                                \n      string dataType = null;\n      byte[] data = null;\n      rr.GetResourceData(key, out dataType, out data);\n            \n      // Display the data type.\n      Console.WriteLine(&quot;   Data Type: {0}&quot;, dataType);\n      // Display the bytes that form the available data.      \n      Console.Write(&quot;   Data: &quot;);\n      int lines = 0;\n      foreach (var dataItem in data) {\n         lines++;\n         Console.Write(&quot;{0:X2} &quot;, dataItem);\n         if (lines % 25 == 0)\n            Console.Write(&quot;\\n         &quot;);\n      }\n      Console.WriteLine();\n      // Try to recreate current state of  data.\n      // Do: Bitmap, DateTimeTZI\n      switch (dataType) \n      {  \n         // Handle internally serialized string data (ResourceTypeCode members).\n         case &quot;ResourceTypeCode.String&quot;:\n            BinaryReader reader = new BinaryReader(new MemoryStream(data));\n            string binData = reader.ReadString();\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, binData);\n            break;\n         case &quot;ResourceTypeCode.Int32&quot;:\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, \n                              BitConverter.ToInt32(data, 0));\n            break;\n         case &quot;ResourceTypeCode.Boolean&quot;:\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, \n                              BitConverter.ToBoolean(data, 0));\n            break;\n         // .jpeg image stored as a stream.\n         case &quot;ResourceTypeCode.Stream&quot;:  \n            const int OFFSET = 4;\n            int size = BitConverter.ToInt32(data, 0);\n            Bitmap value1 = new Bitmap(new MemoryStream(data, OFFSET, size));\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, value1); \n            break;\n         // Our only other type is DateTimeTZI.\n         default:\n            // No point in deserializing data if the type is unavailable.\n            if (dataType.Contains(&quot;DateTimeTZI&quot;) &amp;&amp; loaded) { \n               BinaryFormatter binFmt = new BinaryFormatter();\n               object value2 = binFmt.Deserialize(new MemoryStream(data));\n               Console.WriteLine(&quot;   Recreated Value: {0}&quot;, value2);\n            }    \n            break;\n      }\n      Console.WriteLine();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Class#6\">Imports System.Collections\nImports System.Drawing\nImports System.IO\nImports System.Resources\nImports System.Runtime.Serialization.Formatters.Binary\n\nModule Example\n   Public Sub Main()\n      Dim rdr As New ResourceReader(&quot;.\\ContactResources.resources&quot;)  \n      Dim dict As IDictionaryEnumerator = rdr.GetEnumerator()\n      Do While dict.MoveNext()\n         Console.WriteLine(&quot;Resource Name: {0}&quot;, dict.Key)\n         Try\n            Console.WriteLine(&quot;   Value: {0}&quot;, dict.Value)\n         Catch e As FileNotFoundException\n            Console.WriteLine(&quot;   Exception: A file cannot be found.&quot;)\n            DisplayResourceInfo(rdr, CStr(dict.Key), False)\n         Catch e As FormatException\n            Console.WriteLine(&quot;   Exception: Corrupted data.&quot;)\n            DisplayResourceInfo(rdr, CStr(dict.Key), True)\n         Catch e As TypeLoadException\n            Console.WriteLine(&quot;   Exception: Cannot load the data type.&quot;)\n            DisplayResourceInfo(rdr, CStr(dict.Key), False)   \n         End Try\n      Loop \n   End Sub\n\n   Private Sub DisplayResourceInfo(rr As ResourceReader, \n                                   key As String, loaded As Boolean)\n      Dim dataType As String = Nothing\n      Dim data() As Byte = Nothing\n      rr.GetResourceData(key, dataType, data)\n            \n      &#39; Display the data type.\n      Console.WriteLine(&quot;   Data Type: {0}&quot;, dataType)\n      &#39; Display the bytes that form the available data.      \n      Console.Write(&quot;   Data: &quot;)\n      Dim lines As Integer = 0\n      For Each dataItem In data\n         lines += 1\n         Console.Write(&quot;{0:X2} &quot;, dataItem)\n         If lines Mod 25 = 0 Then Console.Write(&quot;{0}         &quot;, vbCrLf)\n      Next\n      Console.WriteLine()\n      &#39; Try to recreate current state of  data.\n      &#39; Do: Bitmap, DateTimeTZI\n      Select Case dataType   \n         &#39; Handle internally serialized string data (ResourceTypeCode members).\n         Case &quot;ResourceTypeCode.String&quot;\n            Dim reader As New BinaryReader(New MemoryStream(data))\n            Dim binData As String = reader.ReadString()\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, binData)\n         Case &quot;ResourceTypeCode.Int32&quot;\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, \n                              BitConverter.ToInt32(data, 0))\n         Case &quot;ResourceTypeCode.Boolean&quot;\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, \n                              BitConverter.ToBoolean(data, 0))\n         &#39; .jpeg image stored as a stream.\n         Case &quot;ResourceTypeCode.Stream&quot;  \n            Const OFFSET As Integer = 4\n            Dim size As Integer = BitConverter.ToInt32(data, 0)\n            Dim value As New Bitmap(New MemoryStream(data, OFFSET, size))\n            Console.WriteLine(&quot;   Recreated Value: {0}&quot;, value) \n         &#39; Our only other type is DateTimeTZI.\n         Case Else\n            &#39; No point in deserializing data if the type is unavailable.\n            If dataType.Contains(&quot;DateTimeTZI&quot;) And loaded Then \n               Dim binFmt As New BinaryFormatter()\n               Dim value As Object = binFmt.Deserialize(New MemoryStream(data))\n               Console.WriteLine(&quot;   Recreated Value: {0}&quot;, value)\n            End If    \n      End Select\n      Console.WriteLine()\n   End Sub\nEnd Module\n</code></pre><p> After modifying the source code (for example, by deliberately throwing a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> at the end of the <code>try</code> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a> enable you to retrieve or recreate some resource information.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">ResourceReader(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class for the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader__ctor_System_String_\" data-linktype=\"self-bookmark\">ResourceReader(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class for the specified named resource file.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all operating system resources associated with this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader_GetResourceData_System_String_System_String__System_Byte____\" data-linktype=\"self-bookmark\">GetResourceData(String,String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type name and data of a named resource from an open resource file or stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Resources_ResourceReader_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResourceReader(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class for the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ResourceReader (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input stream for reading resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>stream</code> parameter is not readable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>stream</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error has occurred while accessing <code>stream</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ResourceReader constructor instantiates a <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly. To read from a standalone .resources file, instantiate a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object and pass it to the ResourceReader constructor. To read from an embedded .resources file, call the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceStream_\" data-linktype=\"relative-path\">GetManifestResourceStream</a> method with the case-sensitive name of the .resources file, and pass the returned <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to the ResourceReader constructor.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=330378\" data-linktype=\"external\">Untrusted Data Security Risks</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example in this section uses the following .txt file named <code>PatientForm.txt</code> to define the resources used by an application.  </p>\n<pre><code>\nTitle=&quot;Top Pet Animal Clinic&quot;  \nLabel1=&quot;Patient Number:&quot;  \nLabel2=&quot;Pet Name:&quot;  \nLabel3=&quot;Species:&quot;  \nLabel4=&quot;Breed:&quot;  \nLabel5=&quot;Date of Birth:&quot;  \nLabel6=&quot;Age:&quot;  \nLabel7=&quot;Owner:&quot;  \nLabel8=&quot;Address:&quot;  \nLabel9=&quot;Home Phone:&quot;  \nLabel10=&quot;Work Phone:&quot;  \nLabel11=&quot;Mobile Phone:&quot;\n</code></pre><p> You can compile the .txt file into a .resources file by issuing the following command:  </p>\n<p> <strong>resgen PatientForm.txt</strong>  </p>\n<p> The following example assumes that the resource file is embedded in the assembly that contains the application&#39;s executable code. It retrieves a resource file named <code>PatientForm.resources</code> from the currently executing assemblies and displays the name and value of each of its resources.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Ctor#1\">Imports System.Collections\nImports System.IO\nImports System.Reflection\nImports System.Resources\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = GetType(Example).Assembly\n      Dim fs As Stream = assem.GetManifestResourceStream(&quot;PatientForm.resources&quot;)\n      Dim rr As New ResourceReader(fs)\n      Dim dict As IDictionaryEnumerator = rr.GetEnumerator\n      Dim ctr As Integer\n\n      Do While dict.MoveNext()\n         ctr += 1\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value)\n      Loop\n\n      rr.Close()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       01: Label3 = &quot;Species:&quot;\n&#39;       02: Label2 = &quot;Pet Name:&quot;\n&#39;       03: Label1 = &quot;Patient Number:&quot;\n&#39;       04: Label7 = &quot;Owner:&quot;\n&#39;       05: Label6 = &quot;Age:&quot;\n&#39;       06: Label5 = &quot;Date of Birth:&quot;\n&#39;       07: Label4 = &quot;Breed:&quot;\n&#39;       08: Label9 = &quot;Home Phone:&quot;\n&#39;       09: Label8 = &quot;Address:&quot;\n&#39;       10: Title = &quot;Top Pet Animal Clinic&quot;\n&#39;       11: Label10 = &quot;Work Phone:&quot;\n&#39;       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Ctor#1\">using System;\nusing System.Collections;\nusing System.IO;\nusing System.Reflection;\nusing System.Resources;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var assem = typeof(Example).Assembly;\n      var fs = assem.GetManifestResourceStream(&quot;PatientForm.resources&quot;);\n      var rr = new ResourceReader(fs);\n      IDictionaryEnumerator dict = rr.GetEnumerator();\n      int ctr = 0;\n\n      while (dict.MoveNext()) {\n         ctr++;\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value);\n      }\n      rr.Close();\n   }\n}\n// The example displays the following output:\n//       01: Label3 = &quot;Species:&quot;\n//       02: Label2 = &quot;Pet Name:&quot;\n//       03: Label1 = &quot;Patient Number:&quot;\n//       04: Label7 = &quot;Owner:&quot;\n//       05: Label6 = &quot;Age:&quot;\n//       06: Label5 = &quot;Date of Birth:&quot;\n//       07: Label4 = &quot;Breed:&quot;\n//       08: Label9 = &quot;Home Phone:&quot;\n//       09: Label8 = &quot;Address:&quot;\n//       10: Title = &quot;Top Pet Animal Clinic&quot;\n//       11: Label10 = &quot;Work Phone:&quot;\n//       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre><p> If the C# example is named <code>Example.cs</code>, you can compile it by using the following command:  </p>\n<p> <strong>csc Example.cs /res:PatientForm.resources</strong>  </p>\n<p> If the Visual Basic example is named <code>Example.vb</code>, you can compile it by using the following command:  </p>\n<p> <strong>vbc Example.vb /res:PatientForm.resources</strong></p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResourceReader(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class for the specified named resource file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ResourceReader (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path and name of the resource file to read. <code>filename</code> is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>fileName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The resource file has an invalid format. For example, the length of the file may be zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ResourceReader constructor instantiates a <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object that retrieves resources from a standalone .resources file. To retrieve resources from an embedded .resources file, use the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader__ctor_System_IO_Stream_\" data-linktype=\"relative-path\">ResourceReader(Stream)</a> constructor.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=330378\" data-linktype=\"external\">Untrusted Data Security Risks</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example in this section uses the following .txt file named <code>PatientForm.txt</code> to define the resources used by an application.  </p>\n<pre><code>\nTitle=&quot;Top Pet Animal Clinic&quot;  \nLabel1=&quot;Patient Number:&quot;  \nLabel2=&quot;Pet Name:&quot;  \nLabel3=&quot;Species:&quot;  \nLabel4=&quot;Breed:&quot;  \nLabel5=&quot;Date of Birth:&quot;  \nLabel6=&quot;Age:&quot;  \nLabel7=&quot;Owner:&quot;  \nLabel8=&quot;Address:&quot;  \nLabel9=&quot;Home Phone:&quot;  \nLabel10=&quot;Work Phone:&quot;  \nLabel11=&quot;Mobile Phone:&quot;\n</code></pre><p> You can compile this .txt file into a .resources file by issuing the following command:  </p>\n<p> <strong>resgen PatientForm.txt</strong>  </p>\n<p> The following example enumerates the resources in <code>PatientForm.resources</code> and displays the name and value of each.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Ctor#2\">using System;\nusing System.Collections;\nusing System.Resources;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rr = new ResourceReader(&quot;PatientForm.resources&quot;);\n      IDictionaryEnumerator dict = rr.GetEnumerator();\n      int ctr = 0;\n\n      while (dict.MoveNext()) {\n         ctr++;\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value);\n      }\n\n      rr.Close();\n   }\n}\n// The example displays the following output:\n//       01: Label3 = &quot;Species:&quot;\n//       02: Label2 = &quot;Pet Name:&quot;\n//       03: Label1 = &quot;Patient Number:&quot;\n//       04: Label7 = &quot;Owner:&quot;\n//       05: Label6 = &quot;Age:&quot;\n//       06: Label5 = &quot;Date of Birth:&quot;\n//       07: Label4 = &quot;Breed:&quot;\n//       08: Label9 = &quot;Home Phone:&quot;\n//       09: Label8 = &quot;Address:&quot;\n//       10: Title = &quot;Top Pet Animal Clinic&quot;\n//       11: Label10 = &quot;Work Phone:&quot;\n//       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Ctor#2\">Imports System.Collections\nImports System.Resources\n\nModule Example\n   Public Sub Main()\n      Dim rr As New ResourceReader(&quot;PatientForm.resources&quot;)\n      Dim dict As IDictionaryEnumerator = rr.GetEnumerator\n      Dim ctr As Integer\n\n      Do While dict.MoveNext()\n         ctr += 1\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value)\n      Loop\n      \n      rr.Close()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       01: Label3 = &quot;Species:&quot;\n&#39;       02: Label2 = &quot;Pet Name:&quot;\n&#39;       03: Label1 = &quot;Patient Number:&quot;\n&#39;       04: Label7 = &quot;Owner:&quot;\n&#39;       05: Label6 = &quot;Age:&quot;\n&#39;       06: Label5 = &quot;Date of Birth:&quot;\n&#39;       07: Label4 = &quot;Breed:&quot;\n&#39;       08: Label9 = &quot;Home Phone:&quot;\n&#39;       09: Label8 = &quot;Address:&quot;\n&#39;       10: Title = &quot;Top Pet Animal Clinic&quot;\n&#39;       11: Label10 = &quot;Work Phone:&quot;\n&#39;       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader_Close\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all operating system resources associated with this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Close can be safely called multiple times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example moves through a file&#39;s resources and displays all the key/value pairs it finds. The code then uses the Close method to shut down the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> and to release all resources used by it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.GetEnumerator Example#1\">Imports System\nImports System.Resources\nImports System.Collections\nImports Microsoft.VisualBasic\n\nClass EnumerateResources\n   \n   Public Shared Sub Main()\n      &#39; Create a ResourceReader for the file items.resources.\n      Dim rr As New ResourceReader(&quot;items.resources&quot;)      \n      \n      &#39; Create an IDictionaryEnumerator to iterate through the resources.\n      Dim id As IDictionaryEnumerator = rr.GetEnumerator()\n      \n      &#39; Iterate through the resources and display the contents to the console. \n      While id.MoveNext()\n         Console.WriteLine(ControlChars.NewLine + &quot;[{0}] &quot; + ControlChars.Tab + &quot;{1}&quot;, id.Key, id.Value)\n      End While \n\n      rr.Close()\n\n   End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.GetEnumerator Example#1\">using System;\nusing System.Resources;\nusing System.Collections;\n\nclass EnumerateResources \n{\n    public static void Main() \n    {\n        // Create a ResourceReader for the file items.resources.\n        ResourceReader rr = new ResourceReader(&quot;items.resources&quot;); \n\n        \n        // Create an IDictionaryEnumerator to iterate through the resources.\n        IDictionaryEnumerator id = rr.GetEnumerator(); \n\n        // Iterate through the resources and display the contents to the console. \n        while(id.MoveNext())\n          Console.WriteLine(&quot;<br>[{0}] &nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, id.Key, id.Value); \n\n        rr.Close();     \n \n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Resources.ResourceReader.GetEnumerator Example#1\">using namespace System;\nusing namespace System::Resources;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Create a ResourceReader for the file items.resources.\n   ResourceReader^ rr = gcnew ResourceReader( &quot;items.resources&quot; );\n   \n   // Create an IDictionaryEnumerator* to iterate through the resources.\n   IDictionaryEnumerator^ id = rr-&gt;GetEnumerator();\n   \n   // Iterate through the resources and display the contents to the console.\n   while ( id-&gt;MoveNext() )\n      Console::WriteLine( &quot;<br> [{0}] &nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, id-&gt;Key, id-&gt;Value );\n\n   rr-&gt;Close();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader_Dispose\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you are finished using this instance of <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a>, call Dispose to release all resources used by this instance. You should eliminate further references to this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.  </p>\n<p> Dispose calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources. For more information, see <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader_GetEnumerator\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The reader has been closed or disposed, and cannot be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, you enumerate resources by calling the GetEnumerator method and then repeatedly calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method on the returned <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object until the method returns <code>false</code>. The resource name is available from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Key_\" data-linktype=\"relative-path\">Key</a> property; its value from the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property. The example illustrates how to enumerate resources in this way.  </p>\n<p> The implementation of the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property by the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class can throw the following exceptions:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a>  \n\n<p> The assembly that contains the type to which the data belongs cannot be found.  </p>\n</li>\n<li><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>  \n\n<p> The data is not in the expected format.  </p>\n</li>\n<li><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a>  \n\n<p> The type to which the data belongs cannot be found.  </p>\n<p>You can handle the exception by calling the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetResourceData_\" data-linktype=\"relative-path\">GetResourceData</a> method to retrieve information about the data type and the byte array assigned to the named resource. For more information, see the &quot;Retrieving Resources by Name with GetResourceData&quot; section in the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class topic.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> class includes two methods that return enumerators. The GetEnumerator method returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> interface object and is the recommended method to call when enumerating resources.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example in this section uses the following .txt file named <code>PatientForm.txt</code> to define the resources used by an application.  </p>\n<pre><code>\nTitle=&quot;Top Pet Animal Clinic&quot;  \nLabel1=&quot;Patient Number:&quot;  \nLabel2=&quot;Pet Name:&quot;  \nLabel3=&quot;Species:&quot;  \nLabel4=&quot;Breed:&quot;  \nLabel5=&quot;Date of Birth:&quot;  \nLabel6=&quot;Age:&quot;  \nLabel7=&quot;Owner:&quot;  \nLabel8=&quot;Address:&quot;  \nLabel9=&quot;Home Phone:&quot;  \nLabel10=&quot;Work Phone:&quot;  \nLabel11=&quot;Mobile Phone:&quot;\n</code></pre><p> You can compile the .txt file into a .resources file by issuing the following command:  </p>\n<p> <strong>resgen PatientForm.txt</strong>  </p>\n<p> The following example enumerates the resources in <code>PatientForm.resources</code> and displays the name and value of each.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Resources.ResourceReader.Ctor#2\">using System;\nusing System.Collections;\nusing System.Resources;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rr = new ResourceReader(&quot;PatientForm.resources&quot;);\n      IDictionaryEnumerator dict = rr.GetEnumerator();\n      int ctr = 0;\n\n      while (dict.MoveNext()) {\n         ctr++;\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value);\n      }\n\n      rr.Close();\n   }\n}\n// The example displays the following output:\n//       01: Label3 = &quot;Species:&quot;\n//       02: Label2 = &quot;Pet Name:&quot;\n//       03: Label1 = &quot;Patient Number:&quot;\n//       04: Label7 = &quot;Owner:&quot;\n//       05: Label6 = &quot;Age:&quot;\n//       06: Label5 = &quot;Date of Birth:&quot;\n//       07: Label4 = &quot;Breed:&quot;\n//       08: Label9 = &quot;Home Phone:&quot;\n//       09: Label8 = &quot;Address:&quot;\n//       10: Title = &quot;Top Pet Animal Clinic&quot;\n//       11: Label10 = &quot;Work Phone:&quot;\n//       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Resources.ResourceReader.Ctor#2\">Imports System.Collections\nImports System.Resources\n\nModule Example\n   Public Sub Main()\n      Dim rr As New ResourceReader(&quot;PatientForm.resources&quot;)\n      Dim dict As IDictionaryEnumerator = rr.GetEnumerator\n      Dim ctr As Integer\n\n      Do While dict.MoveNext()\n         ctr += 1\n         Console.WriteLine(&quot;{0:00}: {1} = {2}&quot;, ctr, dict.Key, dict.Value)\n      Loop\n      \n      rr.Close()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       01: Label3 = &quot;Species:&quot;\n&#39;       02: Label2 = &quot;Pet Name:&quot;\n&#39;       03: Label1 = &quot;Patient Number:&quot;\n&#39;       04: Label7 = &quot;Owner:&quot;\n&#39;       05: Label6 = &quot;Age:&quot;\n&#39;       06: Label5 = &quot;Date of Birth:&quot;\n&#39;       07: Label4 = &quot;Breed:&quot;\n&#39;       08: Label9 = &quot;Home Phone:&quot;\n&#39;       09: Label8 = &quot;Address:&quot;\n&#39;       10: Title = &quot;Top Pet Animal Clinic&quot;\n&#39;       11: Label10 = &quot;Work Phone:&quot;\n&#39;       12: Label11 = &quot;Mobile Phone:&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader_GetResourceData_System_String_System_String__System_Byte____\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader_GetResourceData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetResourceData(String,String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type name and data of a named resource from an open resource file or stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a string that represents the type name of the retrieved resource (see the Remarks section for details). This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a byte array that is the binary representation of the retrieved type. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resourceName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>resourceName</code> does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>resourceName</code> has an invalid type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The retrieved resource data is corrupt.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object is not initialized, probably because it is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetResourceData method retrieves the value of a named resource as a byte array. It is typically used when the <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Value_\" data-linktype=\"relative-path\">Value</a> property throws an exception when it tries to retrieve the value of a resource.  </p>\n<p> <code>resourceType</code> is a string that represents the data type of the resource. It can be any of the following values:  </p>\n<ul>\n<li><p>The string representation of a <code>ResourceTypeCode</code> enumeration member that indicates the data type of the resource. <code>ResourceTypeCode</code> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types. These include the .NET Framework primitive data types (<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>), as well as <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>, and <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>, In addition, the <code>ResourceTypeCode</code> enumeration includes the values shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>ResourceTypeCode value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ResourceTypeCode.ByteArray</code></td>\n<td>The data is a byte array. This data type commonly results from the call to the [ResourceWriter.AddResource(String,â€‚Byte&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=fullName&gt; method.</td>\n</tr>\n<tr>\n<td><code>ResourceTypeCode.Null</code></td>\n<td>The data is a null reference. This data type commonly results from the call to the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_System_String_System_Object_\" data-linktype=\"relative-path\">System.Resources.ResourceWriter.AddResource(String,Object)</a> method with an object whose value is <code>null</code>.</td>\n</tr>\n<tr>\n<td><code>ResourceTypeCode.Stream</code></td>\n<td>The data is stored in a stream. This data type commonly results from the call to the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_System_String_System_IO_Stream_\" data-linktype=\"relative-path\">System.Resources.ResourceWriter.AddResource(String,Stream)</a> or <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_System_String_System_IO_Stream_System_Boolean_\" data-linktype=\"relative-path\">System.Resources.ResourceWriter.AddResource(String,Stream,Boolean)</a> method.</td>\n</tr>\n</tbody>\n</table>\n<p> Assuming that <code>resourceData</code> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> or <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> method.  </p>\n</li>\n<li><p>A string that contains the fully qualified name of the type whose serialized data is assigned to the <code>resourceData</code> argument (for example, <code>System.String</code>). In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type. For example, the following string indicates that the serialized data represents an instance of the <code>Person</code> type in the <code>Extensions</code> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.  </p>\n<p> <code>Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</code>  </p>\n<p> Assuming that <code>resourceData</code> has not been corrupted and that the source type is available, <code>resourceData</code> can be converted from a byte array back to its original value by converting the byte array to a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object and passing the stream to the <a class=\"xref\" href=\"system.runtime.serialization.formatters.binary.binaryformatter#System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_Deserialize_\" data-linktype=\"relative-path\">Deserialize</a> method.  </p>\n</li>\n<li><p>The string used to describe the data type in the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResourceData_\" data-linktype=\"relative-path\">AddResourceData</a> method call.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Resources_ResourceReader_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Resources_ResourceReader_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An enumerator for this <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The reader has already been closed and cannot be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IEnumerable.GetEnumerator is an explicit interface implementation. It can be used only when the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface. The recommended approach to enumerating the resources in a .resources file is to call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method of the <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object returned by the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Resources.ResourceReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Resources.ResourceReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader.GetResourceData\">\r\n<meta name=\"APIName\" content=\"System.Resources.ResourceReader.IEnumerable.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5d9e23b2-606e-6045-4c65-00a458cf9f0b\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Resources\\ResourceReader.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.  \n Security Note: Calling methods in this class with untrusted data is a security risâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Resources/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Resources.ResourceReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Resources.ResourceReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Resources.ResourceReader.yml","open_to_public_contributors":true,"api_name":["System.Resources.ResourceReader","System.Resources.ResourceReader..ctor","System.Resources.ResourceReader.Close","System.Resources.ResourceReader.Dispose","System.Resources.ResourceReader.GetEnumerator","System.Resources.ResourceReader.GetResourceData","System.Resources.ResourceReader.IEnumerable.GetEnumerator"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Resources.ResourceReader","System::Resources::ResourceReader","System.Resources.ResourceReader.#ctor","System::Resources::ResourceReader::#ctor","System.Resources.ResourceReader.Close","System::Resources::ResourceReader::Close","System.Resources.ResourceReader.Dispose","System::Resources::ResourceReader::Dispose","System.Resources.ResourceReader.GetEnumerator","System::Resources::ResourceReader::GetEnumerator","System.Resources.ResourceReader.GetResourceData","System::Resources::ResourceReader::GetResourceData","System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator","System::Resources::ResourceReader::System#Collections#IEnumerable#GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5d9e23b2-606e-6045-4c65-00a458cf9f0b","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Resources\\ResourceReader.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Resources/ResourceReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ResourceReader class | Microsoft Docs","_op_ogTitle":"ResourceReader class","description":"Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.  \n Security Note: Calling methods in this class with untrusted data is a security risâ€¦","toc_asset_id":"_splitted/System.Resources/toc.json","toc_rel":"_splitted/System.Resources/toc.json","source_url":"","ms.assetid":"System.Resources.ResourceReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.resources.resourcereader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.resources.resourcereader","fileRelativePath":"System.Resources.ResourceReader.html"},"themesRelativePathToOutputRoot":"_themes/"}