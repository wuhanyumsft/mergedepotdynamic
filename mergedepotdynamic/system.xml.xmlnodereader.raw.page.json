{"content":"    \r\n    <h1 id=\"System_Xml_XmlNodeReader\">\r\n      <span class=\"lang-csharp\">XmlNodeReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a reader that provides fast, non-cached forward only access to XML data in an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlNodeReader : System.Xml.XmlReader, System.Xml.IXmlNamespaceResolver</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlNodeReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_CanReadValueChunk\" data-linktype=\"relative-path\">CanReadValueChunk</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_\" data-linktype=\"relative-path\">Create(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_\" data-linktype=\"relative-path\">Create(TextReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_Xml_XmlReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(XmlReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetValueAsync\" data-linktype=\"relative-path\">GetValueAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsName_System_String_\" data-linktype=\"relative-path\">IsName(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsNameToken_System_String_\" data-linktype=\"relative-path\">IsNameToken(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement\" data-linktype=\"relative-path\">IsStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_\" data-linktype=\"relative-path\">IsStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_System_String_\" data-linktype=\"relative-path\">IsStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_Int32_\" data-linktype=\"relative-path\">Item(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_\" data-linktype=\"relative-path\">Item(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_System_String_\" data-linktype=\"relative-path\">Item(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContent\" data-linktype=\"relative-path\">MoveToContent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContentAsync\" data-linktype=\"relative-path\">MoveToContentAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_QuoteChar\" data-linktype=\"relative-path\">QuoteChar</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAsync\" data-linktype=\"relative-path\">ReadAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBoolean\" data-linktype=\"relative-path\">ReadContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTime\" data-linktype=\"relative-path\">ReadContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTimeOffset\" data-linktype=\"relative-path\">ReadContentAsDateTimeOffset()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDecimal\" data-linktype=\"relative-path\">ReadContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDouble\" data-linktype=\"relative-path\">ReadContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsFloat\" data-linktype=\"relative-path\">ReadContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsInt\" data-linktype=\"relative-path\">ReadContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsLong\" data-linktype=\"relative-path\">ReadContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject\" data-linktype=\"relative-path\">ReadContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObjectAsync\" data-linktype=\"relative-path\">ReadContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsString\" data-linktype=\"relative-path\">ReadContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsStringAsync\" data-linktype=\"relative-path\">ReadContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean\" data-linktype=\"relative-path\">ReadElementContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsBoolean(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime\" data-linktype=\"relative-path\">ReadElementContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDateTime(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal\" data-linktype=\"relative-path\">ReadElementContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDecimal(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble\" data-linktype=\"relative-path\">ReadElementContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDouble(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat\" data-linktype=\"relative-path\">ReadElementContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsFloat(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt\" data-linktype=\"relative-path\">ReadElementContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsInt(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong\" data-linktype=\"relative-path\">ReadElementContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsLong(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject\" data-linktype=\"relative-path\">ReadElementContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsObject(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObjectAsync\" data-linktype=\"relative-path\">ReadElementContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsStringAsync\" data-linktype=\"relative-path\">ReadElementContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString\" data-linktype=\"relative-path\">ReadElementString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_\" data-linktype=\"relative-path\">ReadElementString(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadEndElement\" data-linktype=\"relative-path\">ReadEndElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml\" data-linktype=\"relative-path\">ReadInnerXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXmlAsync\" data-linktype=\"relative-path\">ReadInnerXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml\" data-linktype=\"relative-path\">ReadOuterXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXmlAsync\" data-linktype=\"relative-path\">ReadOuterXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement\" data-linktype=\"relative-path\">ReadStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadSubtree\" data-linktype=\"relative-path\">ReadSubtree()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunk(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunkAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunkAsync(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Settings\" data-linktype=\"relative-path\">Settings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SkipAsync\" data-linktype=\"relative-path\">SkipAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ValueType\" data-linktype=\"relative-path\">ValueType</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> Instead of using the XmlNodeReader, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This enables you to take advantage of conformance checking and compliance to the XML 1.0 recommendation.  </p>\n</div>\n<p> The <code>XmlNodeReader</code> has the ability to read an XML DOM subtree. This class does not support document type definition (DTD) or schema validation. However, you can create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that wraps around the XmlNodeReader object to validate the data stored in the XmlNodeReader object, as shown in Examples section.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader__ctor_System_Xml_XmlNode_\" data-linktype=\"self-bookmark\">XmlNodeReader(XmlNode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the <code>XmlNodeReader</code> class using the specified <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_AttributeCount\" data-linktype=\"self-bookmark\">AttributeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_BaseURI\" data-linktype=\"self-bookmark\">BaseURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base URI of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_CanReadBinaryContent\" data-linktype=\"self-bookmark\">CanReadBinaryContent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> implements the binary content read methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_CanResolveEntity\" data-linktype=\"self-bookmark\">CanResolveEntity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Depth\" data-linktype=\"self-bookmark\">Depth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_EOF\" data-linktype=\"self-bookmark\">EOF</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_HasAttributes\" data-linktype=\"self-bookmark\">HasAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node has any attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_HasValue\" data-linktype=\"self-bookmark\">HasValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlNodeReader.Value*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_IsDefault\" data-linktype=\"self-bookmark\">IsDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_IsEmptyElement\" data-linktype=\"self-bookmark\">IsEmptyElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the qualified name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_NamespaceURI\" data-linktype=\"self-bookmark\">NamespaceURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_NameTable\" data-linktype=\"self-bookmark\">NameTable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadState\" data-linktype=\"self-bookmark\">ReadState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state of the reader.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_SchemaInfo\" data-linktype=\"self-bookmark\">SchemaInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the schema information that has been assigned to the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the text value of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_XmlLang\" data-linktype=\"self-bookmark\">XmlLang</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_XmlSpace\" data-linktype=\"self-bookmark\">XmlSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlNodeReader.ReadState*</span> to <code>Closed</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_GetAttribute_System_Int32_\" data-linktype=\"self-bookmark\">GetAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_GetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToAttribute_System_Int32_\" data-linktype=\"self-bookmark\">MoveToAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToAttribute_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToElement\" data-linktype=\"self-bookmark\">MoveToElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToFirstAttribute\" data-linktype=\"self-bookmark\">MoveToFirstAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the first attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_MoveToNextAttribute\" data-linktype=\"self-bookmark\">MoveToNextAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the next attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next node from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadAttributeValue\" data-linktype=\"self-bookmark\">ReadAttributeValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the BinHex decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the BinHex content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ReadString\" data-linktype=\"self-bookmark\">ReadString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the contents of an element or text node as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_ResolveEntity\" data-linktype=\"self-bookmark\">ResolveEntity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_Skip\" data-linktype=\"self-bookmark\">Skip()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Skips the children of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupPrefix(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader__ctor_System_Xml_XmlNode_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlNodeReader(XmlNode)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the <code>XmlNodeReader</code> class using the specified <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlNodeReader (System.Xml.XmlNode node);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>node</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlNode</code> you want to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> For more information and examples of the code used to create an <code>XmlNodeReader</code>, see <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and overloads of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_AttributeCount\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_AttributeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttributeCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int AttributeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of attributes on the current node. This number includes default attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property is relevant to <code>Element</code>, <code>DocumentType</code> and <code>XmlDeclaration</code> nodes only. (Other node types do not have attributes.)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the attributes on the root node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Return the reader to the book element.\n                reader.MoveToElement()\n            End If\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Return the reader to the book element.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_BaseURI\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_BaseURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base URI of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string BaseURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The base URI of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), String.Empty is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a file and displays the base URI of each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.BaseURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load an XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( &quot;http://localhost/uri.xml&quot; );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display the base URI for each node.\n      while ( reader-&gt;Read() )\n      {\n         Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;BaseURI );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.BaseURI Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load an XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(&quot;http://localhost/uri.xml&quot;)\n            \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display the base URI for each node.\n            While reader.Read()\n                Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI)\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.BaseURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create and load an XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(&quot;http://localhost/uri.xml&quot;);\n\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display the base URI for each node.\n        while (reader.Read())\n        {\n            Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI);\n         }           \n     }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><p> The example uses the file, <code>uri.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.BaseURI Example#2\">\n&lt;!-- XML fragment --&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY s SYSTEM &quot;tmp/style.xml&quot;&gt;]&gt;\n&lt;book genre=&quot;novel&quot;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;s;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre><p> The <code>style.xml</code> file contains the XML text <code>&lt;style&gt;hardcover&lt;/style&gt;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_CanReadBinaryContent\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_CanReadBinaryContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadBinaryContent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> implements the binary content read methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanReadBinaryContent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the binary content read methods are implemented; otherwise <code>false</code>. The <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> class always returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The binary content read methods include the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a>, <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a>, <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a>, and <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_CanResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_CanResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanResolveEntity</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanResolveEntity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader can parse and resolve entities; otherwise, <code>false</code>. <code>XmlNodeReader</code> always returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Depth\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Depth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Depth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Depth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The depth of the current node in the XML document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_EOF\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_EOF_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EOF</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool EOF { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned at the end of the stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_HasAttributes\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_HasAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node has any attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool HasAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has attributes; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the attributes on the root node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Return the reader to the book element.\n                reader.MoveToElement()\n            End If\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Return the reader to the book element.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_HasValue\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_HasValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlNodeReader.Value*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool HasValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the node on which the reader is currently positioned can have a <code>Value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The following table lists node types that have a value to return.  </p>\n<table>\n<thead>\n<tr>\n<th>Node Type</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Attribute</code></td>\n<td>The value of the attribute.</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>The content of the CDATA section.</td>\n</tr>\n<tr>\n<td><code>Comment</code></td>\n<td>The content of the comment.</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>The internal subset.</td>\n</tr>\n<tr>\n<td><code>ProcessingInstruction</code></td>\n<td>The entire content, excluding the target.</td>\n</tr>\n<tr>\n<td><code>SignificantWhitespace</code></td>\n<td>The white space between markup in a mixed content model.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>The content of the text node.</td>\n</tr>\n<tr>\n<td><code>Whitespace</code></td>\n<td>The white space between markup.</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>The content of the declaration.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value for every node which can have a value.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.HasValue Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      // Create and load an XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot;\n      &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot;\n      &quot;&lt;book&gt;&quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      reader = gcnew XmlNodeReader( doc );\n      \n      // Parse the file and display each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;HasValue )\n                  Console::WriteLine( &quot;({0})  {1}={2}&quot;, reader-&gt;NodeType, reader-&gt;Name, reader-&gt;Value );\n         else\n                  Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.HasValue Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample {\n\n  public static void Main() {\n  \n    XmlNodeReader reader = null;\n\n    try {\n               \n        // Create and load an XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; +\n                    &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; +\n                    &quot;&lt;book&gt;&quot; +\n                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                    &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot; +\n                    &quot;&lt;/book&gt;&quot;);\n\n        reader = new XmlNodeReader(doc);\n\n        // Parse the file and display each node.\n        while (reader.Read()) {\n           if (reader.HasValue)\n             Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value);\n           else\n             Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name);\n         }           \n     }\n\n     finally {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.HasValue Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load an XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;?xml version=&#39;1.0&#39; ?&gt;&quot; &amp; _\n                        &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; &amp; _\n                        &quot;&lt;book&gt;&quot; &amp; _\n                        &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                        &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each node.\n            While reader.Read()\n                If reader.HasValue Then\n                    Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value)\n                Else\n                    Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name)\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_IsDefault\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_IsDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefault { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <code>false</code> if the attribute value was explicitly set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property applies to attribute nodes only. If the reader is not positioned on an attribute node, this property returns <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_IsEmptyElement\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_IsEmptyElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmptyElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsEmptyElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an element (<span class=\"xref\">stem.Xml.XmlNodeReader.NodeType*</span> equals <code>XmlNodeType.Element</code>) and it ends with <code>/&gt;</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property enables you to determine the difference between the following:  </p>\n<p> <code>&lt;item num=&quot;123&quot;/&gt;</code> (<code>IsEmptyElement</code> is <code>true</code>).  </p>\n<p> <code>&lt;item num=&quot;123&quot;&gt;</code> (<code>IsEmptyElement</code> is <code>false</code>, although element content is empty).  </p>\n<p> A corresponding <code>EndElement</code> node is not generated for empty elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book&gt;&quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n      &quot;&lt;misc/&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book&gt;&quot; &amp; _\n                        &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                        &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                        &quot;&lt;misc/&gt;&quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the XML and display the text content of each of the elements.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.IsEmptyElement Then\n                        Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n                    Else\n                        Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n                        reader.Read() &#39;Read the start tag.\n                        If (reader.IsStartElement())  &#39;Handle nested elements.\n                          Console.WriteLine()\n                          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                        End If\n                        Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book&gt;&quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                   &quot;&lt;misc/&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                   Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current node with the prefix removed. For example, <code>LocalName</code> is <code>book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> For node types that do not have a name (like <code>Text</code>, <code>Comment</code>, and so on), this property returns String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the XML.  If they exist, display the prefix and  \n      //namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; &amp; _\n                       &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                       &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the XML.  If they exist, display the prefix and  \n            &#39;namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Parse the XML.  If they exist, display the prefix and  \n       //namespace URI of each node.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else{\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }\n       \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the qualified name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The qualified name of the current node. For example, <code>Name</code> is <code>bk:book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> The name returned is dependent on the <span class=\"xref\">stem.Xml.XmlNodeReader.NodeType*</span> of the node. The following node types return the listed values. All other node types return an empty string.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Name<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The name of the attribute.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The document type name.<br>\n </td></tr><tr><td><code>Element</code></td><td> The tag name.<br>\n </td></tr><tr><td><code>EntityReference</code></td><td> The name of the entity referenced.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The target of the processing instruction.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The literal string <code>xml</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML and displays each of the nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create an XmlNodeReader to read the XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(filename);\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n          }           \n        }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;items.xml&quot;;\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create an XmlNodeReader to read the XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( filename );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create an XmlNodeReader to read the XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(filename)\n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_NamespaceURI\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_NamespaceURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string NamespaceURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI of the current node; otherwise an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property is relevant to <code>Element</code> and <code>Attribute</code> nodes only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the XML.  If they exist, display the prefix and  \n      //namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; &amp; _\n                       &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                       &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the XML.  If they exist, display the prefix and  \n            &#39;namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Parse the XML.  If they exist, display the prefix and  \n       //namespace URI of each node.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else{\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }\n       \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_NameTable\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_NameTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameTable</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNameTable NameTable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlNameTable</code> enabling you to get the atomized version of a string within the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> All node and attribute names returned from this class are atomized using the <code>NameTable</code>. When the same name is returned multiple times (for example, <code>Customer</code>), then the same <code>String</code> object is returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> values representing the type of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML and displays each of the nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create an XmlNodeReader to read the XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(filename);\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n          }           \n        }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;items.xml&quot;;\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create an XmlNodeReader to read the XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( filename );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create an XmlNodeReader to read the XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(filename)\n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Prefix\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Prefix { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace prefix associated with the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the XML.  If they exist, display the prefix and  \n      //namespace URI of each node.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;Prefix == String::Empty )\n                        Console::WriteLine( &quot;&lt;{0}&gt;&quot;, reader-&gt;LocalName );\n            else\n            {\n               Console::Write( &quot;&lt;{0}:{1}&gt;&quot;, reader-&gt;Prefix, reader-&gt;LocalName );\n               Console::WriteLine( &quot; The namespace URI is {0}&quot;, reader-&gt;NamespaceURI );\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; &amp; _\n                       &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                       &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the XML.  If they exist, display the prefix and  \n            &#39;namespace URI of each node.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.NamespaceURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt; &quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Parse the XML.  If they exist, display the prefix and  \n       //namespace URI of each node.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.Prefix==String.Empty)\n              Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n           else{\n               Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n               Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n           }\n         }\n       }\n       \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadState\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state of the reader.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.ReadState ReadState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_SchemaInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_SchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the schema information that has been assigned to the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> object containing the schema information for the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> interface represents the Post Schema Validation Infoset (PSVI) of the underlying XML node. The PSVI contents of this property are set after the node has been validated.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Value\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the text value of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value returned depends on the <span class=\"xref\">stem.Xml.XmlNodeReader.NodeType*</span> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Value<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The value of the attribute.<br>\n </td></tr><tr><td><code>CDATA</code></td><td> The content of the CDATA section.<br>\n </td></tr><tr><td><code>Comment</code></td><td> The content of the comment.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The internal subset.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The entire content, excluding the target.<br>\n </td></tr><tr><td><code>SignificantWhitespace</code></td><td> The white space between markup in a mixed content model.<br>\n </td></tr><tr><td><code>Text</code></td><td> The content of the text node.<br>\n </td></tr><tr><td><code>Whitespace</code></td><td> The white space between markup.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The content of the declaration.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML and displays each node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create an XmlNodeReader to read the XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(filename);\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n          }           \n        }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;items.xml&quot;;\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create an XmlNodeReader to read the XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( filename );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create an XmlNodeReader to read the XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(filename)\n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_XmlLang\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_XmlLang_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLang</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string XmlLang { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current <code>xml:lang</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property represents the xml:lang scope within which the current node resides. For example, here is an XML fragment with <code>xml:lang</code> set to US English in the root element:  </p>\n<pre><code>&lt;root xml:lang=&quot;en-us&quot;&gt;   \n&lt;name&gt;Fred&lt;/name&gt;   \n&lt;/root&gt;   \n</code></pre><p> When the reader is positioned on the <code>name</code> element, you can use this property to find that it is in the scope of a US English <code>xml:lang</code> attribute.  </p>\n<p> The string returned is also in <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_NameTable_\" data-linktype=\"relative-path\">NameTable</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_XmlSpace\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_XmlSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSpace</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlSpace XmlSpace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> values. If no <code>xml:space</code> scope exists, this property defaults to <code>XmlSpace.None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Close\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlNodeReader.ReadState*</span> to <code>Closed</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method also releases any resources held while reading. If <code>Close</code> has already been called, no action is performed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a file and closes the reader.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create an XmlNodeReader to read the XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(filename);\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n          }           \n        }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;items.xml&quot;;\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create an XmlNodeReader to read the XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( filename );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create an XmlNodeReader to read the XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(filename)\n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_GetAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (int attributeIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlNodeReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method does not move the reader.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method does not move the reader.  </p>\n<p> If the reader is positioned on a <code>DocumentType</code> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader.GetAttribute(&quot;PUBLIC&quot;)</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the ISBN attribute.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.GetAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      // Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the ISBN attribute.\n      reader-&gt;MoveToContent();\n      String^ isbn = reader-&gt;GetAttribute( &quot;ISBN&quot; );\n      Console::WriteLine( &quot;The ISBN value: {0}&quot;, isbn );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.GetAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       // Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the ISBN attribute.\n       reader.MoveToContent();\n       string isbn = reader.GetAttribute(&quot;ISBN&quot;);\n       Console.WriteLine(&quot;The ISBN value: &quot; + isbn);\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.GetAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39; Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the ISBN attribute.\n            reader.MoveToContent()\n            Dim isbn As String = reader.GetAttribute(&quot;ISBN&quot;)\n            Console.WriteLine(&quot;The ISBN value: &quot; &amp; isbn)\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_GetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The following XML contains an attribute in a specific namespace:  </p>\n<pre><code>&lt;test xmlns:dt=&quot;urn:datatypes&quot; dt:type=&quot;int&quot;/&gt;  \n</code></pre><p> You can lookup the <code>dt:type</code> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):  </p>\n<pre><code>String dt = reader.GetAttribute(&quot;dt:type&quot;);  \nString dt2 = reader.GetAttribute(&quot;type&quot;,&quot;urn:datatypes&quot;);  \n</code></pre><p> To lookup the <code>xmlns:dt</code> attribute, use one of the following arguments:  </p>\n<pre><code>String dt3 = reader.GetAttribute(&quot;xmlns:dt&quot;);  \nString dt4 = reader.GetAttribute(&quot;dt&quot;,http://www.w3.org/2000/xmlns/);  \n</code></pre><p> You can also get this information using the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI to which the prefix maps or <code>null</code> if no matching prefix is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> In the following XML string, if the reader is positioned on the <code>href</code> attribute, the prefix <code>a</code> is resolved by calling <code>reader.LookupNamespace(&quot;a&quot;)</code>. The returned string is <code>urn:456</code>.  </p>\n<pre><code>&lt;root xmlns:a=&quot;urn:456&quot;&gt;  \n &lt;item&gt;  \n &lt;ref href=&quot;a:b&quot;/&gt;  \n &lt;/item&gt;  \n&lt;/root&gt;  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void MoveToAttribute (int attributeIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the attributes on the root node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Return the reader to the book element.\n                reader.MoveToElement()\n            End If\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Return the reader to the book element.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> After calling this method, the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> After calling this method, the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToElement\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToElement()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <code>false</code> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: <code>Element</code>, <code>DocumentType</code>, or <code>XmlDeclaration</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the attributes on the root node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Return the reader to the book element.\n                reader.MoveToElement()\n            End If\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Return the reader to the book element.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToFirstAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToFirstAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToFirstAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the first attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToFirstAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an attribute exists (the reader moves to the first attribute); otherwise, <code>false</code> (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET FrameworkFor more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the first attribute of the root node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.MoveToFirstAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the genre attribute.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToFirstAttribute();\n      String^ genre = reader-&gt;Value;\n      Console::WriteLine( &quot;The genre value: {0}&quot;, genre );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.MoveToFirstAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the genre attribute.\n       reader.MoveToContent();\n       reader.MoveToFirstAttribute();\n       string genre=reader.Value;\n       Console.WriteLine(&quot;The genre value: &quot; + genre);\n\n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.MoveToFirstAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; publicationdate=&#39;1987&#39;&gt; &quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the genre attribute.\n            reader.MoveToContent()\n            reader.MoveToFirstAttribute()\n            Dim genre As String = reader.Value\n            Console.WriteLine(&quot;The genre value: &quot; &amp; genre)\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_MoveToNextAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_MoveToNextAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToNextAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the next attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToNextAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there is a next attribute; <code>false</code> if there are no more attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If the current node is not an attribute node, this method is equivalent to <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a>. If <code>MoveToNextAttribute</code> returns <code>true</code>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.MoveToNextAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39;&gt; &quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Read the attributes on the book element.\n       reader.MoveToContent();\n       while (reader.MoveToNextAttribute())\n       {\n         Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n       }\n\n       //Move the reader to the title element.\n       reader.Read();\n\n       //Read the title and price elements.\n       Console.WriteLine(reader.ReadElementString());\n       Console.WriteLine(reader.ReadElementString());\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.MoveToNextAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39;&gt; &quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the attributes on the book element.\n      reader-&gt;MoveToContent();\n      while ( reader-&gt;MoveToNextAttribute() )\n      {\n         Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n      }\n      \n      //Move the reader to the title element.\n      reader-&gt;Read();\n      \n      //Read the title and price elements.\n      Console::WriteLine( reader-&gt;ReadElementString() );\n      Console::WriteLine( reader-&gt;ReadElementString() );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.MoveToNextAttribute Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39;&gt; &quot; &amp; _\n                       &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                       &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the attributes on the book element.\n            reader.MoveToContent()\n            While reader.MoveToNextAttribute()\n                Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n            End While\n            \n            &#39;Move the reader to the title element.\n            reader.Read()\n            \n            &#39;Read the title and price elements.\n            Console.WriteLine(reader.ReadElementString())\n            Console.WriteLine(reader.ReadElementString())\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Read\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next node from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the next node was read successfully; <code>false</code> if there are no more nodes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> When a reader is first created and initialized, there is no information available. You must call <code>Read</code> to read the first node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML and displays each node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {           \n        //Create an XmlNodeReader to read the XmlDocument.\n        XmlDocument doc = new XmlDocument();\n        doc.Load(filename);\n        reader = new XmlNodeReader(doc);\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n          }           \n        }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;items.xml&quot;;\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create an XmlNodeReader to read the XmlDocument.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( filename );\n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;items.xml&quot;\n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        Try\n            &#39;Create an XmlNodeReader to read the XmlDocument.\n            Dim doc As New XmlDocument()\n            doc.Load(filename)\n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the file and display each of the nodes.\n            While reader.Read()\n                Select Case reader.NodeType\n                    Case XmlNodeType.Element\n                        Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                    Case XmlNodeType.Text\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.CDATA\n                        Console.Write(reader.Value)\n                    Case XmlNodeType.ProcessingInstruction\n                        Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n                    Case XmlNodeType.Comment\n                        Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n                    Case XmlNodeType.XmlDeclaration\n                        Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n                    Case XmlNodeType.Document\n                    Case XmlNodeType.EndElement\n                        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n                End Select\n            End While\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlNodeReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadAttributeValue\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAttributeValue()</div>        \r\n          </div>\r\n    \r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool ReadAttributeValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there are nodes to return.  </p>\n<p> <code>false</code> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  </p>\n<p> An empty attribute, such as, <code>misc=&quot;&quot;</code>, returns <code>true</code> with a single node with a value of String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> Use this method after calling <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> to read through the text or entity reference nodes that make up the attribute value. The <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Depth_\" data-linktype=\"relative-path\">Depth</a> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an attribute with text and entity reference nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.ReadAttributeValue Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load an XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;harcover&#39;&gt;]&gt;&quot;\n      &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Create the reader. \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Read the misc attribute. The attribute is parsed into multiple \n      //text and entity reference nodes.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToAttribute( &quot;misc&quot; );\n      while ( reader-&gt;ReadAttributeValue() )\n      {\n         if ( reader-&gt;NodeType == XmlNodeType::EntityReference )\n                  \n         //To expand the entity, call ResolveEntity.\n         Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n         else\n                  Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.ReadAttributeValue Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load an XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;harcover&#39;&gt;]&gt;&quot; +\n                   &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;);\n        \n       //Create the reader. \n       reader = new XmlNodeReader(doc);\n\n       //Read the misc attribute. The attribute is parsed into multiple \n       //text and entity reference nodes.\n       reader.MoveToContent();\n       reader.MoveToAttribute(&quot;misc&quot;);\n       while (reader.ReadAttributeValue()){\n          if (reader.NodeType==XmlNodeType.EntityReference)\n            //To expand the entity, call ResolveEntity.\n            Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name);\n          else\n             Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value);\n        } \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.ReadAttributeValue Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load an XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;harcover&#39;&gt;]&gt;&quot; &amp; _\n                        &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Create the reader. \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Read the misc attribute. The attribute is parsed into multiple \n            &#39;text and entity reference nodes.\n            reader.MoveToContent()\n            reader.MoveToAttribute(&quot;misc&quot;)\n            While reader.ReadAttributeValue()\n                If reader.NodeType = XmlNodeType.EntityReference Then\n                    &#39;To expand the entity, call ResolveEntity.\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name)\n                Else\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value)\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBase64 is not supported on the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method streams the content, decodes the Base64 content, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBase64 returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBase64 is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the BinHex decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBinHex is not supported on the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method streams the content, decodes the BinHex content, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBinHex returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBinHex is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadElementContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method reads the content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a> method except that it can only be called on element node types.  </p>\n<p> If the count value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next ReadElementContentAsBase64 method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> node.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a> to see an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadElementContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the BinHex content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method reads the element content, decodes it using BinHex encoding, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer.  </p>\n<p> This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a> method except that it can only be called on element node types.  </p>\n<p> If the count value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> node.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> to see an example using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ReadString\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ReadString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the contents of an element or text node as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ReadString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  </p>\n<p> <code>Note:</code> The text node can be either an element or an attribute text node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If positioned on an element, <code>ReadString</code> concatenates all text, significant white space, white space, and CData section node types together and returns the concatenated data as the element content. It stops when any markup is encountered. This could occur in a mixed content model, or when an element end tag is read.  </p>\n<p> If positioned on a text-like node, <code>ReadString</code> performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, <code>ReadString</code> has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each of the elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;book&gt;&quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n      &quot;&lt;misc/&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;book&gt;&quot; &amp; _\n                        &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                        &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                        &quot;&lt;misc/&gt;&quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            &#39;Parse the XML and display the text content of each of the elements.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.IsEmptyElement Then\n                        Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n                    Else\n                        Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n                        reader.Read() &#39;Read the start tag.\n                        If (reader.IsStartElement())  &#39;Handle nested elements.\n                          Console.WriteLine()\n                          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                        End If\n                        Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.IsEmptyElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book&gt;&quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                   &quot;&lt;misc/&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                   Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_ResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_ResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveEntity()</div>        \r\n          </div>\r\n    \r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void ResolveEntity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The reader is not positioned on an <code>EntityReference</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If the reader is positioned on an <code>EntityReference</code> node (<code>XmlNodeType.EntityReference</code>), if <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an <code>EndEntity</code> node is returned to close the entity reference scope.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After calling this method, if the entity is part of an attribute value, you must call <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> to step into the entity.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses <code>ResolveEntity</code> to expand a general entity.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.ResolveEntity Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load an XML document. \n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot;\n      &quot;&lt;book&gt;&quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Create the reader.\n      reader = gcnew XmlNodeReader( doc );\n      reader-&gt;MoveToContent(); //Move to the root element.\n      reader-&gt;Read(); //Move to title start tag.\n      reader-&gt;Skip(); //Skip the title element.\n      \n      //Read the misc start tag.  The reader is now positioned on\n      //the entity reference node.\n      reader-&gt;ReadStartElement();\n      \n      //You must call ResolveEntity to expand the entity reference.\n      //The entity replacement text is then parsed and returned as a child node.\n      Console::WriteLine( &quot;Expand the entity...&quot; );\n      reader-&gt;ResolveEntity();\n      Console::WriteLine( &quot;The entity replacement text is returned as a text node.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Value: {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      Console::WriteLine( &quot;An EndEntity node closes the entity reference scope.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Name: {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.ResolveEntity Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load an XML document. \n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; &amp; _\n                        &quot;&lt;book&gt;&quot; &amp; _\n                        &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                        &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot; &amp; _\n                        &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Create the reader.\n            reader = New XmlNodeReader(doc)\n            \n            reader.MoveToContent() &#39;Move to the root element.\n            reader.Read() &#39;Move to title start tag.\n            reader.Skip() &#39;Skip the title element.\n            &#39;Read the misc start tag.  The reader is now positioned on\n            &#39;the entity reference node.\n            reader.ReadStartElement()\n            \n            &#39;You must call ResolveEntity to expand the entity reference.\n            &#39;The entity replacement text is then parsed and returned as a child node.\n            Console.WriteLine(&quot;Expand the entity...&quot;)\n            reader.ResolveEntity()\n            \n            Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;)\n            reader.Read()\n            Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType, reader.Value)\n            \n            Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;)\n            reader.Read()\n            Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType, reader.Name)\n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.ResolveEntity Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n     XmlNodeReader reader = null;\n\n     try\n     {\n       //Create and load an XML document. \n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;&quot; +\n                   &quot;&lt;book&gt;&quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;misc&gt;&amp;h;&lt;/misc&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;); \n\n       //Create the reader.\n       reader = new XmlNodeReader(doc);\n\n       reader.MoveToContent();  //Move to the root element.\n       reader.Read();  //Move to title start tag.\n       reader.Skip();  //Skip the title element.\n      \n       //Read the misc start tag.  The reader is now positioned on\n       //the entity reference node.\n       reader.ReadStartElement(); \n\n       //You must call ResolveEntity to expand the entity reference.\n       //The entity replacement text is then parsed and returned as a child node.\n       Console.WriteLine(&quot;Expand the entity...&quot;);\n       reader.ResolveEntity();  \n\n       Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;);\n       reader.Read();  \n       Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType ,reader.Value);\n\n       Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;);\n       reader.Read();\n       Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType,reader.Name); \n     \n    }\n    finally\n    {\n       if (reader != null)\n         reader.Close();\n    }\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_Skip\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_Skip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Skip()</div>        \r\n          </div>\r\n    \r\n            <p>Skips the children of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Skip ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the recommended practice is to create <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instances using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. This allows you to take full advantage of all the new features introduced in the .NET Framework. For more information, see the Remarks section in the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> For example, suppose you have the following XML input:  </p>\n<pre><code>&lt;a name=&quot;bob&quot; age=&quot;123&quot;&gt;  \n   &lt;x/&gt;abc&lt;y/&gt;  \n &lt;/a&gt;  \n &lt;b&gt;  \n...  \n &lt;/b&gt;  \n</code></pre><p> If the reader is positioned on the &quot;&lt;a&gt;&quot; node or any of its attributes, calling <code>Skip</code> positions the reader to the &quot;&lt;b&gt;&quot; node.  </p>\n<p> If the reader is positioned on a leaf node already (such as element &quot;x&quot; or the text node &quot;abc&quot;), calling <code>Skip</code> is the same as calling <a class=\"xref\" href=\"system.xml.xmlnodereader#System_Xml_XmlNodeReader_Read_\" data-linktype=\"relative-path\">Read</a>.  </p>\n<p> This method checks for well-formed XML.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the price element node in the XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlNodeReader.Skip Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlNodeReader^ reader = nullptr;\n   try\n   {\n      \n      //Create and load the XML document.\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;LoadXml( &quot;&lt;!-- sample XML --&gt;&quot;\n      &quot;&lt;book&gt;&quot;\n      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n      &quot;&lt;price&gt;19.95&lt;/price&gt;&quot;\n      &quot;&lt;/book&gt;&quot; );\n      \n      //Load the XmlNodeReader \n      reader = gcnew XmlNodeReader( doc );\n      reader-&gt;MoveToContent(); //Move to the book node.\n      reader-&gt;Read(); //Read the book start tag.\n      reader-&gt;Skip(); //Skip the title element.\n      Console::WriteLine( reader-&gt;ReadOuterXml() ); //Read the price element.\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlNodeReader.Skip Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlNodeReader reader = null;\n\n    try\n    {\n       //Create and load the XML document.\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;!-- sample XML --&gt;&quot; +\n                   &quot;&lt;book&gt;&quot; +\n                   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;);\n\n       //Load the XmlNodeReader \n       reader = new XmlNodeReader(doc);\n\n       reader.MoveToContent(); //Move to the book node.\n       reader.Read();  //Read the book start tag.\n       reader.Skip();   //Skip the title element.\n\n       Console.WriteLine(reader.ReadOuterXml());  //Read the price element.\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlNodeReader.Skip Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlNodeReader = Nothing\n        \n        Try\n            &#39;Create and load the XML document.\n            Dim doc As New XmlDocument()\n            doc.LoadXml(&quot;&lt;!-- sample XML --&gt;&quot; &amp; _\n                       &quot;&lt;book&gt;&quot; &amp; _\n                       &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                       &quot;&lt;price&gt;19.95&lt;/price&gt;&quot; &amp; _\n                       &quot;&lt;/book&gt;&quot;)\n            \n            &#39;Load the XmlNodeReader \n            reader = New XmlNodeReader(doc)\n            \n            reader.MoveToContent() &#39;Move to the book node.\n            reader.Read() &#39;Read the book start tag.\n            reader.Skip() &#39;Skip the title element.\n            Console.WriteLine(reader.ReadOuterXml()) &#39;Read the price element.\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object that contains the namespaces that are in scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the namespace prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the namespace name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlNodeReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupPrefix(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupPrefix (string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object that identifies the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object that contains the namespace prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlNodeReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlNodeReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.AttributeCount\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.BaseURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.CanReadBinaryContent\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.CanResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Depth\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.EOF\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.HasAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.HasValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.IsDefault\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.IsEmptyElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.MoveToAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.MoveToElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.MoveToFirstAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.MoveToNextAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.NamespaceURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.NameTable\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Read\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadElementContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadElementContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ReadString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.ResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.SchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Skip\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.IXmlNamespaceResolver.GetNamespacesInScope\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.IXmlNamespaceResolver.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.IXmlNamespaceResolver.LookupPrefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.Value\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.XmlLang\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeReader.XmlSpace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1bd2c679-95fa-5388-c4d8-6dc70ae1905b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a reader that provides fast, non-cached forward only access to XML data in an .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlNodeReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlNodeReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlNodeReader.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlNodeReader","System.Xml.XmlNodeReader..ctor","System.Xml.XmlNodeReader.AttributeCount","System.Xml.XmlNodeReader.BaseURI","System.Xml.XmlNodeReader.CanReadBinaryContent","System.Xml.XmlNodeReader.CanResolveEntity","System.Xml.XmlNodeReader.Close","System.Xml.XmlNodeReader.Depth","System.Xml.XmlNodeReader.EOF","System.Xml.XmlNodeReader.GetAttribute","System.Xml.XmlNodeReader.HasAttributes","System.Xml.XmlNodeReader.HasValue","System.Xml.XmlNodeReader.IsDefault","System.Xml.XmlNodeReader.IsEmptyElement","System.Xml.XmlNodeReader.LocalName","System.Xml.XmlNodeReader.LookupNamespace","System.Xml.XmlNodeReader.MoveToAttribute","System.Xml.XmlNodeReader.MoveToElement","System.Xml.XmlNodeReader.MoveToFirstAttribute","System.Xml.XmlNodeReader.MoveToNextAttribute","System.Xml.XmlNodeReader.Name","System.Xml.XmlNodeReader.NamespaceURI","System.Xml.XmlNodeReader.NameTable","System.Xml.XmlNodeReader.NodeType","System.Xml.XmlNodeReader.Prefix","System.Xml.XmlNodeReader.Read","System.Xml.XmlNodeReader.ReadAttributeValue","System.Xml.XmlNodeReader.ReadContentAsBase64","System.Xml.XmlNodeReader.ReadContentAsBinHex","System.Xml.XmlNodeReader.ReadElementContentAsBase64","System.Xml.XmlNodeReader.ReadElementContentAsBinHex","System.Xml.XmlNodeReader.ReadState","System.Xml.XmlNodeReader.ReadString","System.Xml.XmlNodeReader.ResolveEntity","System.Xml.XmlNodeReader.SchemaInfo","System.Xml.XmlNodeReader.Skip","System.Xml.XmlNodeReader.IXmlNamespaceResolver.GetNamespacesInScope","System.Xml.XmlNodeReader.IXmlNamespaceResolver.LookupNamespace","System.Xml.XmlNodeReader.IXmlNamespaceResolver.LookupPrefix","System.Xml.XmlNodeReader.Value","System.Xml.XmlNodeReader.XmlLang","System.Xml.XmlNodeReader.XmlSpace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlNodeReader","System::Xml::XmlNodeReader","System.Xml.XmlNodeReader.#ctor","System::Xml::XmlNodeReader::#ctor","System.Xml.XmlNodeReader.AttributeCount","System::Xml::XmlNodeReader::AttributeCount","System.Xml.XmlNodeReader.BaseURI","System::Xml::XmlNodeReader::BaseURI","System.Xml.XmlNodeReader.CanReadBinaryContent","System::Xml::XmlNodeReader::CanReadBinaryContent","System.Xml.XmlNodeReader.CanResolveEntity","System::Xml::XmlNodeReader::CanResolveEntity","System.Xml.XmlNodeReader.Close","System::Xml::XmlNodeReader::Close","System.Xml.XmlNodeReader.Depth","System::Xml::XmlNodeReader::Depth","System.Xml.XmlNodeReader.EOF","System::Xml::XmlNodeReader::EOF","System.Xml.XmlNodeReader.GetAttribute","System::Xml::XmlNodeReader::GetAttribute","System.Xml.XmlNodeReader.HasAttributes","System::Xml::XmlNodeReader::HasAttributes","System.Xml.XmlNodeReader.HasValue","System::Xml::XmlNodeReader::HasValue","System.Xml.XmlNodeReader.IsDefault","System::Xml::XmlNodeReader::IsDefault","System.Xml.XmlNodeReader.IsEmptyElement","System::Xml::XmlNodeReader::IsEmptyElement","System.Xml.XmlNodeReader.LocalName","System::Xml::XmlNodeReader::LocalName","System.Xml.XmlNodeReader.LookupNamespace","System::Xml::XmlNodeReader::LookupNamespace","System.Xml.XmlNodeReader.MoveToAttribute","System::Xml::XmlNodeReader::MoveToAttribute","System.Xml.XmlNodeReader.MoveToElement","System::Xml::XmlNodeReader::MoveToElement","System.Xml.XmlNodeReader.MoveToFirstAttribute","System::Xml::XmlNodeReader::MoveToFirstAttribute","System.Xml.XmlNodeReader.MoveToNextAttribute","System::Xml::XmlNodeReader::MoveToNextAttribute","System.Xml.XmlNodeReader.Name","System::Xml::XmlNodeReader::Name","System.Xml.XmlNodeReader.NamespaceURI","System::Xml::XmlNodeReader::NamespaceURI","System.Xml.XmlNodeReader.NameTable","System::Xml::XmlNodeReader::NameTable","System.Xml.XmlNodeReader.NodeType","System::Xml::XmlNodeReader::NodeType","System.Xml.XmlNodeReader.Prefix","System::Xml::XmlNodeReader::Prefix","System.Xml.XmlNodeReader.Read","System::Xml::XmlNodeReader::Read","System.Xml.XmlNodeReader.ReadAttributeValue","System::Xml::XmlNodeReader::ReadAttributeValue","System.Xml.XmlNodeReader.ReadContentAsBase64","System::Xml::XmlNodeReader::ReadContentAsBase64","System.Xml.XmlNodeReader.ReadContentAsBinHex","System::Xml::XmlNodeReader::ReadContentAsBinHex","System.Xml.XmlNodeReader.ReadElementContentAsBase64","System::Xml::XmlNodeReader::ReadElementContentAsBase64","System.Xml.XmlNodeReader.ReadElementContentAsBinHex","System::Xml::XmlNodeReader::ReadElementContentAsBinHex","System.Xml.XmlNodeReader.ReadState","System::Xml::XmlNodeReader::ReadState","System.Xml.XmlNodeReader.ReadString","System::Xml::XmlNodeReader::ReadString","System.Xml.XmlNodeReader.ResolveEntity","System::Xml::XmlNodeReader::ResolveEntity","System.Xml.XmlNodeReader.SchemaInfo","System::Xml::XmlNodeReader::SchemaInfo","System.Xml.XmlNodeReader.Skip","System::Xml::XmlNodeReader::Skip","System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System::Xml::XmlNodeReader::System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace","System::Xml::XmlNodeReader::System#Xml#IXmlNamespaceResolver#LookupNamespace","System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix","System::Xml::XmlNodeReader::System#Xml#IXmlNamespaceResolver#LookupPrefix","System.Xml.XmlNodeReader.Value","System::Xml::XmlNodeReader::Value","System.Xml.XmlNodeReader.XmlLang","System::Xml::XmlNodeReader::XmlLang","System.Xml.XmlNodeReader.XmlSpace","System::Xml::XmlNodeReader::XmlSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1bd2c679-95fa-5388-c4d8-6dc70ae1905b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlNodeReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlNodeReader class | Microsoft Docs","_op_ogTitle":"XmlNodeReader class","description":"Represents a reader that provides fast, non-cached forward only access to XML data in an .\n","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlNodeReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlnodereader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlnodereader","fileRelativePath":"System.Xml.XmlNodeReader.html"},"themesRelativePathToOutputRoot":"_themes/"}