{"content":"    \r\n    <h1 id=\"System_Diagnostics_ProcessModule\">\r\n      <span class=\"lang-csharp\">ProcessModule</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a.dll or .exe file that is loaded into a particular process.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.Designer(&quot;System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\npublic class ProcessModule : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ProcessModule</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A module is an executable file or a dynamic link library (DLL). Each process consists of one or more modules. You can use this class to get information about the module.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_BaseAddress\" data-linktype=\"self-bookmark\">BaseAddress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the memory address where the module was loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_EntryPointAddress\" data-linktype=\"self-bookmark\">EntryPointAddress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the memory address for the function that runs when the system loads and runs the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_FileName\" data-linktype=\"self-bookmark\">FileName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the full path to the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_FileVersionInfo\" data-linktype=\"self-bookmark\">FileVersionInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets version information about the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_ModuleMemorySize\" data-linktype=\"self-bookmark\">ModuleMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of memory that is required to load the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_ModuleName\" data-linktype=\"self-bookmark\">ModuleName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the process module.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessModule_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the name of the module to a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_BaseAddress\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_BaseAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseAddress</div>        \r\n          </div>\r\n    \r\n            <p>Gets the memory address where the module was loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr BaseAddress { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The load address of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The <a class=\"xref\" href=\"system.diagnostics.processmodule#System_Diagnostics_ProcessModule_ModuleName_\" data-linktype=\"relative-path\">ModuleName</a> and  BaseAddress properties are used to display the module name and the memory address where each module was loaded.  </p>\n<pre><code class=\"lang-cpp\" name=\"ProcessModule_BaseAddress#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; Object*.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;Base addresses of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the &#39;BaseAddress&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0} : {1}&quot;, myProcessModule-&gt;ModuleName, myProcessModule-&gt;BaseAddress );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the &#39;BaseAddress&#39; of the main module.\n      Console::WriteLine( &quot;The process&#39;s main module&#39;s base address is: {0}&quot;, myProcessModule-&gt;BaseAddress );\n      myProcess-&gt;CloseMainWindow();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessModule_BaseAddress#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;Base addresses of the modules associated &quot; + _\n                              &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;BaseAddress&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName + &quot; : &quot; + _\n                              myProcessModule.BaseAddress.ToString())\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the &#39;BaseAddress&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s base address is: &quot; + _\n                           myProcessModule.BaseAddress.ToString())\n         myProcess.CloseMainWindow()\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessModule_BaseAddress#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();      \n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;Base addresses of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;BaseAddress&#39; of each of the modules.\n         for( int i = 0; i &lt; myProcessModuleCollection.Count; i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName+&quot; : &quot;\n               +myProcessModule.BaseAddress);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         // Display the &#39;BaseAddress&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s base address is: &quot;\n            +myProcessModule.BaseAddress);\n          myProcess.CloseMainWindow();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_EntryPointAddress\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_EntryPointAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryPointAddress</div>        \r\n          </div>\r\n    \r\n            <p>Gets the memory address for the function that runs when the system loads and runs the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr EntryPointAddress { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The entry point of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The module&#39;s entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown. While the entry point is not the address of the DllMain function, it should be close enough for most purposes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Due to changes in the way that Windows loads assemblies, EntryPointAddress will always return 0 on Windows 8 or Windows 8.1 and should not be relied on for those platforms.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The <a class=\"xref\" href=\"system.diagnostics.processmodule#System_Diagnostics_ProcessModule_ModuleName_\" data-linktype=\"relative-path\">ModuleName</a> and EntryPointAddress properties are used to display the name and the entry point address for each module.  </p>\n<pre><code class=\"lang-cpp\" name=\"ProcessModule_EntryPoint#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;Entry point addresses of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the &#39;EntryPointAddress&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0} : {1}&quot;, myProcessModule-&gt;ModuleName, myProcessModule-&gt;EntryPointAddress );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n      Console::WriteLine( &quot;The process&#39;s main module&#39;s EntryPointAddress is: {0}&quot;, myProcessModule-&gt;EntryPointAddress );\n      myProcess-&gt;CloseMainWindow();\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessModule_EntryPoint#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();\n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;Entry point addresses of the modules &quot;\n            +&quot;associated with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;EntryPointAddress&#39; of each of the modules.\n         for( int i = 0; i &lt; myProcessModuleCollection.Count; i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName+&quot; : &quot;\n               +myProcessModule.EntryPointAddress);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s EntryPointAddress is: &quot;\n            +myProcessModule.EntryPointAddress);\n         myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessModule_EntryPoint#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;Entry point addresses of the modules &quot; + _\n                        &quot;associated with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;EntryPointAddress&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName + &quot; : &quot; + _\n                                    myProcessModule.EntryPointAddress.ToString())\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s EntryPointAddress is: &quot; + _\n                              myProcessModule.EntryPointAddress.ToString())\n         myProcess.CloseMainWindow()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_FileName\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_FileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the full path to the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FileName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified path that defines the location of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the file name is longer than the maximum number of characters allowed, the file name is truncated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The <a class=\"xref\" href=\"system.diagnostics.processmodule#System_Diagnostics_ProcessModule_ModuleName_\" data-linktype=\"relative-path\">ModuleName</a> and FileName properties are used to display the module name and the full path information for each module.  </p>\n<pre><code class=\"lang-cs\" name=\"ProcessModule_FileName#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();\n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;File names of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;FileName&#39; of each of the modules.\n         for( int i = 0;i &lt; myProcessModuleCollection.Count; i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName+&quot; : &quot;\n               +myProcessModule.FileName);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         // Display the &#39;FileName&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s FileName is: &quot;\n            +myProcessModule.FileName);\n         myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-cpp\" name=\"ProcessModule_FileName#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;File names of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the &#39;FileName&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0:s} : {1:s}&quot;, myProcessModule-&gt;ModuleName,  myProcessModule-&gt;FileName );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the &#39;FileName&#39; of the main module.\n      Console::WriteLine( &quot;The process&#39;s main module&#39;s FileName is: {0}&quot;, myProcessModule-&gt;FileName );\n      myProcess-&gt;CloseMainWindow();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessModule_FileName#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;File names of the modules associated &quot; + _\n                                 &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;FileName&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName + &quot; : &quot; + myProcessModule.FileName)\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the &#39;FileName&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s FileName is: &quot; + myProcessModule.FileName)\n         myProcess.CloseMainWindow()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_FileVersionInfo\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_FileVersionInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileVersionInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets version information about the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.fileversioninfo\" data-linktype=\"relative-path\">FileVersionInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.fileversioninfo\" data-linktype=\"relative-path\">FileVersionInfo</a> that contains the module&#39;s version information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The <a class=\"xref\" href=\"system.diagnostics.processmodule#System_Diagnostics_ProcessModule_ModuleName_\" data-linktype=\"relative-path\">ModuleName</a> and FileVersionInfo properties are used to display the module name and the file version information for each module.  </p>\n<pre><code class=\"lang-cs\" name=\"ProcessModule_FileVersionInfo#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();\n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;&#39;FileversionInfo&#39; of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;FileVersionInfo&#39; of each of the modules.\n         for( int i = 0;i &lt; myProcessModuleCollection.Count; i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName+&quot; : &quot;\n               +myProcessModule.FileVersionInfo);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         // Display the &#39;FileVersionInfo&#39; of main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s FileVersionInfo is: &quot;\n            +myProcessModule.FileVersionInfo);      \n          myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-cpp\" name=\"ProcessModule_FileVersionInfo#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; Object*.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;&#39;FileversionInfo&#39; of the modules associated with &#39;notepad&#39; are:&quot; );\n      \n      // Display the &#39;FileVersionInfo&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0} : {1}&quot;, myProcessModule-&gt;ModuleName, myProcessModule-&gt;FileVersionInfo );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the &#39;FileVersionInfo&#39; of main module.\n      Console::WriteLine( &quot;The process&#39;s main module&#39;s FileVersionInfo is: {0}&quot;, myProcessModule-&gt;FileVersionInfo );\n      myProcess-&gt;CloseMainWindow();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessModule_FileVersionInfo#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;&#39;FileversionInfo&#39; of the modules associated &quot; + _\n                              &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;FileVersionInfo&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName + &quot; : &quot; + _\n                                    myProcessModule.FileVersionInfo.ToString())\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the &#39;FileVersionInfo&#39; of main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s FileVersionInfo is: &quot; + _\n                              myProcessModule.FileVersionInfo.ToString())\n         myProcess.CloseMainWindow()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_ModuleMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_ModuleMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of memory that is required to load the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ModuleMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bytes, of the memory that the module occupies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ModuleMemorySize does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The <a class=\"xref\" href=\"system.diagnostics.processmodule#System_Diagnostics_ProcessModule_ModuleName_\" data-linktype=\"relative-path\">ModuleName</a> and ModuleMemorySize properties are used to display the module name and the amount of memory needed for each module.  </p>\n<pre><code class=\"lang-vb\" name=\"ProcessModule_ModuleMemorySize#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;Module memory sizes of the modules associated &quot; + _\n                           &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;ModuleMemorySize&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName + &quot; : &quot; + _\n                        myProcessModule.ModuleMemorySize.ToString())\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the &#39;ModuleMemorySize&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s ModuleMemorySize is: &quot; + _\n                              myProcessModule.ModuleMemorySize.ToString())\n         myProcess.CloseMainWindow()\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessModule_ModuleMemorySize#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();      \n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;Module memory sizes of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;ModuleMemorySize&#39; of each of the modules.\n         for( int i=0;i&lt;myProcessModuleCollection.Count;i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName+&quot; : &quot;\n               +myProcessModule.ModuleMemorySize);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;   \n         // Display the &#39;ModuleMemorySize&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module&#39;s ModuleMemorySize is: &quot;\n            +myProcessModule.ModuleMemorySize); \n          myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-cpp\" name=\"ProcessModule_ModuleMemorySize#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; Object*.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;Module memory sizes of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the &#39;ModuleMemorySize&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0} : {1}&quot;, myProcessModule-&gt;ModuleName, myProcessModule-&gt;ModuleMemorySize );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the &#39;ModuleMemorySize&#39; of the main module.\n      Console::WriteLine( &quot;The process&#39;s main module&#39;s ModuleMemorySize is: {0}&quot;, myProcessModule-&gt;ModuleMemorySize );\n      myProcess-&gt;CloseMainWindow();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_ModuleName\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_ModuleName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the process module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ModuleName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the name is longer than the maximum number of characters allowed, it is truncated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The ModuleName property is used to display the name of each module.  </p>\n<pre><code class=\"lang-vb\" name=\"ProcessModule_ModuleName#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;Module names of the modules associated &quot; + _\n                                 &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the &#39;ModuleName&#39; of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModule.ModuleName)\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the &#39;ModuleName&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main moduleName is: &quot; + _\n                                    myProcessModule.ModuleName)\n         myProcess.CloseMainWindow()\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessModule_ModuleName#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();\n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;Module names of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the &#39;ModuleName&#39; of each of the modules.\n         for( int i = 0; i &lt; myProcessModuleCollection.Count; i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModule.ModuleName);\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         // Display the &#39;ModuleName&#39; of the main module.\n         Console.WriteLine(&quot;The process&#39;s main moduleName is: &quot;+myProcessModule.ModuleName);\n         myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-cpp\" name=\"ProcessModule_ModuleName#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;Module names of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the &#39;ModuleName&#39; of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( myProcessModule-&gt;ModuleName );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the &#39;ModuleName&#39; of the main module.\n      Console::WriteLine( &quot;The process&#39;s main moduleName is: {0}&quot;, myProcessModule-&gt;ModuleName );\n      myProcess-&gt;CloseMainWindow();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessModule_ToString\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessModule_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the name of the module to a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Diagnostics.ProcessModule.ModuleName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new process for the Notepad.exe application. The code iterates through the <a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a> class to obtain a <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> object for each module in the collection. The ToString method is used to display the name for each module.  </p>\n<pre><code class=\"lang-cs\" name=\"ProcessModule_ToString#1\">         Process myProcess = new Process();\n         // Get the process start information of notepad.\n         ProcessStartInfo  myProcessStartInfo = new ProcessStartInfo(&quot;notepad.exe&quot;);\n         // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo;\n         // Create a notepad.\n         myProcess.Start();      \n         System.Threading.Thread.Sleep(1000);\n         ProcessModule myProcessModule;\n         // Get all the modules associated with &#39;myProcess&#39;.\n         ProcessModuleCollection myProcessModuleCollection = myProcess.Modules;\n         Console.WriteLine(&quot;ToString properties of the modules associated &quot;\n            +&quot;with &#39;notepad&#39; are:&quot;);\n         // Display the ToString of each of the modules.\n         for( int i=0;i&lt;myProcessModuleCollection.Count;i++)\n         {\n            myProcessModule = myProcessModuleCollection[i];\n            Console.WriteLine(myProcessModuleCollection[i].ModuleName+&quot; : &quot;\n               +myProcessModule.ToString());\n         }\n         // Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule;\n         // Display the ToString of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module is : &quot;+myProcessModule.ToString());\n         myProcess.CloseMainWindow();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessModule_ToString#1\">         Dim myProcess As New Process()\n         &#39; Get the process start information of notepad.\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;notepad.exe&quot;)\n         &#39; Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; object.\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Create a notepad.\n         myProcess.Start()\n         System.Threading.Thread.Sleep(1000)\n         Dim myProcessModule As ProcessModule\n         &#39; Get all the modules associated with &#39;myProcess&#39;.\n         Dim myProcessModuleCollection As ProcessModuleCollection = myProcess.Modules\n         Console.WriteLine(&quot;ToString properties of the modules associated &quot; + _\n                           &quot;with &#39;notepad&#39; are:&quot;)\n         &#39; Display the ToString of each of the modules.\n         Dim i As Integer\n         For i = 0 To myProcessModuleCollection.Count - 1\n            myProcessModule = myProcessModuleCollection(i)\n            Console.WriteLine(myProcessModuleCollection(i).ModuleName + &quot; : &quot; + _\n                              myProcessModule.ToString())\n         Next i\n         &#39; Get the main module associated with &#39;myProcess&#39;.\n         myProcessModule = myProcess.MainModule\n         &#39; Display the ToString of the main module.\n         Console.WriteLine(&quot;The process&#39;s main module is : &quot; + myProcessModule.ToString())\n         myProcess.CloseMainWindow()\n</code></pre><pre><code class=\"lang-cpp\" name=\"ProcessModule_ToString#1\">      Process^ myProcess = gcnew Process;\n\n      // Get the process start information of notepad.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;notepad.exe&quot; );\n\n      // Assign &#39;StartInfo&#39; of notepad to &#39;StartInfo&#39; of &#39;myProcess&#39; Object*.\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n\n      // Create a notepad.\n      myProcess-&gt;Start();\n      System::Threading::Thread::Sleep( 1000 );\n      ProcessModule^ myProcessModule;\n\n      // Get all the modules associated with &#39;myProcess&#39;.\n      ProcessModuleCollection^ myProcessModuleCollection = myProcess-&gt;Modules;\n      Console::WriteLine( &quot;ToString properties of the modules associated with &#39;notepad&#39; are:&quot; );\n\n      // Display the ToString of each of the modules.\n      for ( int i = 0; i &lt; myProcessModuleCollection-&gt;Count; i++ )\n      {\n         myProcessModule = myProcessModuleCollection[ i ];\n         Console::WriteLine( &quot;{0} : {1}&quot;, myProcessModuleCollection[ i ]-&gt;ModuleName, myProcessModule-&gt;ToString() );\n      }\n      myProcessModule = myProcess-&gt;MainModule;\n\n      // Display the ToString of the main module.\n      Console::WriteLine( &quot;The process&#39;s main module is : {0}&quot;, myProcessModule-&gt;ToString() );\n      myProcess-&gt;CloseMainWindow();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.ProcessModule.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.ProcessModule.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.BaseAddress\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.EntryPointAddress\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.FileName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.FileVersionInfo\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.ModuleMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.ModuleName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessModule.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d057fa13-60b0-19dd-c296-d10510905082\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a.dll or .exe file that is loaded into a particular process.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.ProcessModule\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.ProcessModule.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.ProcessModule.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.ProcessModule","System.Diagnostics.ProcessModule.BaseAddress","System.Diagnostics.ProcessModule.EntryPointAddress","System.Diagnostics.ProcessModule.FileName","System.Diagnostics.ProcessModule.FileVersionInfo","System.Diagnostics.ProcessModule.ModuleMemorySize","System.Diagnostics.ProcessModule.ModuleName","System.Diagnostics.ProcessModule.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.ProcessModule","System::Diagnostics::ProcessModule","System.Diagnostics.ProcessModule.BaseAddress","System::Diagnostics::ProcessModule::BaseAddress","System.Diagnostics.ProcessModule.EntryPointAddress","System::Diagnostics::ProcessModule::EntryPointAddress","System.Diagnostics.ProcessModule.FileName","System::Diagnostics::ProcessModule::FileName","System.Diagnostics.ProcessModule.FileVersionInfo","System::Diagnostics::ProcessModule::FileVersionInfo","System.Diagnostics.ProcessModule.ModuleMemorySize","System::Diagnostics::ProcessModule::ModuleMemorySize","System.Diagnostics.ProcessModule.ModuleName","System::Diagnostics::ProcessModule::ModuleName","System.Diagnostics.ProcessModule.ToString","System::Diagnostics::ProcessModule::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d057fa13-60b0-19dd-c296-d10510905082","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/ProcessModule.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ProcessModule class | Microsoft Docs","_op_ogTitle":"ProcessModule class","description":"Represents a.dll or .exe file that is loaded into a particular process.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.ProcessModule","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.processmodule","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.processmodule","fileRelativePath":"System.Diagnostics.ProcessModule.html"},"themesRelativePathToOutputRoot":"_themes/"}