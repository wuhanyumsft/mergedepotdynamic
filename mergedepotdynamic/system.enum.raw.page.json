{"content":"    \r\n    <h1 id=\"System_Enum\">\r\n      <span class=\"lang-csharp\">Enum</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the base class for enumerations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Enum : ValueType, IComparable, IConvertible, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Enum</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An enumeration is a set of named constants whose underlying type is any integral type. If no underlying type is explicitly declared, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> is used. Enum is the base class for all enumerations in the .NET Framework. Enumeration types are defined by the <code>enum</code> keyword in C# and the <code>Enum</code>...<code>End Enum</code> construct in Visual Basic.  </p>\n<p> Enum provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.  </p>\n<p> You can also treat an enumeration as a bit field. For more information, see the <a href=\"#Flags\" data-linktype=\"self-bookmark\">Non-Exclusive Members and the Flags Attribute</a> section and the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> topic.  </p>\n<p> In this topic:  </p>\n<p> <a href=\"#Creating\" data-linktype=\"self-bookmark\">Creating an enumeration type</a><br> <a href=\"#Instantiating\" data-linktype=\"self-bookmark\">Instantiating an enumeration type</a><br> <a href=\"#BestPractices\" data-linktype=\"self-bookmark\">Enumeration best practices</a><br> <a href=\"#Operations\" data-linktype=\"self-bookmark\">Performing operations with enumerations</a><br> <a href=\"#conversions\" data-linktype=\"self-bookmark\">Performing conversions</a><br> <a href=\"#parsing\" data-linktype=\"self-bookmark\">Parsing enumeration values</a><br> <a href=\"#formatting\" data-linktype=\"self-bookmark\">Formatting enumeration values</a><br><a href=\"#iterating\" data-linktype=\"self-bookmark\">Iterating enumeration members</a><br><a href=\"#Flags\" data-linktype=\"self-bookmark\">Non-exclusive members and the Flags attribute</a><br><a href=\"#methods\" data-linktype=\"self-bookmark\">Adding enumeration methods</a>  </p>\n<p><a name=\"Creating\"></a>   </p>\n<h2 id=\"creating-an-enumeration-type\">Creating an enumeration type</h2>\n<p> Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values. The following example illustrates the syntax used by C# and Visual Basic to define an enumeration. It creates an enumeration named <code>ArrivalStatus</code> that has three members: <code>ArrivalStatus.Early</code>, <code>ArrivalStatus.OnTime</code>, and <code>ArrivalStatus.Late</code>. Note that in both cases, the enumeration does not explicitly inherit from Enum; the inheritance relationship is handled implicitly by the compiler.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#1\">public enum ArrivalStatus { Late=-1, OnTime=0, Early=1 };\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#1\">Public Enum ArrivalStatus As Integer\n   Late = -1\n   OnTime = 0\n   Early = 1\nEnd Enum\n</code></pre><div class=\"WARNING\"><h5>Warning</h5><p> You should never create an enumeration type whose underlying type is non-integral or <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.  </p>\n</div>\n<p><a name=\"Instantiating\"></a>   </p>\n<h2 id=\"instantiating-an-enumeration-type\">Instantiating an enumeration type</h2>\n<p> You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration&#39;s constants to it. The following example instantiates an <code>ArrivalStatus</code> whose value is <code>ArrivalStatus.OnTime</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#2\">public class Example\n{\n   public static void Main()\n   {\n      ArrivalStatus status = ArrivalStatus.OnTime;\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status);\n   }\n}\n// The example displays the following output:\n//       Arrival Status: OnTime (0)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#2\">Public Module Example\n   Public Sub Main()\n      Dim status As ArrivalStatus = ArrivalStatus.OnTime\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;        Arrival Status: OnTime (0)\n</code></pre><p> You can also instantiate an enumeration value in the following ways:  </p>\n<ul>\n<li><p>By using a particular programming language&#39;s features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value. The following example creates an <code>ArrivalStatus</code> object whose value is <code>ArrivalStatus.Early</code> in this way.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#4\">      ArrivalStatus status2 = (ArrivalStatus) 1;\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status2);\n      // The example displays the following output:\n      //       Arrival Status: Early (1)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#4\">      Dim status2 As ArrivalStatus = CType(1, ArrivalStatus)\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status2)\n      &#39; The example displays the following output:\n      &#39;       Arrival Status: Early (1)\n</code></pre></li>\n<li><p>By calling its implicit default constructor. As the following example shows, in this case the underlying value of the enumeration instance is 0. However, this is not necessarily the value of a valid constant in the enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#3\">      ArrivalStatus status1 = new ArrivalStatus();\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status1);\n      // The example displays the following output:\n      //       Arrival Status: OnTime (0)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#3\">      Dim status1 As New ArrivalStatus()\n      Console.WriteLine(&quot;Arrival Status: {0} ({0:D})&quot;, status1)\n      &#39; The example displays the following output:\n      &#39;        Arrival Status: OnTime (0)\n</code></pre></li>\n<li><p>By calling the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_\" data-linktype=\"relative-path\">Parse</a> or &lt;xref:System.Enum.TryParse%2A&gt; method to parse a string that contains the name of a constant in the enumeration. For more information, see the <a href=\"#parsing\" data-linktype=\"self-bookmark\">Parsing Enumeration Values</a> section.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.enum#System_Enum_ToObject_\" data-linktype=\"relative-path\">ToObject</a> method to convert an integral value to an enumeration type. For more information, see the <a href=\"#conversions\" data-linktype=\"self-bookmark\">Performing Conversions</a> section.  </p>\n</li>\n</ul>\n<p><a name=\"BestPractices\"></a>   </p>\n<h2 id=\"enumeration-best-practices\">Enumeration best practices</h2>\n<p> We recommend that you use the following best practices when you define enumeration types:  </p>\n<ul>\n<li><p>If you have not defined an enumeration member whose value is 0, consider creating a <code>None</code> enumerated constant. By default, the memory used for the enumeration is initialized to zero by the common language runtime. Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.  </p>\n</li>\n<li><p>If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it. If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.  </p>\n</li>\n<li><p>Do not specify enumerated constants that are reserved for future use.  </p>\n</li>\n<li><p>When you define a method or property that takes an enumerated constant as a value, consider validating the value. The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.  </p>\n<p>Additional best practices for enumeration types whose constants are bit fields are listed in the <a href=\"#Flags\" data-linktype=\"self-bookmark\">Non-Exclusive Members and the Flags Attribute</a> section.  </p>\n</li>\n</ul>\n<p><a name=\"Operations\"></a>   </p>\n<h2 id=\"performing-operations-with-enumerations\">Performing operations with enumerations</h2>\n<p> You cannot define new methods when you are creating an enumeration. However, an enumeration type inherits a complete set of static and instance methods from the Enum class. The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.  </p>\n<p><a name=\"conversions\"></a>   </p>\n<h3 id=\"performing-conversions\">Performing conversions</h3>\n<p> You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator. The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#5\">      int value3 = 2;\n      ArrivalStatus status3 = (ArrivalStatus) value3;\n      \n      int value4 = (int) status3;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#5\">      Dim value3 As Integer = 2\n      Dim status3 As ArrivalStatus = CType(value3, ArrivalStatus)\n      \n      Dim value4 As Integer = CInt(status3)\n</code></pre><p> The Enum class also includes a <a class=\"xref\" href=\"system.enum#System_Enum_ToObject_\" data-linktype=\"relative-path\">ToObject</a> method that converts a value of any integral type to an enumeration value. The following example uses the <a class=\"xref\" href=\"system.enum#System_Enum_ToObject_System_Type_System_Int32_\" data-linktype=\"relative-path\">ToObject(Type,Int32)</a> method to convert an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> to an <code>ArrivalStatus</code> value. Note that, because the <a class=\"xref\" href=\"system.enum#System_Enum_ToObject_\" data-linktype=\"relative-path\">ToObject</a> returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#6\">      int number = -1;\n      ArrivalStatus arrived = (ArrivalStatus) ArrivalStatus.ToObject(typeof(ArrivalStatus), number);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#6\">      Dim number As Integer = -1\n      Dim arrived As ArrivalStatus = CType(ArrivalStatus.ToObject(GetType(ArrivalStatus), number), ArrivalStatus)\n</code></pre><p> When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration. To prevent this, you can pass the integer to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method before performing the conversion. The following example uses this method to determine whether the elements in an array of integer values can be converted to <code>ArrivalStatus</code> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.Class#7\">Public Enum ArrivalStatus As Integer\n   Unknown = -3\n   Late = -1\n   OnTime = 0\n   Early = 1\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim values() As Integer = { -3, -1, 0, 1, 5, Int32.MaxValue }\n      For Each value In values\n         Dim status As ArrivalStatus\n         If [Enum].IsDefined(GetType(ArrivalStatus), value)\n            status = CType(value, ArrivalStatus) \n         Else\n            status = ArrivalStatus.Unknown\n         End If\n         Console.WriteLine(&quot;Converted {0:N0} to {1}&quot;, value, status)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted -3 to Unknown\n&#39;       Converted -1 to Late\n&#39;       Converted 0 to OnTime\n&#39;       Converted 1 to Early\n&#39;       Converted 5 to Unknown\n&#39;       Converted 2,147,483,647 to Unknown\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.Class#7\">using System;\n\npublic enum ArrivalStatus { Unknown=-3, Late=-1, OnTime=0, Early=1 };\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] values = { -3, -1, 0, 1, 5, Int32.MaxValue };\n      foreach (var value in values)\n      {\n         ArrivalStatus status;\n         if (Enum.IsDefined(typeof(ArrivalStatus), value))\n            status = (ArrivalStatus) value;\n         else\n            status = ArrivalStatus.Unknown;\n         Console.WriteLine(&quot;Converted {0:N0} to {1}&quot;, value, status);\n      }\n   }\n}\n// The example displays the following output:\n//       Converted -3 to Unknown\n//       Converted -1 to Late\n//       Converted 0 to OnTime\n//       Converted 1 to Early\n//       Converted 5 to Unknown\n//       Converted 2,147,483,647 to Unknown\n</code></pre><p> Although the Enum class provides explicit interface implementations of the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface for converting from an enumeration value to an integral type, you should use the methods of the <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> class, such as <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a>, to perform these conversions. The following example illustrates how you can use the <a class=\"xref\" href=\"system.enum#System_Enum_GetUnderlyingType_\" data-linktype=\"relative-path\">GetUnderlyingType</a> method along with the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method to convert an enumeration value to its underlying type. Note that this example does not require the underlying type of the enumeration to be known at compile time.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#8\">      ArrivalStatus status = ArrivalStatus.Early;\n      var number = Convert.ChangeType(status, Enum.GetUnderlyingType(typeof(ArrivalStatus)));\n      Console.WriteLine(&quot;Converted {0} to {1}&quot;, status, number);\n      // The example displays the following output:\n      //       Converted Early to 1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#8\">      Dim status As ArrivalStatus = ArrivalStatus.Early\n      Dim number = Convert.ChangeType(status, [Enum].GetUnderlyingType(GetType(ArrivalStatus)))\n      Console.WriteLine(&quot;Converted {0} to {1}&quot;, status, number)\n      &#39; The example displays the following output:\n      &#39;       Converted Early to 1\n</code></pre><p><a name=\"parsing\"></a>   </p>\n<h3 id=\"parsing-enumeration-values\">Parsing enumeration values</h3>\n<p> The <a class=\"xref\" href=\"system.enum#System_Enum_Parse_\" data-linktype=\"relative-path\">Parse</a> and &lt;xref:System.Enum.TryParse%2A&gt; methods allow you to convert the string representation of an enumeration value to that value. The string representation can be either the name or the underlying value of an enumeration constant. Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration&#39;s underlying type. To prevent this, the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method can be called to ensure that the result of the parsing method is a valid enumeration value. The example illustrates this approach and demonstrates calls to both the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_System_Type_System_String_\" data-linktype=\"relative-path\">Parse(Type,String)</a> and <a class=\"xref\" href=\"system.enum#System_Enum_TryParse__1_System_String___0__\" data-linktype=\"relative-path\">System.Enum.TryParse&lt;TEnum&gt;(String,TEnum)</a> methods. Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#9\">      string number = &quot;-1&quot;;\n      string name = &quot;Early&quot;;\n      \n      try {\n         ArrivalStatus status1 = (ArrivalStatus) Enum.Parse(typeof(ArrivalStatus), number);\n         if (!(Enum.IsDefined(typeof(ArrivalStatus), status1)))\n            status1 = ArrivalStatus.Unknown;\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, number, status1);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to an ArrivalStatus value.&quot;, \n                           number);\n      }   \n         \n      ArrivalStatus status2;\n      if (Enum.TryParse&lt;ArrivalStatus&gt;(name, out status2)) {\n         if (!(Enum.IsDefined(typeof(ArrivalStatus), status2)))\n            status2 = ArrivalStatus.Unknown;\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, name, status2);\n      }\n      else {\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to an ArrivalStatus value.&quot;, \n                           number);\n      }\n      // The example displays the following output:\n      //       Converted &#39;-1&#39; to Late\n      //       Converted &#39;Early&#39; to Early\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#9\">      Dim number As String = &quot;-1&quot;\n      Dim name As String = &quot;Early&quot;\n      Dim invalid As String = &quot;32&quot;\n      \n      Try \n         Dim status1 As ArrivalStatus = CType([Enum].Parse(GetType(ArrivalStatus), number), ArrivalStatus)\n         If Not [Enum].IsDefined(GetType(ArrivalStatus), status1) Then status1 = ArrivalStatus.Unknown\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, number, status1)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to an ArrivalStatus value.&quot;, \n                           number)\n      End Try   \n         \n      Dim status2 As ArrivalStatus\n      If [Enum].TryParse(Of ArrivalStatus)(name, status2) Then\n         If Not [Enum].IsDefined(GetType(ArrivalStatus), status2) Then status2 = ArrivalStatus.Unknown\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, name, status2)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to an ArrivalStatus value.&quot;, \n                           number)\n      End If\n      &#39; The example displays the following output:\n      &#39;       Converted &#39;-1&#39; to Late\n      &#39;       Converted &#39;Early&#39; to Early\n</code></pre><p><a name=\"formatting\"></a>   </p>\n<h3 id=\"formatting-enumeration-values\">Formatting enumeration values</h3>\n<p> You can convert enumeration values to their string representations by calling the static <a class=\"xref\" href=\"system.enum#System_Enum_Format_\" data-linktype=\"relative-path\">Format</a> method, as well as the overloads of the instance <a class=\"xref\" href=\"system.enum#System_Enum_ToString_\" data-linktype=\"relative-path\">ToString</a> method. You can use a format string to control the precise way in which an enumeration value is represented as a string. For more information, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>. The following example uses each of the supported enumeration format strings (&quot;G&quot; or &quot;g&quot;, &quot;D&quot; or &quot;d&quot;, &quot;X&quot; or &quot;x&quot;, and &quot;F&quot; or &quot;f&quot; ) to convert a member of the <code>ArrivalStatus</code> enumeration to its string representations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#10\">      string[] formats= { &quot;G&quot;, &quot;F&quot;, &quot;D&quot;, &quot;X&quot;};\n      ArrivalStatus status = ArrivalStatus.Late;\n      foreach (var fmt in formats)\n         Console.WriteLine(status.ToString(fmt));\n\n      // The example displays the following output:\n      //       Late\n      //       Late\n      //       -1\n      //       FFFFFFFF\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#10\">      Dim formats() As String = { &quot;G&quot;, &quot;F&quot;, &quot;D&quot;, &quot;X&quot;}\n      Dim status As ArrivalStatus = ArrivalStatus.Late\n      For Each fmt As String In formats\n         Console.WriteLine(status.ToString(fmt))\n      Next\n      &#39; The example displays the following output:\n      &#39;       Late\n      &#39;       Late\n      &#39;       -1\n      &#39;       FFFFFFFF\n</code></pre><p><a name=\"iterating\"></a>   </p>\n<h3 id=\"iterating-enumeration-members\">Iterating enumeration members</h3>\n<p> The Enum type does not implement the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> or <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface, which would enable you to iterate members of a collection by using a <code>foreach</code> (in C#) or <code>For Each</code> (in Visual Basic) construct. However, you can enumerate members in either of two ways.  </p>\n<ul>\n<li><p>You can call the <a class=\"xref\" href=\"system.enum#System_Enum_GetNames_\" data-linktype=\"relative-path\">GetNames</a> method to retrieve a string array containing the names of the enumeration members. Next, for each element of the string array, you can call the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_\" data-linktype=\"relative-path\">Parse</a> method to convert the string to its equivalent enumeration value. The following example illustrates this approach.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.Class#11\">      Dim names() As String = [Enum].GetNames(GetType(ArrivalStatus))\n      Console.WriteLine(&quot;Members of {0}:&quot;, GetType(ArrivalStatus).Name)\n      Array.Sort(names)\n      For Each name In names\n         Dim status As ArrivalStatus = CType([Enum].Parse(GetType(ArrivalStatus), name),\n                                       ArrivalStatus)\n         Console.WriteLine(&quot;   {0} ({0:D})&quot;, status)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Members of ArrivalStatus:\n      &#39;          Early (1)\n      &#39;          Late (-1)\n      &#39;          OnTime (0)\n      &#39;          Unknown (-3)      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.Class#11\">      string[] names = Enum.GetNames(typeof(ArrivalStatus));\n      Console.WriteLine(&quot;Members of {0}:&quot;, typeof(ArrivalStatus).Name);\n      Array.Sort(names);\n      foreach (var name in names) {\n         ArrivalStatus status = (ArrivalStatus) Enum.Parse(typeof(ArrivalStatus), name);\n         Console.WriteLine(&quot;   {0} ({0:D})&quot;, status);\n      }\n      // The example displays the following output:\n      //       Members of ArrivalStatus:\n      //          Early (1)\n      //          Late (-1)\n      //          OnTime (0)\n      //          Unknown (-3)      \n</code></pre></li>\n<li><p>You can call the <a class=\"xref\" href=\"system.enum#System_Enum_GetValues_\" data-linktype=\"relative-path\">GetValues</a> method to retrieve an array that contains the underlying values in the enumeration. Next, for each element of the array, you can call the <a class=\"xref\" href=\"system.enum#System_Enum_ToObject_\" data-linktype=\"relative-path\">ToObject</a> method to convert the integer to its equivalent enumeration value. The following example illustrates this approach.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.Class#12\">      Dim values = [Enum].GetValues(GetType(ArrivalStatus))\n      Console.WriteLine(&quot;Members of {0}:&quot;, GetType(ArrivalStatus).Name)\n      For Each value In values\n         Dim status As ArrivalStatus = CType([Enum].ToObject(GetType(ArrivalStatus), value),\n                                             ArrivalStatus)\n         Console.WriteLine(&quot;   {0} ({0:D})&quot;, status)\n      Next                                       \n      &#39; The example displays the following output:\n      &#39;       Members of ArrivalStatus:\n      &#39;          OnTime (0)\n      &#39;          Early (1)\n      &#39;          Unknown (-3)\n      &#39;          Late (-1)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.Class#12\">      var values = Enum.GetValues(typeof(ArrivalStatus));\n      Console.WriteLine(&quot;Members of {0}:&quot;, typeof(ArrivalStatus).Name);\n      foreach (var value in values) {\n         ArrivalStatus status = (ArrivalStatus) Enum.ToObject(typeof(ArrivalStatus), value);\n         Console.WriteLine(&quot;   {0} ({0:D})&quot;, status);\n      }                                       \n      // The example displays the following output:\n      //       Members of ArrivalStatus:\n      //          OnTime (0)\n      //          Early (1)\n      //          Unknown (-3)\n      //          Late (-1)\n</code></pre></li>\n</ul>\n<p><a name=\"Flags\"></a>   </p>\n<h2 id=\"non-exclusive-members-and-the-flags-attribute\">Non-exclusive members and the Flags attribute</h2>\n<p> One common use of an enumeration is to represent a set of mutually exclusive values. For example, an <code>ArrivalStatus</code> instance can have a value of <code>Early</code>, <code>OnTime</code>, or <code>Late</code>. It makes no sense for the value of an <code>ArrivalStatus</code> instance to reflect more than one enumeration constant.  </p>\n<p> In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value. The <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute can be used to indicate that the enumeration consists of bit fields. For example, an enumeration named <code>Pets</code> might be used to indicate the kinds of pets in a household. It can be defined as follows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#13\">[Flags] public enum Pets { None=0, Dog=1, Cat=2, Bird=4, Rodent=8,\n                           Reptile=16, Other=32 };\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#13\">&lt;Flags&gt; Public Enum Pets As Integer\n   None = 0\n   Dog = 1\n   Cat = 2\n   Bird = 4\n   Rodent = 8\n   Reptile = 16\n   Other = 32\nEnd Enum\n</code></pre><p> The <code>Pets</code> enumeration can then be used as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#14\">      Pets familyPets = Pets.Dog | Pets.Cat;\n      Console.WriteLine(&quot;Pets: {0:G} ({0:D})&quot;, familyPets);\n      // The example displays the following output:\n      //       Pets: Dog, Cat (3)      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#14\">      Dim familyPets As Pets = Pets.Dog Or Pets.Cat\n      Console.WriteLine(&quot;Pets: {0:G} ({0:D})&quot;, familyPets)\n      &#39; The example displays the following output:\n      &#39;       Pets: Dog, Cat (3)      \n</code></pre><p> The following best practices should be used when defining a bitwise enumeration and applying the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute.  </p>\n<ul>\n<li><p>Use the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.  </p>\n</li>\n<li><p>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on. This means the individual flags in combined enumeration constants do not overlap.  </p>\n</li>\n<li><p>Consider creating an enumerated constant for commonly used flag combinations. For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <code>Read = 1</code> and <code>Write = 2</code>, consider creating the enumerated constant <code>ReadWrite = Read OR Write</code>, which combines the <code>Read</code> and <code>Write</code> flags. In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.  </p>\n</li>\n<li><p>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.  </p>\n</li>\n<li><p>A convenient way to test whether a flag is set in a numeric value is to call the instance <a class=\"xref\" href=\"system.enum#System_Enum_HasFlag_\" data-linktype=\"relative-path\">HasFlag</a> method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#15\">      Pets familyPets = Pets.Dog | Pets.Cat;\n      if (familyPets.HasFlag(Pets.Dog))\n         Console.WriteLine(&quot;The family has a dog.&quot;);\n      // The example displays the following output:\n      //       The family has a dog.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#15\">      Dim familyPets As Pets = Pets.Dog Or Pets.Cat\n      If familyPets.HasFlag(Pets.Dog) Then\n         Console.WriteLine(&quot;The family has a dog.&quot;)\n      End If\n      &#39; The example displays the following output:\n      &#39;       The family has a dog.      \n</code></pre><p> It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant. This is illustrated in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#16\">      Pets familyPets = Pets.Dog | Pets.Cat;\n      if ((familyPets &amp; Pets.Dog) == Pets.Dog)\n         Console.WriteLine(&quot;The family has a dog.&quot;);\n      // The example displays the following output:\n      //       The family has a dog.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#16\">      Dim familyPets As Pets = Pets.Dog Or Pets.Cat\n      If familyPets And Pets.Dog = Pets.Dog Then\n         Console.WriteLine(&quot;The family has a dog.&quot;)\n      End If   \n      &#39; The example displays the following output:\n      &#39;       The family has a dog.      \n</code></pre></li>\n<li><p>Use <code>None</code> as the name of the flag enumerated constant whose value is zero. You cannot use the <code>None</code> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the <code>None</code> enumerated constant to determine whether any bits in the numeric value are set. This is illustrated in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#17\">      Pets familyPets = Pets.Dog | Pets.Cat;\n      if (familyPets == Pets.None)\n         Console.WriteLine(&quot;The family has no pets.&quot;);\n      else\n         Console.WriteLine(&quot;The family has pets.&quot;);   \n      // The example displays the following output:\n      //       The family has pets.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#17\">      Dim familyPets As Pets = Pets.Dog Or Pets.Cat\n      If familyPets = Pets.None Then\n         Console.WriteLine(&quot;The family has no pets.&quot;)\n      Else\n         Console.WriteLine(&quot;The family has pets.&quot;)   \n      End If\n      &#39; The example displays the following output:\n      &#39;       The family has pets.      \n</code></pre></li>\n<li><p>Do not define an enumeration value solely to mirror the state of the enumeration itself. For example, do not define an enumerated constant that merely marks the end of the enumeration. If you need to determine the last value of the enumeration, check for that value explicitly. In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.  </p>\n</li>\n</ul>\n<p><a name=\"methods\"></a>   </p>\n<h2 id=\"adding-enumeration-methods\">Adding enumeration methods</h2>\n<p> Because enumeration types are defined by language structures, such as <code>enum</code> (C#) and <code>Enum</code> (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the Enum class.  However, you can use extension methods to add functionality to a particular enumeration type.  </p>\n<p> In the following example, the <code>Grades</code> enumeration represents the possible letter grades that a student may receive in a class. An extension method named <code>Passing</code> is added to the <code>Grades</code> type so that each instance of that type now &quot;knows&quot; whether it represents a passing grade or not.       The <code>Extensions</code> class also contains a static read-write variable that defines the minimum passing grade. The return value of the <code>Passing</code> extension method reflects the current value of that variable.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Class#18\">using System;\n\n// Define an enumeration to represent student grades.\npublic enum Grades { F = 0, D = 1, C = 2, B = 3, A = 4 };\n\n// Define an extension method for the Grades enumeration.\npublic static class Extensions\n{        \n  public static Grades minPassing = Grades.D;\n\n  public static bool Passing(this Grades grade)\n  {\n      return grade &gt;= minPassing;\n  }\n}\n\nclass Example\n{       \n  static void Main()\n  {\n      Grades g1 = Grades.D;\n      Grades g2 = Grades.F;\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, g1, g1.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, g2, g2.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n\n      Extensions.minPassing = Grades.C;\n      Console.WriteLine(&quot;\\nRaising the bar!\\n&quot;);\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, g1, g1.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, g2, g2.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n  }\n}\n// The exmaple displays the following output:\n//       D is a passing grade.\n//       F is not a passing grade.\n//       \n//       Raising the bar!\n//       \n//       D is not a passing grade.\n//       F is not a passing grade.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Class#18\">Imports System.Runtime.CompilerServices\n\n&#39; Define an enumeration to represent student grades.\nPublic Enum Grades As Integer\n   F = 0\n   D = 1\n   C = 2\n   B = 3\n   A = 4\nEnd Enum   \n\n&#39; Define an extension method for the Grades enumeration.\nPublic Module Extensions\n  Public minPassing As Grades = Grades.D\n \n  &lt;Extension&gt;\n  Public Function Passing(grade As Grades) As Boolean\n     Return grade &gt;= minPassing\n  End Function\nEnd Module\n\nPublic Module Example\n  Public Sub Main()\n      Dim g1 As Grades = Grades.D\n      Dim g2 As Grades = Grades.F\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, \n                        g1, If(g1.Passing(), &quot;is&quot;, &quot;is not&quot;))\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, \n                        g2, If(g2.Passing(), &quot;is&quot;, &quot;is not&quot;))\n      Console.WriteLine()\n      \n      Extensions.minPassing = Grades.C\n      Console.WriteLine(&quot;Raising the bar!&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, \n                        g1, If(g1.Passing(), &quot;is&quot;, &quot;is not&quot;))\n      Console.WriteLine(&quot;{0} {1} a passing grade.&quot;, \n                        g2, If(g2.Passing(), &quot;is&quot;, &quot;is not&quot;))\n  End Sub\nEnd Module\n&#39; The exmaple displays the following output:\n&#39;       D is a passing grade.\n&#39;       F is not a passing grade.\n&#39;       \n&#39;       Raising the bar!\n&#39;       \n&#39;       D is not a passing grade.\n&#39;       F is not a passing grade.\n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum__ctor\" data-linktype=\"self-bookmark\">Enum()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_Format_System_Type_System_Object_System_String_\" data-linktype=\"self-bookmark\">Format(Type,Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the value of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetName_System_Type_System_Object_\" data-linktype=\"self-bookmark\">GetName(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of the constant in the specified enumeration that has the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetNames_System_Type_\" data-linktype=\"self-bookmark\">GetNames(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the names of the constants in a specified enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type code of the underlying type of this enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetUnderlyingType_System_Type_\" data-linktype=\"self-bookmark\">GetUnderlyingType(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying type of the specified enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_GetValues_System_Type_\" data-linktype=\"self-bookmark\">GetValues(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the values of the constants in a specified enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_HasFlag_System_Enum_\" data-linktype=\"self-bookmark\">HasFlag(Enum)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether one or more bit fields are set in the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_IsDefined_System_Type_System_Object_\" data-linktype=\"self-bookmark\">IsDefined(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an indication whether a constant with a specified value exists in a specified enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_Parse_System_Type_System_String_\" data-linktype=\"self-bookmark\">Parse(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_Parse_System_Type_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Parse(Type,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_Byte_\" data-linktype=\"self-bookmark\">ToObject(Type,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 8-bit unsigned integer to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_Int16_\" data-linktype=\"self-bookmark\">ToObject(Type,Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 16-bit signed integer to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_Int32_\" data-linktype=\"self-bookmark\">ToObject(Type,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 32-bit signed integer to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_Int64_\" data-linktype=\"self-bookmark\">ToObject(Type,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 64-bit signed integer to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_Object_\" data-linktype=\"self-bookmark\">ToObject(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified object with an integer value to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_SByte_\" data-linktype=\"self-bookmark\">ToObject(Type,SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 8-bit signed integer value to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_UInt16_\" data-linktype=\"self-bookmark\">ToObject(Type,UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 16-bit unsigned integer value to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_UInt32_\" data-linktype=\"self-bookmark\">ToObject(Type,UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 32-bit unsigned integer value to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToObject_System_Type_System_UInt64_\" data-linktype=\"self-bookmark\">ToObject(Type,UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 64-bit unsigned integer value to an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method overload is obsolete; use <a class=\"xref\" href=\"system.enum#System_Enum_ToString\" data-linktype=\"relative-path\">ToString()</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to its equivalent string representation using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method overload is obsolete; use <span class=\"xref\">stem.Enum.ToString(System.String)</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_TryParse__1_System_String___0__\" data-linktype=\"self-bookmark\">TryParse&lt;TEnum&gt;(String,TEnum)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_TryParse__1_System_String_System_Boolean___0__\" data-linktype=\"self-bookmark\">TryParse&lt;TEnum&gt;(String,Boolean,TEnum)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a Boolean value based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to an 8-bit unsigned integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a Unicode character based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a double-precision floating point number based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 16-bit signed integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 32-bit signed integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 64-bit signed integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to an 8-bit signed integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a single-precision floating-point number based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a specified type based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 16-bit unsigned integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 32-bit unsigned integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Enum_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the current value to a 64-bit unsigned integer based on the underlying type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Enum__ctor\">\r\n    \r\n            <a id=\"System_Enum__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enum()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Enum ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Enum_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number that indicates the relative values of this instance and <code>target</code>.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The value of this instance is less than the value of <code>target</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The value of this instance is equal to the value of <code>target</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The value of this instance is greater than the value of <code>target</code>.<br>\n -or-<br>\n <code>target</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> and this instance are not the same type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This instance is not type <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, or <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>CompareTo</code> in the context of <code>Enum</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"enumcompareto#1\">using namespace System;\n\npublic enum class VehicleDoors\n{\n   Motorbike = 0,\n   Sportscar = 2,\n   Sedan = 4,\n   Hatchback = 5\n};\n\nint main()\n{\n   VehicleDoors myVeh = VehicleDoors::Sportscar;\n   VehicleDoors yourVeh = VehicleDoors::Motorbike;\n   VehicleDoors otherVeh = VehicleDoors::Sedan;\n   Console::WriteLine(  &quot;Does a {0} have more doors than a {1}?&quot;, myVeh, yourVeh );\n   Int32 iRes = myVeh.CompareTo( yourVeh );\n   Console::WriteLine(  &quot;{0}{1}&quot;, iRes &gt; 0 ? (String^)&quot;Yes&quot; : &quot;No&quot;, Environment::NewLine );\n   Console::WriteLine(  &quot;Does a {0} have more doors than a {1}?&quot;, myVeh, otherVeh );\n   iRes = myVeh.CompareTo( otherVeh );\n   Console::WriteLine(  &quot;{0}&quot;, iRes &gt; 0 ? (String^)&quot;Yes&quot; : &quot;No&quot; );\n}\n// The example displays the following output:\n//       Does a Sportscar have more doors than a Motorbike?\n//       Yes\n//       \n//       Does a Sportscar have more doors than a Sedan?\n//       No\n</code></pre><pre><code class=\"lang-vb\" name=\"enumcompareto#1\">Public Class CompareToTest\n    Enum VehicleDoors\n        Motorbike = 0\n        Sportscar = 2\n        Sedan = 4\n        Hatchback = 5\n    End Enum\n    \n    Public Shared Sub Main()\n        Dim myVeh As VehicleDoors = VehicleDoors.Sportscar\n        Dim yourVeh As VehicleDoors = VehicleDoors.Motorbike\n        Dim otherVeh As VehicleDoors = VehicleDoors.Sedan\n        \n        Dim output as String\n\n        If myVeh.CompareTo(yourVeh) &gt; 0 Then output = &quot;Yes&quot; Else output = &quot;No&quot;\n        Console.WriteLine(&quot;Does a {0} have more doors than a {1}?&quot;, myVeh, yourVeh)\n        Console.WriteLine(&quot;{0}{1}&quot;, output, Environment.NewLine)\n        \n        Console.WriteLine(&quot;Does a {0} have more doors than a {1}?&quot;, myVeh, otherVeh)\n        If myVeh.CompareTo(otherVeh) &gt; 0 Then output = &quot;Yes&quot; Else output = &quot;No&quot;\n        Console.WriteLine(&quot;{0}&quot;, output)\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Does a Sportscar have more doors than a Motorbike?\n&#39;       Yes\n&#39;       \n&#39;       Does a Sportscar have more doors than a Sedan?\n&#39;       No\n</code></pre><pre><code class=\"lang-cs\" name=\"enumcompareto#1\">using System;\n\npublic class CompareToTest {\n    enum VehicleDoors { Motorbike = 0, Sportscar = 2, Sedan = 4, Hatchback = 5 };\n\n    public static void Main() {\n        VehicleDoors myVeh = VehicleDoors.Sportscar;\n        VehicleDoors yourVeh = VehicleDoors.Motorbike;\n        VehicleDoors otherVeh = VehicleDoors.Sedan;\n\n        Console.WriteLine(&quot;Does a {0} have more doors than a {1}?&quot;, myVeh, yourVeh);\n        Console.WriteLine( &quot;{0}{1}&quot;, myVeh.CompareTo(yourVeh) &gt; 0 ? &quot;Yes&quot; : &quot;No&quot;, Environment.NewLine );\n\n        Console.WriteLine(&quot;Does a {0} have more doors than a {1}?&quot;, myVeh, otherVeh);\n        Console.WriteLine( &quot;{0}&quot;, myVeh.CompareTo(otherVeh) &gt; 0 ? &quot;Yes&quot; : &quot;No&quot; );\n    }\n}\n// The example displays the following output:\n//       Does a Sportscar have more doors than a Motorbike?\n//       Yes\n//       \n//       Does a Sportscar have more doors than a Sedan?\n//       No\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Enum_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equals method overrides <a class=\"xref\" href=\"system.valuetype#System_ValueType_Equals_System_Object_\" data-linktype=\"relative-path\">System.ValueType.Equals(Object)</a> to define how enumeration members are evaluated for equality.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the Equals method.  </p>\n<pre><code class=\"lang-cs\" name=\"enumequals#1\">using System;\n\npublic class EqualsTest {\n    enum Colors { Red, Green, Blue, Yellow };\n    enum Mammals { Cat, Dog, Horse, Dolphin };\n\n    public static void Main() {\n        Mammals myPet = Mammals.Cat;\n        Colors myColor = Colors.Red;\n        Mammals yourPet = Mammals.Dog;\n        Colors yourColor = Colors.Red;\n\n        Console.WriteLine(&quot;My favorite animal is a {0}&quot;, myPet);\n        Console.WriteLine(&quot;Your favorite animal is a {0}&quot;, yourPet);\n        Console.WriteLine(&quot;Do we like the same animal? {0}&quot;, myPet.Equals(yourPet) ? &quot;Yes&quot; : &quot;No&quot;);\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;My favorite color is {0}&quot;, myColor);\n        Console.WriteLine(&quot;Your favorite color is {0}&quot;, yourColor);\n        Console.WriteLine(&quot;Do we like the same color? {0}&quot;, myColor.Equals(yourColor) ? &quot;Yes&quot; : &quot;No&quot;);\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;The value of my color ({0}) is {1}&quot;, myColor, Enum.Format(typeof(Colors), myColor, &quot;d&quot;));\n        Console.WriteLine(&quot;The value of my pet (a {0}) is {1}&quot;, myPet, Enum.Format(typeof(Mammals), myPet, &quot;d&quot;));\n        Console.WriteLine(&quot;Even though they have the same value, are they equal? {0}&quot;, \n                    myColor.Equals(myPet) ? &quot;Yes&quot; : &quot;No&quot;);\n    }\n}\n// The example displays the following output:\n//    My favorite animal is a Cat\n//    Your favorite animal is a Dog\n//    Do we like the same animal? No\n//    \n//    My favorite color is Red\n//    Your favorite color is Red\n//    Do we like the same color? Yes\n//    \n//    The value of my color (Red) is 0\n//    The value of my pet (a Cat) is 0\n//    Even though they have the same value, are they equal? No\n</code></pre><pre><code class=\"lang-vb\" name=\"enumequals#1\">Public Class EqualsTest\n    Enum Colors\n        Red\n        Green\n        Blue\n        Yellow\n    End Enum \n    \n    Enum Mammals\n        Cat\n        Dog\n        Horse\n        Dolphin\n    End Enum \n    \n    Public Shared Sub Main()\n        Dim myPet As Mammals = Mammals.Cat\n        Dim myColor As Colors = Colors.Red\n        Dim yourPet As Mammals = Mammals.Dog\n        Dim yourColor As Colors = Colors.Red\n        Dim output as string\n        \n        Console.WriteLine(&quot;My favorite animal is a {0}&quot;, myPet)\n        Console.WriteLine(&quot;Your favorite animal is a {0}&quot;, yourPet)\n        If myPet.Equals(yourPet) Then output = &quot;Yes&quot; Else output = &quot;No&quot;\n        Console.WriteLine(&quot;Do we like the same animal? {0}&quot;, output)\n        \n        Console.WriteLine()\n        Console.WriteLine(&quot;My favorite color is {0}&quot;, myColor)\n        Console.WriteLine(&quot;Your favorite color is {0}&quot;, yourColor)\n        If myColor.Equals(yourColor) Then output = &quot;Yes&quot; Else output = &quot;No&quot;\n        Console.WriteLine(&quot;Do we like the same color? {0}&quot;, output)\n        \n        Console.WriteLine()\n        Console.WriteLine(&quot;The value of my color ({0}) is {1}&quot;, myColor, [Enum].Format(GetType(Colors), myColor, &quot;d&quot;))\n        Console.WriteLine(&quot;The value of my pet (a {0}) is {1}&quot;, myPet, [Enum].Format(GetType(Mammals), myPet, &quot;d&quot;))\n        Console.WriteLine(&quot;Even though they have the same value, are they equal? {0}&quot;, \n                          If(myColor.Equals(myPet), &quot;Yes&quot;, &quot;No&quot;))\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;    My favorite animal is a Cat\n&#39;    Your favorite animal is a Dog\n&#39;    Do we like the same animal? No\n&#39;    \n&#39;    My favorite color is Red\n&#39;    Your favorite color is Red\n&#39;    Do we like the same color? Yes\n&#39;    \n&#39;    The value of my color (Red) is 0\n&#39;    The value of my pet (a Cat) is 0\n&#39;    Even though they have the same value, are they equal? No\n</code></pre><pre><code class=\"lang-cpp\" name=\"enumequals#1\">using namespace System;\npublic enum class Colors\n{\n   Red, Green, Blue, Yellow\n};\n\npublic enum class Mammals\n{\n   Cat, Dog, Horse, Dolphin\n};\n\nint main()\n{\n   Mammals myPet = Mammals::Cat;\n   Colors myColor = Colors::Red;\n   Mammals yourPet = Mammals::Dog;\n   Colors yourColor = Colors::Red;\n   Console::WriteLine(  &quot;My favorite animal is a {0}&quot;, myPet );\n   Console::WriteLine(  &quot;Your favorite animal is a {0}&quot;, yourPet );\n   Console::WriteLine(  &quot;Do we like the same animal? {0}&quot;, myPet.Equals( yourPet ) ? (String^)&quot;Yes&quot; : &quot;No&quot; );\n   Console::WriteLine();\n   Console::WriteLine(  &quot;My favorite color is {0}&quot;, myColor );\n   Console::WriteLine(  &quot;Your favorite color is {0}&quot;, yourColor );\n   Console::WriteLine(  &quot;Do we like the same color? {0}&quot;, myColor.Equals( yourColor ) ? (String^)&quot;Yes&quot; : &quot;No&quot; );\n   Console::WriteLine();\n   Console::WriteLine(  &quot;The value of my color ({0}) is {1}&quot;, myColor, Enum::Format( Colors::typeid, myColor,  &quot;d&quot; ) );\n   Console::WriteLine(  &quot;The value of my pet (a {0}) is {1}&quot;, myPet, Enum::Format( Mammals::typeid, myPet,  &quot;d&quot; ) );\n   Console::WriteLine(  &quot;Even though they have the same value, are they equal? {0}&quot;, myColor.Equals( myPet ) ? (String^)&quot;Yes&quot; : &quot;No&quot; );\n}\n// The example displays the following output:\n//    My favorite animal is a Cat\n//    Your favorite animal is a Dog\n//    Do we like the same animal? No\n//    \n//    My favorite color is Red\n//    Your favorite color is Red\n//    Do we like the same color? Yes\n//    \n//    The value of my color (Red) is 0\n//    The value of my pet (a Cat) is 0\n//    Even though they have the same value, are they equal? No\n</code></pre><p> The following example defines two enumeration types, <code>SledDog</code> and <code>WorkDog</code>. The <code>SledDog</code> enumeration has two members, <code>SledDog.AlaskanMalamute</code> and <code>SledDog.Malamute</code>, that have the same underlying value. The call to the Equals method indicates that these values are equal because their underlying values are the same. The <code>SledDog.Malamute</code> and <code>WorkDog.Newfoundland</code> members have the same underlying value, although they represent different enumeration types. A call to the Equals method indicates that these values are not equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Equals#1\">using System;\n\npublic enum SledDog { Unknown=0, AlaskanMalamute=1, Malamute=1, \n                      Husky=2, SiberianHusky=2 };\n\npublic enum WorkDog { Unknown=0, Newfoundland=1, GreatPyrennes=2 };\n\npublic class Example\n{\n   public static void Main()\n   {\n      SledDog dog1 = SledDog.Malamute;\n      SledDog dog2 = SledDog.AlaskanMalamute;\n      WorkDog dog3 = WorkDog.Newfoundland;\n      \n      Console.WriteLine(&quot;{0:F} ({0:D}) = {1:F} ({1:D}): {2}&quot;, \n                        dog1, dog2, dog1.Equals(dog2));\n      Console.WriteLine(&quot;{0:F} ({0:D}) = {1:F} ({1:D}): {2}&quot;,\n                        dog1, dog3, dog1.Equals(dog3));\n   }\n}\n// The example displays the following output:\n//       Malamute (1) = Malamute (1): True\n//       Malamute (1) = Newfoundland (1): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Equals#1\">Public Enum SledDog As Integer\n   Unknown=0\n   AlaskanMalamute=1\n   Malamute=1\n   Husky=2\n   SiberianHusky=2\nEnd Enum\n\nPublic Enum WorkDog As Integer\n   Unknown=0\n   Newfoundland=1\n   GreatPyrennes=2\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim dog1 As SledDog = SledDog.Malamute\n      Dim dog2 As SledDog = SledDog.AlaskanMalamute\n      Dim dog3 As WorkDog = WorkDog.Newfoundland\n      \n      Console.WriteLine(&quot;{0:F} ({0:D}) = {1:F} ({1:D}): {2}&quot;, \n                        dog1, dog2, dog1.Equals(dog2))\n      Console.WriteLine(&quot;{0:F} ({0:D}) = {1:F} ({1:D}): {2}&quot;,\n                        dog1, dog3, dog1.Equals(dog3))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Malamute (1) = Malamute (1): True\n&#39;       Malamute (1) = Newfoundland (1): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_Format_System_Type_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Enum_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(Type,Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (Type enumType, object value, string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type of the value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The output format to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>enumType</code>, <code>value</code>, or <code>format</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>enumType</code> parameter is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> type.  </p>\n<p> -or-  </p>\n<p> The <code>value</code> is from an enumeration that differs in type from <code>enumType</code>.  </p>\n<p> -or-  </p>\n<p> The type of <code>value</code> is not an underlying type of <code>enumType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The <code>format</code> parameter contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> equals &quot;X&quot;, but the enumeration type is unknown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows the valid values for the <code>format</code> parameter.  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;G&quot; or &quot;g&quot;</td>\n<td>If <code>value</code> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <code>value</code> is returned.<br><br> For example, suppose the only enumerated constant is named Red, and its value is 1. If <code>value</code> is specified as 1, this format returns &quot;Red&quot;. However, if <code>value</code> is specified as 2, this format returns &quot;2&quot;.<br><br> -or-<br><br> If the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> custom attribute is applied to the enumeration, <code>value</code> is treated as a bit field that contains one or more flags that consist of one or more bits.<br><br> If <code>value</code> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned. <code>value</code> is searched for flags, going from the flag with the largest value to the smallest value. For each flag that corresponds to a bit field in <code>value</code>, the name of the constant is concatenated to the delimiter-separated list. The value of that flag is then excluded from further consideration, and the search continues for the next flag.<br><br> If <code>value</code> is not equal to a combination of named enumerated constants, the decimal equivalent of <code>value</code> is returned.</td>\n</tr>\n<tr>\n<td>&quot;X&quot; or &quot;x&quot;</td>\n<td>Represents <code>value</code> in hexadecimal format without a leading &quot;0x&quot;.</td>\n</tr>\n<tr>\n<td>&quot;D&quot; or &quot;d&quot;</td>\n<td>Represents <code>value</code> in decimal form.</td>\n</tr>\n<tr>\n<td>&quot;F&quot; or &quot;f&quot;</td>\n<td>Behaves identically to &quot;G&quot; or &quot;g&quot;, except that the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> is not required to be present on the <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> declaration.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>Format</code> in the context of <code>Enum</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"enumformat#1\">using System;\n\nenum Colors { Red, Green, Blue, Yellow };\n\npublic class FormatTest {\n    public static void Main() {\n        Colors myColor = Colors.Blue;\n\n        Console.WriteLine(&quot;My favorite color is {0}.&quot;, myColor);\n        Console.WriteLine(&quot;The value of my favorite color is {0}.&quot;, Enum.Format(typeof(Colors), myColor, &quot;d&quot;));\n        Console.WriteLine(&quot;The hex value of my favorite color is {0}.&quot;, Enum.Format(typeof(Colors), myColor, &quot;x&quot;));\n    }\n}\n// The example displays the following output:\n//    My favorite color is Blue.\n//    The value of my favorite color is 2.\n//    The hex value of my favorite color is 00000002.\n</code></pre><pre><code class=\"lang-cpp\" name=\"enumformat#1\">using namespace System;\npublic enum class Colors\n{\n   Red, Green, Blue, Yellow\n};\n\nint main()\n{\n   Colors myColor = Colors::Blue;\n   Console::WriteLine(  &quot;My favorite color is {0}.&quot;, myColor );\n   Console::WriteLine(  &quot;The value of my favorite color is {0}.&quot;, Enum::Format( Colors::typeid, myColor,  &quot;d&quot; ) );\n   Console::WriteLine(  &quot;The hex value of my favorite color is {0}.&quot;, Enum::Format( Colors::typeid, myColor,  &quot;x&quot; ) );\n}\n// The example displays the folowing output:\n//    My favorite color is Blue.\n//    The value of my favorite color is 2.\n//    The hex value of my favorite color is 00000002.\n</code></pre><pre><code class=\"lang-vb\" name=\"enumformat#1\"> Enum Colors\n     Red\n     Green\n     Blue\n     Yellow    \n End Enum\n    \nPublic Class FormatTest\n    Public Shared Sub Main()\n        Dim myColor As Colors = Colors.Blue\n        \n        Console.WriteLine(&quot;My favorite color is {0}.&quot;, myColor)\n        Console.WriteLine(&quot;The value of my favorite color is {0}.&quot;, [Enum].Format(GetType(Colors), myColor, &quot;d&quot;))\n        Console.WriteLine(&quot;The hex value of my favorite color is {0}.&quot;, [Enum].Format(GetType(Colors), myColor, &quot;x&quot;))\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;    My favorite color is Blue.\n&#39;    The value of my favorite color is 2.\n&#39;    The hex value of my favorite color is 00000002.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetHashCode\">\r\n    \r\n            <a id=\"System_Enum_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the value of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetName_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Enum_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of the constant in the specified enumeration that has the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetName (Type enumType, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of a particular enumerated constant in terms of its underlying type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the name of the enumerated constant in <code>enumType</code> whose value is <code>value</code>; or <code>null</code> if no such constant is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> or <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is neither of type <code>enumType</code> nor does it have the same underlying type as <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If multiple enumeration members have the same underlying value, the GetName method guarantees that it will return the name of one of those enumeration members. However, it does not guarantee that it will always return the name of the same enumeration member. As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member&#39;s name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>GetName</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"enumgetname#1\">using System;\n\npublic class GetNameTest {\n    enum Colors { Red, Green, Blue, Yellow };\n    enum Styles { Plaid, Striped, Tartan, Corduroy };\n\n    public static void Main() {\n\n        Console.WriteLine(&quot;The 4th value of the Colors Enum is {0}&quot;, Enum.GetName(typeof(Colors), 3));\n        Console.WriteLine(&quot;The 4th value of the Styles Enum is {0}&quot;, Enum.GetName(typeof(Styles), 3));\n    }\n}\n// The example displays the following output:\n//       The 4th value of the Colors Enum is Yellow\n//       The 4th value of the Styles Enum is Corduroy\n</code></pre><pre><code class=\"lang-cpp\" name=\"enumgetname#1\">using namespace System;\n\nenum class Colors\n{\n   Red, Green, Blue, Yellow\n};\n\nenum class Styles\n{\n   Plaid, Striped, Tartan, Corduroy\n};\n\nint main()\n{\n   Console::WriteLine(  &quot;The 4th value of the Colors Enum is {0}&quot;, Enum::GetName( Colors::typeid, 3 ) );\n   Console::WriteLine(  &quot;The 4th value of the Styles Enum is {0}&quot;, Enum::GetName( Styles::typeid, 3 ) );\n}\n// The example displays the following output:\n//       The 4th value of the Colors Enum is Yellow\n//       The 4th value of the Styles Enum is Corduroy\n</code></pre><pre><code class=\"lang-vb\" name=\"enumgetname#1\">Imports System\n\nPublic Class GetNameTest\n    \n    Enum Colors\n        Red\n        Green\n        Blue\n        Yellow\n    End Enum &#39;Colors\n    \n    Enum Styles\n        Plaid\n        Striped\n        Tartan\n        Corduroy\n    End Enum &#39;Styles\n    \n    Public Shared Sub Main() \n        Console.WriteLine(&quot;The 4th value of the Colors Enum is {0}&quot;, [Enum].GetName(GetType(Colors), 3))\n        Console.WriteLine(&quot;The 4th value of the Styles Enum is {0}&quot;, [Enum].GetName(GetType(Styles), 3))\n    End Sub &#39;Main\nEnd Class &#39;GetNameTest\n&#39; The example displays the following output:\n&#39;       The 4th value of the Colors Enum is Yellow\n&#39;       The 4th value of the Styles Enum is Corduroy\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetNames_System_Type_\">\r\n    \r\n            <a id=\"System_Enum_GetNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNames(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the names of the constants in a specified enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetNames (Type enumType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array of the names of the constants in <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> parameter is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude). The following example provides displays information about the array returned by the GetNames method for an enumeration that includes a negative, zero, and a positive value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.GetNames#1\">using System;\n\nenum SignMagnitude { Negative = -1, Zero = 0, Positive = 1 };\n \npublic class Example\n{\n   public static void Main()\n   {\n      foreach (var name in Enum.GetNames(typeof(SignMagnitude))) {\n         Console.WriteLine(&quot;{0,3:D}     0x{0:X}     {1}&quot;,\n                           Enum.Parse(typeof(SignMagnitude), name),\n                           name);\n}   }\n}\n// The example displays the following output:\n//         0     0x00000000     Zero\n//         1     0x00000001     Positive\n//        -1     0xFFFFFFFF     Negative\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.GetNames#1\">Public Enum SignMagnitude As Integer\n   Negative = -1 \n   Zero = 0\n   Positive = 1\nEnd Enum\n   \nModule Example\n   Public Sub Main()\n      Dim names() As String = [Enum].GetNames(GetType(SignMagnitude))\n      For Each name In names\n         Console.WriteLine(&quot;{0,3:D}     0x{0:X}     {1}&quot;, \n                           [Enum].Parse(GetType(SignMagnitude), name), \n                           name)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      0     0x00000000     Zero\n&#39;      1     0x00000001     Positive\n&#39;     -1     0xFFFFFFFF     Negative\n</code></pre><p> If there are enumerated constants with same value, the order of their corresponding names is unspecified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the GetNames method.  </p>\n<pre><code class=\"lang-cs\" name=\"enumgetnames#1\">using System;\n\npublic class GetNamesTest {\n    enum Colors { Red, Green, Blue, Yellow };\n    enum Styles { Plaid, Striped, Tartan, Corduroy };\n\n    public static void Main() {\n\n        Console.WriteLine(&quot;The members of the Colors enum are:&quot;);\n        foreach(string s in Enum.GetNames(typeof(Colors)))\n            Console.WriteLine(s);\n\n        Console.WriteLine();\n\n        Console.WriteLine(&quot;The members of the Styles enum are:&quot;);\n        foreach(string s in Enum.GetNames(typeof(Styles)))\n            Console.WriteLine(s);\n    }\n}\n// The example displays the following output:\n//       The members of the Colors enum are:\n//       Red\n//       Green\n//       Blue\n//       Yellow\n//       \n//       The members of the Styles enum are:\n//       Plaid\n//       Striped\n//       Tartan\n//       Corduroy\n</code></pre><pre><code class=\"lang-cpp\" name=\"enumgetnames#1\">using namespace System;\nenum class Colors\n{\n   Red, Green, Blue, Yellow\n};\n\nenum class Styles\n{\n   Plaid, Striped, Tartan, Corduroy\n};\n\nint main()\n{\n   Console::WriteLine( &quot;The members of the Colors enum are:&quot; );\n   Array^ a = Enum::GetNames( Colors::typeid );\n   Int32 i = 0;\n   do\n   {\n      Object^ o = a-&gt;GetValue( i );\n      Console::WriteLine( o-&gt;ToString() );\n   }\n   while ( ++i &lt; a-&gt;Length );\n\n   Console::WriteLine();\n   Console::WriteLine( &quot;The members of the Styles enum are:&quot; );\n   Array^ b = Enum::GetNames( Styles::typeid );\n   i = 0;\n   do\n   {\n      Object^ o = b-&gt;GetValue( i );\n      Console::WriteLine( o-&gt;ToString() );\n   }\n   while ( ++i &lt; b-&gt;Length );\n}\n// The example displays the following output:\n//       The members of the Colors enum are:\n//       Red\n//       Green\n//       Blue\n//       Yellow\n//       \n//       The members of the Styles enum are:\n//       Plaid\n//       Striped\n//       Tartan\n//       Corduroy\n</code></pre><pre><code class=\"lang-vb\" name=\"enumgetnames#1\">Public Class GetNamesTest\n    Enum Colors\n        Red\n        Green\n        Blue\n        Yellow\n    End Enum \n    \n    Enum Styles\n        Plaid\n        Striped\n        Tartan\n        Corduroy\n    End Enum\n    \n    Public Shared Sub Main()\n        \n        Console.WriteLine(&quot;The members of the Colors enum are:&quot;)\n        For Each s In [Enum].GetNames(GetType(Colors))\n            Console.WriteLine(s)\n        Next\n\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;The members of the Styles enum are:&quot;)\n        For Each s In [Enum].GetNames(GetType(Styles))\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       The members of the Colors enum are:\n&#39;       Red\n&#39;       Green\n&#39;       Blue\n&#39;       Yellow\n&#39;       \n&#39;       The members of the Styles enum are:\n&#39;       Plaid\n&#39;       Striped\n&#39;       Tartan\n&#39;       Corduroy\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetTypeCode\">\r\n    \r\n            <a id=\"System_Enum_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type code of the underlying type of this enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The type code of the underlying type of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The enumeration type is unknown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetUnderlyingType_System_Type_\">\r\n    \r\n            <a id=\"System_Enum_GetUnderlyingType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnderlyingType(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying type of the specified enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetUnderlyingType (Type enumType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration whose underlying type will be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The underlying type of <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> structure enables values to be represented as named constants. The data type of the enumeration&#39;s values is known as its underlying type. For example, the underlying type of the <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> enumeration, which consists of constants that represent each day of the week (<a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">System.DayOfWeek</a>, <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">System.DayOfWeek</a>, and so on), is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the GetUnderlyingType method to display the underlying type of some enumeration members.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.GetUnderlyingType#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Enum[] enumValues = { ConsoleColor.Red, DayOfWeek.Monday, \n                            MidpointRounding.ToEven, PlatformID.Win32NT, \n                            DateTimeKind.Utc, StringComparison.Ordinal };\n      Console.WriteLine(&quot;{0,-10} {1, 18}   {2,15}<br>&quot;, \n                        &quot;Member&quot;, &quot;Enumeration&quot;, &quot;Underlying Type&quot;);\n      foreach (var enumValue in enumValues)\n         DisplayEnumInfo(enumValue);\n   }\n\n   static void DisplayEnumInfo(Enum enumValue)\n   {\n      Type enumType = enumValue.GetType();\n      Type underlyingType = Enum.GetUnderlyingType(enumType);\n      Console.WriteLine(&quot;{0,-10} {1, 18}   {2,15}&quot;,\n                        enumValue, enumType.Name, underlyingType.Name);   \n   }\n}\n// The example displays the following output:\n//       Member            Enumeration   Underlying Type\n//       \n//       Red              ConsoleColor             Int32\n//       Monday              DayOfWeek             Int32\n//       ToEven       MidpointRounding             Int32\n//       Win32NT            PlatformID             Int32\n//       Utc              DateTimeKind             Int32\n//       Ordinal      StringComparison             Int32\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.GetUnderlyingType#1\">Module Example\n   Public Sub Main()\n      Dim enumValues() As [Enum] = { ConsoleColor.Red, DayOfWeek.Monday, \n                                     MidpointRounding.ToEven, PlatformID.Win32NT, \n                                     DateTimeKind.Utc, StringComparison.Ordinal }\n      Console.WriteLine(&quot;{0,-10} {1, 18}   {2,15}&quot;, \n                        &quot;Member&quot;, &quot;Enumeration&quot;, &quot;Underlying Type&quot;)\n      Console.WriteLine()\n      For Each enumValue In enumValues\n         DisplayEnumInfo(enumValue)\n      Next\n   End Sub\n\n   Sub DisplayEnumInfo(enumValue As [Enum])\n      Dim enumType As Type = enumValue.GetType()\n      Dim underlyingType As Type = [Enum].GetUnderlyingType(enumType)\n      Console.WriteLine(&quot;{0,-10} {1, 18}   {2,15}&quot;,\n                        enumValue, enumType.Name, underlyingType.Name)   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Member            Enumeration   Underlying Type\n&#39;       \n&#39;       Red              ConsoleColor             Int32\n&#39;       Monday              DayOfWeek             Int32\n&#39;       ToEven       MidpointRounding             Int32\n&#39;       Win32NT            PlatformID             Int32\n&#39;       Utc              DateTimeKind             Int32\n&#39;       Ordinal      StringComparison             Int32\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_GetValues_System_Type_\">\r\n    \r\n            <a id=\"System_Enum_GetValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValues(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the values of the constants in a specified enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array GetValues (Type enumType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>An array that contains the values of the constants in <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The method is invoked by reflection in a reflection-only context,  </p>\n<p> -or-  </p>\n<p> <code>enumType</code> is a type from an assembly loaded in a reflection-only context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude). The following example displays information about the array returned by the GetValues method for an enumeration that includes a negative value, zero, and a positive value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.GetValues#1\">Public Enum SignMagnitude As Integer\n   Negative = -1 \n   Zero = 0\n   Positive = 1\nEnd Enum\n   \nModule Example\n   Public Sub Main()\n      Dim values() As Integer = CType([Enum].GetValues(GetType(SignMagnitude)), Integer())\n      For Each value In values\n         Console.WriteLine(&quot;{0,3}     0x{0:X8}     {1}&quot;,\n                           value, CType(value, SignMagnitude).ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      0     0x00000000     Zero\n&#39;      1     0x00000001     Positive\n&#39;     -1     0xFFFFFFFF     Negative\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.GetValues#1\">using System;\n\nenum SignMagnitude { Negative = -1, Zero = 0, Positive = 1 };\n \npublic class Example\n{\n   public static void Main()\n   {\n      foreach (var value in Enum.GetValues(typeof(SignMagnitude))) {\n         Console.WriteLine(&quot;{0,3}     0x{0:X8}     {1}&quot;,\n                           (int) value, ((SignMagnitude) value));\n}   }\n}\n// The example displays the following output:\n//         0     0x00000000     Zero\n//         1     0x00000001     Positive\n//        -1     0xFFFFFFFF     Negative\n</code></pre><p> The GetValues method returns an array that contains a value for each member of the <code>enumType</code> enumeration. If multiple members have the same value, the returned array includes duplicate values. In this case, calling the <a class=\"xref\" href=\"system.enum#System_Enum_GetName_\" data-linktype=\"relative-path\">GetName</a> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values. To retrieve all the names of enumeration members successfully, call the <a class=\"xref\" href=\"system.enum#System_Enum_GetNames_\" data-linktype=\"relative-path\">GetNames</a> method.  </p>\n<p> TheGetValues method cannot be invoked by using reflection in a reflection-only context. Instead, you can retrieve the value of all enumeration members by using the <a class=\"xref\" href=\"system.type#System_Type_GetFields_\" data-linktype=\"relative-path\">GetFields</a> method to get an array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects that represent enumeration members and then call the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetRawConstantValue_\" data-linktype=\"relative-path\">GetRawConstantValue</a> method on each element of the array. The following example illustrates this technique. It requires that you define the following enumeration in an assembly named Enumerations.dll:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.GetValues#2\">&lt;Flags&gt; Public Enum Pets As Integer\n   None = 0\n   Dog = 1\n   Cat = 2\n   Rodent = 4\n   Bird = 8\n   Fish = 16\n   Reptile = 32\n   Other = 64\nEnd Enum   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.GetValues#2\">[Flags] enum Pets { None=0, Dog=1, Cat=2, Rodent=4, Bird=8, \n                    Fish=16, Reptile=32, Other=64 };\n</code></pre><p> The assembly is loaded in a reflection-only context, a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <code>Pets</code> enumeration is instantiated, an array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects is retrieved, and the field values are displayed to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Enum.GetValues#3\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.ReflectionOnlyLoadFrom(&quot;.\\Enumerations.dll&quot;)\n      Dim typ As Type = assem.GetType(&quot;Pets&quot;)\n      Dim fields As FieldInfo() = typ.GetFields\n\n      For Each field In fields\n         If field.Name.Equals(&quot;value__&quot;) Then Continue For\n          \n         Console.WriteLine(&quot;{0,-9} {1}&quot;, field.Name + &quot;:&quot;, \n                                         field.GetRawConstantValue())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       None:     0\n&#39;       Dog:      1\n&#39;       Cat:      2\n&#39;       Rodent:   4\n&#39;       Bird:     8\n&#39;       Fish:     16\n&#39;       Reptile:  32\n&#39;       Other:    64\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Enum.GetValues#3\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.ReflectionOnlyLoadFrom(@&quot;.\\Enumerations.dll&quot;);\n      Type typ = assem.GetType(&quot;Pets&quot;);\n      FieldInfo[] fields = typ.GetFields();\n\n      foreach (var field in fields) {\n         if (field.Name.Equals(&quot;value__&quot;)) continue;\n          \n         Console.WriteLine(&quot;{0,-9} {1}&quot;, field.Name + &quot;:&quot;, \n                                         field.GetRawConstantValue());\n      }\n   }\n}\n// The example displays the following output:\n//       None:     0\n//       Dog:      1\n//       Cat:      2\n//       Rodent:   4\n//       Bird:     8\n//       Fish:     16\n//       Reptile:  32\n//       Other:    64\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of GetValues.  </p>\n<pre><code class=\"lang-cpp\" name=\"enumgetvalues#1\">using namespace System;\nenum class Colors\n{\n   Red, Green, Blue, Yellow\n};\n\nenum class Styles\n{\n   Plaid = 0,\n   Striped = 23,\n   Tartan = 65,\n   Corduroy = 78\n};\n\nint main()\n{\n   Console::WriteLine(  &quot;The values of the Colors Enum are:&quot; );\n   Array^ a = Enum::GetValues( Colors::typeid );\n   for ( Int32 i = 0; i &lt; a-&gt;Length; i++ )\n   {\n      Object^ o = a-&gt;GetValue( i );\n      Console::WriteLine(  &quot;{0}&quot;, Enum::Format( Colors::typeid, o,  &quot;D&quot; ) );\n   }\n   Console::WriteLine();\n   Console::WriteLine(  &quot;The values of the Styles Enum are:&quot; );\n   Array^ b = Enum::GetValues( Styles::typeid );\n   for ( Int32 i = 0; i &lt; b-&gt;Length; i++ )\n   {\n      Object^ o = b-&gt;GetValue( i );\n      Console::WriteLine(  &quot;{0}&quot;, Enum::Format( Styles::typeid, o,  &quot;D&quot; ) );\n\n   }\n}\n// The example produces the following output:\n//       The values of the Colors Enum are:\n//       0\n//       1\n//       2\n//       3\n//       \n//       The values of the Styles Enum are:\n//       0\n//       23\n//       65\n//       78\n</code></pre><pre><code class=\"lang-cs\" name=\"enumgetvalues#1\">using System;\n\npublic class GetValuesTest {\n    enum Colors { Red, Green, Blue, Yellow };\n    enum Styles { Plaid = 0, Striped = 23, Tartan = 65, Corduroy = 78 };\n\n    public static void Main() {\n\n        Console.WriteLine(&quot;The values of the Colors Enum are:&quot;);\n        foreach(int i in Enum.GetValues(typeof(Colors)))\n            Console.WriteLine(i);\n\n        Console.WriteLine();\n\n        Console.WriteLine(&quot;The values of the Styles Enum are:&quot;);\n        foreach(int i in Enum.GetValues(typeof(Styles)))\n            Console.WriteLine(i);\n    }\n}\n// The example produces the following output:\n//       The values of the Colors Enum are:\n//       0\n//       1\n//       2\n//       3\n//       \n//       The values of the Styles Enum are:\n//       0\n//       23\n//       65\n//       78\n</code></pre><pre><code class=\"lang-vb\" name=\"enumgetvalues#1\">Public Class GetValuesTest\n   \n    Enum Colors\n        Red\n        Green\n        Blue\n        Yellow\n    End Enum &#39;Colors\n    \n    Enum Styles\n        Plaid = 0\n        Striped = 23\n        Tartan = 65\n        Corduroy = 78\n    End Enum &#39;Styles\n    \n    Public Shared Sub Main()\n        \n        Console.WriteLine(&quot;The values of the Colors Enum are:&quot;)\n        Dim i As Integer\n        For Each i In  [Enum].GetValues(GetType(Colors))\n            Console.WriteLine(i)\n        Next\n\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;The values of the Styles Enum are:&quot;)\n        For Each i In  [Enum].GetValues(GetType(Styles))\n            Console.WriteLine(i)\n        Next\n    End Sub \nEnd Class \n&#39; The example produces the following output:\n&#39;       The values of the Colors Enum are:\n&#39;       0\n&#39;       1\n&#39;       2\n&#39;       3\n&#39;       \n&#39;       The values of the Styles Enum are:\n&#39;       0\n&#39;       23\n&#39;       65\n&#39;       78\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_HasFlag_System_Enum_\">\r\n    \r\n            <a id=\"System_Enum_HasFlag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasFlag(Enum)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether one or more bit fields are set in the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasFlag (Enum flag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>flag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the bit field or bit fields that are set in <code>flag</code> are also set in the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>flag</code> is a different type than the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HasFlag method returns the result of the following Boolean expression.  </p>\n<pre><code>thisInstance And flag = flag\n</code></pre><p> If the underlying value of <code>flag</code> is zero, the method returns <code>true</code>. If this behavior is not desirable, you can use the <a class=\"xref\" href=\"system.enum#System_Enum_Equals_\" data-linktype=\"relative-path\">Equals</a> method to test for equality with zero and call HasFlag only if the underlying value of <code>flag</code> is non-zero, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.HasFlag#1\">using System;\n\n[Flags] public enum Pets {\n   None = 0,\n   Dog = 1,\n   Cat = 2,\n   Bird = 4,\n   Rabbit = 8,\n   Other = 16\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Pets[] petsInFamilies = { Pets.None, Pets.Dog | Pets.Cat, Pets.Dog };\n      int familiesWithoutPets = 0;\n      int familiesWithDog = 0;\n\n      foreach (var petsInFamily in petsInFamilies)\n      {\n         // Count families that have no pets.\n         if (petsInFamily.Equals(Pets.None))\n            familiesWithoutPets++;\n         // Of families with pets, count families that have a dog.\n         else if (petsInFamily.HasFlag(Pets.Dog))\n            familiesWithDog++;\n      }\n      Console.WriteLine(&quot;{0} of {1} families in the sample have no pets.&quot;, \n                        familiesWithoutPets, petsInFamilies.Length);   \n      Console.WriteLine(&quot;{0} of {1} families in the sample have a dog.&quot;, \n                        familiesWithDog, petsInFamilies.Length);   \n   }\n}\n// The example displays the following output:\n//       1 of 3 families in the sample have no pets.\n//       2 of 3 families in the sample have a dog.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.HasFlag#1\">&lt;Flags&gt; Public Enum Pets\n   None = 0\n   Dog = 1\n   Cat = 2\n   Bird = 4\n   Rabbit = 8\n   Other = 16\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim petsInFamilies() As Pets = { Pets.None, Pets.Dog Or Pets.Cat, Pets.Dog }\n      Dim familiesWithoutPets As Integer\n      Dim familiesWithDog As Integer\n      \n      For Each petsInFamily In petsInFamilies\n         &#39; Count the number of families that have no pets.\n         If petsInFamily.Equals(Pets.None) Then\n            familiesWithoutPets += 1 \n        &#39; Of families that have pets, count the number of families with a dog.\n         Else If petsInFamily.HasFlag(Pets.Dog) Then\n            familiesWithDog += 1\n         End If\n      Next\n      Console.WriteLine(&quot;{0} of {1} families in the sample have no pets.&quot;, \n                        familiesWithoutPets, petsInFamilies.Length)   \n      Console.WriteLine(&quot;{0} of {1} families in the sample have a dog.&quot;, \n                        familiesWithDog, petsInFamilies.Length)   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1 of 3 families in the sample have no pets.\n&#39;       2 of 3 families in the sample have a dog.\n</code></pre><p> The HasFlag method is designed to be used with enumeration types that are marked with the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute and can be used to determine whether multiple bit fields are set. For enumeration types that are not marked with the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute, call either the <a class=\"xref\" href=\"system.enum#System_Enum_Equals_\" data-linktype=\"relative-path\">Equals</a> method or the <a class=\"xref\" href=\"system.enum#System_Enum_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>ItemsOrdered</code> enumeration that reflects categories of items that a customer can order in a restaurant. The example tests whether the customer has ordered both an entrÃ©e and a beverage.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.HasFlag#2\">using System;\n\n[Flags] public enum DinnerItems {\n   None = 0,\n   Entree = 1,\n   Appetizer = 2,\n   Side = 4,\n   Dessert = 8,\n   Beverage = 16, \n   BarBeverage = 32\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      DinnerItems myOrder = DinnerItems.Appetizer | DinnerItems.Entree |\n                            DinnerItems.Beverage | DinnerItems.Dessert;\n      DinnerItems flagValue = DinnerItems.Entree | DinnerItems.Beverage;\n      Console.WriteLine(&quot;{0} includes {1}: {2}&quot;, \n                        myOrder, flagValue, myOrder.HasFlag(flagValue));\n   }\n}\n// The example displays the following output:\n//    Entree, Appetizer, Dessert, Beverage includes Entree, Beverage: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.HasFlag#2\">&lt;Flags&gt; Public Enum DinnerItems As Integer\n   None = 0\n   Entree = 1\n   Appetizer = 2\n   Side = 4\n   Dessert = 8\n   Beverage = 16 \n   BarBeverage = 32\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim myOrder As DinnerItems = DinnerItems.Appetizer Or DinnerItems.Entree Or\n                                   DinnerItems.Beverage Or DinnerItems.Dessert\n      Dim flagValue As DinnerItems = DinnerItems.Entree Or DinnerItems.Beverage\n      Console.WriteLine(&quot;{0} includes {1}: {2}&quot;, \n                        myOrder, flagValue, myOrder.HasFlag(flagValue))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Entree, Appetizer, Dessert, Beverage includes Entree, Beverage: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_IsDefined_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Enum_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an indication whether a constant with a specified value exists in a specified enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (Type enumType, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value or name of a constant in <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a constant in <code>enumType</code> has a value equal to <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> or <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <code>Enum</code>.  </p>\n<p> -or-  </p>\n<p> The type of <code>value</code> is an enumeration, but it is not an enumeration of type <code>enumType</code>.  </p>\n<p> -or-  </p>\n<p> The type of <code>value</code> is not an underlying type of <code>enumType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not type <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, or <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>Any member of type <code>enumType</code>.  </p>\n</li>\n<li><p>A variable whose value is an enumeration member of type <code>enumType</code>.  </p>\n</li>\n<li><p>The string representation of the name of an enumeration member. The characters in the string must have the same case as the enumeration member name.  </p>\n</li>\n<li><p>A value of the underlying type of <code>enumType</code>.  </p>\n<p>If the constants in <code>enumType</code> define a set of bit fields and <code>value</code> contains the values, names, or underlying values of multiple bit fields, the IsDefined method returns <code>false</code>. In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration. To determine whether multiple bit fields are set in an enumeration type that is tagged with the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute, you can call the <a class=\"xref\" href=\"system.enum#System_Enum_HasFlag_\" data-linktype=\"relative-path\">HasFlag</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an enumeration named <code>PetType</code> that consists of individual bit fields. It then calls the IsDefined method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.IsDefined#1\">using System;\n\n[Flags] public enum PetType\n{\n   None = 0, Dog = 1, Cat = 2, Rodent = 4, Bird = 8, Reptile = 16, Other = 32\n};\n\npublic class Example\n{\n   public static void Main()\n   {\n      object value; \n      \n      // Call IsDefined with underlying integral value of member.\n      value = 1;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      // Call IsDefined with invalid underlying integral value.\n      value = 64;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      // Call IsDefined with string containing member name.\n      value = &quot;Rodent&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      // Call IsDefined with a variable of type PetType.\n      value = PetType.Dog;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      value = PetType.Dog | PetType.Cat;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      // Call IsDefined with uppercase member name.      \n      value = &quot;None&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      value = &quot;NONE&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      // Call IsDefined with combined value\n      value = PetType.Dog | PetType.Bird;\n      Console.WriteLine(&quot;{0:D}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n      value = value.ToString();\n      Console.WriteLine(&quot;{0:D}: {1}&quot;, value, Enum.IsDefined(typeof(PetType), value));\n   }\n}\n// The example displays the following output:\n//       1: True\n//       64: False\n//       Rodent: True\n//       Dog: True\n//       Dog, Cat: False\n//       None: True\n//       NONE: False\n//       9: False\n//       Dog, Bird: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.IsDefined#1\">&lt;Flags&gt; Public Enum PetType As Integer\n   None = 0\n   Dog = 1\n   Cat = 2\n   Rodent = 4\n   Bird = 8\n   Reptile = 16\n   Other = 32\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim value As Object\n      \n      &#39; Call IsDefined with underlying integral value of member.\n      value = 1\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      &#39; Call IsDefined with invalid underlying integral value.\n      value = 64\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      &#39; Call IsDefined with string containing member name.\n      value = &quot;Rodent&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      &#39; Call IsDefined with a variable of type PetType.\n      value = PetType.Dog\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      value = PetType.Dog Or PetType.Cat\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      &#39; Call IsDefined with uppercase member name.      \n      value = &quot;None&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      value = &quot;NONE&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      &#39; Call IsDefined with combined value\n      value = PetType.Dog Or PetType.Bird\n      Console.WriteLine(&quot;{0:D}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n      value = value.ToString()\n      Console.WriteLine(&quot;{0:D}: {1}&quot;, value, [Enum].IsDefined(GetType(PetType), value))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1: True\n&#39;       64: False \n&#39;       Rodent: True\n&#39;       Dog: True\n&#39;       Dog, Cat: False\n&#39;       None: True\n&#39;       NONE: False\n&#39;       9: False\n&#39;       Dog, Bird: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_Parse_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Enum_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Parse (Type enumType, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing the name or value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object of type <code>enumType</code> whose value is represented by <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> or <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is either an empty string or only contains white space.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is a name, but not one of the named constants defined for the enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is outside the range of the underlying type of <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter contains the string representation of an enumeration member&#39;s underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank spaces can precede or follow each value, name, or comma in <code>value</code>. If <code>value</code> is a list, the return value is the value of the specified names combined with a bitwise <code>OR</code> operation.  </p>\n<p> If <code>value</code> is a name that does not correspond to a named constant of <code>enumType</code>, the method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. If <code>value</code> is the string representation of an integer that does not represent an underlying value of the <code>enumType</code> enumeration, the method returns an enumeration member whose underlying value is <code>value</code> converted to an integral type. If this behavior is undesirable, call the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that a particular string representation of an integer is actually a member of <code>enumType</code>. The following example defines a <code>Colors</code> enumeration, calls the Parse method to convert strings to their corresponding enumeration values, and calls the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Parse#1\">using System;\n\n[Flags] enum Colors { None=0, Red = 1, Green = 2, Blue = 4 };\n   \npublic class Example\n{\n   public static void Main()\n   {\n      string[] colorStrings = { &quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot; };\n      foreach (string colorString in colorStrings)\n      {\n         try {\n            Colors colorValue = (Colors) Enum.Parse(typeof(Colors), colorString);        \n            if (Enum.IsDefined(typeof(Colors), colorValue) | colorValue.ToString().Contains(&quot;,&quot;))  \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString());\n            else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not a member of the Colors enumeration.&quot;, colorString);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;0&#39; to None.\n//       Converted &#39;2&#39; to Green.\n//       8 is not an underlying value of the Colors enumeration.\n//       &#39;blue&#39; is not a member of the Colors enumeration.\n//       Converted &#39;Blue&#39; to Blue.\n//       &#39;Yellow&#39; is not a member of the Colors enumeration.\n//       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Parse#1\">&lt;Flags&gt; Enum Colors As Integer\n   None = 0\n   Red = 1\n   Green = 2\n   Blue = 4\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim colorStrings() As String = {&quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot;}\n      For Each colorString As String In colorStrings\n         Try\n            Dim colorValue As Colors = CType([Enum].Parse(GetType(Colors), colorString), Colors)        \n            If [Enum].IsDefined(GetType(Colors), colorValue) Or colorValue.ToString().Contains(&quot;,&quot;) Then \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString)            \n            End If                    \n         Catch e As ArgumentException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not a member of the Colors enumeration.&quot;, colorString)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;0&#39; to None.\n&#39;       Converted &#39;2&#39; to Green.\n&#39;       8 is not an underlying value of the Colors enumeration.\n&#39;       &#39;blue&#39; is not a member of the Colors enumeration.\n&#39;       Converted &#39;Blue&#39; to Blue.\n&#39;       &#39;Yellow&#39; is not a member of the Colors enumeration.\n&#39;       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><p> This operation is case-sensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to parse an array of strings that are created by calling the <a class=\"xref\" href=\"system.enum#System_Enum_GetNames_\" data-linktype=\"relative-path\">GetNames</a> method. It also uses the Parse method to parse an enumeration value that consists of a bit field.  </p>\n<pre><code class=\"lang-cpp\" name=\"enumparse#1\">using namespace System;\n\n[FlagsAttribute]\nenum class Colors\n{\n   Red = 1,\n   Green = 2,\n   Blue = 4,\n   Yellow = 8\n};\n\nint main()\n{\n   Console::WriteLine(  &quot;The entries of the Colors enumeration are:&quot; );\n   Array^ a = Enum::GetNames( Colors::typeid );\n   Int32 i = 0;\n   while ( i &lt; a-&gt;Length )\n   {\n      Object^ o = a-&gt;GetValue( i );\n      Console::WriteLine( o-&gt;ToString() );\n      i++;\n   }\n\n   Console::WriteLine();\n   Object^ orange = Enum::Parse( Colors::typeid,  &quot;Red, Yellow&quot; );\n   Console::WriteLine(&quot;The orange value has the combined entries of {0}&quot;, orange );\n}\n\n/*\nThis code example produces the following results:\n\nThe entries of the Colors Enum are:\nRed\nGreen\nBlue\nYellow\n\nThe orange value has the combined entries of Red, Yellow\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"enumparse#1\">using System;\n\npublic class ParseTest\n{\n    [FlagsAttribute]\n    enum Colors { Red = 1, Green = 2, Blue = 4, Yellow = 8 };\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;The entries of the Colors enumeration are:&quot;);\n        foreach (string colorName in Enum.GetNames(typeof(Colors)))\n        {\n            Console.WriteLine(&quot;{0} = {1:D}&quot;, colorName, \n                                         Enum.Parse(typeof(Colors), colorName));\n        }\n        Console.WriteLine();\n\n        Colors orange = (Colors) Enum.Parse(typeof(Colors), &quot;Red, Yellow&quot;);\n        Console.WriteLine(&quot;The orange value {0:D} has the combined entries of {0}&quot;, \n                           orange);\n    }\n}\n\n/*\nThis code example produces the following results:\n\nThe entries of the Colors Enum are:\nRed = 1\nGreen = 2\nBlue = 4\nYellow = 8\n\nThe orange value 9 has the combined entries of Red, Yellow\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"enumparse#1\">Imports System\n\nPublic Class ParseTest\n\n    &lt;FlagsAttribute()&gt; _\n    Enum Colors\n        Red = 1\n        Green = 2\n        Blue = 4\n        Yellow = 8\n    End Enum\n\n    Public Shared Sub Main()\n        Console.WriteLine(&quot;The entries of the Colors enumeration are:&quot;)\n        Dim colorName As String\n        For Each colorName In [Enum].GetNames(GetType(Colors))\n            Console.WriteLine(&quot;{0} = {1:D}&quot;, colorName, [Enum].Parse(GetType(Colors), colorName))\n        Next\n        Console.WriteLine()\n\n        Dim orange As Colors = CType([Enum].Parse(GetType(Colors), &quot;Red, Yellow&quot;), Colors)\n        Console.WriteLine(&quot;The orange value {0:D} has the combined entries of {0}&quot;, orange)\n    End Sub\nEnd Class\n\n&#39;This example displays the following output:\n&#39;\n&#39;The entries of the Colors Enum are:\n&#39;Red = 1\n&#39;Green = 2\n&#39;Blue = 4\n&#39;Yellow = 8\n&#39;\n&#39;The myOrange value 9 has the combined entries of Red, Yellow\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_Parse_System_Type_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Enum_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(Type,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Parse (Type enumType, string value, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing the name or value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case; <code>false</code> to regard case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object of type <code>enumType</code> whose value is represented by <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> or <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is either an empty string (&quot;&quot;) or only contains white space.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is a name, but not one of the named constants defined for the enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is outside the range of the underlying type of <code>enumType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter contains the string representation of an enumeration member&#39;s underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank spaces can precede or follow each value, name, or comma in <code>value</code>. If <code>value</code> is a list, the return value is the value of the specified names combined with a bitwise <code>OR</code> operation.  </p>\n<p> If <code>value</code> is a name that does not correspond to a named constant of <code>enumType</code>, the method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. If <code>value</code> is the string representation of an integer that does not represent an underlying value of the <code>enumType</code> enumeration, the method returns an enumeration member whose underlying value is <code>value</code> converted to an integral type. If this behavior is undesirable, call the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that a particular string representation of an integer is actually a member of <code>enumType</code>. The following example defines a <code>Colors</code> enumeration, calls the Parse method to convert strings to their corresponding enumeration values, and calls the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Parse#2\">using System;\n\n[Flags] enum Colors { None=0, Red = 1, Green = 2, Blue = 4 };\n   \npublic class Example\n{\n   public static void Main()\n   {\n      string[] colorStrings = { &quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot; };\n      foreach (string colorString in colorStrings)\n      {\n         try {\n            Colors colorValue = (Colors) Enum.Parse(typeof(Colors), colorString, true);        \n            if (Enum.IsDefined(typeof(Colors), colorValue) | colorValue.ToString().Contains(&quot;,&quot;))  \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString());\n            else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;0&#39; to None.\n//       Converted &#39;2&#39; to Green.\n//       8 is not an underlying value of the Colors enumeration.\n//       Converted &#39;blue&#39; to Blue.\n//       Converted &#39;Blue&#39; to Blue.\n//       Yellow is not a member of the Colors enumeration.\n//       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Parse#2\">&lt;Flags&gt; Enum Colors As Integer\n   None = 0\n   Red = 1\n   Green = 2\n   Blue = 4\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim colorStrings() As String = {&quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot;}\n      For Each colorString As String In colorStrings\n         Try\n            Dim colorValue As Colors = CType([Enum].Parse(GetType(Colors), colorString, True), Colors)        \n            If [Enum].IsDefined(GetType(Colors), colorValue) Or colorValue.ToString().Contains(&quot;,&quot;) Then \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString)            \n            End If                    \n         Catch e As ArgumentException\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;0&#39; to None.\n&#39;       Converted &#39;2&#39; to Green.\n&#39;       8 is not an underlying value of the Colors enumeration.\n&#39;       Converted &#39;blue&#39; to Blue.\n&#39;       Converted &#39;Blue&#39; to Blue.\n&#39;       Yellow is not a member of the Colors enumeration.\n&#39;       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><p> The <code>ignoreCase</code> parameter specifies whether this operation is case-sensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to parse an array of strings that are created by calling the <a class=\"xref\" href=\"system.enum#System_Enum_GetNames_\" data-linktype=\"relative-path\">GetNames</a> method. It also uses the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_System_Type_System_String_\" data-linktype=\"relative-path\">Parse(Type,String)</a> method to parse an enumeration value that consists of a bit field.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.Parse#2\">using System;\n\n[Flags] enum Colors { None=0, Red = 1, Green = 2, Blue = 4 };\n   \npublic class Example\n{\n   public static void Main()\n   {\n      string[] colorStrings = { &quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot; };\n      foreach (string colorString in colorStrings)\n      {\n         try {\n            Colors colorValue = (Colors) Enum.Parse(typeof(Colors), colorString, true);        \n            if (Enum.IsDefined(typeof(Colors), colorValue) | colorValue.ToString().Contains(&quot;,&quot;))  \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString());\n            else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;0&#39; to None.\n//       Converted &#39;2&#39; to Green.\n//       8 is not an underlying value of the Colors enumeration.\n//       Converted &#39;blue&#39; to Blue.\n//       Converted &#39;Blue&#39; to Blue.\n//       Yellow is not a member of the Colors enumeration.\n//       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.Parse#2\">&lt;Flags&gt; Enum Colors As Integer\n   None = 0\n   Red = 1\n   Green = 2\n   Blue = 4\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim colorStrings() As String = {&quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot;}\n      For Each colorString As String In colorStrings\n         Try\n            Dim colorValue As Colors = CType([Enum].Parse(GetType(Colors), colorString, True), Colors)        \n            If [Enum].IsDefined(GetType(Colors), colorValue) Or colorValue.ToString().Contains(&quot;,&quot;) Then \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString)            \n            End If                    \n         Catch e As ArgumentException\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;0&#39; to None.\n&#39;       Converted &#39;2&#39; to Green.\n&#39;       8 is not an underlying value of the Colors enumeration.\n&#39;       Converted &#39;blue&#39; to Blue.\n&#39;       Converted &#39;Blue&#39; to Blue.\n&#39;       Yellow is not a member of the Colors enumeration.\n&#39;       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_Byte_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 8-bit unsigned integer to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_Int16_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 16-bit signed integer to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_Int32_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 32-bit signed integer to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_Int64_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 64-bit signed integer to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified object with an integer value to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An enumeration object whose value is <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> or <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is not type <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, or <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts the integral value <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_SByte_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 8-bit signed integer value to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_UInt16_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 16-bit unsigned integer value to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_UInt32_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 32-bit unsigned integer value to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToObject_System_Type_System_UInt64_\">\r\n    \r\n            <a id=\"System_Enum_ToObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToObject(Type,UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 64-bit unsigned integer value to an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ToObject (Type enumType, ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enumType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enumeration type to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert to an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the enumeration set to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>enumType</code> is not an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToObject method converts <code>value</code> to an enumeration member whose underlying value is <code>value</code>. Note that the conversion succeeds even if value is outside the bounds of <code>enumType</code> members. To ensure that <code>value</code> is a valid underlying value of the <code>enumType</code> enumeration, pass it to the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<p> This conversion method returns a value of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. You can then cast it or convert it to an object of type <code>enumType</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToString\">\r\n    \r\n            <a id=\"System_Enum_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is formatted with the general format specifier (&quot;G&quot;). That is, if the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant. If the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants. Otherwise, the return value is the string representation of the numeric value of this instance. For more information about formatting enumeration values, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>. For more information about formatting in general, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates converting an enumerated value to a string.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Enum.ToString2 Example#1\">using System;\n\npublic class EnumSample {\n    enum Colors {Red = 1, Blue = 2};\n    \n    public static void Main() {\n        Enum myColors = Colors.Red;\n        Console.WriteLine(&quot;The value of this instance is &#39;{0}&#39;&quot;,\n           myColors.ToString());\n    }\n}\n/*\nOutput.\nThe value of this instance is &#39;Red&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Enum.ToString2 Example#1\">Imports System\n\nPublic Class EnumSample    \n    Enum Colors\n        Red = 1\n        Blue = 2\n    End Enum\n    \n    Public Shared Sub Main()\n        Dim myColors As Colors = Colors.Red\n        Console.WriteLine(&quot;The value of this instance is &#39;{0}&#39;&quot;, _\n           myColors.ToString())\n    End Sub\nEnd Class\n\n&#39;Output.\n&#39;The value of this instance is &#39;Red&#39;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Enum.ToString2 Example#1\">using namespace System;\npublic ref class EnumSample\n{\npublic:\n   enum class Colors\n   {\n      Red = 1,\n      Blue = 2\n   };\n\n   static void main()\n   {\n      Enum ^ myColors = Colors::Red;\n      Console::WriteLine( &quot;The value of this instance is &#39;{0}&#39;&quot;, myColors );\n   }\n\n};\n\nint main()\n{\n   EnumSample::main();\n}\n\n/*\nOutput.\nThe value of this instance is &#39;Red&#39;.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This method overload is obsolete; use <a class=\"xref\" href=\"system.enum#System_Enum_ToString\" data-linktype=\"relative-path\">ToString()</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>(obsolete)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Enum_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to its equivalent string representation using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> contains an invalid specification.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> equals &quot;X&quot;, but the enumeration type is unknown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>format</code> parameter can contain the &quot;G&quot; or &quot;g&quot;, &quot;D&quot; or &quot;d&quot;, &quot;X&quot; or &quot;x&quot;, and &quot;F&quot; or &quot;f&quot; format strings (the format string is not case-sensitive). If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the general format specifier (&quot;G&quot;) is used. For more information about the enumeration format strings and formatting enumeration values, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>. For more information about formatting in general, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to convert an enumerated value to a string.  </p>\n<pre><code class=\"lang-cs\" name=\"enum.tostring#1\">// Sample for Enum.ToString(String)\nusing System;\n\nclass Sample \n{\n    enum Colors {Red, Green, Blue, Yellow = 12};\n\n    public static void Main() \n    {\n    Colors myColor = Colors.Yellow;\n\n    Console.WriteLine(&quot;Colors.Red = {0}&quot;, Colors.Red.ToString(&quot;d&quot;));\n    Console.WriteLine(&quot;Colors.Green = {0}&quot;, Colors.Green.ToString(&quot;d&quot;));\n    Console.WriteLine(&quot;Colors.Blue = {0}&quot;, Colors.Blue.ToString(&quot;d&quot;));\n    Console.WriteLine(&quot;Colors.Yellow = {0}&quot;, Colors.Yellow.ToString(&quot;d&quot;));\n\n    Console.WriteLine(&quot;{0}myColor = Colors.Yellow{0}&quot;, Environment.NewLine);\n\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;g\\&quot;) = {0}&quot;, myColor.ToString(&quot;g&quot;));\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;G\\&quot;) = {0}&quot;, myColor.ToString(&quot;G&quot;));\n\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;x\\&quot;) = {0}&quot;, myColor.ToString(&quot;x&quot;));\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;X\\&quot;) = {0}&quot;, myColor.ToString(&quot;X&quot;));\n\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;d\\&quot;) = {0}&quot;, myColor.ToString(&quot;d&quot;));\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;D\\&quot;) = {0}&quot;, myColor.ToString(&quot;D&quot;));    \n\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;f\\&quot;) = {0}&quot;, myColor.ToString(&quot;f&quot;));\n    Console.WriteLine(&quot;myColor.ToString(\\&quot;F\\&quot;) = {0}&quot;, myColor.ToString(&quot;F&quot;));\n    }\n}\n/*\nThis example produces the following results:\nColors.Red = 0\nColors.Green = 1\nColors.Blue = 2\nColors.Yellow = 12\n\nmyColor = Colors.Yellow\n\nmyColor.ToString(&quot;g&quot;) = Yellow\nmyColor.ToString(&quot;G&quot;) = Yellow\nmyColor.ToString(&quot;x&quot;) = 0000000C\nmyColor.ToString(&quot;X&quot;) = 0000000C\nmyColor.ToString(&quot;d&quot;) = 12\nmyColor.ToString(&quot;D&quot;) = 12\nmyColor.ToString(&quot;f&quot;) = Yellow\nmyColor.ToString(&quot;F&quot;) = Yellow\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"enum.tostring#1\">// Sample for Enum::ToString(String)\n\nusing namespace System;\n\npublic enum class Colors\n{\n   Red, Green, Blue, Yellow = 12\n};\n\nint main()\n{\n   Colors myColor = Colors::Yellow;\n   Console::WriteLine( &quot;Colors::Red = {0}&quot;, Colors::Red.ToString( &quot;d&quot; ) );\n   Console::WriteLine( &quot;Colors::Green = {0}&quot;, Colors::Green.ToString( &quot;d&quot; ) );\n   Console::WriteLine( &quot;Colors::Blue = {0}&quot;, Colors::Blue.ToString( &quot;d&quot; ) );\n   Console::WriteLine( &quot;Colors::Yellow = {0}&quot;, Colors::Yellow.ToString( &quot;d&quot; ) );\n   Console::WriteLine( &quot; {0}myColor = Colors::Yellow {0}&quot;, Environment::NewLine );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;g\\&quot;) = {0}&quot;, myColor.ToString( &quot;g&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;G\\&quot;) = {0}&quot;, myColor.ToString( &quot;G&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;x\\&quot;) = {0}&quot;, myColor.ToString( &quot;x&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;X\\&quot;) = {0}&quot;, myColor.ToString( &quot;X&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;d\\&quot;) = {0}&quot;, myColor.ToString( &quot;d&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;D\\&quot;) = {0}&quot;, myColor.ToString( &quot;D&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;f\\&quot;) = {0}&quot;, myColor.ToString( &quot;f&quot; ) );\n   Console::WriteLine( &quot;myColor-&gt;ToString(\\&quot;F\\&quot;) = {0}&quot;, myColor.ToString( &quot;F&quot; ) );\n}\n\n/*\nThis example produces the following results:\nColors::Red = 0\nColors::Green = 1\nColors::Blue = 2\nColors::Yellow = 12\n\nmyColor = Colors::Yellow\n\nmyColor-&gt;ToString(&quot;g&quot;) = Yellow\nmyColor-&gt;ToString(&quot;G&quot;) = Yellow\nmyColor-&gt;ToString(&quot;x&quot;) = 0000000C\nmyColor-&gt;ToString(&quot;X&quot;) = 0000000C\nmyColor-&gt;ToString(&quot;d&quot;) = 12\nmyColor-&gt;ToString(&quot;D&quot;) = 12\nmyColor-&gt;ToString(&quot;f&quot;) = Yellow\nmyColor-&gt;ToString(&quot;F&quot;) = Yellow\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"enum.tostring#1\">&#39; Sample for Enum.ToString(String)\nImports System\n\nClass Sample\n   Enum Colors\n      Red\n      Green\n      Blue\n      Yellow = 12\n   End Enum &#39;Colors\n   \n   Public Shared Sub Main()\n      Dim myColor As Colors = Colors.Yellow\n      \n      Console.WriteLine(&quot;Colors.Red = {0}&quot;, Colors.Red.ToString(&quot;d&quot;))\n      Console.WriteLine(&quot;Colors.Green = {0}&quot;, Colors.Green.ToString(&quot;d&quot;))\n      Console.WriteLine(&quot;Colors.Blue = {0}&quot;, Colors.Blue.ToString(&quot;d&quot;))\n      Console.WriteLine(&quot;Colors.Yellow = {0}&quot;, Colors.Yellow.ToString(&quot;d&quot;))\n      \n      Console.WriteLine(&quot;{0}myColor = Colors.Yellow{0}&quot;, Environment.NewLine)\n      \n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;g&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;g&quot;))\n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;G&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;G&quot;))\n      \n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;x&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;x&quot;))\n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;X&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;X&quot;))\n      \n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;d&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;d&quot;))\n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;D&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;D&quot;))\n      \n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;f&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;f&quot;))\n      Console.WriteLine(&quot;myColor.ToString(&quot;&quot;F&quot;&quot;) = {0}&quot;, myColor.ToString(&quot;F&quot;))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Colors.Red = 0\n&#39;Colors.Green = 1\n&#39;Colors.Blue = 2\n&#39;Colors.Yellow = 12\n&#39;\n&#39;myColor = Colors.Yellow\n&#39;\n&#39;myColor.ToString(&quot;g&quot;) = Yellow\n&#39;myColor.ToString(&quot;G&quot;) = Yellow\n&#39;myColor.ToString(&quot;x&quot;) = 0000000C\n&#39;myColor.ToString(&quot;X&quot;) = 0000000C\n&#39;myColor.ToString(&quot;d&quot;) = 12\n&#39;myColor.ToString(&quot;D&quot;) = 12\n&#39;myColor.ToString(&quot;f&quot;) = Yellow\n&#39;myColor.ToString(&quot;F&quot;) = Yellow\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This method overload is obsolete; use <span class=\"xref\">stem.Enum.ToString(System.String)</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A format specification.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>(Obsolete.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> does not contain a valid format specification.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> equals &quot;X&quot;, but the enumeration type is unknown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>format</code> parameter can contain the &quot;G&quot; or &quot;g&quot;, &quot;D&quot; or &quot;d&quot;, &quot;X&quot; or &quot;x&quot;, and &quot;F&quot; or &quot;f&quot; format strings (the format string is not case-sensitive). If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the general format specifier (&quot;G&quot;) is used. For more information about the enumeration format strings and formatting enumeration values, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>. For more information about formatting in general, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p> Specify only <code>format</code>; the <code>provider</code> parameter is obsolete.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_TryParse__1_System_String___0__\">\r\n    \r\n            <a id=\"System_Enum_TryParse_TEnum__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse&lt;TEnum&gt;(String,TEnum)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the enumeration name or underlying value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TEnum</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, <code>result</code> contains an object of type <code>TEnum</code> whose value is represented by <code>value</code> if the parse operation succeeds. If the parse operation fails, <code>result</code> contains the default value of the underlying type of <code>TEnum</code>. Note that this value need not be a member of the <code>TEnum</code> enumeration. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>TEnum</code> is not an enumeration type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TryParse(TEnum) is identical to the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_System_Type_System_String_\" data-linktype=\"relative-path\">Parse(Type,String)</a> method, except that instead of throwing an exception, it returns <code>false</code> if the conversion fails. It eliminates the need for exception handling when parsing the string representation of an enumeration value.  </p>\n<p> The <code>value</code> parameter contains the string representation of an enumeration member&#39;s underlying value or named constant, or a list of named constants or underlying values delimited by commas (,). If <code>value</code> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <code>value</code>. If <code>value</code> is a list, <code>result</code> reflects the value of the specified names or underlying values combined with a bitwise <code>OR</code> operation. If <code>value</code> is the string representation of the name of an enumeration value, the comparison of <code>value</code> with enumeration names is case-sensitive.  </p>\n<p> If <code>value</code> is a name that does not correspond to a named constant of <code>TEnum</code>, the method returns <code>false</code>. If <code>value</code> is the string representation of an integer that does not represent an underlying value of the <code>TEnum</code> enumeration, the method returns an enumeration member whose underlying value is <code>value</code> converted to an integral type. If this behavior is undesirable, call the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that a particular string representation of an integer is actually a member of <code>TEnum</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Colors</code> enumeration, calls the TryParse(TEnum) method to convert strings to their corresponding enumeration values, and calls the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.TryParse#1\">using System;\n\n[Flags] enum Colors { None=0, Red = 1, Green = 2, Blue = 4 };\n   \npublic class Example\n{\n   public static void Main()\n   {\n      string[] colorStrings = { &quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot; };\n      foreach (string colorString in colorStrings)\n      {\n         Colors colorValue;\n         if (Enum.TryParse(colorString, out colorValue))        \n            if (Enum.IsDefined(typeof(Colors), colorValue) | colorValue.ToString().Contains(&quot;,&quot;))  \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString());\n            else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString);\n         else\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString);\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;0&#39; to None.\n//       Converted &#39;2&#39; to Green.\n//       8 is not an underlying value of the Colors enumeration.\n//       blue is not a member of the Colors enumeration.\n//       Converted &#39;Blue&#39; to Blue.\n//       Yellow is not a member of the Colors enumeration.\n//       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.TryParse#1\">&lt;Flags&gt; Enum Colors As Integer\n   None = 0\n   Red = 1\n   Green = 2\n   Blue = 4\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim colorStrings() As String = {&quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot;}\n      For Each colorString As String In colorStrings\n         Dim colorValue As Colors\n         If [Enum].TryParse(colorString, colorValue) Then        \n            If [Enum].IsDefined(GetType(Colors), colorValue) Or colorValue.ToString().Contains(&quot;,&quot;) Then \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString)            \n            End If                    \n         Else\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString)\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Converted &#39;0&#39; to None.\n&#39;    Converted &#39;2&#39; to Green.\n&#39;    8 is not an underlying value of the Colors enumeration.\n&#39;    blue is not a member of the Colors enumeration.\n&#39;    Converted &#39;Blue&#39; to Blue.\n&#39;    Yellow is not a member of the Colors enumeration.\n&#39;    Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_TryParse__1_System_String_System_Boolean___0__\">\r\n    \r\n            <a id=\"System_Enum_TryParse_TEnum__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse&lt;TEnum&gt;(String,Boolean,TEnum)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the enumeration name or underlying value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case; <code>false</code> to consider case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TEnum</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, <code>result</code> contains an object of type <code>TEnum</code> whose value is represented by <code>value</code> if the parse operation succeeds. If the parse operation fails, <code>result</code> contains the default value of the underlying type of <code>TEnum</code>. Note that this value need not be a member of the <code>TEnum</code> enumeration. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>TEnum</code> is not an enumeration type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TryParse(TEnum) is identical to the <a class=\"xref\" href=\"system.enum#System_Enum_Parse_System_Type_System_String_System_Boolean_\" data-linktype=\"relative-path\">Parse(Type,String,Boolean)</a> method, except that instead of throwing an exception, it returns <code>false</code> if the conversion fails. It eliminates the need for exception handling when parsing the string representation of an enumeration value.  </p>\n<p> The <code>value</code> parameter contains the string representation of an enumeration member&#39;s underlying value or named constant, or a list of named constants or underlying values delimited by commas (,). If <code>value</code> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <code>value</code>. If <code>value</code> is a list, <code>result</code> reflects the value of the specified names or underlying values combined with a bitwise <code>OR</code> operation. If <code>value</code> is the string representation of the name of an enumeration value, the comparison of <code>value</code> with enumeration names depends on the <code>ignoreCase</code> parameter. If <code>true</code>, the comparison is case-insensitive; if <code>false</code>, it is case-sensitive.  </p>\n<p> If <code>value</code> is a name that does not correspond to a named constant of <code>TEnum</code>, the method returns <code>false</code>. If <code>value</code> is the string representation of an integer that does not represent an underlying value of the <code>TEnum</code> enumeration, the method returns an enumeration member whose underlying value is <code>value</code> converted to an integral type. If this behavior is undesirable, call the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that a particular string representation of an integer is actually a member of <code>TEnum</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Colors</code> enumeration, calls the TryParse(TEnum) method to convert strings to their corresponding enumeration values, and calls the <a class=\"xref\" href=\"system.enum#System_Enum_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method to ensure that particular integral values are underlying values in the <code>Colors</code> enumeration. The TryParse(TEnum) method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Enum.TryParse#2\">using System;\n\n[Flags] enum Colors { None=0, Red = 1, Green = 2, Blue = 4 };\n   \npublic class Example\n{\n   public static void Main()\n   {\n      string[] colorStrings = { &quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot; };\n      foreach (string colorString in colorStrings)\n      {\n         Colors colorValue;\n         if (Enum.TryParse(colorString, true, out colorValue))        \n            if (Enum.IsDefined(typeof(Colors), colorValue) | colorValue.ToString().Contains(&quot;,&quot;))  \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString());\n            else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString);\n         else\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString);\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;0&#39; to None.\n//       Converted &#39;2&#39; to Green.\n//       8 is not an underlying value of the Colors enumeration.\n//       Converted &#39;blue&#39; to Blue.\n//       Converted &#39;Blue&#39; to Blue.\n//       Yellow is not a member of the Colors enumeration.\n//       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Enum.TryParse#2\">&lt;Flags&gt; Enum Colors As Integer\n   None = 0\n   Red = 1\n   Green = 2\n   Blue = 4\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim colorStrings() As String = {&quot;0&quot;, &quot;2&quot;, &quot;8&quot;, &quot;blue&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Red, Green&quot;}\n      For Each colorString As String In colorStrings\n         Dim colorValue As Colors\n         If [Enum].TryParse(colorString, True, colorValue) Then        \n            If [Enum].IsDefined(GetType(Colors), colorValue) Or colorValue.ToString().Contains(&quot;,&quot;) Then \n               Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, colorString, colorValue.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is not an underlying value of the Colors enumeration.&quot;, colorString)            \n            End If                    \n         Else\n            Console.WriteLine(&quot;{0} is not a member of the Colors enumeration.&quot;, colorString)\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;0&#39; to None.\n&#39;       Converted &#39;2&#39; to Green.\n&#39;       8 is not an underlying value of the Colors enumeration.\n&#39;       Converted &#39;blue&#39; to Blue.\n&#39;       Converted &#39;Blue&#39; to Blue.\n&#39;       Yellow is not a member of the Colors enumeration.\n&#39;       Converted &#39;Red, Green&#39; to Red, Green.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a Boolean value based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to an 8-bit unsigned integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a Unicode character based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a double-precision floating point number based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 16-bit signed integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 32-bit signed integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 64-bit signed integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to an 8-bit signed integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a single-precision floating-point number based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>This member always throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently not implemented. Always throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a specified type based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to convert to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 16-bit unsigned integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 32-bit unsigned integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Enum_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Enum_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the current value to a 64-bit unsigned integer based on the underlying type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The converted value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Uses <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> to perform the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Enum.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Enum.yml\">\r\n<meta name=\"APIName\" content=\"System.Enum\">\r\n<meta name=\"APIName\" content=\"System.Enum..ctor\">\r\n<meta name=\"APIName\" content=\"System.Enum.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Enum.Equals\">\r\n<meta name=\"APIName\" content=\"System.Enum.Format\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetName\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetNames\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetUnderlyingType\">\r\n<meta name=\"APIName\" content=\"System.Enum.GetValues\">\r\n<meta name=\"APIName\" content=\"System.Enum.HasFlag\">\r\n<meta name=\"APIName\" content=\"System.Enum.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Enum.Parse\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Enum.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Enum.ToObject\">\r\n<meta name=\"APIName\" content=\"System.Enum.ToString\">\r\n<meta name=\"APIName\" content=\"System.Enum.TryParse&lt;TEnum&gt;\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8aacdd1c-f133-a5ba-38fd-852cdcc9c7d1\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Enum.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base class for enumerations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Enum\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Enum.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Enum.yml","open_to_public_contributors":true,"api_name":["System.Enum","System.Enum..ctor","System.Enum.CompareTo","System.Enum.Equals","System.Enum.Format","System.Enum.GetHashCode","System.Enum.GetName","System.Enum.GetNames","System.Enum.GetTypeCode","System.Enum.GetUnderlyingType","System.Enum.GetValues","System.Enum.HasFlag","System.Enum.IsDefined","System.Enum.Parse","System.Enum.IConvertible.ToBoolean","System.Enum.IConvertible.ToByte","System.Enum.IConvertible.ToChar","System.Enum.IConvertible.ToDateTime","System.Enum.IConvertible.ToDecimal","System.Enum.IConvertible.ToDouble","System.Enum.IConvertible.ToInt16","System.Enum.IConvertible.ToInt32","System.Enum.IConvertible.ToInt64","System.Enum.IConvertible.ToSByte","System.Enum.IConvertible.ToSingle","System.Enum.IConvertible.ToType","System.Enum.IConvertible.ToUInt16","System.Enum.IConvertible.ToUInt32","System.Enum.IConvertible.ToUInt64","System.Enum.ToObject","System.Enum.ToString","System.Enum.TryParse<TEnum>"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Enum","System::Enum","System.Enum.#ctor","System::Enum::#ctor","System.Enum.CompareTo","System::Enum::CompareTo","System.Enum.Equals","System::Enum::Equals","System.Enum.Format","System::Enum::Format","System.Enum.GetHashCode","System::Enum::GetHashCode","System.Enum.GetName","System::Enum::GetName","System.Enum.GetNames","System::Enum::GetNames","System.Enum.GetTypeCode","System::Enum::GetTypeCode","System.Enum.GetUnderlyingType","System::Enum::GetUnderlyingType","System.Enum.GetValues","System::Enum::GetValues","System.Enum.HasFlag","System::Enum::HasFlag","System.Enum.IsDefined","System::Enum::IsDefined","System.Enum.Parse","System::Enum::Parse","System.Enum.System#IConvertible#ToBoolean","System::Enum::System#IConvertible#ToBoolean","System.Enum.System#IConvertible#ToByte","System::Enum::System#IConvertible#ToByte","System.Enum.System#IConvertible#ToChar","System::Enum::System#IConvertible#ToChar","System.Enum.System#IConvertible#ToDateTime","System::Enum::System#IConvertible#ToDateTime","System.Enum.System#IConvertible#ToDecimal","System::Enum::System#IConvertible#ToDecimal","System.Enum.System#IConvertible#ToDouble","System::Enum::System#IConvertible#ToDouble","System.Enum.System#IConvertible#ToInt16","System::Enum::System#IConvertible#ToInt16","System.Enum.System#IConvertible#ToInt32","System::Enum::System#IConvertible#ToInt32","System.Enum.System#IConvertible#ToInt64","System::Enum::System#IConvertible#ToInt64","System.Enum.System#IConvertible#ToSByte","System::Enum::System#IConvertible#ToSByte","System.Enum.System#IConvertible#ToSingle","System::Enum::System#IConvertible#ToSingle","System.Enum.System#IConvertible#ToType","System::Enum::System#IConvertible#ToType","System.Enum.System#IConvertible#ToUInt16","System::Enum::System#IConvertible#ToUInt16","System.Enum.System#IConvertible#ToUInt32","System::Enum::System#IConvertible#ToUInt32","System.Enum.System#IConvertible#ToUInt64","System::Enum::System#IConvertible#ToUInt64","System.Enum.ToObject","System::Enum::ToObject","System.Enum.ToString","System::Enum::ToString","System.Enum.TryParse``1","System::Enum::TryParse``1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8aacdd1c-f133-a5ba-38fd-852cdcc9c7d1","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Enum.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Enum.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Enum class | Microsoft Docs","_op_ogTitle":"Enum class","description":"Provides the base class for enumerations.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Enum","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.enum","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.enum","fileRelativePath":"System.Enum.html"},"themesRelativePathToOutputRoot":"_themes/"}