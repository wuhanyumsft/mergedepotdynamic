{"content":"    \r\n    <h1 id=\"System_Windows_Forms_DragEventArgs\">\r\n      <span class=\"lang-csharp\">DragEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class DragEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DragEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse.  </p>\n<p> A DragEventArgs object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.  </p>\n<p> For information about the event model, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs__ctor_System_Windows_Forms_IDataObject_System_Int32_System_Int32_System_Int32_System_Windows_Forms_DragDropEffects_System_Windows_Forms_DragDropEffects_\" data-linktype=\"self-bookmark\">DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_AllowedEffect\" data-linktype=\"self-bookmark\">AllowedEffect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_Data\" data-linktype=\"self-bookmark\">Data</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a> that contains the data associated with this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_Effect\" data-linktype=\"self-bookmark\">Effect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the target drop effect in a drag-and-drop operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_KeyState\" data-linktype=\"self-bookmark\">KeyState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_X\" data-linktype=\"self-bookmark\">X</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the x-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DragEventArgs_Y\" data-linktype=\"self-bookmark\">Y</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the y-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs__ctor_System_Windows_Forms_IDataObject_System_Int32_System_Int32_System_Int32_System_Windows_Forms_DragDropEffects_System_Windows_Forms_DragDropEffects_\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data associated with this event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The current state of the SHIFT, CTRL, and ALT keys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The x-coordinate of the mouse cursor in pixels.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The y-coordinate of the mouse cursor in pixels.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedEffect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>effect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_AllowedEffect\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_AllowedEffect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowedEffect</div>        \r\n          </div>\r\n    \r\n            <p>Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.DragDropEffects AllowedEffect { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a control initiates a drag-and-drop operation by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method, it specifies the permissible effects of the operation. For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.  </p>\n<p> Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_Data\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_Data_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Data</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a> that contains the data associated with this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.IDataObject Data { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a></div>\r\n                  </div>\r\n                  <p>The data associated with this event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the body of your event handler, you can use the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> method to determine whether the data matches the format requirements of the control onto which the data is being dragged. You also can specify whether you want to attempt to convert the data to meet your format requirements. If the dragged data meets your format requirements, use the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method to retrieve the data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_Effect\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_Effect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Effect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the target drop effect in a drag-and-drop operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.DragDropEffects Effect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a> to indicate the target will try to perform a copy operation.  </p>\n<p> To use custom cursors for a drag operation, see <a class=\"xref\" href=\"system.windows.forms.givefeedbackeventargs#System_Windows_Forms_GiveFeedbackEventArgs_UseDefaultCursors_\" data-linktype=\"relative-path\">UseDefaultCursors</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the Effect is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_KeyState\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_KeyState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int KeyState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can make the effect of a drag-and-drop operation to depend on the state of a particular key. For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.  </p>\n<p> The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation. For example, if the left mouse button is pressed, the first bit in the KeyState property is set. You can use the bitwise AND operator to test for a given key state.  </p>\n<p> The following table lists the values that are used for a specified event.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 (bit 0)</td>\n<td>The left mouse button.</td>\n</tr>\n<tr>\n<td>2 (bit 1)</td>\n<td>The right mouse button.</td>\n</tr>\n<tr>\n<td>4 (bit 2)</td>\n<td>The SHIFT key.</td>\n</tr>\n<tr>\n<td>8 (bit 3)</td>\n<td>The CTRL key.</td>\n</tr>\n<tr>\n<td>16 (bit 4)</td>\n<td>The middle mouse button.</td>\n</tr>\n<tr>\n<td>32 (bit 5)</td>\n<td>The ALT key.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_X\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_X_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X</div>        \r\n          </div>\r\n    \r\n            <p>Gets the x-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int X { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The x-coordinate of the mouse pointer in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DragEventArgs_Y\">\r\n    \r\n            <a id=\"System_Windows_Forms_DragEventArgs_Y_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Y</div>        \r\n          </div>\r\n    \r\n            <p>Gets the y-coordinate of the mouse pointer, in screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Y { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The y-coordinate of the mouse pointer in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DragEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DragEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.AllowedEffect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Data\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Effect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.KeyState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.X\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventArgs.Y\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4c682ca6-b71f-6616-03b2-26d0da8474c7\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DragEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the , , or  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DragEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DragEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DragEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.DragEventArgs","System.Windows.Forms.DragEventArgs..ctor","System.Windows.Forms.DragEventArgs.AllowedEffect","System.Windows.Forms.DragEventArgs.Data","System.Windows.Forms.DragEventArgs.Effect","System.Windows.Forms.DragEventArgs.KeyState","System.Windows.Forms.DragEventArgs.X","System.Windows.Forms.DragEventArgs.Y"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DragEventArgs","System::Windows::Forms::DragEventArgs","System.Windows.Forms.DragEventArgs.#ctor","System::Windows::Forms::DragEventArgs::#ctor","System.Windows.Forms.DragEventArgs.AllowedEffect","System::Windows::Forms::DragEventArgs::AllowedEffect","System.Windows.Forms.DragEventArgs.Data","System::Windows::Forms::DragEventArgs::Data","System.Windows.Forms.DragEventArgs.Effect","System::Windows::Forms::DragEventArgs::Effect","System.Windows.Forms.DragEventArgs.KeyState","System::Windows::Forms::DragEventArgs::KeyState","System.Windows.Forms.DragEventArgs.X","System::Windows::Forms::DragEventArgs::X","System.Windows.Forms.DragEventArgs.Y","System::Windows::Forms::DragEventArgs::Y"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4c682ca6-b71f-6616-03b2-26d0da8474c7","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DragEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/DragEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DragEventArgs class | Microsoft Docs","_op_ogTitle":"DragEventArgs class","description":"Provides data for the , , or  event.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DragEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.drageventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.drageventargs","fileRelativePath":"System.Windows.Forms.DragEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}